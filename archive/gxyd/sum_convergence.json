[
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/gxyd",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=60",
   "displayName": "Gaurav Dhingra",
   "gv": "4",
   "id": "53eb987c107e137846baa89d",
   "url": "/gxyd",
   "username": "gxyd",
   "v": 90
  },
  "html": "How should i go about the <code>BigOh</code> class? Any suggestions.",
  "id": "55f86af618e0111d7e4f019a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-15T19:01:10.478Z",
  "text": "How should i go about the `BigOh` class? Any suggestions.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/asmeurer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/71486?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/71486?v=4&s=60",
   "displayName": "Aaron Meurer",
   "gv": "4",
   "id": "529c69c1ed5ab0b3bf04d173",
   "url": "/asmeurer",
   "username": "asmeurer",
   "v": 29
  },
  "html": "is this from a discussion on a pull request? ",
  "id": "55f86b4c0c9c8795325cde1a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-15T19:02:36.525Z",
  "text": "is this from a discussion on a pull request? ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/gxyd",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=60",
   "displayName": "Gaurav Dhingra",
   "gv": "4",
   "id": "53eb987c107e137846baa89d",
   "url": "/gxyd",
   "username": "gxyd",
   "v": 90
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"jksuom\" class=\"mention\">@jksuom</span> mention about having a <code>BigOh</code> on  (PR)[<span data-link-type=\"issue\" data-issue=\"9917\" data-issue-repo=\"sympy/sympy\" class=\"issue\">sympy/sympy#9917</span>] 9917.",
  "id": "55f86bb9a2c7aa6b1086a5aa",
  "issues": [
   {
    "number": "9917",
    "repo": "sympy/sympy"
   }
  ],
  "mentions": [
   {
    "screenName": "jksuom",
    "userId": "53204afa5e986b0712efdf3d",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-15T19:04:25.205Z",
  "text": "@jksuom mention about having a `BigOh` on  (PR)[https://github.com/sympy/sympy/issues/9917] 9917.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/gxyd",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=60",
   "displayName": "Gaurav Dhingra",
   "gv": "4",
   "id": "53eb987c107e137846baa89d",
   "url": "/gxyd",
   "username": "gxyd",
   "v": 90
  },
  "html": "Sorry that&#39;s an issue.",
  "id": "55f86bd1a2c7aa6b1086a5b4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-15T19:04:49.030Z",
  "text": "Sorry that's an issue.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2015-09-16T07:12:29.887Z",
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/jksuom",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6929119?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6929119?v=4&s=60",
   "displayName": "Kalevi Suominen",
   "gv": "4",
   "id": "53204afa5e986b0712efdf3d",
   "url": "/jksuom",
   "username": "jksuom",
   "v": 20
  },
  "html": "I don&#39;t think we should need a new class for representing the asymptotic behaviour of a function. The current <code>Order</code> should be enough. The objects of that class could be thought of forming a totally ordered multiplicative group, a &quot;scale&quot;. The current notation <code>O(f)</code> for those objects does not conform to how Landau defined &quot;big O&quot;, but it is convenient and its use could probably  be continued. That means that &quot;big O&quot; should be defined as a function returning an object of <code>Order</code>, not necessarily always the best one. Only a suitable name ought be found.",
  "id": "55f9161d18e0111d7e4f1432",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-16T07:11:25.724Z",
  "text": "I don't think we should need a new class for representing the asymptotic behaviour of a function. The current ``Order`` should be enough. The objects of that class could be thought of forming a totally ordered multiplicative group, a \"scale\". The current notation ``O(f)`` for those objects does not conform to how Landau defined \"big O\", but it is convenient and its use could probably  be continued. That means that \"big O\" should be defined as a function returning an object of ``Order``, not necessarily always the best one. Only a suitable name ought be found.",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/gxyd",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=60",
   "displayName": "Gaurav Dhingra",
   "gv": "4",
   "id": "53eb987c107e137846baa89d",
   "url": "/gxyd",
   "username": "gxyd",
   "v": 90
  },
  "html": "what about the <code>real_bound</code> <span data-link-type=\"issue\" data-issue=\"9911\" data-issue-repo=\"sympy/sympy\" class=\"issue\">sympy/sympy#9911</span> currently does that need any more changes currently?",
  "id": "55f9832618e0111d7e4f265f",
  "issues": [
   {
    "number": "9911",
    "repo": "sympy/sympy"
   }
  ],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-16T14:56:38.358Z",
  "text": "what about the `real_bound` [PR](https://github.com/sympy/sympy/pull/9911) currently does that need any more changes currently?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/jksuom",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6929119?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6929119?v=4&s=60",
   "displayName": "Kalevi Suominen",
   "gv": "4",
   "id": "53204afa5e986b0712efdf3d",
   "url": "/jksuom",
   "username": "jksuom",
   "v": 20
  },
  "html": "I am not quite sure what should become of <code>real_bound</code>. I thought of is as an aid to to deriving  the &quot;big O&quot; of a function. But perhaps it could actually have the same meaning so that e.g. <code>real_bound(2*x + 1)</code> would be <code>O(x)</code> (at <code>oo</code>, the constants 2 and 1 being ignored ). The name is probably neither best possible nor final, but I wanted to emphasize that the function is restricted to the real line. (Though it is possible that its values could be complex.) Perhaps something like <code>real_order</code> would be better.",
  "id": "55f98afbf66d320b4fbdd430",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-16T15:30:03.290Z",
  "text": "I am not quite sure what should become of ``real_bound``. I thought of is as an aid to to deriving  the \"big O\" of a function. But perhaps it could actually have the same meaning so that e.g. ``real_bound(2*x + 1)`` would be ``O(x)`` (at ``oo``, the constants 2 and 1 being ignored ). The name is probably neither best possible nor final, but I wanted to emphasize that the function is restricted to the real line. (Though it is possible that its values could be complex.) Perhaps something like ``real_order`` would be better.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/gxyd",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=60",
   "displayName": "Gaurav Dhingra",
   "gv": "4",
   "id": "53eb987c107e137846baa89d",
   "url": "/gxyd",
   "username": "gxyd",
   "v": 90
  },
  "html": "To be true, i do not seem understand, all now. About of how i am going to deal with all these, <code>real_bound</code> now.",
  "id": "55f99cd4c588a0de6eded0ac",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-16T16:46:12.125Z",
  "text": "To be true, i do not seem understand, all now. About of how i am going to deal with all these, `real_bound` now.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/gxyd",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=60",
   "displayName": "Gaurav Dhingra",
   "gv": "4",
   "id": "53eb987c107e137846baa89d",
   "url": "/gxyd",
   "username": "gxyd",
   "v": 90
  },
  "html": "But i had really love to implement the convergence test of <code>Dirichlet tests</code> <a href=\"https://en.wikipedia.org/wiki/Dirichlet%27s_test\" rel=\"nofollow\" target=\"_blank\" class=\"link\">https://en.wikipedia.org/wiki/Dirichlet%27s_test</a> , which i think is going to solve atleast the <code>sin(n)/n</code> those problems.",
  "id": "55f99d3178514db1064f5c31",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-16T16:47:45.448Z",
  "text": "But i had really love to implement the convergence test of `Dirichlet tests` https://en.wikipedia.org/wiki/Dirichlet%27s_test , which i think is going to solve atleast the `sin(n)/n` those problems.",
  "unread": false,
  "urls": [
   {
    "url": "https://en.wikipedia.org/wiki/Dirichlet%27s_test"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/gxyd",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=60",
   "displayName": "Gaurav Dhingra",
   "gv": "4",
   "id": "53eb987c107e137846baa89d",
   "url": "/gxyd",
   "username": "gxyd",
   "v": 90
  },
  "html": "So i will get with it&#39;s implementation probably. I am not able to devote much time, since i have got my school exams with me on-going.",
  "id": "55f99d6678514db1064f5c3a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-16T16:48:38.346Z",
  "text": "So i will get with it's implementation probably. I am not able to devote much time, since i have got my school exams with me on-going.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/asmeurer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/71486?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/71486?v=4&s=60",
   "displayName": "Aaron Meurer",
   "gv": "4",
   "id": "529c69c1ed5ab0b3bf04d173",
   "url": "/asmeurer",
   "username": "asmeurer",
   "v": 29
  },
  "html": "that article is not clear. Is <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">M</span></span></span></span> supposed to be independent of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">N</span></span></span></span>?",
  "id": "55f99f40c588a0de6eded135",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-16T16:56:32.588Z",
  "text": "that article is not clear. Is $$M$$ supposed to be independent of $$N$$?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/asmeurer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/71486?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/71486?v=4&s=60",
   "displayName": "Aaron Meurer",
   "gv": "4",
   "id": "529c69c1ed5ab0b3bf04d173",
   "url": "/asmeurer",
   "username": "asmeurer",
   "v": 29
  },
  "html": "I also don&#39;t see how you can use this test with that series, or how the order stuff helps ",
  "id": "55f99f65aef03edd3ed0d672",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-16T16:57:09.149Z",
  "text": "I also don't see how you can use this test with that series, or how the order stuff helps ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/gxyd",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=60",
   "displayName": "Gaurav Dhingra",
   "gv": "4",
   "id": "53eb987c107e137846baa89d",
   "url": "/gxyd",
   "username": "gxyd",
   "v": 90
  },
  "html": "no, i would not use any <code>Order</code> stuff in that.",
  "id": "55f99f9b78514db1064f5ca8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-16T16:58:03.810Z",
  "text": "no, i would not use any `Order` stuff in that.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/gxyd",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=60",
   "displayName": "Gaurav Dhingra",
   "gv": "4",
   "id": "53eb987c107e137846baa89d",
   "url": "/gxyd",
   "username": "gxyd",
   "v": 90
  },
  "html": "It would help in checking convergence of expressions of type <code>sin(n)/n</code>.",
  "id": "55f99fbc18e0111d7e4f2c5d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-16T16:58:36.085Z",
  "text": "It would help in checking convergence of expressions of type `sin(n)/n`.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/gxyd",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=60",
   "displayName": "Gaurav Dhingra",
   "gv": "4",
   "id": "53eb987c107e137846baa89d",
   "url": "/gxyd",
   "username": "gxyd",
   "v": 90
  },
  "html": "or similar ones.",
  "id": "55f99fc6aef03edd3ed0d683",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-16T16:58:46.668Z",
  "text": "or similar ones.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/gxyd",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=60",
   "displayName": "Gaurav Dhingra",
   "gv": "4",
   "id": "53eb987c107e137846baa89d",
   "url": "/gxyd",
   "username": "gxyd",
   "v": 90
  },
  "html": "<code>M</code> is infact dependent on <code>n</code> only, <code>N</code> is also an expression of <code>n</code>.",
  "id": "55f99ff7c588a0de6eded160",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-16T16:59:35.897Z",
  "text": "`M` is infact dependent on `n` only, `N` is also an expression of `n`.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/gxyd",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=60",
   "displayName": "Gaurav Dhingra",
   "gv": "4",
   "id": "53eb987c107e137846baa89d",
   "url": "/gxyd",
   "username": "gxyd",
   "v": 90
  },
  "html": "i will shortly push the code on the PR.",
  "id": "55f9a00ba2c7aa6b1086d028",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-16T16:59:55.793Z",
  "text": "i will shortly push the code on the PR.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/asmeurer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/71486?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/71486?v=4&s=60",
   "displayName": "Aaron Meurer",
   "gv": "4",
   "id": "529c69c1ed5ab0b3bf04d173",
   "url": "/asmeurer",
   "username": "asmeurer",
   "v": 29
  },
  "html": "<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord mathit\">n</span></span></span></span> is a dummy variable. <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">M</span></span></span></span> can&#39;t depend on it ",
  "id": "55f9a087a2c7aa6b1086d034",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-16T17:01:59.037Z",
  "text": "$$n$$ is a dummy variable. $$M$$ can't depend on it ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/gxyd",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=60",
   "displayName": "Gaurav Dhingra",
   "gv": "4",
   "id": "53eb987c107e137846baa89d",
   "url": "/gxyd",
   "username": "gxyd",
   "v": 90
  },
  "html": "To be more correct, i hope to use the <code>Sum(sin(n), (n, 1, m)).is_convergent()</code> which is M itself.",
  "id": "55f9a0cdc588a0de6eded18c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-16T17:03:09.145Z",
  "text": "To be more correct, i hope to use the `Sum(sin(n), (n, 1, m)).is_convergent()` which is M itself.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/gxyd",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=60",
   "displayName": "Gaurav Dhingra",
   "gv": "4",
   "id": "53eb987c107e137846baa89d",
   "url": "/gxyd",
   "username": "gxyd",
   "v": 90
  },
  "html": "if this returns true, i we will be able to determine whether whole expression is <code>convergent</code> or not.",
  "id": "55f9a0fb18e0111d7e4f2c98",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-16T17:03:55.136Z",
  "text": "if this returns true, i we will be able to determine whether whole expression is `convergent` or not.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/asmeurer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/71486?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/71486?v=4&s=60",
   "displayName": "Aaron Meurer",
   "gv": "4",
   "id": "529c69c1ed5ab0b3bf04d173",
   "url": "/asmeurer",
   "username": "asmeurer",
   "v": 29
  },
  "html": "it needs to be convergent <em>not depending on <code>m</code></em>",
  "id": "55f9a10ba2c7aa6b1086d057",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-16T17:04:11.684Z",
  "text": "it needs to be convergent *not depending on `m`*",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/gxyd",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=60",
   "displayName": "Gaurav Dhingra",
   "gv": "4",
   "id": "53eb987c107e137846baa89d",
   "url": "/gxyd",
   "username": "gxyd",
   "v": 90
  },
  "html": "<blockquote>\n<p>n is a dummy variable. M can&#39;t depend on it</p></blockquote>\n<p>Yes, you are right. </p>",
  "id": "55f9a10d18e0111d7e4f2c9d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-16T17:04:13.105Z",
  "text": "> n is a dummy variable. M can't depend on it\n\nYes, you are right. ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/asmeurer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/71486?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/71486?v=4&s=60",
   "displayName": "Aaron Meurer",
   "gv": "4",
   "id": "529c69c1ed5ab0b3bf04d173",
   "url": "/asmeurer",
   "username": "asmeurer",
   "v": 29
  },
  "html": "of course it is convergent. it&#39;s a finite sum ",
  "id": "55f9a11578514db1064f5ce7",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-16T17:04:21.383Z",
  "text": "of course it is convergent. it's a finite sum ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/asmeurer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/71486?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/71486?v=4&s=60",
   "displayName": "Aaron Meurer",
   "gv": "4",
   "id": "529c69c1ed5ab0b3bf04d173",
   "url": "/asmeurer",
   "username": "asmeurer",
   "v": 29
  },
  "html": "the only way I see this test being useful is if sympy can compute a closed form for the sum and you can determine that it is bounded as <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>m</mi><mo>\u2192</mo><mi mathvariant=\"normal\">\u221e</mi></mrow><annotation encoding=\"application/x-tex\">m \\rightarrow \\infty</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord mathit\">m</span><span class=\"mrel\">\u2192</span><span class=\"mord\">\u221e</span></span></span></span>",
  "id": "55f9a16778514db1064f5cef",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-16T17:05:43.442Z",
  "text": "the only way I see this test being useful is if sympy can compute a closed form for the sum and you can determine that it is bounded as $$m \\rightarrow \\infty$$",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/gxyd",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=60",
   "displayName": "Gaurav Dhingra",
   "gv": "4",
   "id": "53eb987c107e137846baa89d",
   "url": "/gxyd",
   "username": "gxyd",
   "v": 90
  },
  "html": "<blockquote>\n<p>it needs to be convergent <em>not depending on <code>m</code></em></p></blockquote>\n<p>Yes true. Its like <code>Sum(a_n*b_n, (n, 1, oo))</code> to check its convergence. I will determine of <code>a_n</code> is decreasing and <code>Sum(b_n, (n, 1, oo)).is_convergent</code>, if both return <code>True</code>, the final series is convergent.</p>",
  "id": "55f9a1c818e0111d7e4f2cc7",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-16T17:07:20.828Z",
  "text": "> it needs to be convergent *not depending on `m`*\n\nYes true. Its like `Sum(a_n*b_n, (n, 1, oo))` to check its convergence. I will determine of `a_n` is decreasing and `Sum(b_n, (n, 1, oo)).is_convergent`, if both return `True`, the final series is convergent.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/gxyd",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=60",
   "displayName": "Gaurav Dhingra",
   "gv": "4",
   "id": "53eb987c107e137846baa89d",
   "url": "/gxyd",
   "username": "gxyd",
   "v": 90
  },
  "html": "In your comments you have used expressions like <code>m -&gt; oo</code> in a pretty print format. How do you make that text appear in a gitter message? (do you first print this on IPython Notebook in sympy and then copy-paste it ?)",
  "id": "55f9a35b18e0111d7e4f2d04",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-16T17:14:03.711Z",
  "text": "In your comments you have used expressions like `m -> oo` in a pretty print format. How do you make that text appear in a gitter message? (do you first print this on IPython Notebook in sympy and then copy-paste it ?)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/jksuom",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6929119?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6929119?v=4&s=60",
   "displayName": "Kalevi Suominen",
   "gv": "4",
   "id": "53204afa5e986b0712efdf3d",
   "url": "/jksuom",
   "username": "jksuom",
   "v": 20
  },
  "html": "If it is possible to prove that <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>\u2211</mo><msub><mi>b</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\sum b_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"base textstyle uncramped\"><span class=\"op-symbol small-op mop\" style=\"top:-0.0000050000000000050004em;\">\u2211</span><span class=\"mord\"><span class=\"mord mathit\">b</span><span class=\"vlist\"><span style=\"top:0.15em;margin-right:0.05em;margin-left:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">\u200b</span></span><span class=\"reset-textstyle scriptstyle cramped\"><span class=\"mord mathit\">n</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">\u200b</span></span>\u200b</span></span></span></span></span></span> is convergent, then there is no need for Dirichlet&#39;s test. A simple comparison test will suffice.",
  "id": "55f9aa00aef03edd3ed0d809",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-16T17:42:24.648Z",
  "text": "If it is possible to prove that $$\\sum b_n$$ is convergent, then there is no need for Dirichlet's test. A simple comparison test will suffice.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/gxyd",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=60",
   "displayName": "Gaurav Dhingra",
   "gv": "4",
   "id": "53eb987c107e137846baa89d",
   "url": "/gxyd",
   "username": "gxyd",
   "v": 90
  },
  "html": "Yes, but to me it seems dirichlet&#39;s gives something more.",
  "id": "55f9aa37c588a0de6eded2fa",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-16T17:43:19.536Z",
  "text": "Yes, but to me it seems dirichlet's gives something more.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/jksuom",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6929119?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6929119?v=4&s=60",
   "displayName": "Kalevi Suominen",
   "gv": "4",
   "id": "53204afa5e986b0712efdf3d",
   "url": "/jksuom",
   "username": "jksuom",
   "v": 20
  },
  "html": "The purpose of Dirichlet&#39;s test is to handle those cases where the sum is not convergent but only stays bounded for all N.",
  "id": "55f9aa5baef03edd3ed0d81b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-16T17:43:55.957Z",
  "text": "The purpose of Dirichlet's test is to handle those cases where the sum is not convergent but only stays bounded for all N.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/jksuom",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6929119?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6929119?v=4&s=60",
   "displayName": "Kalevi Suominen",
   "gv": "4",
   "id": "53204afa5e986b0712efdf3d",
   "url": "/jksuom",
   "username": "jksuom",
   "v": 20
  },
  "html": "So, if you consider <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>\u2211</mo><mi>sin</mi><mo>(</mo><mi>n</mi><mo>)</mo><mi mathvariant=\"normal\">/</mi><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">\\sum \\sin(n)/n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"base textstyle uncramped\"><span class=\"op-symbol small-op mop\" style=\"top:-0.0000050000000000050004em;\">\u2211</span><span class=\"mop\">sin</span><span class=\"mopen\">(</span><span class=\"mord mathit\">n</span><span class=\"mclose\">)</span><span class=\"mord\">/</span><span class=\"mord mathit\">n</span></span></span></span>, you need to show that <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>\u2211</mo><mi>sin</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">\\sum \\sin(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"base textstyle uncramped\"><span class=\"op-symbol small-op mop\" style=\"top:-0.0000050000000000050004em;\">\u2211</span><span class=\"mop\">sin</span><span class=\"mopen\">(</span><span class=\"mord mathit\">n</span><span class=\"mclose\">)</span></span></span></span> is bounded.",
  "id": "55f9aaae78514db1064f5e6e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-16T17:45:18.400Z",
  "text": "So, if you consider $$\\sum \\sin(n)/n$$, you need to show that $$\\sum \\sin(n)$$ is bounded.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2015-09-16T17:49:25.190Z",
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/jksuom",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6929119?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6929119?v=4&s=60",
   "displayName": "Kalevi Suominen",
   "gv": "4",
   "id": "53204afa5e986b0712efdf3d",
   "url": "/jksuom",
   "username": "jksuom",
   "v": 20
  },
  "html": "More precisely, <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">\u2223</mi><msubsup><mo>\u2211</mo><mn>1</mn><mi>N</mi></msubsup><mi>sin</mi><mo>(</mo><mi>n</mi><mo>)</mo><mi mathvariant=\"normal\">\u2223</mi><mo>\u2264</mo><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">|\\sum_1^N \\sin(n)| \\le M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.8423309999999999em;\"></span><span class=\"strut bottom\" style=\"height:1.142341em;vertical-align:-0.30001em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord\">\u2223</span><span class=\"mop\"><span class=\"op-symbol small-op mop\" style=\"top:-0.0000050000000000050004em;\">\u2211</span><span class=\"vlist\"><span style=\"top:0.30001em;margin-left:0em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">\u200b</span></span><span class=\"reset-textstyle scriptstyle cramped\"><span class=\"mord\">1</span></span></span><span style=\"top:-0.364em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">\u200b</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">N</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">\u200b</span></span>\u200b</span></span></span><span class=\"mop\">sin</span><span class=\"mopen\">(</span><span class=\"mord mathit\">n</span><span class=\"mclose\">)</span><span class=\"mord\">\u2223</span><span class=\"mrel\">\u2264</span><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">M</span></span></span></span> for some finite <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">M</span></span></span></span> and all <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">N</span></span></span></span>.",
  "id": "55f9ab1278514db1064f5e72",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-16T17:46:58.343Z",
  "text": "More precisely, $$|\\sum_1^N \\sin(n)| \\le M$$ for some finite $$M$$ and all $$N$$.",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "editedAt": "2015-09-16T17:48:32.179Z",
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/jksuom",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6929119?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6929119?v=4&s=60",
   "displayName": "Kalevi Suominen",
   "gv": "4",
   "id": "53204afa5e986b0712efdf3d",
   "url": "/jksuom",
   "username": "jksuom",
   "v": 20
  },
  "html": "That is, in fact, true because <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>\u03c0</mi></mrow><annotation encoding=\"application/x-tex\">\\pi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">\u03c0</span></span></span></span> is irrational.",
  "id": "55f9ab3b78514db1064f5e77",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-16T17:47:39.654Z",
  "text": "That is, in fact, true because $$\\pi$$ is irrational.",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/gxyd",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=60",
   "displayName": "Gaurav Dhingra",
   "gv": "4",
   "id": "53eb987c107e137846baa89d",
   "url": "/gxyd",
   "username": "gxyd",
   "v": 90
  },
  "html": "is <code>M</code> here the same for all <code>N</code> ? Or it can change as <code>N</code> changes? (Seem to me so).",
  "id": "55f9accea2c7aa6b1086d22a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-16T17:54:22.987Z",
  "text": "is `M` here the same for all `N` ? Or it can change as `N` changes? (Seem to me so).",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/jksuom",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6929119?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6929119?v=4&s=60",
   "displayName": "Kalevi Suominen",
   "gv": "4",
   "id": "53204afa5e986b0712efdf3d",
   "url": "/jksuom",
   "username": "jksuom",
   "v": 20
  },
  "html": "It must be fixed.",
  "id": "55f9ad4a78514db1064f5ed9",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-16T17:56:26.152Z",
  "text": "It must be fixed.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/jksuom",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6929119?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6929119?v=4&s=60",
   "displayName": "Kalevi Suominen",
   "gv": "4",
   "id": "53204afa5e986b0712efdf3d",
   "url": "/jksuom",
   "username": "jksuom",
   "v": 20
  },
  "html": "Independent of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">N</span></span></span></span>.",
  "id": "55f9ad5978514db1064f5eda",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-16T17:56:41.590Z",
  "text": "Independent of $$N$$.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/gxyd",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=60",
   "displayName": "Gaurav Dhingra",
   "gv": "4",
   "id": "53eb987c107e137846baa89d",
   "url": "/gxyd",
   "username": "gxyd",
   "v": 90
  },
  "html": "Then how is boundedness, different from convergence?",
  "id": "55f9ad92f66d320b4fbddaab",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-16T17:57:38.888Z",
  "text": "Then how is boundedness, different from convergence?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/gxyd",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=60",
   "displayName": "Gaurav Dhingra",
   "gv": "4",
   "id": "53eb987c107e137846baa89d",
   "url": "/gxyd",
   "username": "gxyd",
   "v": 90
  },
  "html": "Ok, i get it.",
  "id": "55f9adbb18e0111d7e4f2ecc",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-16T17:58:19.892Z",
  "text": "Ok, i get it.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/jksuom",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6929119?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6929119?v=4&s=60",
   "displayName": "Kalevi Suominen",
   "gv": "4",
   "id": "53204afa5e986b0712efdf3d",
   "url": "/jksuom",
   "username": "jksuom",
   "v": 20
  },
  "html": "For example, <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mo>\u2211</mo><mn>0</mn><mi>N</mi></msubsup><mo>(</mo><mo>\u2212</mo><mn>1</mn><msup><mo>)</mo><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\sum_0^N  (-1)^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.8423309999999999em;\"></span><span class=\"strut bottom\" style=\"height:1.142341em;vertical-align:-0.30001em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mop\"><span class=\"op-symbol small-op mop\" style=\"top:-0.0000050000000000050004em;\">\u2211</span><span class=\"vlist\"><span style=\"top:0.30001em;margin-left:0em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">\u200b</span></span><span class=\"reset-textstyle scriptstyle cramped\"><span class=\"mord\">0</span></span></span><span style=\"top:-0.364em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">\u200b</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">N</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">\u200b</span></span>\u200b</span></span></span><span class=\"mopen\">(</span><span class=\"mord\">\u2212</span><span class=\"mord\">1</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"vlist\"><span style=\"top:-0.363em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">\u200b</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord mathit\">n</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">\u200b</span></span>\u200b</span></span></span></span></span></span> is bounded. It only takes the values 1 and 0. But it does not converge.",
  "id": "55f9ae11a2c7aa6b1086d275",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-16T17:59:45.634Z",
  "text": "For example, $$\\sum_0^N  (-1)^n$$ is bounded. It only takes the values 1 and 0. But it does not converge.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/gxyd",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=60",
   "displayName": "Gaurav Dhingra",
   "gv": "4",
   "id": "53eb987c107e137846baa89d",
   "url": "/gxyd",
   "username": "gxyd",
   "v": 90
  },
  "html": "Ya, the same example came to my mind.",
  "id": "55f9ae26aef03edd3ed0d8d0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-16T18:00:06.296Z",
  "text": "Ya, the same example came to my mind.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/jksuom",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6929119?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6929119?v=4&s=60",
   "displayName": "Kalevi Suominen",
   "gv": "4",
   "id": "53204afa5e986b0712efdf3d",
   "url": "/jksuom",
   "username": "jksuom",
   "v": 20
  },
  "html": "Diriclet&#39;s test with that sum is the same as the alternating sum test.",
  "id": "55f9ae3f18e0111d7e4f2ee5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-16T18:00:31.041Z",
  "text": "Diriclet's test with that sum is the same as the alternating sum test.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2015-09-16T22:15:50.108Z",
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/asmeurer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/71486?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/71486?v=4&s=60",
   "displayName": "Aaron Meurer",
   "gv": "4",
   "id": "529c69c1ed5ab0b3bf04d173",
   "url": "/asmeurer",
   "username": "asmeurer",
   "v": 29
  },
  "html": "You can use LaTeX math in gitter by putting it around two dollar signs, like <code>$$\\sin{x}$$</code> (gives <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>sin</mi><mrow><mi>x</mi></mrow></mrow><annotation encoding=\"application/x-tex\">\\sin{x}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.66786em;\"></span><span class=\"strut bottom\" style=\"height:0.66786em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mop\">sin</span><span class=\"mord textstyle uncramped\"><span class=\"mord mathit\">x</span></span></span></span></span>)",
  "id": "55f9ea05c588a0de6edee1b1",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-16T22:15:33.268Z",
  "text": "You can use LaTeX math in gitter by putting it around two dollar signs, like `$$\\sin{x}$$` (gives $$\\sin{x}$$)",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/asmeurer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/71486?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/71486?v=4&s=60",
   "displayName": "Aaron Meurer",
   "gv": "4",
   "id": "529c69c1ed5ab0b3bf04d173",
   "url": "/asmeurer",
   "username": "asmeurer",
   "v": 29
  },
  "html": "if you don&#39;t know the latex form you can use SymPy&#39;s <code>latex()</code> function ",
  "id": "55f9ea2da2c7aa6b1086e025",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-16T22:16:13.241Z",
  "text": "if you don't know the latex form you can use SymPy's `latex()` function ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/asmeurer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/71486?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/71486?v=4&s=60",
   "displayName": "Aaron Meurer",
   "gv": "4",
   "id": "529c69c1ed5ab0b3bf04d173",
   "url": "/asmeurer",
   "username": "asmeurer",
   "v": 29
  },
  "html": "how would <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mo>\u2211</mo><mrow><mi>n</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi mathvariant=\"normal\">\u221e</mi></mrow></msubsup><mi>sin</mi><mo>(</mo><mi>n</mi><mo>)</mo><mo>=</mo><mi mathvariant=\"normal\">\u221e</mi></mrow><annotation encoding=\"application/x-tex\">\\sum_{n=0}^{\\infty}\\sin(n)=\\infty</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1.0500099999999999em;vertical-align:-0.30001em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mop\"><span class=\"op-symbol small-op mop\" style=\"top:-0.0000050000000000050004em;\">\u2211</span><span class=\"vlist\"><span style=\"top:0.30001em;margin-left:0em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">\u200b</span></span><span class=\"reset-textstyle scriptstyle cramped\"><span class=\"mord scriptstyle cramped\"><span class=\"mord mathit\">n</span><span class=\"mrel\">=</span><span class=\"mord\">0</span></span></span></span><span style=\"top:-0.364em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">\u200b</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord scriptstyle uncramped\"><span class=\"mord\">\u221e</span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">\u200b</span></span>\u200b</span></span></span><span class=\"mop\">sin</span><span class=\"mopen\">(</span><span class=\"mord mathit\">n</span><span class=\"mclose\">)</span><span class=\"mrel\">=</span><span class=\"mord\">\u221e</span></span></span></span> imply that <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>\u03c0</mi></mrow><annotation encoding=\"application/x-tex\">\\pi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">\u03c0</span></span></span></span> is rational? ",
  "id": "55f9ea73a2c7aa6b1086e032",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-16T22:17:23.805Z",
  "text": "how would $$\\sum_{n=0}^{\\infty}\\sin(n)=\\infty$$ imply that $$\\pi$$ is rational? ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/asmeurer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/71486?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/71486?v=4&s=60",
   "displayName": "Aaron Meurer",
   "gv": "4",
   "id": "529c69c1ed5ab0b3bf04d173",
   "url": "/asmeurer",
   "username": "asmeurer",
   "v": 29
  },
  "html": "or rather it not being bounded. I guess it wouldn&#39;t have to diverge to <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">\u221e</mi></mrow><annotation encoding=\"application/x-tex\">\\infty</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord\">\u221e</span></span></span></span>",
  "id": "55f9eaa80ed44a00046e9a2b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-16T22:18:16.299Z",
  "text": "or rather it not being bounded. I guess it wouldn't have to diverge to $$\\infty$$",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/jksuom",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6929119?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6929119?v=4&s=60",
   "displayName": "Kalevi Suominen",
   "gv": "4",
   "id": "53204afa5e986b0712efdf3d",
   "url": "/jksuom",
   "username": "jksuom",
   "v": 20
  },
  "html": "Sorry, I was thinking of the periodicity of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>sin</mi></mrow><annotation encoding=\"application/x-tex\">\\sin</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.66786em;\"></span><span class=\"strut bottom\" style=\"height:0.66786em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mop\">sin</span></span></span></span>, which is another matter. (If <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>\u03c0</mi></mrow><annotation encoding=\"application/x-tex\">\\pi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">\u03c0</span></span></span></span> were rational, the series might be periodic, so not convergent.) The partial sums of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mo>\u2211</mo><mi>n</mi></msub><mi>sin</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">\\sum_n \\sin(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1.0500099999999999em;vertical-align:-0.30001em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mop\"><span class=\"op-symbol small-op mop\" style=\"top:-0.0000050000000000050004em;\">\u2211</span><span class=\"vlist\"><span style=\"top:0.30001em;margin-right:0.05em;margin-left:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">\u200b</span></span><span class=\"reset-textstyle scriptstyle cramped\"><span class=\"mord mathit\">n</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">\u200b</span></span>\u200b</span></span></span><span class=\"mop\">sin</span><span class=\"mopen\">(</span><span class=\"mord mathit\">n</span><span class=\"mclose\">)</span></span></span></span>, and even <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mo>\u2211</mo><mi>n</mi></msub><mi>sin</mi><mo>(</mo><mi>k</mi><mi>n</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">\\sum_n \\sin(kn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1.0500099999999999em;vertical-align:-0.30001em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mop\"><span class=\"op-symbol small-op mop\" style=\"top:-0.0000050000000000050004em;\">\u2211</span><span class=\"vlist\"><span style=\"top:0.30001em;margin-right:0.05em;margin-left:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">\u200b</span></span><span class=\"reset-textstyle scriptstyle cramped\"><span class=\"mord mathit\">n</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">\u200b</span></span>\u200b</span></span></span><span class=\"mop\">sin</span><span class=\"mopen\">(</span><span class=\"mord mathit\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mathit\">n</span><span class=\"mclose\">)</span></span></span></span> for constants <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>k</mi><mo>\u2260</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">k \\ne 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.716em;\"></span><span class=\"strut bottom\" style=\"height:0.9309999999999999em;vertical-align:-0.215em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord mathit\" style=\"margin-right:0.03148em;\">k</span><span class=\"mrel\">\u2260</span><span class=\"mord\">0</span></span></span></span> are always bounded independently of the irrationality of the period of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>sin</mi></mrow><annotation encoding=\"application/x-tex\">\\sin</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.66786em;\"></span><span class=\"strut bottom\" style=\"height:0.66786em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mop\">sin</span></span></span></span>. That can be proved e.g. by using Euler&#39;s formula to expand <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>sin</mi></mrow><annotation encoding=\"application/x-tex\">\\sin</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.66786em;\"></span><span class=\"strut bottom\" style=\"height:0.66786em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mop\">sin</span></span></span></span>.",
  "id": "55fa5779a2c7aa6b1086ea65",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-17T06:02:33.923Z",
  "text": "Sorry, I was thinking of the periodicity of $$\\sin$$, which is another matter. (If $$\\pi$$ were rational, the series might be periodic, so not convergent.) The partial sums of $$\\sum_n \\sin(n)$$, and even $$\\sum_n \\sin(kn)$$ for constants $$k \\ne 0$$ are always bounded independently of the irrationality of the period of $$\\sin$$. That can be proved e.g. by using Euler's formula to expand $$\\sin$$.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2015-09-18T14:22:28.738Z",
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/gxyd",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=60",
   "displayName": "Gaurav Dhingra",
   "gv": "4",
   "id": "53eb987c107e137846baa89d",
   "url": "/gxyd",
   "username": "gxyd",
   "v": 90
  },
  "html": "",
  "id": "55fc1e1b0ed44a00046ee5f2",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-18T14:22:19.588Z",
  "text": "",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/gxyd",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=60",
   "displayName": "Gaurav Dhingra",
   "gv": "4",
   "id": "53eb987c107e137846baa89d",
   "url": "/gxyd",
   "username": "gxyd",
   "v": 90
  },
  "html": "<blockquote>\n<p>Perhaps something like real_order would be better.</p></blockquote>\n<p><span data-link-type=\"mention\" data-screen-name=\"jksuom\" class=\"mention\">@jksuom</span> can you please tell, what you think this, <code>real_order</code> be doing then ?</p>",
  "id": "55fd17c73a8116ed5f6953bf",
  "issues": [],
  "mentions": [
   {
    "screenName": "jksuom",
    "userId": "53204afa5e986b0712efdf3d",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-19T08:07:35.483Z",
  "text": "> Perhaps something like real_order would be better.\n\n@jksuom can you please tell, what you think this, `real_order` be doing then ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2015-09-19T08:09:15.571Z",
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/gxyd",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=60",
   "displayName": "Gaurav Dhingra",
   "gv": "4",
   "id": "53eb987c107e137846baa89d",
   "url": "/gxyd",
   "username": "gxyd",
   "v": 90
  },
  "html": "<a href=\"https://gitter.im/gxyd/sum_convergence?at=55f98afbf66d320b4fbdd430\" rel=\"nofollow\" target=\"_blank\" class=\"link\">here</a> is the comment, in which you talked about it.",
  "id": "55fd180a0ed44a00046effa1",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-19T08:08:42.733Z",
  "text": "[here](https://gitter.im/gxyd/sum_convergence?at=55f98afbf66d320b4fbdd430) is the comment, in which you talked about it.",
  "unread": false,
  "urls": [
   {
    "url": "https://gitter.im/gxyd/sum_convergence?at=55f98afbf66d320b4fbdd430"
   }
  ],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/jksuom",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6929119?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6929119?v=4&s=60",
   "displayName": "Kalevi Suominen",
   "gv": "4",
   "id": "53204afa5e986b0712efdf3d",
   "url": "/jksuom",
   "username": "jksuom",
   "v": 20
  },
  "html": "I think it should return an element of the group of orders. And those could be the objects of class <code>Order</code>. At least I think those would be the best candidates.",
  "id": "55fd260e463feefb419d4fe8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-19T09:08:30.997Z",
  "text": "I think it should return an element of the group of orders. And those could be the objects of class ``Order``. At least I think those would be the best candidates.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/jksuom",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6929119?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6929119?v=4&s=60",
   "displayName": "Kalevi Suominen",
   "gv": "4",
   "id": "53204afa5e986b0712efdf3d",
   "url": "/jksuom",
   "username": "jksuom",
   "v": 20
  },
  "html": "The orders I have in mind should have the form <code>O(x**a)</code>, <code>O(x**a*log(x)**b)</code>, etc. (not to forget exponentials). It is important that they are defined by functions that do not change sign in a neighbouhood of the limit point. (Here I am thinking of <code>oo</code>.)",
  "id": "55fd2704c588a0de6edf499e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-19T09:12:36.588Z",
  "text": "The orders I have in mind should have the form ``O(x**a)``, ``O(x**a*log(x)**b)``, etc. (not to forget exponentials). It is important that they are defined by functions that do not change sign in a neighbouhood of the limit point. (Here I am thinking of ``oo``.)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/jksuom",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6929119?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6929119?v=4&s=60",
   "displayName": "Kalevi Suominen",
   "gv": "4",
   "id": "53204afa5e986b0712efdf3d",
   "url": "/jksuom",
   "username": "jksuom",
   "v": 20
  },
  "html": "Then there is the question what to do with expressions like <code>O(sin(x))</code> (at <code>oo</code>). They have to be excluded somehow.",
  "id": "55fd285daef03edd3ed14e12",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-19T09:18:21.730Z",
  "text": "Then there is the question what to do with expressions like ``O(sin(x))`` (at ``oo``). They have to be excluded somehow.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/jksuom",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6929119?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6929119?v=4&s=60",
   "displayName": "Kalevi Suominen",
   "gv": "4",
   "id": "53204afa5e986b0712efdf3d",
   "url": "/jksuom",
   "username": "jksuom",
   "v": 20
  },
  "html": "One possibility might be making <code>O</code> and <code>Order</code> non-equivalent. One could be applied to any function, the other one only to such that define a genuine order.",
  "id": "55fd28ec463feefb419d5027",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-19T09:20:44.089Z",
  "text": "One possibility might be making ``O`` and ``Order`` non-equivalent. One could be applied to any function, the other one only to such that define a genuine order.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/jksuom",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6929119?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6929119?v=4&s=60",
   "displayName": "Kalevi Suominen",
   "gv": "4",
   "id": "53204afa5e986b0712efdf3d",
   "url": "/jksuom",
   "username": "jksuom",
   "v": 20
  },
  "html": "So <code>real_order</code> (in want of a better name) applied to any function would return a genuine order suitable for the function. For example, <code>real_order(sin(x)) == O(1)</code>.",
  "id": "55fd29daaef03edd3ed14e27",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-19T09:24:42.040Z",
  "text": "So ``real_order`` (in want of a better name) applied to any function would return a genuine order suitable for the function. For example, ``real_order(sin(x)) == O(1)``.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/asmeurer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/71486?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/71486?v=4&s=60",
   "displayName": "Aaron Meurer",
   "gv": "4",
   "id": "529c69c1ed5ab0b3bf04d173",
   "url": "/asmeurer",
   "username": "asmeurer",
   "v": 29
  },
  "html": "I\u2019m still unclear why <code>real_order</code> is not just <code>O</code> at <code>oo</code>",
  "id": "55fddd6fc588a0de6edf590d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-19T22:10:55.522Z",
  "text": "I\u2019m still unclear why `real_order` is not just `O` at `oo`",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/gxyd",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=60",
   "displayName": "Gaurav Dhingra",
   "gv": "4",
   "id": "53eb987c107e137846baa89d",
   "url": "/gxyd",
   "username": "gxyd",
   "v": 90
  },
  "html": "Since <code>O(sin(n), (n, oo))</code> is not <code>O(1, (n, oo))</code> but only an upper bound for <code>O(sin(n), (n, oo))</code>. <code>O</code> gives the answer as exact order for any function.",
  "id": "55fe1f0a0ed44a00046f13d9",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-20T02:50:50.937Z",
  "text": "Since `O(sin(n), (n, oo))` is not `O(1, (n, oo))` but only an upper bound for `O(sin(n), (n, oo))`. `O` gives the answer as exact order for any function.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/gxyd",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=60",
   "displayName": "Gaurav Dhingra",
   "gv": "4",
   "id": "53eb987c107e137846baa89d",
   "url": "/gxyd",
   "username": "gxyd",
   "v": 90
  },
  "html": "Do not you think if the bug which is in <code>Order</code> itself, which does not convert <code>O(n + sin(n), (n, oo))</code> into <code>O(n, (n, oo))</code> be sufficient to solve our problem of majority of expressions, for checking their convergence, Instead of use of <code>real_order</code>.",
  "id": "55fffc77c588a0de6edf859c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-21T12:47:51.017Z",
  "text": "Do not you think if the bug which is in `Order` itself, which does not convert `O(n + sin(n), (n, oo))` into `O(n, (n, oo))` be sufficient to solve our problem of majority of expressions, for checking their convergence, Instead of use of `real_order`.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/jksuom",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6929119?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6929119?v=4&s=60",
   "displayName": "Kalevi Suominen",
   "gv": "4",
   "id": "53204afa5e986b0712efdf3d",
   "url": "/jksuom",
   "username": "jksuom",
   "v": 20
  },
  "html": "Perhaps we are talking about almost the same issue. I did use the name <code>real_order</code> to emphasize the restriction to real arguments. That does not mean that &quot;real&quot; could not be dropped and we would be left with <code>order</code>. It would differ from the current <code>Order</code> in the way you indicated: <code>order(n + sin(n))</code> would result in <code>O(n)</code>. (I omit the <code>(n, oo)</code> part for simplicity.)",
  "id": "55fffec00ed44a00046f3995",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-21T12:57:36.744Z",
  "text": "Perhaps we are talking about almost the same issue. I did use the name ``real_order`` to emphasize the restriction to real arguments. That does not mean that \"real\" could not be dropped and we would be left with ``order``. It would differ from the current ``Order`` in the way you indicated: ``order(n + sin(n))`` would result in ``O(n)``. (I omit the ``(n, oo)`` part for simplicity.)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/jksuom",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6929119?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6929119?v=4&s=60",
   "displayName": "Kalevi Suominen",
   "gv": "4",
   "id": "53204afa5e986b0712efdf3d",
   "url": "/jksuom",
   "username": "jksuom",
   "v": 20
  },
  "html": "(Note: the &quot;order&quot; of <code>sin(x)</code> on the imaginary axis is exponential.)",
  "id": "55ffff0e9f9fabb6673e67b3",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-21T12:58:54.612Z",
  "text": "(Note: the \"order\" of ``sin(x)`` on the imaginary axis is exponential.)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2015-09-21T13:05:05.822Z",
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/gxyd",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=60",
   "displayName": "Gaurav Dhingra",
   "gv": "4",
   "id": "53eb987c107e137846baa89d",
   "url": "/gxyd",
   "username": "gxyd",
   "v": 90
  },
  "html": "So is the current <code>O</code>supposed to deal with orders of complex functions(may contains <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.65952em;\"></span><span class=\"strut bottom\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord mathit\">i</span></span></span></span>  complex unit) not just real!!",
  "id": "560000410ed44a00046f39d9",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-21T13:04:01.902Z",
  "text": "So is the current `O`supposed to deal with orders of complex functions(may contains $$i$$  complex unit) not just real!!",
  "unread": false,
  "urls": [],
  "v": 4
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/gxyd",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=60",
   "displayName": "Gaurav Dhingra",
   "gv": "4",
   "id": "53eb987c107e137846baa89d",
   "url": "/gxyd",
   "username": "gxyd",
   "v": 90
  },
  "html": "So all that is going to make a use of <code>real_bound</code>, which PR i made?",
  "id": "560006a30ed44a00046f3ae6",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-21T13:31:15.521Z",
  "text": "So all that is going to make a use of `real_bound`, which PR i made?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/jksuom",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6929119?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6929119?v=4&s=60",
   "displayName": "Kalevi Suominen",
   "gv": "4",
   "id": "53204afa5e986b0712efdf3d",
   "url": "/jksuom",
   "username": "jksuom",
   "v": 20
  },
  "html": "Think of <code>real_bound</code> as a temporary &quot;working name&quot;. I believe <code>O</code> was initially thought of as the order of a real function on the real axis. That is how it is intended to be used in Gruntz&#39; algorithm for limits. Apparently it is currently also used for complex functions in some cases, but that is problematic when functions composed. (Inner function no more real.)",
  "id": "5600083d463feefb419d8c71",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-21T13:38:05.599Z",
  "text": "Think of ``real_bound`` as a temporary \"working name\". I believe ``O`` was initially thought of as the order of a real function on the real axis. That is how it is intended to be used in Gruntz' algorithm for limits. Apparently it is currently also used for complex functions in some cases, but that is problematic when functions composed. (Inner function no more real.)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/jksuom",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6929119?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6929119?v=4&s=60",
   "displayName": "Kalevi Suominen",
   "gv": "4",
   "id": "53204afa5e986b0712efdf3d",
   "url": "/jksuom",
   "username": "jksuom",
   "v": 20
  },
  "html": "Sorry, I didn&#39;t pay attention to your mentioning <code>real_bound</code>. I am now beginning to think that it may not be necessary in its exact form such as <code>real_bound(2*sin(x)) == 2</code>. It might be enough and simpler to just define <code>real_order(2*sin(x))</code> (or perhaps briefly <code>order(2*sin(x))</code>) to be <code>O(1)</code> ignoring the constant 2. Initially I had in mind that one may have to do fairly exact computations to find the order of a sum in general, but perhaps it is easier to start with just &quot;order&quot;.",
  "id": "56000a060ed44a00046f3b8b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-21T13:45:42.129Z",
  "text": "Sorry, I didn't pay attention to your mentioning ``real_bound``. I am now beginning to think that it may not be necessary in its exact form such as ``real_bound(2*sin(x)) == 2``. It might be enough and simpler to just define ``real_order(2*sin(x))`` (or perhaps briefly ``order(2*sin(x))``) to be ``O(1)`` ignoring the constant 2. Initially I had in mind that one may have to do fairly exact computations to find the order of a sum in general, but perhaps it is easier to start with just \"order\".",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/gxyd",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=60",
   "displayName": "Gaurav Dhingra",
   "gv": "4",
   "id": "53eb987c107e137846baa89d",
   "url": "/gxyd",
   "username": "gxyd",
   "v": 90
  },
  "html": "Ok, then. Can you please give me some idea of what the code for <code>real_order</code> may be ? I could not see how i am going to deal bounding <code>sin(n)</code> and <code>n*sin(n)</code> without using <code>real_bound</code>(not <code>real_order</code>)(which you say may be of little significance).",
  "id": "56000d5a3a8116ed5f6990eb",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-21T13:59:54.576Z",
  "text": "Ok, then. Can you please give me some idea of what the code for `real_order` may be ? I could not see how i am going to deal bounding `sin(n)` and `n*sin(n)` without using `real_bound`(not `real_order`)(which you say may be of little significance).",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/asmeurer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/71486?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/71486?v=4&s=60",
   "displayName": "Aaron Meurer",
   "gv": "4",
   "id": "529c69c1ed5ab0b3bf04d173",
   "url": "/asmeurer",
   "username": "asmeurer",
   "v": 29
  },
  "html": "doesn&#39;t the <code>(n, oo)</code> part make it real? If it were complex it would be <code>I*oo</code> or <code>zoo</code>. ",
  "id": "56002a129f9fabb6673e6fe2",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-21T16:02:26.048Z",
  "text": "doesn't the `(n, oo)` part make it real? If it were complex it would be `I*oo` or `zoo`. ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2015-09-21T16:53:53.696Z",
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/gxyd",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=60",
   "displayName": "Gaurav Dhingra",
   "gv": "4",
   "id": "53eb987c107e137846baa89d",
   "url": "/gxyd",
   "username": "gxyd",
   "v": 90
  },
  "html": "do we have any summation from <code>(n, 1, zoo)</code>?. I do not think this type makes any sense in mathematically. But as &quot;order&quot; of <code>sin(x).rewrite(exp)</code> on the imaginary axis is complex.",
  "id": "560036113a8116ed5f699943",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-21T16:53:37.662Z",
  "text": "do we have any summation from `(n, 1, zoo)`?. I do not think this type makes any sense in mathematically. But as \"order\" of `sin(x).rewrite(exp)` on the imaginary axis is complex.",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/jksuom",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6929119?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6929119?v=4&s=60",
   "displayName": "Kalevi Suominen",
   "gv": "4",
   "id": "53204afa5e986b0712efdf3d",
   "url": "/jksuom",
   "username": "jksuom",
   "v": 20
  },
  "html": "&quot;Order&quot; at <code>zoo</code> would be fairly easy to define for a meromorphic function. It is an integer, positive for a zero, negative for a pole. If a function is meromorphic but not at infinity, then it has an essential singularity and it does not make much sense to speak of its order. (There are only few non-meromorphic functions in SymPy. Perhap only <code>abs</code>?)",
  "id": "56004345c588a0de6edf9423",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-21T17:49:57.800Z",
  "text": "\"Order\" at ``zoo`` would be fairly easy to define for a meromorphic function. It is an integer, positive for a zero, negative for a pole. If a function is meromorphic but not at infinity, then it has an essential singularity and it does not make much sense to speak of its order. (There are only few non-meromorphic functions in SymPy. Perhap only ``abs``?)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/jksuom",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6929119?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6929119?v=4&s=60",
   "displayName": "Kalevi Suominen",
   "gv": "4",
   "id": "53204afa5e986b0712efdf3d",
   "url": "/jksuom",
   "username": "jksuom",
   "v": 20
  },
  "html": "For real (analytic) functions on the real line (or a part of it) the situation is quite different. A single integer is enough for functions having a Laurent series expansion. Their order can be described by an expression of the type <code>O(x**n)</code> (or <code>O((x - a)**n</code>, or <code>O(1/x**n</code>).  But exponential or logarithmic growth has to be treated differently. ",
  "id": "56004538463feefb419d9953",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-21T17:58:16.121Z",
  "text": "For real (analytic) functions on the real line (or a part of it) the situation is quite different. A single integer is enough for functions having a Laurent series expansion. Their order can be described by an expression of the type ``O(x**n)`` (or ``O((x - a)**n``, or ``O(1/x**n``).  But exponential or logarithmic growth has to be treated differently. ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/jksuom",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6929119?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6929119?v=4&s=60",
   "displayName": "Kalevi Suominen",
   "gv": "4",
   "id": "53204afa5e986b0712efdf3d",
   "url": "/jksuom",
   "username": "jksuom",
   "v": 20
  },
  "html": "So I think we should be able to single out a reasonable representative set of functions whose orders serve as the &quot;order scale&quot;. That would include all powers <code>x**a</code>, powers of (iterated) logarithms, their products and exponentials. The order of any function (for which it could reasonably be defined) would then be <code>O(f)</code> for some <code>f</code> in that scale. Functions like <code>sin(x)</code> do not have an order at <code>oo</code> in this sense, but they still have the &quot;big O&quot; type of order. (Only its name would have to be decided.)",
  "id": "5600480f463feefb419d99ea",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-21T18:10:23.976Z",
  "text": "So I think we should be able to single out a reasonable representative set of functions whose orders serve as the \"order scale\". That would include all powers ``x**a``, powers of (iterated) logarithms, their products and exponentials. The order of any function (for which it could reasonably be defined) would then be ``O(f)`` for some ``f`` in that scale. Functions like ``sin(x)`` do not have an order at ``oo`` in this sense, but they still have the \"big O\" type of order. (Only its name would have to be decided.)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/jksuom",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6929119?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6929119?v=4&s=60",
   "displayName": "Kalevi Suominen",
   "gv": "4",
   "id": "53204afa5e986b0712efdf3d",
   "url": "/jksuom",
   "username": "jksuom",
   "v": 20
  },
  "html": "An algorithm for finding such an order for the &quot;exp-log&quot; functions  is explained in Gruntz&#39;s thesis. The order is determined by the &quot;most rapidly varying&quot; (mrv) part of an expression.",
  "id": "56004c703a8116ed5f699e32",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-21T18:29:04.532Z",
  "text": "An algorithm for finding such an order for the \"exp-log\" functions  is explained in Gruntz's thesis. The order is determined by the \"most rapidly varying\" (mrv) part of an expression.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/asmeurer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/71486?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/71486?v=4&s=60",
   "displayName": "Aaron Meurer",
   "gv": "4",
   "id": "529c69c1ed5ab0b3bf04d173",
   "url": "/asmeurer",
   "username": "asmeurer",
   "v": 29
  },
  "html": "that algorithm is implemented in sympy ",
  "id": "5600799b9f9fabb6673e8142",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-21T21:41:47.446Z",
  "text": "that algorithm is implemented in sympy ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/jksuom",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6929119?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6929119?v=4&s=60",
   "displayName": "Kalevi Suominen",
   "gv": "4",
   "id": "53204afa5e986b0712efdf3d",
   "url": "/jksuom",
   "username": "jksuom",
   "v": 20
  },
  "html": "Perhaps it would be possible to use it. Or some simplified version such as <a href=\"https://github.com/skirpichev/omg/blob/master/sympy/series/gruntz.py\" rel=\"nofollow\" target=\"_blank\" class=\"link\">this</a>. (It seems to be valid for exp-log functions.)",
  "id": "56010362a0ecf0e07a8e18cb",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-22T07:29:38.721Z",
  "text": "Perhaps it would be possible to use it. Or some simplified version such as [this](https://github.com/skirpichev/omg/blob/master/sympy/series/gruntz.py). (It seems to be valid for exp-log functions.)",
  "unread": false,
  "urls": [
   {
    "url": "https://github.com/skirpichev/omg/blob/master/sympy/series/gruntz.py"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/gxyd",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=60",
   "displayName": "Gaurav Dhingra",
   "gv": "4",
   "id": "53eb987c107e137846baa89d",
   "url": "/gxyd",
   "username": "gxyd",
   "v": 90
  },
  "html": "As for the <code>summation(sin(n)/n, (n, 1, oo))</code> can only be checked using the <code>dirichlet tests</code>. But the problem is <code>summation(sin(n), (n, 1, k))</code> is not evaluated, hence can not be checked for boundedness. But after rewriting as <code>exp</code> it works.<pre><code><span class=\"prompt\">&gt;&gt;&gt; </span>n = Symbol(<span class=\"string\">'n'</span>, integer=<span class=\"keyword\">True</span>, positive=<span class=\"keyword\">True</span>)\n<span class=\"prompt\">&gt;&gt;&gt; </span>k = Symbol(<span class=\"string\">'k'</span>, real=<span class=\"keyword\">True</span>)\n<span class=\"prompt\">&gt;&gt;&gt; </span>summation(sin(n)/n, (n, <span class=\"number\">1</span>, k))\nSum(sin(n)/n, (n, <span class=\"number\">1</span>, k))\n<span class=\"prompt\">&gt;&gt;&gt; </span>(simplify(Sum(sin(n).rewrite(exp), (n, <span class=\"number\">1</span>, k)).doit().rewrite(sin))).is_finite  <span class=\"comment\"># this works</span>\n<span class=\"keyword\">True</span></code></pre>",
  "id": "5608da2206faf3777a08d8d8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-28T06:11:46.583Z",
  "text": "As for the `summation(sin(n)/n, (n, 1, oo))` can only be checked using the `dirichlet tests`. But the problem is `summation(sin(n), (n, 1, k))` is not evaluated, hence can not be checked for boundedness. But after rewriting as `exp` it works.\n```\n>>> n = Symbol('n', integer=True, positive=True)\n>>> k = Symbol('k', real=True)\n>>> summation(sin(n)/n, (n, 1, k))\nSum(sin(n)/n, (n, 1, k))\n>>> (simplify(Sum(sin(n).rewrite(exp), (n, 1, k)).doit().rewrite(sin))).is_finite  # this works\nTrue\n```\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/asmeurer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/71486?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/71486?v=4&s=60",
   "displayName": "Aaron Meurer",
   "gv": "4",
   "id": "529c69c1ed5ab0b3bf04d173",
   "url": "/asmeurer",
   "username": "asmeurer",
   "v": 29
  },
  "html": "in that case I would say that we should improve the summation algorithms ",
  "id": "56099671329b1da05c3b6213",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-28T19:35:13.846Z",
  "text": "in that case I would say that we should improve the summation algorithms ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/asmeurer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/71486?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/71486?v=4&s=60",
   "displayName": "Aaron Meurer",
   "gv": "4",
   "id": "529c69c1ed5ab0b3bf04d173",
   "url": "/asmeurer",
   "username": "asmeurer",
   "v": 29
  },
  "html": "I&#39;m not sure that really tells you what you need to know",
  "id": "560996c5230869a25cc3e062",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-28T19:36:37.441Z",
  "text": "I'm not sure that really tells you what you need to know",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/asmeurer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/71486?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/71486?v=4&s=60",
   "displayName": "Aaron Meurer",
   "gv": "4",
   "id": "529c69c1ed5ab0b3bf04d173",
   "url": "/asmeurer",
   "username": "asmeurer",
   "v": 29
  },
  "html": "you want to know if the expression is bounded independent of <code>k</code>",
  "id": "560996ce329b1da05c3b6223",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-28T19:36:46.883Z",
  "text": "you want to know if the expression is bounded independent of `k`",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/asmeurer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/71486?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/71486?v=4&s=60",
   "displayName": "Aaron Meurer",
   "gv": "4",
   "id": "529c69c1ed5ab0b3bf04d173",
   "url": "/asmeurer",
   "username": "asmeurer",
   "v": 29
  },
  "html": "this works",
  "id": "5609977b519547fc1e3adf79",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-28T19:39:39.429Z",
  "text": "this works",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/asmeurer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/71486?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/71486?v=4&s=60",
   "displayName": "Aaron Meurer",
   "gv": "4",
   "id": "529c69c1ed5ab0b3bf04d173",
   "url": "/asmeurer",
   "username": "asmeurer",
   "v": 29
  },
  "html": "<pre><code>In [<span class=\"number\">16</span>]: <span class=\"function\"><span class=\"title\">limit</span><span class=\"params\">(simplify(Sum(sin(n)</span></span>.<span class=\"function\"><span class=\"title\">rewrite</span><span class=\"params\">(exp)</span></span>, (n, <span class=\"number\">0</span>, k)).<span class=\"function\"><span class=\"title\">doit</span><span class=\"params\">()</span></span>.<span class=\"function\"><span class=\"title\">rewrite</span><span class=\"params\">(sin)</span></span>), k, oo)\nOut[<span class=\"number\">16</span>]:\n    <span class=\"function\"><span class=\"title\">sin</span><span class=\"params\">(<span class=\"number\">1</span>)</span></span>\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n-<span class=\"number\">2</span>\u22c5<span class=\"function\"><span class=\"title\">cos</span><span class=\"params\">(<span class=\"number\">1</span>)</span></span> + <span class=\"number\">2</span></code></pre>",
  "id": "56099781519547fc1e3adf7a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-28T19:39:45.667Z",
  "text": "```\nIn [16]: limit(simplify(Sum(sin(n).rewrite(exp), (n, 0, k)).doit().rewrite(sin)), k, oo)\nOut[16]:\n    sin(1)\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n-2\u22c5cos(1) + 2\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/asmeurer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/71486?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/71486?v=4&s=60",
   "displayName": "Aaron Meurer",
   "gv": "4",
   "id": "529c69c1ed5ab0b3bf04d173",
   "url": "/asmeurer",
   "username": "asmeurer",
   "v": 29
  },
  "html": "I guess that is wrong. according to wolfram the sum does not converge ",
  "id": "56099847a8546c0d12c50076",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-28T19:43:03.079Z",
  "text": "I guess that is wrong. according to wolfram the sum does not converge ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/asmeurer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/71486?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/71486?v=4&s=60",
   "displayName": "Aaron Meurer",
   "gv": "4",
   "id": "529c69c1ed5ab0b3bf04d173",
   "url": "/asmeurer",
   "username": "asmeurer",
   "v": 29
  },
  "html": "<span data-link-type=\"issue\" data-issue=\"9934\" data-issue-repo=\"sympy/sympy\" class=\"issue\">sympy/sympy#9934</span>",
  "id": "56099ba8a8546c0d12c50130",
  "issues": [
   {
    "number": "9934",
    "repo": "sympy/sympy"
   }
  ],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-28T19:57:28.091Z",
  "text": "https://github.com/sympy/sympy/issues/9934",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2015-09-29T01:15:42.290Z",
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/gxyd",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=60",
   "displayName": "Gaurav Dhingra",
   "gv": "4",
   "id": "53eb987c107e137846baa89d",
   "url": "/gxyd",
   "username": "gxyd",
   "v": 90
  },
  "html": "<p>I am not sure if this is a problem with the <code>Sum</code> algorithms`. to me it seems the problem is with the limits. See this</p><pre><code>&gt;&gt;&gt; limit(<span class=\"built_in\">cos</span>(k + <span class=\"number\">1</span>) - <span class=\"built_in\">cos</span>(k), k, oo)\n<span class=\"number\">0</span>   <span class=\"preprocessor\"># why 0?</span></code></pre><p>Shoudn&#39;t this limit be undefined? Wolfram  gives <code>-2 to 2</code> . <a href=\"http://www.wolframalpha.com/input/?i=limit+%28-cos%28k%29+%2B+cos%28k+%2B+1%29%29+%2C+k%2C+oo\" rel=\"nofollow\" target=\"_blank\" class=\"link\">this</a>.</p>",
  "id": "5609e634519547fc1e3ae9ad",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-29T01:15:32.523Z",
  "text": "I am not sure if this is a problem with the `Sum` algorithms`. to me it seems the problem is with the limits. See this\n```\n>>> limit(cos(k + 1) - cos(k), k, oo)\n0   # why 0?\n```\nShoudn't this limit be undefined? Wolfram  gives `-2 to 2` . [this](http://www.wolframalpha.com/input/?i=limit+%28-cos%28k%29+%2B+cos%28k+%2B+1%29%29+%2C+k%2C+oo).",
  "unread": false,
  "urls": [
   {
    "url": "http://www.wolframalpha.com/input/?i=limit+%28-cos%28k%29+%2B+cos%28k+%2B+1%29%29+%2C+k%2C+oo"
   }
  ],
  "v": 2
 },
 {
  "editedAt": "2015-09-29T01:18:35.891Z",
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/gxyd",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=60",
   "displayName": "Gaurav Dhingra",
   "gv": "4",
   "id": "53eb987c107e137846baa89d",
   "url": "/gxyd",
   "username": "gxyd",
   "v": 90
  },
  "html": "We can have two view points on this. But look it from the fact that whatever value of <code>k</code> is remove the integral multiple of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>2</mn><mo>\u2217</mo><mi>\u03c0</mi></mrow><annotation encoding=\"application/x-tex\">2*\\pi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.64444em;\"></span><span class=\"strut bottom\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord\">2</span><span class=\"mbin\">\u2217</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">\u03c0</span></span></span></span> i.e <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>2</mn><mi>n</mi><mi>\u03c0</mi></mrow><annotation encoding=\"application/x-tex\">2n\\pi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.64444em;\"></span><span class=\"strut bottom\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord\">2</span><span class=\"mord mathit\">n</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">\u03c0</span></span></span></span> from it. Rest we have an angle in <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>[</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>2</mn><mi>\u03c0</mi><mo>]</mo></mrow><annotation encoding=\"application/x-tex\">[0, 2\\pi]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mord\">2</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">\u03c0</span><span class=\"mclose\">]</span></span></span></span>.",
  "id": "5609e6d9329b1da05c3b6cf2",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-09-29T01:18:17.455Z",
  "text": "We can have two view points on this. But look it from the fact that whatever value of `k` is remove the integral multiple of $$2*\\pi$$ i.e $$2n\\pi$$ from it. Rest we have an angle in $$[0, 2\\pi]$$.",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "editedAt": "2015-10-11T06:41:35.011Z",
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/gxyd",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=60",
   "displayName": "Gaurav Dhingra",
   "gv": "4",
   "id": "53eb987c107e137846baa89d",
   "url": "/gxyd",
   "username": "gxyd",
   "v": 90
  },
  "html": "I hope that <a href=\"https://en.wikipedia.org/wiki/Infinite_product\" rel=\"nofollow\" target=\"_blank\" class=\"link\">Product Convergence</a> will be useful, also. So i will be making a PR about the <code>.is_convergent()</code> in <code>Product</code> in SymPy. This will be quite simple to make, but since i will also be adding some latex in docs(which is quite new to me). So will that be useful to have <code>is_convergence</code> for Productss as well.?",
  "id": "561a04841b0e279854bdcd18",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-10-11T06:41:08.311Z",
  "text": "I hope that [Product Convergence](https://en.wikipedia.org/wiki/Infinite_product) will be useful, also. So i will be making a PR about the `.is_convergent()` in `Product` in SymPy. This will be quite simple to make, but since i will also be adding some latex in docs(which is quite new to me). So will that be useful to have `is_convergence` for Productss as well.?",
  "unread": false,
  "urls": [
   {
    "url": "https://en.wikipedia.org/wiki/Infinite_product"
   }
  ],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/jksuom",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6929119?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6929119?v=4&s=60",
   "displayName": "Kalevi Suominen",
   "gv": "4",
   "id": "53204afa5e986b0712efdf3d",
   "url": "/jksuom",
   "username": "jksuom",
   "v": 20
  },
  "html": "I have been thinking of the connection between products  <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>\u220f</mo><mo>(</mo><mn>1</mn><mo>+</mo><msub><mi>a</mi><mi>n</mi></msub><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">\\prod (1 + a_n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"base textstyle uncramped\"><span class=\"op-symbol small-op mop\" style=\"top:-0.0000050000000000050004em;\">\u220f</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mbin\">+</span><span class=\"mord\"><span class=\"mord mathit\">a</span><span class=\"vlist\"><span style=\"top:0.15em;margin-right:0.05em;margin-left:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">\u200b</span></span><span class=\"reset-textstyle scriptstyle cramped\"><span class=\"mord mathit\">n</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">\u200b</span></span>\u200b</span></span></span><span class=\"mclose\">)</span></span></span></span> and sums <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>\u2211</mo><msub><mi>a</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\sum a_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"base textstyle uncramped\"><span class=\"op-symbol small-op mop\" style=\"top:-0.0000050000000000050004em;\">\u2211</span><span class=\"mord\"><span class=\"mord mathit\">a</span><span class=\"vlist\"><span style=\"top:0.15em;margin-right:0.05em;margin-left:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">\u200b</span></span><span class=\"reset-textstyle scriptstyle cramped\"><span class=\"mord mathit\">n</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">\u200b</span></span>\u200b</span></span></span></span></span></span>. If all the terms <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>a</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">a_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord\"><span class=\"mord mathit\">a</span><span class=\"vlist\"><span style=\"top:0.15em;margin-right:0.05em;margin-left:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">\u200b</span></span><span class=\"reset-textstyle scriptstyle cramped\"><span class=\"mord mathit\">n</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">\u200b</span></span>\u200b</span></span></span></span></span></span> are positive or negative, then the product and the sum both converge or both diverge. (For negative <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>a</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">a_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord\"><span class=\"mord mathit\">a</span><span class=\"vlist\"><span style=\"top:0.15em;margin-right:0.05em;margin-left:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">\u200b</span></span><span class=\"reset-textstyle scriptstyle cramped\"><span class=\"mord mathit\">n</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">\u200b</span></span>\u200b</span></span></span></span></span></span>, the product is considered divergent if is tends to 0.) However, in general it is possible that the sum may converge even if the product is divergent.",
  "id": "561a39ab99bbd76f0f30c410",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-10-11T10:27:55.395Z",
  "text": "I have been thinking of the connection between products  $$\\prod (1 + a_n)$$ and sums $$\\sum a_n$$. If all the terms $$a_n$$ are positive or negative, then the product and the sum both converge or both diverge. (For negative $$a_n$$, the product is considered divergent if is tends to 0.) However, in general it is possible that the sum may converge even if the product is divergent.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2015-10-11T10:39:02.526Z",
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/jksuom",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6929119?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6929119?v=4&s=60",
   "displayName": "Kalevi Suominen",
   "gv": "4",
   "id": "53204afa5e986b0712efdf3d",
   "url": "/jksuom",
   "username": "jksuom",
   "v": 20
  },
  "html": "Consider, for example, the convergent alternating series <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>\u2211</mo><mo>(</mo><mo>\u2212</mo><mn>1</mn><msup><mo>)</mo><mi>n</mi></msup><mi mathvariant=\"normal\">/</mi><msqrt><mrow><mi>n</mi></mrow></msqrt></mrow><annotation encoding=\"application/x-tex\">\\sum (-1)^n/\\sqrt{n}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.8002800000000001em;\"></span><span class=\"strut bottom\" style=\"height:1.0502900000000002em;vertical-align:-0.25001em;\"></span><span class=\"base textstyle uncramped\"><span class=\"op-symbol small-op mop\" style=\"top:-0.0000050000000000050004em;\">\u2211</span><span class=\"mopen\">(</span><span class=\"mord\">\u2212</span><span class=\"mord\">1</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"vlist\"><span style=\"top:-0.363em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">\u200b</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord mathit\">n</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">\u200b</span></span>\u200b</span></span></span><span class=\"mord\">/</span><span class=\"sqrt mord\"><span class=\"sqrt-sign\" style=\"top:0.03971999999999998em;\"><span class=\"style-wrap reset-textstyle textstyle uncramped\">\u221a</span></span><span class=\"vlist\"><span style=\"top:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:1em;\">\u200b</span></span><span class=\"mord textstyle cramped\"><span class=\"mord mathit\">n</span></span></span><span style=\"top:-0.72028em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:1em;\">\u200b</span></span><span class=\"reset-textstyle textstyle uncramped sqrt-line\"></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:1em;\">\u200b</span></span>\u200b</span></span></span></span></span></span>. Grouping the terms of the product pairwise we get<br><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>(</mo><mn>1</mn><mo>\u2212</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><msqrt><mrow><mn>2</mn><mi>n</mi><mo>\u2212</mo><mn>1</mn></mrow></msqrt><mo>)</mo><mo>(</mo><mn>1</mn><mo>+</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><msqrt><mrow><mn>2</mn><mi>n</mi></mrow></msqrt><mo>)</mo><mo>&lt;</mo><mo>(</mo><mn>1</mn><mo>\u2212</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><msqrt><mrow><mn>2</mn><mi>n</mi></mrow></msqrt><mo>)</mo><mo>(</mo><mn>1</mn><mo>+</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><msqrt><mrow><mn>2</mn><mi>n</mi></mrow></msqrt><mo>)</mo><mo>=</mo><mn>1</mn><mo>\u2212</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>2</mn><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">(1 - 1/\\sqrt{2n - 1})(1 + 1/\\sqrt{2n}) &lt; (1 - 1/\\sqrt{2n})(1 + 1/\\sqrt{2n}) = 1 - 1/2n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.9072200000000001em;\"></span><span class=\"strut bottom\" style=\"height:1.1572200000000001em;vertical-align:-0.25em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mbin\">\u2212</span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"sqrt mord\"><span class=\"sqrt-sign\" style=\"top:-0.025554999999999994em;\"><span class=\"style-wrap reset-textstyle textstyle uncramped\">\u221a</span></span><span class=\"vlist\"><span style=\"top:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:1em;\">\u200b</span></span><span class=\"mord textstyle cramped\"><span class=\"mord\">2</span><span class=\"mord mathit\">n</span><span class=\"mbin\">\u2212</span><span class=\"mord\">1</span></span></span><span style=\"top:-0.785555em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:1em;\">\u200b</span></span><span class=\"reset-textstyle textstyle uncramped sqrt-line\"></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:1em;\">\u200b</span></span>\u200b</span></span></span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mbin\">+</span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"sqrt mord\"><span class=\"sqrt-sign\" style=\"top:-0.06722000000000006em;\"><span class=\"style-wrap reset-textstyle textstyle uncramped\">\u221a</span></span><span class=\"vlist\"><span style=\"top:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:1em;\">\u200b</span></span><span class=\"mord textstyle cramped\"><span class=\"mord\">2</span><span class=\"mord mathit\">n</span></span></span><span style=\"top:-0.8272200000000001em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:1em;\">\u200b</span></span><span class=\"reset-textstyle textstyle uncramped sqrt-line\"></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:1em;\">\u200b</span></span>\u200b</span></span></span><span class=\"mclose\">)</span><span class=\"mrel\">&lt;</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mbin\">\u2212</span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"sqrt mord\"><span class=\"sqrt-sign\" style=\"top:-0.06722000000000006em;\"><span class=\"style-wrap reset-textstyle textstyle uncramped\">\u221a</span></span><span class=\"vlist\"><span style=\"top:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:1em;\">\u200b</span></span><span class=\"mord textstyle cramped\"><span class=\"mord\">2</span><span class=\"mord mathit\">n</span></span></span><span style=\"top:-0.8272200000000001em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:1em;\">\u200b</span></span><span class=\"reset-textstyle textstyle uncramped sqrt-line\"></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:1em;\">\u200b</span></span>\u200b</span></span></span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mbin\">+</span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"sqrt mord\"><span class=\"sqrt-sign\" style=\"top:-0.06722000000000006em;\"><span class=\"style-wrap reset-textstyle textstyle uncramped\">\u221a</span></span><span class=\"vlist\"><span style=\"top:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:1em;\">\u200b</span></span><span class=\"mord textstyle cramped\"><span class=\"mord\">2</span><span class=\"mord mathit\">n</span></span></span><span style=\"top:-0.8272200000000001em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:1em;\">\u200b</span></span><span class=\"reset-textstyle textstyle uncramped sqrt-line\"></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:1em;\">\u200b</span></span>\u200b</span></span></span><span class=\"mclose\">)</span><span class=\"mrel\">=</span><span class=\"mord\">1</span><span class=\"mbin\">\u2212</span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mord\">2</span><span class=\"mord mathit\">n</span></span></span></span><br>showing that the product is divergent.<br>Hence, it would probably be best to consider the absolute convergence of the sum. It will give a sufficient but not necessary condition for the convergence of the product.",
  "id": "561a3bfa6dc64436714ac285",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-10-11T10:37:46.415Z",
  "text": "Consider, for example, the convergent alternating series $$\\sum (-1)^n/\\sqrt{n}$$. Grouping the terms of the product pairwise we get\n$$(1 - 1/\\sqrt{2n - 1})(1 + 1/\\sqrt{2n}) < (1 - 1/\\sqrt{2n})(1 + 1/\\sqrt{2n}) = 1 - 1/2n$$\nshowing that the product is divergent.\nHence, it would probably be best to consider the absolute convergence of the sum. It will give a sufficient but not necessary condition for the convergence of the product.",
  "unread": false,
  "urls": [],
  "v": 4
 },
 {
  "editedAt": "2015-10-11T10:54:46.803Z",
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/gxyd",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=60",
   "displayName": "Gaurav Dhingra",
   "gv": "4",
   "id": "53eb987c107e137846baa89d",
   "url": "/gxyd",
   "username": "gxyd",
   "v": 90
  },
  "html": "Sorry, to interrupt, i have not read your two mentioned points. <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mo>\u2211</mo><mrow><mi>n</mi><mo>=</mo><mn>2</mn></mrow><mrow><mi mathvariant=\"normal\">\u221e</mi></mrow></msubsup><mi>log</mi><mo>(</mo><mfrac><mrow><mn>1</mn></mrow><mrow><mi>n</mi></mrow></mfrac><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">\\sum_{n=2}^{\\infty} \\log(\\frac{1}{n}) </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.845108em;\"></span><span class=\"strut bottom\" style=\"height:1.190108em;vertical-align:-0.345em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mop\"><span class=\"op-symbol small-op mop\" style=\"top:-0.0000050000000000050004em;\">\u2211</span><span class=\"vlist\"><span style=\"top:0.30001em;margin-left:0em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">\u200b</span></span><span class=\"reset-textstyle scriptstyle cramped\"><span class=\"mord scriptstyle cramped\"><span class=\"mord mathit\">n</span><span class=\"mrel\">=</span><span class=\"mord\">2</span></span></span></span><span style=\"top:-0.364em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">\u200b</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord scriptstyle uncramped\"><span class=\"mord\">\u221e</span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">\u200b</span></span>\u200b</span></span></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mopen\">(</span><span class=\"minner reset-textstyle textstyle uncramped\"><span class=\"mfrac\"><span class=\"vlist\"><span style=\"top:0.345em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">\u200b</span></span><span class=\"reset-textstyle scriptstyle cramped\"><span class=\"mord scriptstyle cramped\"><span class=\"mord mathit\">n</span></span></span></span><span style=\"top:-0.22999999999999998em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">\u200b</span></span><span class=\"reset-textstyle textstyle uncramped frac-line\"></span></span><span style=\"top:-0.394em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">\u200b</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord scriptstyle uncramped\"><span class=\"mord\">1</span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">\u200b</span></span>\u200b</span></span></span></span><span class=\"mclose\">)</span></span></span></span> (<a href=\"http://www.wolframalpha.com/input/?i=Sum%28log%281%2Fn%29%2C+%28n%2C+2%2C+oo%29%29\" rel=\"nofollow\" target=\"_blank\" class=\"link\">sum diverges</a>) while <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mo>\u220f</mo><mrow><mi>n</mi><mo>=</mo><mn>2</mn></mrow><mrow><mi mathvariant=\"normal\">\u221e</mi></mrow></msubsup><mfrac><mrow><mn>1</mn></mrow><mrow><mi>n</mi></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\prod_{n=2}^{\\infty} \\frac{1}{n}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.845108em;\"></span><span class=\"strut bottom\" style=\"height:1.190108em;vertical-align:-0.345em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mop\"><span class=\"op-symbol small-op mop\" style=\"top:-0.0000050000000000050004em;\">\u220f</span><span class=\"vlist\"><span style=\"top:0.30001em;margin-left:0em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">\u200b</span></span><span class=\"reset-textstyle scriptstyle cramped\"><span class=\"mord scriptstyle cramped\"><span class=\"mord mathit\">n</span><span class=\"mrel\">=</span><span class=\"mord\">2</span></span></span></span><span style=\"top:-0.364em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">\u200b</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord scriptstyle uncramped\"><span class=\"mord\">\u221e</span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">\u200b</span></span>\u200b</span></span></span><span class=\"minner reset-textstyle textstyle uncramped\"><span class=\"mfrac\"><span class=\"vlist\"><span style=\"top:0.345em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">\u200b</span></span><span class=\"reset-textstyle scriptstyle cramped\"><span class=\"mord scriptstyle cramped\"><span class=\"mord mathit\">n</span></span></span></span><span style=\"top:-0.22999999999999998em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">\u200b</span></span><span class=\"reset-textstyle textstyle uncramped frac-line\"></span></span><span style=\"top:-0.394em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">\u200b</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord scriptstyle uncramped\"><span class=\"mord\">1</span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">\u200b</span></span>\u200b</span></span></span></span></span></span></span> (<a href=\"http://www.wolframalpha.com/input/?i=Product%281%2Fn%2C+%28n%2C+1%2C+oo%29%29\" rel=\"nofollow\" target=\"_blank\" class=\"link\">produc converges</a>)",
  "id": "561a3f760376066b0f8c1140",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-10-11T10:52:38.053Z",
  "text": "Sorry, to interrupt, i have not read your two mentioned points. $$\\sum_{n=2}^{\\infty} \\log(\\frac{1}{n}) $$ ([sum diverges](http://www.wolframalpha.com/input/?i=Sum%28log%281%2Fn%29%2C+%28n%2C+2%2C+oo%29%29)) while $$\\prod_{n=2}^{\\infty} \\frac{1}{n}$$ ([produc converges](http://www.wolframalpha.com/input/?i=Product%281%2Fn%2C+%28n%2C+1%2C+oo%29%29))",
  "unread": false,
  "urls": [
   {
    "url": "http://www.wolframalpha.com/input/?i=Sum%28log%281%2Fn%29%2C+%28n%2C+2%2C+oo%29%29"
   },
   {
    "url": "http://www.wolframalpha.com/input/?i=Product%281%2Fn%2C+%28n%2C+1%2C+oo%29%29"
   }
  ],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/gxyd",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=60",
   "displayName": "Gaurav Dhingra",
   "gv": "4",
   "id": "53eb987c107e137846baa89d",
   "url": "/gxyd",
   "username": "gxyd",
   "v": 90
  },
  "html": "So i guess i should use <code>solveset</code> to check for values of <code>abs(sequence)</code> are all <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>&lt;</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\"> &lt; 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.64444em;\"></span><span class=\"strut bottom\" style=\"height:0.68354em;vertical-align:-0.0391em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mrel\">&lt;</span><span class=\"mord\">1</span></span></span></span> then return True.",
  "id": "561a436883b69fe7548d7673",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-10-11T11:09:28.964Z",
  "text": "So i guess i should use `solveset` to check for values of `abs(sequence)` are all $$ < 1$$ then return True.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/jksuom",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6929119?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6929119?v=4&s=60",
   "displayName": "Kalevi Suominen",
   "gv": "4",
   "id": "53204afa5e986b0712efdf3d",
   "url": "/jksuom",
   "username": "jksuom",
   "v": 20
  },
  "html": "The product <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>\u220f</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">\\prod 1/n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"base textstyle uncramped\"><span class=\"op-symbol small-op mop\" style=\"top:-0.0000050000000000050004em;\">\u220f</span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mord mathit\">n</span></span></span></span> is usually considered divergent.",
  "id": "561a498783b69fe7548d76f8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-10-11T11:35:35.947Z",
  "text": "The product $$\\prod 1/n$$ is usually considered divergent.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/jksuom",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6929119?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6929119?v=4&s=60",
   "displayName": "Kalevi Suominen",
   "gv": "4",
   "id": "53204afa5e986b0712efdf3d",
   "url": "/jksuom",
   "username": "jksuom",
   "v": 20
  },
  "html": "It is usually assumed that the terms are nonzero.",
  "id": "561a49bb6dc64436714ac356",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-10-11T11:36:27.306Z",
  "text": "It is usually assumed that the terms are nonzero.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/gxyd",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=60",
   "displayName": "Gaurav Dhingra",
   "gv": "4",
   "id": "53eb987c107e137846baa89d",
   "url": "/gxyd",
   "username": "gxyd",
   "v": 90
  },
  "html": "To be clear for definition of wikipedia: &quot;The product of positive real numbers <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mo>\u220f</mo><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow><mrow><mi mathvariant=\"normal\">\u221e</mi></mrow></msubsup><msub><mi>a</mi><mrow><mi>n</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\prod_{n=1}^{\\infty} a_{n}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1.0500099999999999em;vertical-align:-0.30001em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mop\"><span class=\"op-symbol small-op mop\" style=\"top:-0.0000050000000000050004em;\">\u220f</span><span class=\"vlist\"><span style=\"top:0.30001em;margin-left:0em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">\u200b</span></span><span class=\"reset-textstyle scriptstyle cramped\"><span class=\"mord scriptstyle cramped\"><span class=\"mord mathit\">n</span><span class=\"mrel\">=</span><span class=\"mord\">1</span></span></span></span><span style=\"top:-0.364em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">\u200b</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord scriptstyle uncramped\"><span class=\"mord\">\u221e</span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">\u200b</span></span>\u200b</span></span></span><span class=\"mord\"><span class=\"mord mathit\">a</span><span class=\"vlist\"><span style=\"top:0.15em;margin-right:0.05em;margin-left:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">\u200b</span></span><span class=\"reset-textstyle scriptstyle cramped\"><span class=\"mord scriptstyle cramped\"><span class=\"mord mathit\">n</span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">\u200b</span></span>\u200b</span></span></span></span></span></span> converges to a non-zero real number if and only if the sum <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mo>\u2211</mo><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow><mrow><mi mathvariant=\"normal\">\u221e</mi></mrow></msubsup><mi>log</mi><mrow><msub><mi>a</mi><mrow><mi>n</mi></mrow></msub></mrow></mrow><annotation encoding=\"application/x-tex\">\\sum_{n=1}^{\\infty} \\log{a_{n}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1.0500099999999999em;vertical-align:-0.30001em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mop\"><span class=\"op-symbol small-op mop\" style=\"top:-0.0000050000000000050004em;\">\u2211</span><span class=\"vlist\"><span style=\"top:0.30001em;margin-left:0em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">\u200b</span></span><span class=\"reset-textstyle scriptstyle cramped\"><span class=\"mord scriptstyle cramped\"><span class=\"mord mathit\">n</span><span class=\"mrel\">=</span><span class=\"mord\">1</span></span></span></span><span style=\"top:-0.364em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">\u200b</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord scriptstyle uncramped\"><span class=\"mord\">\u221e</span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">\u200b</span></span>\u200b</span></span></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mord textstyle uncramped\"><span class=\"mord\"><span class=\"mord mathit\">a</span><span class=\"vlist\"><span style=\"top:0.15em;margin-right:0.05em;margin-left:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">\u200b</span></span><span class=\"reset-textstyle scriptstyle cramped\"><span class=\"mord scriptstyle cramped\"><span class=\"mord mathit\">n</span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">\u200b</span></span>\u200b</span></span></span></span></span></span></span> converges.&quot;",
  "id": "561a4a8d4e0fa3e5544812ac",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-10-11T11:39:57.085Z",
  "text": "To be clear for definition of wikipedia: \"The product of positive real numbers $$\\prod_{n=1}^{\\infty} a_{n}$$ converges to a non-zero real number if and only if the sum $$\\sum_{n=1}^{\\infty} \\log{a_{n}}$$ converges.\"",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/jksuom",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6929119?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6929119?v=4&s=60",
   "displayName": "Kalevi Suominen",
   "gv": "4",
   "id": "53204afa5e986b0712efdf3d",
   "url": "/jksuom",
   "username": "jksuom",
   "v": 20
  },
  "html": "If any one of the terms is zero, all partial products are zero. That is not accepted as convergent. Moreover, the product should be convergent if and only if the product  of the inverses is convergent. (So <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>\u220f</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">\\prod n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"base textstyle uncramped\"><span class=\"op-symbol small-op mop\" style=\"top:-0.0000050000000000050004em;\">\u220f</span><span class=\"mord mathit\">n</span></span></span></span> is divergent.)",
  "id": "561a4a8e0376066b0f8c11fa",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-10-11T11:39:58.499Z",
  "text": "If any one of the terms is zero, all partial products are zero. That is not accepted as convergent. Moreover, the product should be convergent if and only if the product  of the inverses is convergent. (So $$\\prod n$$ is divergent.)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/jksuom",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6929119?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6929119?v=4&s=60",
   "displayName": "Kalevi Suominen",
   "gv": "4",
   "id": "53204afa5e986b0712efdf3d",
   "url": "/jksuom",
   "username": "jksuom",
   "v": 20
  },
  "html": "Yes, non-zero is the point.",
  "id": "561a4aa54e0fa3e5544812b0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-10-11T11:40:21.844Z",
  "text": "Yes, non-zero is the point.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/jksuom",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6929119?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6929119?v=4&s=60",
   "displayName": "Kalevi Suominen",
   "gv": "4",
   "id": "53204afa5e986b0712efdf3d",
   "url": "/jksuom",
   "username": "jksuom",
   "v": 20
  },
  "html": "Perhaps we could &#39;generalize&#39; the condition of convergence in such a way that a finite number of the terms could be zero. Then only the tail product would decide the convergence.",
  "id": "561a4b3d83b69fe7548d771a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-10-11T11:42:53.456Z",
  "text": "Perhaps we could 'generalize' the condition of convergence in such a way that a finite number of the terms could be zero. Then only the tail product would decide the convergence.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/jksuom",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6929119?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6929119?v=4&s=60",
   "displayName": "Kalevi Suominen",
   "gv": "4",
   "id": "53204afa5e986b0712efdf3d",
   "url": "/jksuom",
   "username": "jksuom",
   "v": 20
  },
  "html": "Hence, it might not be necessary to test <code>abs(term) &lt; 1</code>.",
  "id": "561a4b9899bbd76f0f30c54d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-10-11T11:44:24.870Z",
  "text": "Hence, it might not be necessary to test ``abs(term) < 1``.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/gxyd",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=60",
   "displayName": "Gaurav Dhingra",
   "gv": "4",
   "id": "53eb987c107e137846baa89d",
   "url": "/gxyd",
   "username": "gxyd",
   "v": 90
  },
  "html": "<blockquote>\n<p>Perhaps we could &#39;generalize&#39; the condition of convergence in such a way that a finite number of the terms could be zero. Then only the tail product would decide the convergence.</p></blockquote>\n<p>Yes, thanks for the explanation. It seems more clear now. I will do this point then.</p>",
  "id": "561a4bc883b69fe7548d7729",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-10-11T11:45:12.230Z",
  "text": "> Perhaps we could 'generalize' the condition of convergence in such a way that a finite number of the terms could be zero. Then only the tail product would decide the convergence.\n\nYes, thanks for the explanation. It seems more clear now. I will do this point then.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/gxyd",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=60",
   "displayName": "Gaurav Dhingra",
   "gv": "4",
   "id": "53eb987c107e137846baa89d",
   "url": "/gxyd",
   "username": "gxyd",
   "v": 90
  },
  "html": "<a href=\"https://cornellmath.wordpress.com/2008/01/26/convergence-of-infinite-products/\" rel=\"nofollow\" target=\"_blank\" class=\"link\">This article</a> also gives justification of your point.",
  "id": "561a51a66dc64436714ac3e5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-10-11T12:10:14.808Z",
  "text": "[This article](https://cornellmath.wordpress.com/2008/01/26/convergence-of-infinite-products/) also gives justification of your point.",
  "unread": false,
  "urls": [
   {
    "url": "https://cornellmath.wordpress.com/2008/01/26/convergence-of-infinite-products/"
   }
  ],
  "v": 1
 },
 {
  "editedAt": "2015-10-11T20:00:00.067Z",
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/gxyd",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=60",
   "displayName": "Gaurav Dhingra",
   "gv": "4",
   "id": "53eb987c107e137846baa89d",
   "url": "/gxyd",
   "username": "gxyd",
   "v": 90
  },
  "html": "",
  "id": "561abdcb1b0e279854bddbba",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-10-11T19:51:39.864Z",
  "text": "",
  "unread": false,
  "urls": [],
  "v": 3
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/gxyd",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=60",
   "displayName": "Gaurav Dhingra",
   "gv": "4",
   "id": "53eb987c107e137846baa89d",
   "url": "/gxyd",
   "username": "gxyd",
   "v": 90
  },
  "html": "<blockquote>\n<p>Perhaps we could &#39;generalize&#39; the condition of convergence in such a way that a finite number of the terms could be zero. Then only the tail product would decide the convergence.</p></blockquote>\n<p>Can you please give an example of this? I will be more clear.</p>",
  "id": "561ac3b86dc64436714ace7f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-10-11T20:16:56.813Z",
  "text": "> Perhaps we could 'generalize' the condition of convergence in such a way that a finite number of the terms could be zero. Then only the tail product would decide the convergence.\n\nCan you please give an example of this? I will be more clear.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/asmeurer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/71486?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/71486?v=4&s=60",
   "displayName": "Aaron Meurer",
   "gv": "4",
   "id": "529c69c1ed5ab0b3bf04d173",
   "url": "/asmeurer",
   "username": "asmeurer",
   "v": 29
  },
  "html": "checking products sounds tricky because we\u2019d need to be able to check that the terms are nonzero",
  "id": "561b07a599bbd76f0f30d6a7",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-10-12T01:06:45.309Z",
  "text": "checking products sounds tricky because we\u2019d need to be able to check that the terms are nonzero",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/asmeurer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/71486?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/71486?v=4&s=60",
   "displayName": "Aaron Meurer",
   "gv": "4",
   "id": "529c69c1ed5ab0b3bf04d173",
   "url": "/asmeurer",
   "username": "asmeurer",
   "v": 29
  },
  "html": "although perhaps this is just as hard as checking that the terms are not infinite, which is also a problem for sums ",
  "id": "561b07b41b0e279854bde31c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-10-12T01:07:00.620Z",
  "text": "although perhaps this is just as hard as checking that the terms are not infinite, which is also a problem for sums ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/jksuom",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6929119?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6929119?v=4&s=60",
   "displayName": "Kalevi Suominen",
   "gv": "4",
   "id": "53204afa5e986b0712efdf3d",
   "url": "/jksuom",
   "username": "jksuom",
   "v": 20
  },
  "html": "<p>I think we could divide the study of infinite sums and products in two parts.</p><p>One part is the question whether all terms are well defined, i.e., they are finite in a sum and also non-zero in a product. (Zero is the analogy of (minus) infinity in products as <code>exp(-oo) = 0</code>.)</p><p>The second part is the question of convergence after infinities, and zeros in products, have been omitted assuming that their number is finite. This means that we only consider the tail of the sum or product, starting from some point after which all terms are well defined.</p><p>This is essentially what the current <code>is_convergent</code> does. For example, in a sum of the form <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>\u2211</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>+</mo><mi>a</mi><mi>n</mi><mo>+</mo><mi>b</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">\\sum 1/(n^2 + an + b)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.8141079999999999em;\"></span><span class=\"strut bottom\" style=\"height:1.064118em;vertical-align:-0.25001em;\"></span><span class=\"base textstyle uncramped\"><span class=\"op-symbol small-op mop\" style=\"top:-0.0000050000000000050004em;\">\u2211</span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathit\">n</span><span class=\"vlist\"><span style=\"top:-0.363em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">\u200b</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord\">2</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">\u200b</span></span>\u200b</span></span></span><span class=\"mbin\">+</span><span class=\"mord mathit\">a</span><span class=\"mord mathit\">n</span><span class=\"mbin\">+</span><span class=\"mord mathit\">b</span><span class=\"mclose\">)</span></span></span></span>, where <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord mathit\">a</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord mathit\">b</span></span></span></span> are some constants, the routine will return <code>True</code> even if there may infinities in the term sequence (at most two).  (An analogous product would be <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>\u220f</mo><mi>exp</mi><mo>(</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>+</mo><mi>a</mi><mi>n</mi><mo>+</mo><mi>b</mi><mo>)</mo><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">\\prod \\exp(1/(n^2 + an + b))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.8141079999999999em;\"></span><span class=\"strut bottom\" style=\"height:1.064118em;vertical-align:-0.25001em;\"></span><span class=\"base textstyle uncramped\"><span class=\"op-symbol small-op mop\" style=\"top:-0.0000050000000000050004em;\">\u220f</span><span class=\"mop\">exp</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathit\">n</span><span class=\"vlist\"><span style=\"top:-0.363em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">\u200b</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord\">2</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">\u200b</span></span>\u200b</span></span></span><span class=\"mbin\">+</span><span class=\"mord mathit\">a</span><span class=\"mord mathit\">n</span><span class=\"mbin\">+</span><span class=\"mord mathit\">b</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span>.)</p><p>This is how I would like to interpret &quot;convergence&quot;; it should only be concerned with what happens at the limit.</p><p>Finding the bad terms is another, independent, matter. There could be a routine for that (finding the zeros of the denominator) but I think it need not be included in <code>is_convergent</code>. It could be the user&#39;s responsibility to see that the sum or product is well defined.</p>",
  "id": "561b6738a15f996e24c48e67",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-10-12T07:54:32.052Z",
  "text": "I think we could divide the study of infinite sums and products in two parts.\n\nOne part is the question whether all terms are well defined, i.e., they are finite in a sum and also non-zero in a product. (Zero is the analogy of (minus) infinity in products as ``exp(-oo) = 0``.)\n\nThe second part is the question of convergence after infinities, and zeros in products, have been omitted assuming that their number is finite. This means that we only consider the tail of the sum or product, starting from some point after which all terms are well defined.\n\nThis is essentially what the current ``is_convergent`` does. For example, in a sum of the form $$\\sum 1/(n^2 + an + b)$$, where $$a$$ and $$b$$ are some constants, the routine will return ``True`` even if there may infinities in the term sequence (at most two).  (An analogous product would be $$\\prod \\exp(1/(n^2 + an + b))$$.)\n\nThis is how I would like to interpret \"convergence\"; it should only be concerned with what happens at the limit.\n \nFinding the bad terms is another, independent, matter. There could be a routine for that (finding the zeros of the denominator) but I think it need not be included in ``is_convergent``. It could be the user's responsibility to see that the sum or product is well defined.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2015-10-12T12:20:07.708Z",
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/gxyd",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=60",
   "displayName": "Gaurav Dhingra",
   "gv": "4",
   "id": "53eb987c107e137846baa89d",
   "url": "/gxyd",
   "username": "gxyd",
   "v": 90
  },
  "html": "<blockquote>\n<p>Finding the bad terms is another, independent, matter. There could be a routine for that (finding the zeros of the denominator) but I think it need not be included in is_convergent. It could be the user&#39;s responsibility to see that the sum or product is well defined.</p></blockquote>\n<p>+1 for this point. Exactly what i have been thinking for the <code>is_convergent()</code>.</p>",
  "id": "561ba5274e0fa3e554483796",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-10-12T12:18:47.975Z",
  "text": "> Finding the bad terms is another, independent, matter. There could be a routine for that (finding the zeros of the denominator) but I think it need not be included in is_convergent. It could be the user's responsibility to see that the sum or product is well defined.\n\n+1 for this point. Exactly what i have been thinking for the `is_convergent()`.",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "editedAt": "2015-10-12T12:35:13.677Z",
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/gxyd",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=60",
   "displayName": "Gaurav Dhingra",
   "gv": "4",
   "id": "53eb987c107e137846baa89d",
   "url": "/gxyd",
   "username": "gxyd",
   "v": 90
  },
  "html": "One more point in favour of <span data-link-type=\"mention\" data-screen-name=\"jksuom\" class=\"mention\">@jksuom</span> &#39;s point is: Even the expression is changed(in summation) while we find the convergence, while the <code>index</code> from <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>1</mn><mi>t</mi><mi>o</mi><mi mathvariant=\"normal\">\u221e</mi></mrow><annotation encoding=\"application/x-tex\">1 to \\infty</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.64444em;\"></span><span class=\"strut bottom\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord\">1</span><span class=\"mord mathit\">t</span><span class=\"mord mathit\">o</span><span class=\"mord\">\u221e</span></span></span></span> remains the same. Hence the <code>singularities</code> of the expression are also changed. So including the <code>singularities</code> thing in it, would lead to some expressions being returned as <code>divergent</code> even if it is <code>convergent</code>, even if it contains no <code>singularities</code> in the original expression.",
  "id": "561ba88aa15f996e24c4988a",
  "issues": [],
  "mentions": [
   {
    "screenName": "jksuom",
    "userId": "53204afa5e986b0712efdf3d",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 2,
  "sent": "2015-10-12T12:33:14.075Z",
  "text": "One more point in favour of @jksuom 's point is: Even the expression is changed(in summation) while we find the convergence, while the `index` from $$1 to \\infty$$ remains the same. Hence the `singularities` of the expression are also changed. So including the `singularities` thing in it, would lead to some expressions being returned as `divergent` even if it is `convergent`, even if it contains no `singularities` in the original expression.",
  "unread": false,
  "urls": [],
  "v": 5
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/gxyd",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=60",
   "displayName": "Gaurav Dhingra",
   "gv": "4",
   "id": "53eb987c107e137846baa89d",
   "url": "/gxyd",
   "username": "gxyd",
   "v": 90
  },
  "html": "As far as i understood <span data-link-type=\"mention\" data-screen-name=\"jksuom\" class=\"mention\">@jksuom</span> &#39;s point. I  think the PR looks complete to me. Any thoughts?",
  "id": "561ba94783b69fe7548d9beb",
  "issues": [],
  "mentions": [
   {
    "screenName": "jksuom",
    "userId": "53204afa5e986b0712efdf3d",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 2,
  "sent": "2015-10-12T12:36:23.034Z",
  "text": "As far as i understood @jksuom 's point. I  think the PR looks complete to me. Any thoughts?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/asmeurer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/71486?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/71486?v=4&s=60",
   "displayName": "Aaron Meurer",
   "gv": "4",
   "id": "529c69c1ed5ab0b3bf04d173",
   "url": "/asmeurer",
   "username": "asmeurer",
   "v": 29
  },
  "html": "I would at least mention these caveats in the docstring ",
  "id": "561c0fee99bbd76f0f30fe34",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-10-12T19:54:22.878Z",
  "text": "I would at least mention these caveats in the docstring ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2015-10-13T05:22:09.811Z",
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/gxyd",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/7712241?v=4&s=60",
   "displayName": "Gaurav Dhingra",
   "gv": "4",
   "id": "53eb987c107e137846baa89d",
   "url": "/gxyd",
   "username": "gxyd",
   "v": 90
  },
  "html": "I have updated the docstring. Putting the text-mentioned by jksuom in his comment , in the docstring.",
  "id": "561c9421773bc4af20ff1f25",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2015-10-13T05:18:25.290Z",
  "text": "I have updated the docstring. Putting the text-mentioned by jksuom in his comment , in the docstring.",
  "unread": false,
  "urls": [],
  "v": 2
 }
]