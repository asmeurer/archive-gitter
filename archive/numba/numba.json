[
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/cowlicks",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/598099?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/598099?v=3&s=60",
   "displayName": "Blake Griffith",
   "gv": "3",
   "id": "54bd832bdb8155e6700ed70c",
   "url": "/cowlicks",
   "username": "cowlicks",
   "v": 1
  },
  "html": "I&#39;m installing numba&#39;s master branch, and everything looks okay during the install. But <code>./runtest.py</code> gives me an <code>ImportError: cannot import name _typeconv</code>",
  "id": "54fb72f763f73cf44ba972ed",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2015-03-07T21:51:51.007Z",
  "text": "I'm installing numba's master branch, and everything looks okay during the install. But `./runtest.py` gives me an `ImportError: cannot import name _typeconv`",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/cowlicks",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/598099?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/598099?v=3&s=60",
   "displayName": "Blake Griffith",
   "gv": "3",
   "id": "54bd832bdb8155e6700ed70c",
   "url": "/cowlicks",
   "username": "cowlicks",
   "v": 1
  },
  "html": "I&#39;m still trying to set up a numba development environment. But things are failing. A lot of <code>&#39;Module&#39; has no attribute &#39;get_global&#39;</code> errors. If you can help, there is a SO question here: <a href=\"https://stackoverflow.com/questions/28955229/numba-in-conda-environment-failing-tests\" rel=\"nofollow\" target=\"_blank\" class=\"link\">https://stackoverflow.com/questions/28955229/numba-in-conda-environment-failing-tests</a>",
  "id": "54fe62dc846ca2ce6e20b84e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 4,
  "sent": "2015-03-10T03:19:56.083Z",
  "text": "I'm still trying to set up a numba development environment. But things are failing. A lot of `'Module' has no attribute 'get_global'` errors. If you can help, there is a SO question here: https://stackoverflow.com/questions/28955229/numba-in-conda-environment-failing-tests",
  "unread": false,
  "urls": [
   {
    "url": "https://stackoverflow.com/questions/28955229/numba-in-conda-environment-failing-tests"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/shoyer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1217238?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1217238?v=4&s=60",
   "displayName": "Stephan Hoyer",
   "gv": "4",
   "id": "542ddae7163965c9bc20840d",
   "url": "/shoyer",
   "username": "shoyer",
   "v": 7
  },
  "html": "My multi-dimensional iteration benchmarks: <a href=\"https://gist.github.com/shoyer/783be14a609aa36ed87b\" rel=\"nofollow\" target=\"_blank\" class=\"link\">https://gist.github.com/shoyer/783be14a609aa36ed87b</a>",
  "id": "55a17b6afa65c09113f6f636",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2015-07-11T20:24:10.051Z",
  "text": "My multi-dimensional iteration benchmarks: https://gist.github.com/shoyer/783be14a609aa36ed87b",
  "unread": false,
  "urls": [
   {
    "url": "https://gist.github.com/shoyer/783be14a609aa36ed87b"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/cowlicks",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/598099?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/598099?v=3&s=60",
   "displayName": "Blake Griffith",
   "gv": "3",
   "id": "54bd832bdb8155e6700ed70c",
   "url": "/cowlicks",
   "username": "cowlicks",
   "v": 1
  },
  "html": "<a href=\"https://www.youtube.com/watch?v=ZyvXV_0s_xo\" rel=\"nofollow\" target=\"_blank\" class=\"link\">https://www.youtube.com/watch?v=ZyvXV_0s_xo</a>",
  "id": "55a17c50a34a69dd0994ad62",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2015-07-11T20:28:00.009Z",
  "text": "https://www.youtube.com/watch?v=ZyvXV_0s_xo",
  "unread": false,
  "urls": [
   {
    "url": "https://www.youtube.com/watch?v=ZyvXV_0s_xo"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "Didn&#39;t realize some other people had already found this.  :)",
  "id": "55c397a65dab14832485c11f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 7,
  "sent": "2015-08-06T17:21:42.643Z",
  "text": "Didn't realize some other people had already found this.  :)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "For the record, the PR for list support is functionally ready: <span data-link-type=\"issue\" data-issue=\"1343\" data-issue-repo=\"numba/numba\" class=\"issue\">numba/numba#1343</span>",
  "id": "55c8e21f0c29567545d98db7",
  "issues": [
   {
    "number": "1343",
    "repo": "numba/numba"
   }
  ],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2015-08-10T17:40:47.433Z",
  "text": "For the record, the PR for list support is functionally ready: https://github.com/numba/numba/pull/1343",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "Nice!",
  "id": "55c8e51b21801cd866ca9200",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2015-08-10T17:53:31.586Z",
  "text": "Nice!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "Someone really needs to pay gitter to offer a better view of the activity feed, or pressure flowdock to offer free public channels...",
  "id": "55c904c27f578b465ff4952b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2015-08-10T20:08:34.201Z",
  "text": "Someone really needs to pay gitter to offer a better view of the activity feed, or pressure flowdock to offer free public channels...",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "&quot;pitrou commented <span data-link-type=\"issue\" data-issue=\"1343\" class=\"issue\">#1343</span>&quot; borders on the useless",
  "id": "55c904db8f067d637598cd67",
  "issues": [
   {
    "number": "1343"
   }
  ],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2015-08-10T20:08:59.751Z",
  "text": "\"pitrou commented #1343\" borders on the useless",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "And what\u2019s up with all the synchronize messages?  Is that each time you push to your feature branch?",
  "id": "55c906da8f067d637598cdc4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2015-08-10T20:17:30.047Z",
  "text": "And what\u2019s up with all the synchronize messages?  Is that each time you push to your feature branch?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "(also see <a href=\"https://gitter.zendesk.com/hc/en-us/articles/203904511-Gitter-Next\" rel=\"nofollow\" target=\"_blank\" class=\"link\">https://gitter.zendesk.com/hc/en-us/articles/203904511-Gitter-Next</a>)",
  "id": "55c906eaaec35d2d5ea6eeb8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2015-08-10T20:17:46.376Z",
  "text": "(also see https://gitter.zendesk.com/hc/en-us/articles/203904511-Gitter-Next)",
  "unread": false,
  "urls": [
   {
    "url": "https://gitter.zendesk.com/hc/en-us/articles/203904511-Gitter-Next"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"seibert\" class=\"mention\">@seibert</span> yes, I think so",
  "id": "55c906f2aec35d2d5ea6eeb9",
  "issues": [],
  "mentions": [
   {
    "screenName": "seibert",
    "userId": "55b68af40fc9f982beab2a3c",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 5,
  "sent": "2015-08-10T20:17:54.981Z",
  "text": "@seibert yes, I think so",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "but yeah, the usage of screen real-estate in this UI is not great",
  "id": "55c906f60c29567545d99425",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2015-08-10T20:17:58.243Z",
  "text": "but yeah, the usage of screen real-estate in this UI is not great",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": ":point_up: <a href=\"https://gitter.im/numba/numba?at=55c906eaaec35d2d5ea6eeb8\" rel=\"nofollow\" target=\"_blank\" class=\"link\">10 ao\u00fbt 2015 22:17</a>  hmm",
  "id": "55c9078649c42ff302df3bca",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2015-08-10T20:20:22.624Z",
  "text": ":point_up: [10 ao\u00fbt 2015 22:17](https://gitter.im/numba/numba?at=55c906eaaec35d2d5ea6eeb8)  hmm",
  "unread": false,
  "urls": [
   {
    "url": "https://gitter.im/numba/numba?at=55c906eaaec35d2d5ea6eeb8"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"pitrou\" class=\"mention\">@pitrou</span> testing Travis integration",
  "id": "55c9094baec35d2d5ea6eecd",
  "issues": [],
  "mentions": [
   {
    "screenName": "pitrou",
    "userId": "54935c59db8155e6700e0da8",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 5,
  "sent": "2015-08-10T20:27:55.245Z",
  "status": true,
  "text": "@pitrou testing Travis integration",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "<span data-link-type=\"issue\" data-issue=\"741\" data-issue-repo=\"gitterHQ/gitter\" class=\"issue\">gitterHQ/gitter#741</span>",
  "id": "55c90b3140548a7b79c84f32",
  "issues": [
   {
    "number": "741",
    "repo": "gitterHQ/gitter"
   }
  ],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2015-08-10T20:36:01.764Z",
  "text": "https://github.com/gitterHQ/gitter/issues/741",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "Sounds pretty familiar.  :)",
  "id": "55c90b52aac97ada66dd6015",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2015-08-10T20:36:34.291Z",
  "text": "Sounds pretty familiar.  :)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "yeah... apparently Flowdock don&#39;t understand that public chat rooms are important for some customers",
  "id": "55c90c8f40548a7b79c84f39",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2015-08-10T20:41:51.850Z",
  "text": "yeah... apparently Flowdock don't understand that public chat rooms are important for some customers",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "it seems Gitter has private rooms too...",
  "id": "55c90cd8aec35d2d5ea6eee6",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2015-08-10T20:43:04.280Z",
  "text": "it seems Gitter has private rooms too...",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "List support ready for review: <span data-link-type=\"issue\" data-issue=\"1343\" data-issue-repo=\"numba/numba\" class=\"issue\">numba/numba#1343</span>",
  "id": "55c9de1379d953d81bd0ed85",
  "issues": [
   {
    "number": "1343",
    "repo": "numba/numba"
   }
  ],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2015-08-11T11:35:47.963Z",
  "text": "List support ready for review: https://github.com/numba/numba/pull/1343",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "hmm, so what happened to <a href=\"http://numba.pydata.org/numba-doc/dev/index.html\" rel=\"nofollow\" target=\"_blank\" class=\"link\">http://numba.pydata.org/numba-doc/dev/index.html</a> ?",
  "id": "55c9f09fcb5fbefa63af582f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2015-08-11T12:54:55.106Z",
  "text": "hmm, so what happened to http://numba.pydata.org/numba-doc/dev/index.html ?",
  "unread": false,
  "urls": [
   {
    "url": "http://numba.pydata.org/numba-doc/dev/index.html"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "argh, nvidia1 keeps going down for some reason",
  "id": "55c9f51221801cd866cab226",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2015-08-11T13:13:54.898Z",
  "text": "argh, nvidia1 keeps going down for some reason",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "I suspect that the BIOS is misconfigured such that it doesn\u2019t boot back up if there is a power outage",
  "id": "55c9f52621801cd866cab228",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2015-08-11T13:14:14.504Z",
  "text": "I suspect that the BIOS is misconfigured such that it doesn\u2019t boot back up if there is a power outage",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "Siu will have to go kick the computer.  I can\u2019t seem to access it over the VPN.",
  "id": "55c9f5daaac97ada66dd78a4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2015-08-11T13:17:14.926Z",
  "text": "Siu will have to go kick the computer.  I can\u2019t seem to access it over the VPN.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "looking at code generated for list (<span data-link-type=\"issue\" data-issue=\"1343\" class=\"issue\">#1343</span>)... this is the first time I see %.262 = tail call { i64, i1 } <span data-link-type=\"mention\" data-screen-name=\"llvm\" class=\"mention\">@llvm</span>.smul.with.overflow.i64(i64 %.261, i64 8) generated by llvm",
  "id": "55ca17c10c29567545d9b32c",
  "issues": [
   {
    "number": "1343"
   }
  ],
  "mentions": [
   {
    "screenName": "llvm",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 6,
  "sent": "2015-08-11T15:41:53.815Z",
  "text": "looking at code generated for list (#1343)... this is the first time I see %.262 = tail call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %.261, i64 8) generated by llvm",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2015-08-11T15:42:58.473Z",
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "I think I see SIMD vectorized instructions on a simple list sum-reduction loop",
  "id": "55ca17fb21801cd866cab88d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2015-08-11T15:42:51.102Z",
  "text": "I think I see SIMD vectorized instructions on a simple list sum-reduction loop",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "Neat!",
  "id": "55ca18048f067d637598ec9f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 7,
  "sent": "2015-08-11T15:43:00.141Z",
  "text": "Neat!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "I\u2019m excited for SIMD-able Python lists.  :)",
  "id": "55ca181b8f067d637598eca3",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 7,
  "sent": "2015-08-11T15:43:23.989Z",
  "text": "I\u2019m excited for SIMD-able Python lists.  :)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "Certainly an important use case",
  "id": "55ca1830dfc7e8fa09e7bd00",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 7,
  "sent": "2015-08-11T15:43:44.795Z",
  "text": "Certainly an important use case",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"sklam\" class=\"mention\">@sklam</span> smul_with_overflow is part of the code generated for lists",
  "id": "55ca185508a1766a5c41ffde",
  "issues": [],
  "mentions": [
   {
    "screenName": "sklam",
    "userId": "55b689f50fc9f982beab2a24",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 7,
  "sent": "2015-08-11T15:44:21.958Z",
  "text": "@sklam smul_with_overflow is part of the code generated for lists",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "oh",
  "id": "55ca185a7f578b465ff4b40b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 7,
  "sent": "2015-08-11T15:44:26.562Z",
  "text": "oh",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "to detect MemoryErrors",
  "id": "55ca185a08a1766a5c41ffe0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 7,
  "sent": "2015-08-11T15:44:26.825Z",
  "text": "to detect MemoryErrors",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "it has dedicated llvmlite support now",
  "id": "55ca186508a1766a5c41ffe1",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 7,
  "sent": "2015-08-11T15:44:37.362Z",
  "text": "it has dedicated llvmlite support now",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "I wonder how efficient the generated asm is",
  "id": "55ca187b08a1766a5c41ffe3",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 7,
  "sent": "2015-08-11T15:44:59.389Z",
  "text": "I wonder how efficient the generated asm is",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "(but it&#39;s not really important, it&#39;s only on (re)allocations)",
  "id": "55ca188bdfc7e8fa09e7bd02",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 7,
  "sent": "2015-08-11T15:45:15.598Z",
  "text": "(but it's not really important, it's only on (re)allocations)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "What is the reallocation strategy when appending?  Does it do the STL vector thing of allocating more memory than is needed in order to support future appends?",
  "id": "55ca18b77f578b465ff4b421",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 7,
  "sent": "2015-08-11T15:45:59.987Z",
  "text": "What is the reallocation strategy when appending?  Does it do the STL vector thing of allocating more memory than is needed in order to support future appends?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "Yes, it&#39;s over-allocating",
  "id": "55ca18c02678f3406df1ed0e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 7,
  "sent": "2015-08-11T15:46:08.031Z",
  "text": "Yes, it's over-allocating",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "You can see the resize logic here: <a href=\"https://github.com/numba/numba/pull/1343/files#diff-ac73c9a47b52043778b4ca7091aac54cR249\" rel=\"nofollow\" target=\"_blank\" class=\"link\">https://github.com/numba/numba/pull/1343/files#diff-ac73c9a47b52043778b4ca7091aac54cR249</a>",
  "id": "55ca18f2dfc7e8fa09e7bd09",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 7,
  "sent": "2015-08-11T15:46:58.244Z",
  "text": "You can see the resize logic here: https://github.com/numba/numba/pull/1343/files#diff-ac73c9a47b52043778b4ca7091aac54cR249",
  "unread": false,
  "urls": [
   {
    "url": "https://github.com/numba/numba/pull/1343/files#diff-ac73c9a47b52043778b4ca7091aac54cR249"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "this looks like the related asm:<pre><code>        movq    <span class=\"variable\">%r15</span>, <span class=\"variable\">%rax</span>\n    sarq    <span class=\"variable\">$2</span>, <span class=\"variable\">%rax</span>\n    leaq    <span class=\"number\">9</span>(<span class=\"variable\">%rbp</span>,<span class=\"variable\">%rax</span>), <span class=\"variable\">%r14</span>\n    imulq    <span class=\"variable\">$8</span>, <span class=\"variable\">%r14</span>, <span class=\"variable\">%rsi</span>\n    addq    <span class=\"variable\">$2</span>4, <span class=\"variable\">%rsi</span>\n    seto    <span class=\"variable\">%al</span>\n    imulq    <span class=\"variable\">$8</span>, <span class=\"variable\">%r14</span>, <span class=\"variable\">%rcx</span>\n    jo    LBB0_23\n    testb    <span class=\"variable\">%al</span>, <span class=\"variable\">%al</span>\n    jne    LBB0_23\n    movq    <span class=\"variable\">%r12</span>, <span class=\"variable\">%rdi</span>\n    movabsq    <span class=\"variable\">$_NRT_MemInfo_varsize_realloc</span>, <span class=\"variable\">%rax</span></code></pre>",
  "id": "55ca19278f067d637598ecd8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 7,
  "sent": "2015-08-11T15:47:51.275Z",
  "text": "this looks like the related asm:\n```asm\n        movq\t%r15, %rax\n\tsarq\t$2, %rax\n\tleaq\t9(%rbp,%rax), %r14\n\timulq\t$8, %r14, %rsi\n\taddq\t$24, %rsi\n\tseto\t%al\n\timulq\t$8, %r14, %rcx\n\tjo\tLBB0_23\n\ttestb\t%al, %al\n\tjne\tLBB0_23\n\tmovq\t%r12, %rdi\n\tmovabsq\t$_NRT_MemInfo_varsize_realloc, %rax\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "looks good",
  "id": "55ca1949dfc7e8fa09e7bd0c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 7,
  "sent": "2015-08-11T15:48:25.696Z",
  "text": "looks good",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "oh, it does the imulq twice? strange",
  "id": "55ca196d08a1766a5c41ffee",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 7,
  "sent": "2015-08-11T15:49:01.178Z",
  "text": "oh, it does the imulq twice? strange",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "(the 24 bytes are the list payload header, by the way)",
  "id": "55ca19c408a1766a5c41fff4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 7,
  "sent": "2015-08-11T15:50:28.285Z",
  "text": "(the 24 bytes are the list payload header, by the way)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "the 2nd imulq is just for the overflow flag?!",
  "id": "55ca1a078f067d637598ed07",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 7,
  "sent": "2015-08-11T15:51:35.714Z",
  "text": "the 2nd imulq is just for the overflow flag?!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "I guess so",
  "id": "55ca1a0d08a1766a5c41fff9",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 7,
  "sent": "2015-08-11T15:51:41.924Z",
  "text": "I guess so",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "given the addq isn&#39;t duplicated, I find it a bit weird...",
  "id": "55ca1a272678f3406df1ed20",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 7,
  "sent": "2015-08-11T15:52:07.994Z",
  "text": "given the addq isn't duplicated, I find it a bit weird...",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "*args where args is list is not supported ,right?",
  "id": "55ca1ac62ee3da6275c38fc4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 7,
  "sent": "2015-08-11T15:54:46.577Z",
  "text": "*args where args is list is not supported ,right?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "right",
  "id": "55ca1ad308a1766a5c420003",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 7,
  "sent": "2015-08-11T15:54:59.096Z",
  "text": "right",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "can you add a note about that in the docs?",
  "id": "55ca1b042ee3da6275c38fce",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 7,
  "sent": "2015-08-11T15:55:48.468Z",
  "text": "can you add a note about that in the docs?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "I feel like it is something user will try right away",
  "id": "55ca1b112ee3da6275c38fd2",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 7,
  "sent": "2015-08-11T15:56:01.581Z",
  "text": "I feel like it is something user will try right away",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "done",
  "id": "55ca1b6ddfc7e8fa09e7bd23",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 7,
  "sent": "2015-08-11T15:57:33.542Z",
  "text": "done",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "oh, Ctrl+F runs the gitter search",
  "id": "55ca77c19f53726128d61a54",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 8,
  "sent": "2015-08-11T22:31:29.307Z",
  "text": "oh, Ctrl+F runs the gitter search",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"sklam\" class=\"mention\">@sklam</span> I think we forgot to bump the llvmlite version when removing get_pointer_to_global()",
  "id": "55cb6a3a8ebfe94b53b9562e",
  "issues": [],
  "mentions": [
   {
    "screenName": "sklam",
    "userId": "55b689f50fc9f982beab2a24",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 8,
  "sent": "2015-08-12T15:46:02.513Z",
  "text": "@sklam I think we forgot to bump the llvmlite version when removing get_pointer_to_global()",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "so the conda packages are still called &quot;llvmlite-0.6.0-something&quot;",
  "id": "55cb6a4f8ebfe94b53b95630",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 8,
  "sent": "2015-08-12T15:46:23.457Z",
  "text": "so the conda packages are still called \"llvmlite-0.6.0-something\"",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "oops",
  "id": "55cb6a5e8f067d63759916ef",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 8,
  "sent": "2015-08-12T15:46:38.783Z",
  "text": "oops",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "OTOH, it&#39;s only in the Numba channel",
  "id": "55cb6a76b6e91d7a5db9833f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 8,
  "sent": "2015-08-12T15:47:02.166Z",
  "text": "OTOH, it's only in the Numba channel",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "yeah, we can fix it now",
  "id": "55cb6a838f067d63759916f5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 8,
  "sent": "2015-08-12T15:47:15.417Z",
  "text": "yeah, we can fix it now",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "bump to 0.7?",
  "id": "55cb6ad37f578b465ff4ddec",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 8,
  "sent": "2015-08-12T15:48:35.041Z",
  "text": "bump to 0.7?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "seems reasonable since there is an API deprecation",
  "id": "55cb6ae68f067d6375991703",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 8,
  "sent": "2015-08-12T15:48:54.454Z",
  "text": "seems reasonable since there is an API deprecation",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2015-08-12T15:51:00.306Z",
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "in the conda recipe files, specifically (but elsewhere too)",
  "id": "55cb6b4fb6e91d7a5db98343",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 8,
  "sent": "2015-08-12T15:50:39.065Z",
  "text": "in the conda recipe files, specifically (but elsewhere too)",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "not tag it immediately, of course :)",
  "id": "55cb6b58edfb270821f6de24",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 8,
  "sent": "2015-08-12T15:50:48.365Z",
  "text": "not tag it immediately, of course :)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "actually... since the conda recipes use GIT_DESCRIBE_TAG, we must tag",
  "id": "55cb6b848ebfe94b53b9563b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 8,
  "sent": "2015-08-12T15:51:32.387Z",
  "text": "actually... since the conda recipes use GIT_DESCRIBE_TAG, we must tag",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "previously I used <code>v0.6.0.dev</code> which worked fine, so <code>v0.7.0.dev</code> should be ok",
  "id": "55cb6b98edfb270821f6de25",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 8,
  "sent": "2015-08-12T15:51:52.881Z",
  "text": "previously I used `v0.6.0.dev` which worked fine, so `v0.7.0.dev` should be ok",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "can we need to do is to tag it, right?",
  "id": "55cb6c450c29567545d9dd2c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 8,
  "sent": "2015-08-12T15:54:45.429Z",
  "text": "can we need to do is to tag it, right?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "I think so",
  "id": "55cb6c4fb6e91d7a5db9834e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 8,
  "sent": "2015-08-12T15:54:55.573Z",
  "text": "I think so",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "I am doing it now",
  "id": "55cb6c552ee3da6275c3baad",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 8,
  "sent": "2015-08-12T15:55:01.667Z",
  "text": "I am doing it now",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "done",
  "id": "55cb6cc98f067d6375991755",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 8,
  "sent": "2015-08-12T15:56:57.393Z",
  "text": "done",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "There&#39;s really some horrible magic in ctypes&#39; c_char_p",
  "id": "55cb98d64b02333e35ed9d00",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 7,
  "sent": "2015-08-12T19:04:54.775Z",
  "text": "There's really some horrible magic in ctypes' c_char_p",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "I had crashes which were fixed as soon as I changed it to c_void_p...",
  "id": "55cb98f54b02333e35ed9d01",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 7,
  "sent": "2015-08-12T19:05:25.831Z",
  "text": "I had crashes which were fixed as soon as I changed it to c_void_p...",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"seibert\" class=\"mention\">@seibert</span> I&#39;ll take a look tomorrow",
  "id": "55cbc5ace6577d752e54ed0c",
  "issues": [],
  "mentions": [
   {
    "screenName": "seibert",
    "userId": "55b68af40fc9f982beab2a3c",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 7,
  "sent": "2015-08-12T22:16:12.810Z",
  "text": "@seibert I'll take a look tomorrow",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "OK, thanks!",
  "id": "55cbc5e3204de35b422fd15b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 7,
  "sent": "2015-08-12T22:17:07.327Z",
  "text": "OK, thanks!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "OK, quite the chain of PRs to review now.  :)",
  "id": "55cca9ed204de35b422fe9c5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2015-08-13T14:30:05.114Z",
  "text": "OK, quite the chain of PRs to review now.  :)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "About the activity indicator: <a href=\"https://gitter.im/numba/numba\" rel=\"nofollow\" target=\"_blank\" class=\"link\">https://gitter.im/numba/numba</a>",
  "id": "55cdb4f57bfebd8b07b43d9d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2015-08-14T09:29:25.336Z",
  "text": "About the activity indicator: https://gitter.im/numba/numba",
  "unread": false,
  "urls": [
   {
    "url": "https://gitter.im/numba/numba"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "oops",
  "id": "55cdb4fda6112a0916e4af59",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2015-08-14T09:29:33.866Z",
  "text": "oops",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "<span data-link-type=\"issue\" data-issue=\"256\" data-issue-repo=\"gitterHQ/gitter\" class=\"issue\">gitterHQ/gitter#256</span>",
  "id": "55cdb5057bfebd8b07b43d9e",
  "issues": [
   {
    "number": "256",
    "repo": "gitterHQ/gitter"
   }
  ],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2015-08-14T09:29:41.127Z",
  "text": "https://github.com/gitterHQ/gitter/issues/256",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/gmarkall",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/535640?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/535640?v=3&s=60",
   "displayName": "Graham Markall",
   "gv": "3",
   "id": "55b342020fc9f982beaaedf1",
   "url": "/gmarkall",
   "username": "gmarkall",
   "v": 6
  },
  "html": "even though i was here, i just noticed my blob was orange",
  "id": "55cdb5a235e3e09b3adaad56",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2015-08-14T09:32:18.699Z",
  "text": "even though i was here, i just noticed my blob was orange",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/gmarkall",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/535640?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/535640?v=3&s=60",
   "displayName": "Graham Markall",
   "gv": "3",
   "id": "55b342020fc9f982beaaedf1",
   "url": "/gmarkall",
   "username": "gmarkall",
   "v": 6
  },
  "html": "(its green now)",
  "id": "55cdb5b0057d8c9d3a6d5103",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2015-08-14T09:32:32.681Z",
  "text": "(its green now)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/gmarkall",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/535640?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/535640?v=3&s=60",
   "displayName": "Graham Markall",
   "gv": "3",
   "id": "55b342020fc9f982beaaedf1",
   "url": "/gmarkall",
   "username": "gmarkall",
   "v": 6
  },
  "html": "oh, i see, it&#39;s &quot;not active&quot;",
  "id": "55cdb5c335e3e09b3adaad5d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2015-08-14T09:32:51.427Z",
  "text": "oh, i see, it's \"not active\"",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"gmarkall\" class=\"mention\">@gmarkall</span> do you know why this would happen? <a href=\"https://anaconda.org/antoine/numba/builds/120/3#L664\" rel=\"nofollow\" target=\"_blank\" class=\"link\">https://anaconda.org/antoine/numba/builds/120/3#L664</a>",
  "id": "55d2f0ce871d6aec0268708a",
  "issues": [],
  "mentions": [
   {
    "screenName": "gmarkall",
    "userId": "55b342020fc9f982beaaedf1",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 6,
  "sent": "2015-08-18T08:46:06.864Z",
  "text": "@gmarkall do you know why this would happen? https://anaconda.org/antoine/numba/builds/120/3#L664",
  "unread": false,
  "urls": [
   {
    "url": "https://anaconda.org/antoine/numba/builds/120/3#L664"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/gmarkall",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/535640?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/535640?v=3&s=60",
   "displayName": "Graham Markall",
   "gv": "3",
   "id": "55b342020fc9f982beaaedf1",
   "url": "/gmarkall",
   "username": "gmarkall",
   "v": 6
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"pitrou\" class=\"mention\">@pitrou</span> is the cuda simulator enabled there?",
  "id": "55d301813d8917890c1688ec",
  "issues": [],
  "mentions": [
   {
    "screenName": "pitrou",
    "userId": "54935c59db8155e6700e0da8",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 6,
  "sent": "2015-08-18T09:57:21.221Z",
  "text": "@pitrou is the cuda simulator enabled there?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/gmarkall",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/535640?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/535640?v=3&s=60",
   "displayName": "Graham Markall",
   "gv": "3",
   "id": "55b342020fc9f982beaaedf1",
   "url": "/gmarkall",
   "username": "gmarkall",
   "v": 6
  },
  "html": "oh yes, i see at the top",
  "id": "55d3018f9b45e15c4264b515",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2015-08-18T09:57:35.812Z",
  "text": "oh yes, i see at the top",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/gmarkall",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/535640?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/535640?v=3&s=60",
   "displayName": "Graham Markall",
   "gv": "3",
   "id": "55b342020fc9f982beaaedf1",
   "url": "/gmarkall",
   "username": "gmarkall",
   "v": 6
  },
  "html": "quite possibly because the simulator doesn&#39;t have that object, and I/we never tried building the docs with the simulator enabled before",
  "id": "55d301af9b45e15c4264b51b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2015-08-18T09:58:07.109Z",
  "text": "quite possibly because the simulator doesn't have that object, and I/we never tried building the docs with the simulator enabled before",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/gmarkall",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/535640?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/535640?v=3&s=60",
   "displayName": "Graham Markall",
   "gv": "3",
   "id": "55b342020fc9f982beaaedf1",
   "url": "/gmarkall",
   "username": "gmarkall",
   "v": 6
  },
  "html": "Is it possible to not have the simulator enabled when building the docs? Otherwise all the stuff from the simulator instead of the actual CUDA backend will end up in the docs",
  "id": "55d301e9255950880cfc0303",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2015-08-18T09:59:05.286Z",
  "text": "Is it possible to not have the simulator enabled when building the docs? Otherwise all the stuff from the simulator instead of the actual CUDA backend will end up in the docs",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "Hmm, that&#39;s why I don&#39;t like the autodoc things :)",
  "id": "55d308c01aa6941907e366a8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 7,
  "sent": "2015-08-18T10:28:16.660Z",
  "text": "Hmm, that's why I don't like the autodoc things :)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "Don&#39;t know if it&#39;s possible, I have to set the environment variable somewhere...",
  "id": "55d308e2871d6aec02687130",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 7,
  "sent": "2015-08-18T10:28:50.639Z",
  "text": "Don't know if it's possible, I have to set the environment variable somewhere...",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "Oddity of the day:<pre><code>&gt;&gt;&gt; np.<span class=\"function\"><span class=\"title\">intp</span><span class=\"params\">(<span class=\"number\">1</span>)</span></span> &lt;&lt; <span class=\"number\">64</span>\n<span class=\"number\">1</span></code></pre>",
  "id": "55d3090158c32047284a099f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 7,
  "sent": "2015-08-18T10:29:21.966Z",
  "text": "Oddity of the day:\n```\n>>> np.intp(1) << 64\n1\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "Another one:<pre><code>&gt;&gt;&gt; np.intp(<span class=\"number\">10</span>) ** np.intp(-<span class=\"number\">127</span>)\n<span class=\"string\">__main__:</span><span class=\"number\">1</span>: <span class=\"string\">RuntimeWarning:</span> divide by zero encountered <span class=\"keyword\">in</span> long_scalars\n<span class=\"string\">__main__:</span><span class=\"number\">1</span>: <span class=\"string\">RuntimeWarning:</span> overflow encountered <span class=\"keyword\">in</span> long_scalars\ninf</code></pre>",
  "id": "55d30c2b58c32047284a09b1",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 7,
  "sent": "2015-08-18T10:42:51.057Z",
  "text": "Another one:\n```\n>>> np.intp(10) ** np.intp(-127)\n__main__:1: RuntimeWarning: divide by zero encountered in long_scalars\n__main__:1: RuntimeWarning: overflow encountered in long_scalars\ninf\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/gmarkall",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/535640?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/535640?v=3&s=60",
   "displayName": "Graham Markall",
   "gv": "3",
   "id": "55b342020fc9f982beaaedf1",
   "url": "/gmarkall",
   "username": "gmarkall",
   "v": 6
  },
  "html": "I guess the environment variable came from the .binstar.yml?",
  "id": "55d30ccc9b45e15c4264b66d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 7,
  "sent": "2015-08-18T10:45:32.366Z",
  "text": "I guess the environment variable came from the .binstar.yml?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/gmarkall",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/535640?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/535640?v=3&s=60",
   "displayName": "Graham Markall",
   "gv": "3",
   "id": "55b342020fc9f982beaaedf1",
   "url": "/gmarkall",
   "username": "gmarkall",
   "v": 6
  },
  "html": "I wonder if you changing  &quot;python -m numba.testing -b -m -v&quot; to &quot;NUMBA_ENABLE_CUDASIM=1 python -m numba.testing -b -m -v&quot; would work?",
  "id": "55d30d3235e3e09b3adb3b94",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 7,
  "sent": "2015-08-18T10:47:14.264Z",
  "text": "I wonder if you changing  \"python -m numba.testing -b -m -v\" to \"NUMBA_ENABLE_CUDASIM=1 python -m numba.testing -b -m -v\" would work?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/gmarkall",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/535640?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/535640?v=3&s=60",
   "displayName": "Graham Markall",
   "gv": "3",
   "id": "55b342020fc9f982beaaedf1",
   "url": "/gmarkall",
   "username": "gmarkall",
   "v": 6
  },
  "html": "(the intention being to get the simulator for the tests but not the docs)",
  "id": "55d30d4d057d8c9d3a6de02f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 7,
  "sent": "2015-08-18T10:47:41.277Z",
  "text": "(the intention being to get the simulator for the tests but not the docs)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "Another one yet:<pre><code>&gt;&gt;&gt; np.<span class=\"function\"><span class=\"title\">int64</span><span class=\"params\">(<span class=\"number\">1</span>)</span></span> &lt;&lt; np.<span class=\"function\"><span class=\"title\">int64</span><span class=\"params\">(-<span class=\"number\">1</span>)</span></span>\n-<span class=\"number\">9223372036854775808</span></code></pre>",
  "id": "55d31cec1aa6941907e366e8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 7,
  "sent": "2015-08-18T11:54:19.991Z",
  "text": "Another one yet:\n```\n>>> np.int64(1) << np.int64(-1)\n-9223372036854775808\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"gmarkall\" class=\"mention\">@gmarkall</span> that syntax doesn&#39;t work in .binstar.yml",
  "id": "55d31cfe871d6aec02687173",
  "issues": [],
  "mentions": [
   {
    "screenName": "gmarkall",
    "userId": "55b342020fc9f982beaaedf1",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 7,
  "sent": "2015-08-18T11:54:38.351Z",
  "text": "@gmarkall that syntax doesn't work in .binstar.yml",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "it doesn&#39;t use the shell (which is understandable since it&#39;s supposed to work on Windows too)",
  "id": "55d31d0d1aa6941907e366eb",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 7,
  "sent": "2015-08-18T11:54:53.602Z",
  "text": "it doesn't use the shell (which is understandable since it's supposed to work on Windows too)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"gmarkall\" class=\"mention\">@gmarkall</span> I also get the error here without NUMBA_ENABLE_CUDASIM:<pre><code>Warning, treated <span class=\"keyword\">as</span> <span class=\"keyword\">error</span>:\n/home/antoine/numba/docs/source/cuda-<span class=\"keyword\">reference</span>/host.rst:<span class=\"number\">19</span>: WARNING: py:<span class=\"type\">class</span> <span class=\"keyword\">reference</span> target <span class=\"keyword\">not</span> found: Context</code></pre>",
  "id": "55d48012c99d78161f34cb69",
  "issues": [],
  "mentions": [
   {
    "screenName": "gmarkall",
    "userId": "55b342020fc9f982beaaedf1",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 7,
  "sent": "2015-08-19T13:09:38.395Z",
  "text": "@gmarkall I also get the error here without NUMBA_ENABLE_CUDASIM:\n```\nWarning, treated as error:\n/home/antoine/numba/docs/source/cuda-reference/host.rst:19: WARNING: py:class reference target not found: Context\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "You have to run <code>make SPHINXOPTS=-Wn clean html</code>",
  "id": "55d48064e47fd26177843046",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 7,
  "sent": "2015-08-19T13:11:00.956Z",
  "text": "You have to run `make SPHINXOPTS=-Wn clean html`",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/gmarkall",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/535640?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/535640?v=3&s=60",
   "displayName": "Graham Markall",
   "gv": "3",
   "id": "55b342020fc9f982beaaedf1",
   "url": "/gmarkall",
   "username": "gmarkall",
   "v": 6
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"pitrou\" class=\"mention\">@pitrou</span> ah, will just have a look",
  "id": "55d4807a4f6c9d3018319e72",
  "issues": [],
  "mentions": [
   {
    "screenName": "pitrou",
    "userId": "54935c59db8155e6700e0da8",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 7,
  "sent": "2015-08-19T13:11:22.771Z",
  "text": "@pitrou ah, will just have a look",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "We don&#39;t use <code>-n</code> on Travis, which is why it doesn&#39;t crop up",
  "id": "55d480bdc99d78161f34cb6b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 7,
  "sent": "2015-08-19T13:12:29.782Z",
  "text": "We don't use `-n` on Travis, which is why it doesn't crop up",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/gmarkall",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/535640?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/535640?v=3&s=60",
   "displayName": "Graham Markall",
   "gv": "3",
   "id": "55b342020fc9f982beaaedf1",
   "url": "/gmarkall",
   "username": "gmarkall",
   "v": 6
  },
  "html": "so, there&#39;s a few errors with -n that i&#39;m just working through",
  "id": "55d484e59c0eaccb36ae4352",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 7,
  "sent": "2015-08-19T13:30:13.433Z",
  "text": "so, there's a few errors with -n that i'm just working through",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/gmarkall",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/535640?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/535640?v=3&s=60",
   "displayName": "Graham Markall",
   "gv": "3",
   "id": "55b342020fc9f982beaaedf1",
   "url": "/gmarkall",
   "username": "gmarkall",
   "v": 6
  },
  "html": "but it only shows one at a time",
  "id": "55d484f6bdd5d6c9362b910a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 7,
  "sent": "2015-08-19T13:30:30.136Z",
  "text": "but it only shows one at a time",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "If you remove <code>-W</code> you may see all of them at once",
  "id": "55d4852679943724293cb2ab",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 7,
  "sent": "2015-08-19T13:31:18.570Z",
  "text": "If you remove `-W` you may see all of them at once",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/gmarkall",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/535640?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/535640?v=3&s=60",
   "displayName": "Graham Markall",
   "gv": "3",
   "id": "55b342020fc9f982beaaedf1",
   "url": "/gmarkall",
   "username": "gmarkall",
   "v": 6
  },
  "html": "ah, there&#39;s 118 warnings",
  "id": "55d48665d46018562035cebd",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 7,
  "sent": "2015-08-19T13:36:37.423Z",
  "text": "ah, there's 118 warnings",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/gmarkall",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/535640?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/535640?v=3&s=60",
   "displayName": "Graham Markall",
   "gv": "3",
   "id": "55b342020fc9f982beaaedf1",
   "url": "/gmarkall",
   "username": "gmarkall",
   "v": 6
  },
  "html": "from all areas of the docs",
  "id": "55d48670bdd5d6c9362b914d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 7,
  "sent": "2015-08-19T13:36:48.630Z",
  "text": "from all areas of the docs",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "oh",
  "id": "55d4871de47fd26177843073",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 7,
  "sent": "2015-08-19T13:39:41.070Z",
  "text": "oh",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "that must be why I didn&#39;t activate it on Travis, then :D",
  "id": "55d48734e47fd26177843076",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 7,
  "sent": "2015-08-19T13:40:04.351Z",
  "text": "that must be why I didn't activate it on Travis, then :D",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "arrayexpr rewrite is turning unary op <code>-A</code> to <code>-(A, Aout)</code>.  The typeinference thinks that is a binop",
  "id": "55d5f7480d29ce8f44b723e7",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 8,
  "sent": "2015-08-20T15:50:32.846Z",
  "text": "arrayexpr rewrite is turning unary op `-A` to `-(A, Aout)`.  The typeinference thinks that is a binop",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"sklam\" class=\"mention\">@sklam</span> a bug in arrayexpr, then ? why does it put a tuple there?",
  "id": "55d5f7dd830b8fd17c65446f",
  "issues": [],
  "mentions": [
   {
    "screenName": "sklam",
    "userId": "55b689f50fc9f982beab2a24",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 8,
  "sent": "2015-08-20T15:53:01.728Z",
  "text": "@sklam a bug in arrayexpr, then ? why does it put a tuple there?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "i mean operator.subtract(A, Aout)",
  "id": "55d5f7fbf4d6ddcc0d920b7d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 8,
  "sent": "2015-08-20T15:53:31.165Z",
  "text": "i mean operator.subtract(A, Aout)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "hum... but is that a correct transformation?",
  "id": "55d5f86380eb5af935921c0e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 8,
  "sent": "2015-08-20T15:55:15.571Z",
  "text": "hum... but is that a correct transformation?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "that can\u2019t be right.  actually, the IR looks right.  Just the typing part is weird.",
  "id": "55d5f92c80e710630d6bfe56",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 8,
  "sent": "2015-08-20T15:58:36.604Z",
  "text": "that can\u2019t be right.  actually, the IR looks right.  Just the typing part is weird.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"sklam\" class=\"mention\">@sklam</span> have you seen <span data-link-type=\"issue\" data-issue=\"90\" data-issue-repo=\"numba/llvmlite\" class=\"issue\">numba/llvmlite#90</span> ?",
  "id": "55d5ff28830b8fd17c654485",
  "issues": [
   {
    "number": "90",
    "repo": "numba/llvmlite"
   }
  ],
  "mentions": [
   {
    "screenName": "sklam",
    "userId": "55b689f50fc9f982beab2a24",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 8,
  "sent": "2015-08-20T16:24:08.221Z",
  "text": "@sklam have you seen https://github.com/numba/llvmlite/pull/90 ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "not yet",
  "id": "55d5ff4ee3dd18904433aac7",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 8,
  "sent": "2015-08-20T16:24:46.946Z",
  "text": "not yet",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/richardotis",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/6405510?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/6405510?v=4&s=60",
   "displayName": "Richard Otis",
   "gv": "4",
   "id": "55a137c15e0d51bd787b0b26",
   "url": "/richardotis",
   "username": "richardotis",
   "v": 13
  },
  "html": "Is boolean indexing of numpy arrays unsupported in nopython mode? I&#39;m having trouble finding anything in the docs or issue tracker about it.",
  "id": "55d7d4604eff2e7765384c01",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2015-08-22T01:46:08.026Z",
  "text": "Is boolean indexing of numpy arrays unsupported in nopython mode? I'm having trouble finding anything in the docs or issue tracker about it.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/gmarkall",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/535640?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/535640?v=3&s=60",
   "displayName": "Graham Markall",
   "gv": "3",
   "id": "55b342020fc9f982beaaedf1",
   "url": "/gmarkall",
   "username": "gmarkall",
   "v": 6
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"richardotis\" class=\"mention\">@richardotis</span> it is not supported at the moment - feel free to open an issue if it&#39;s something you&#39;d like to see, in order to help us prioritise what to work on. If you&#39;d like to have a go at adding it yourself, some of the discussion in <span data-link-type=\"issue\" data-issue=\"1359\" data-issue-repo=\"numba/numba\" class=\"issue\">numba/numba#1359</span> may be helpful (it&#39;s about np.where, which is not the same thing, but there&#39;s some general info on numpy support in numba in there)",
  "id": "55d81116b6d887d9704d16e5",
  "issues": [
   {
    "number": "1359",
    "repo": "numba/numba"
   }
  ],
  "mentions": [
   {
    "screenName": "richardotis",
    "userId": "55a137c15e0d51bd787b0b26",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 9,
  "sent": "2015-08-22T06:05:10.282Z",
  "text": "@richardotis it is not supported at the moment - feel free to open an issue if it's something you'd like to see, in order to help us prioritise what to work on. If you'd like to have a go at adding it yourself, some of the discussion in https://github.com/numba/numba/issues/1359 may be helpful (it's about np.where, which is not the same thing, but there's some general info on numpy support in numba in there)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/richardotis",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/6405510?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/6405510?v=4&s=60",
   "displayName": "Richard Otis",
   "gv": "4",
   "id": "55a137c15e0d51bd787b0b26",
   "url": "/richardotis",
   "username": "richardotis",
   "v": 13
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"gmarkall\" class=\"mention\">@gmarkall</span> Thanks. I&#39;ve seen that issue, which is what inspired me to try a nopython implementation of <code>numpy.select</code>. I hit a wall with boolean indexing, though. Without it or a nopython implementation of <code>numpy.copyto(..., where=...)</code>, it doesn&#39;t look feasible right now.",
  "id": "55d89220004c3e375ad0479f",
  "issues": [],
  "mentions": [
   {
    "screenName": "gmarkall",
    "userId": "55b342020fc9f982beaaedf1",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 9,
  "sent": "2015-08-22T15:15:44.321Z",
  "text": "@gmarkall Thanks. I've seen that issue, which is what inspired me to try a nopython implementation of `numpy.select`. I hit a wall with boolean indexing, though. Without it or a nopython implementation of `numpy.copyto(..., where=...)`, it doesn't look feasible right now.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/richardotis",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/6405510?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/6405510?v=4&s=60",
   "displayName": "Richard Otis",
   "gv": "4",
   "id": "55a137c15e0d51bd787b0b26",
   "url": "/richardotis",
   "username": "richardotis",
   "v": 13
  },
  "html": "(The issue for <code>numpy.select</code> is <span data-link-type=\"issue\" data-issue=\"1313\" class=\"issue\">#1313</span> )",
  "id": "55d892994eff2e7765385734",
  "issues": [
   {
    "number": "1313"
   }
  ],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2015-08-22T15:17:45.343Z",
  "text": "(The issue for `numpy.select` is #1313 )",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "a nopython mode implementation of boolean indexing would not be too hard, at least in 1D.",
  "id": "55db75a6a6bcd8894068bf39",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2015-08-24T19:51:02.132Z",
  "text": "a nopython mode implementation of boolean indexing would not be too hard, at least in 1D.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "I\u2019m not sure what the semantics of boolean indexing in higher dimensions is.",
  "id": "55db75b56ebe0cd61263fb7c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2015-08-24T19:51:17.090Z",
  "text": "I\u2019m not sure what the semantics of boolean indexing in higher dimensions is.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "Seems like there are lots of possible inputs that would result in impossible-to-represent ragged array outputs",
  "id": "55db75c5004c3e375ad0891c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2015-08-24T19:51:33.189Z",
  "text": "Seems like there are lots of possible inputs that would result in impossible-to-represent ragged array outputs",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/richardotis",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/6405510?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/6405510?v=4&s=60",
   "displayName": "Richard Otis",
   "gv": "4",
   "id": "55a137c15e0d51bd787b0b26",
   "url": "/richardotis",
   "username": "richardotis",
   "v": 13
  },
  "html": "IIRC if you boolean index a higher-dimensional array you get back a 1-D ravelled array of elements where the condition evaluated to True",
  "id": "55db763ba6bcd8894068bf5f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2015-08-24T19:53:31.576Z",
  "text": "IIRC if you boolean index a higher-dimensional array you get back a 1-D ravelled array of elements where the condition evaluated to True",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "oh perfect",
  "id": "55db76456ebe0cd61263fba0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2015-08-24T19:53:41.255Z",
  "text": "oh perfect",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/richardotis",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/6405510?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/6405510?v=4&s=60",
   "displayName": "Richard Otis",
   "gv": "4",
   "id": "55a137c15e0d51bd787b0b26",
   "url": "/richardotis",
   "username": "richardotis",
   "v": 13
  },
  "html": "According to the numpy docs boolean indices must always be the same shape as the array they&#39;re indexing",
  "id": "55db7679fcfd5a7865af27e8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2015-08-24T19:54:33.610Z",
  "text": "According to the numpy docs boolean indices must always be the same shape as the array they're indexing",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/richardotis",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/6405510?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/6405510?v=4&s=60",
   "displayName": "Richard Otis",
   "gv": "4",
   "id": "55a137c15e0d51bd787b0b26",
   "url": "/richardotis",
   "username": "richardotis",
   "v": 13
  },
  "html": "&quot;The result is a 1-D array containing all the elements in the indexed array corresponding to all the true elements in the boolean array.&quot; <a href=\"http://docs.scipy.org/doc/numpy/user/basics.indexing.html#boolean-or-mask-index-arrays\" rel=\"nofollow\" target=\"_blank\" class=\"link\">http://docs.scipy.org/doc/numpy/user/basics.indexing.html#boolean-or-mask-index-arrays</a>",
  "id": "55db7698004c3e375ad08950",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2015-08-24T19:55:04.397Z",
  "text": "\"The result is a 1-D array containing all the elements in the indexed array corresponding to all the true elements in the boolean array.\" http://docs.scipy.org/doc/numpy/user/basics.indexing.html#boolean-or-mask-index-arrays",
  "unread": false,
  "urls": [
   {
    "url": "http://docs.scipy.org/doc/numpy/user/basics.indexing.html#boolean-or-mask-index-arrays"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "I assume the fastest and most memory efficient way to implement this would be to do two passes.",
  "id": "55db76c66ebe0cd61263fbb5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2015-08-24T19:55:50.536Z",
  "text": "I assume the fastest and most memory efficient way to implement this would be to do two passes.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "Loop through the boolean array to count how many output elements are needed.",
  "id": "55db76d3fcfd5a7865af27fd",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2015-08-24T19:56:03.268Z",
  "text": "Loop through the boolean array to count how many output elements are needed.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "Allocate the output array, and then loop again to do the copy of the appropriate elements.",
  "id": "55db76e6fcfd5a7865af2803",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2015-08-24T19:56:22.412Z",
  "text": "Allocate the output array, and then loop again to do the copy of the appropriate elements.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "Hopefully LLVM will generate SIMD code for the first loop.",
  "id": "55db77006ebe0cd61263fbc2",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2015-08-24T19:56:48.205Z",
  "text": "Hopefully LLVM will generate SIMD code for the first loop.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/richardotis",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/6405510?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/6405510?v=4&s=60",
   "displayName": "Richard Otis",
   "gv": "4",
   "id": "55a137c15e0d51bd787b0b26",
   "url": "/richardotis",
   "username": "richardotis",
   "v": 13
  },
  "html": "Yes, once that exists then <code>numpy.copyto(..., where=...)</code> can wrap that indexing operation, and <code>numpy.select</code> could be largely implemented. Or it could just use the indexing directly.",
  "id": "55db785804a6730031627d67",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2015-08-24T20:02:31.999Z",
  "text": "Yes, once that exists then `numpy.copyto(..., where=...)` can wrap that indexing operation, and `numpy.select` could be largely implemented. Or it could just use the indexing directly.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/ssarangi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/239816?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/239816?v=4&s=60",
   "displayName": "Satyajit Sarangi",
   "gv": "4",
   "id": "55df76410fc9f982beaed3a9",
   "url": "/ssarangi",
   "username": "ssarangi",
   "v": 5
  },
  "html": "Hi everyone.. I am looking at <span data-link-type=\"issue\" data-issue=\"253\" class=\"issue\">#253</span> - One of the things happening is that the cfa is done on the blocks but the global value has already changed by then when not being run in the jitter. So in this case the cfa has stale information about the values. This situation could also arise with closure variables isn&#39;t it ?",
  "id": "560b1552ff22c70f6fab41fb",
  "issues": [
   {
    "number": "253"
   }
  ],
  "mentions": [],
  "meta": [],
  "readBy": 8,
  "sent": "2015-09-29T22:48:50.309Z",
  "text": "Hi everyone.. I am looking at #253 - One of the things happening is that the cfa is done on the blocks but the global value has already changed by then when not being run in the jitter. So in this case the cfa has stale information about the values. This situation could also arise with closure variables isn't it ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/ssarangi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/239816?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/239816?v=4&s=60",
   "displayName": "Satyajit Sarangi",
   "gv": "4",
   "id": "55df76410fc9f982beaed3a9",
   "url": "/ssarangi",
   "username": "ssarangi",
   "v": 5
  },
  "html": "I am still understanding the internals of numba so I still don&#39;t have a complete picture.. but there is an Interp running before the lowering. Can that be used to see the current value of the global variable in this case ?",
  "id": "560b1583ff22c70f6fab4202",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 8,
  "sent": "2015-09-29T22:49:39.012Z",
  "text": "I am still understanding the internals of numba so I still don't have a complete picture.. but there is an Interp running before the lowering. Can that be used to see the current value of the global variable in this case ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"ssarangi\" class=\"mention\">@ssarangi</span> I don&#39;t think the CFA looks at values (it is only interested in control flow after all). However you&#39;re right that global values are frozen at compilation time. The Numba IR should probably show them (use e.g. NUMBA_DEBUG_FRONTEND to display it: <a href=\"http://numba.pydata.org/numba-doc/dev/reference/envvars.html)\" rel=\"nofollow\" target=\"_blank\" class=\"link\">http://numba.pydata.org/numba-doc/dev/reference/envvars.html)</a>",
  "id": "560b9ae0c03ecbb71a195356",
  "issues": [],
  "mentions": [
   {
    "screenName": "ssarangi",
    "userId": "55df76410fc9f982beaed3a9",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 8,
  "sent": "2015-09-30T08:18:40.476Z",
  "text": "@ssarangi I don't think the CFA looks at values (it is only interested in control flow after all). However you're right that global values are frozen at compilation time. The Numba IR should probably show them (use e.g. NUMBA_DEBUG_FRONTEND to display it: http://numba.pydata.org/numba-doc/dev/reference/envvars.html)",
  "unread": false,
  "urls": [
   {
    "url": "http://numba.pydata.org/numba-doc/dev/reference/envvars.html)"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/ssarangi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/239816?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/239816?v=4&s=60",
   "displayName": "Satyajit Sarangi",
   "gv": "4",
   "id": "55df76410fc9f982beaed3a9",
   "url": "/ssarangi",
   "username": "ssarangi",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"pitrou\" class=\"mention\">@pitrou</span> Right. So if regular execution and jit is mixed then it could generate wrong results. So in such cases is there an execution context kind of thing from where the variable values can be read ?",
  "id": "560bfe44ff22c70f6fab5fb0",
  "issues": [],
  "mentions": [
   {
    "screenName": "pitrou",
    "userId": "54935c59db8155e6700e0da8",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 8,
  "sent": "2015-09-30T15:22:44.369Z",
  "text": "@pitrou Right. So if regular execution and jit is mixed then it could generate wrong results. So in such cases is there an execution context kind of thing from where the variable values can be read ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"ssarangi\" class=\"mention\">@ssarangi</span> we don&#39;t have anything like that currently",
  "id": "560c21ab081f3a9c044da9ca",
  "issues": [],
  "mentions": [
   {
    "screenName": "ssarangi",
    "userId": "55df76410fc9f982beaed3a9",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 8,
  "sent": "2015-09-30T17:53:47.426Z",
  "text": "@ssarangi we don't have anything like that currently",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "note, this affects nopython mode only",
  "id": "560c21d6f4b61c106fb2d6c5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 8,
  "sent": "2015-09-30T17:54:30.120Z",
  "text": "note, this affects nopython mode only",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "object mode still reads global variables from the global dictionary",
  "id": "560c2201ff22c70f6fab66fa",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 8,
  "sent": "2015-09-30T17:55:13.356Z",
  "text": "object mode still reads global variables from the global dictionary",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/ssarangi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/239816?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/239816?v=4&s=60",
   "displayName": "Satyajit Sarangi",
   "gv": "4",
   "id": "55df76410fc9f982beaed3a9",
   "url": "/ssarangi",
   "username": "ssarangi",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"sklam\" class=\"mention\">@sklam</span> right.. so this would affect nopython mode.. so my question is, would this be considered as a bug or will it be more of &quot;not supported&quot; feature ?",
  "id": "560c2203dfb3151302858ec3",
  "issues": [],
  "mentions": [
   {
    "screenName": "sklam",
    "userId": "55b689f50fc9f982beab2a24",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 8,
  "sent": "2015-09-30T17:55:15.090Z",
  "text": "@sklam right.. so this would affect nopython mode.. so my question is, would this be considered as a bug or will it be more of \"not supported\" feature ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "not supported ",
  "id": "560c2210f4b61c106fb2d6cf",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 8,
  "sent": "2015-09-30T17:55:28.022Z",
  "text": "not supported ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/ssarangi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/239816?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/239816?v=4&s=60",
   "displayName": "Satyajit Sarangi",
   "gv": "4",
   "id": "55df76410fc9f982beaed3a9",
   "url": "/ssarangi",
   "username": "ssarangi",
   "v": 5
  },
  "html": "I see... in nopython mode, can&#39;t we still access the global dictionary ?",
  "id": "560c2225ff22c70f6fab6703",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 8,
  "sent": "2015-09-30T17:55:49.997Z",
  "text": "I see... in nopython mode, can't we still access the global dictionary ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"ssarangi\" class=\"mention\">@ssarangi</span> not more efficiently than Python would, which is why we don&#39;t do it",
  "id": "560c22499030ff5a5f526782",
  "issues": [],
  "mentions": [
   {
    "screenName": "ssarangi",
    "userId": "55df76410fc9f982beaed3a9",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 8,
  "sent": "2015-09-30T17:56:24.858Z",
  "text": "@ssarangi not more efficiently than Python would, which is why we don't do it",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "if you&#39;re willing to tolerate some hackiness, you may use a list or a numpy array as a global &quot;environment&quot; :-)",
  "id": "560c2264180bfe8a29ebd3a4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 8,
  "sent": "2015-09-30T17:56:52.951Z",
  "text": "if you're willing to tolerate some hackiness, you may use a list or a numpy array as a global \"environment\" :-)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/ssarangi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/239816?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/239816?v=4&s=60",
   "displayName": "Satyajit Sarangi",
   "gv": "4",
   "id": "55df76410fc9f982beaed3a9",
   "url": "/ssarangi",
   "username": "ssarangi",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"pitrou\" class=\"mention\">@pitrou</span> But efficiency vs correctness :D",
  "id": "560c226bdfb3151302858edd",
  "issues": [],
  "mentions": [
   {
    "screenName": "pitrou",
    "userId": "54935c59db8155e6700e0da8",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 8,
  "sent": "2015-09-30T17:56:59.255Z",
  "text": "@pitrou But efficiency vs correctness :D",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "(actually, a list wouldn&#39;t apply either, sorry)",
  "id": "560c22729030ff5a5f526785",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 8,
  "sent": "2015-09-30T17:57:06.665Z",
  "text": "(actually, a list wouldn't apply either, sorry)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/ssarangi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/239816?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/239816?v=4&s=60",
   "displayName": "Satyajit Sarangi",
   "gv": "4",
   "id": "55df76410fc9f982beaed3a9",
   "url": "/ssarangi",
   "username": "ssarangi",
   "v": 5
  },
  "html": "so is it worth pursuing this bug ? :)",
  "id": "560c228495756f1402bcb31f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 8,
  "sent": "2015-09-30T17:57:24.444Z",
  "text": "so is it worth pursuing this bug ? :)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "Numba&#39;s goal is to extract the maximum speed on specific workloads, not to support all of Python when doing so would drag us down to Python-like speeds",
  "id": "560c22999030ff5a5f526786",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 8,
  "sent": "2015-09-30T17:57:45.712Z",
  "text": "Numba's goal is to extract the maximum speed on specific workloads, not to support all of Python when doing so would drag us down to Python-like speeds",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/ssarangi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/239816?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/239816?v=4&s=60",
   "displayName": "Satyajit Sarangi",
   "gv": "4",
   "id": "55df76410fc9f982beaed3a9",
   "url": "/ssarangi",
   "username": "ssarangi",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"pitrou\" class=\"mention\">@pitrou</span> makes sense",
  "id": "560c22a395756f1402bcb325",
  "issues": [],
  "mentions": [
   {
    "screenName": "pitrou",
    "userId": "54935c59db8155e6700e0da8",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 8,
  "sent": "2015-09-30T17:57:55.777Z",
  "text": "@pitrou makes sense",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "so right now it&#39;s not worth pursuing IMO",
  "id": "560c22a4108c147b64d88453",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 8,
  "sent": "2015-09-30T17:57:56.710Z",
  "text": "so right now it's not worth pursuing IMO",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "perhaps much later when Numba is more complete...",
  "id": "560c22b09030ff5a5f526789",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 8,
  "sent": "2015-09-30T17:58:08.019Z",
  "text": "perhaps much later when Numba is more complete...",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "agree",
  "id": "560c22b7081f3a9c044da9f6",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 8,
  "sent": "2015-09-30T17:58:15.564Z",
  "text": "agree",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/ssarangi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/239816?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/239816?v=4&s=60",
   "displayName": "Satyajit Sarangi",
   "gv": "4",
   "id": "55df76410fc9f982beaed3a9",
   "url": "/ssarangi",
   "username": "ssarangi",
   "v": 5
  },
  "html": "ok.. one more question... I am writing a small closure example and I hit exceptions on a bytecode opcode not being supported",
  "id": "560c22c8552ed791327a0bc1",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 8,
  "sent": "2015-09-30T17:58:32.179Z",
  "text": "ok.. one more question... I am writing a small closure example and I hit exceptions on a bytecode opcode not being supported",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/ssarangi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/239816?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/239816?v=4&s=60",
   "displayName": "Satyajit Sarangi",
   "gv": "4",
   "id": "55df76410fc9f982beaed3a9",
   "url": "/ssarangi",
   "username": "ssarangi",
   "v": 5
  },
  "html": "store_deref",
  "id": "560c22cb081f3a9c044da9fd",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 8,
  "sent": "2015-09-30T17:58:35.012Z",
  "text": "store_deref",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/ssarangi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/239816?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/239816?v=4&s=60",
   "displayName": "Satyajit Sarangi",
   "gv": "4",
   "id": "55df76410fc9f982beaed3a9",
   "url": "/ssarangi",
   "username": "ssarangi",
   "v": 5
  },
  "html": "so again same question goes... worth adding these ? ",
  "id": "560c22e7f4b61c106fb2d6f5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 8,
  "sent": "2015-09-30T17:59:03.812Z",
  "text": "so again same question goes... worth adding these ? ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "Well, the question is who are you sharing the closure with? you can&#39;t create a function from a Numba-compiled function right now. Do you have an example source code?",
  "id": "560c23289030ff5a5f52678a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 8,
  "sent": "2015-09-30T18:00:08.548Z",
  "text": "Well, the question is who are you sharing the closure with? you can't create a function from a Numba-compiled function right now. Do you have an example source code?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/ssarangi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/239816?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/239816?v=4&s=60",
   "displayName": "Satyajit Sarangi",
   "gv": "4",
   "id": "55df76410fc9f982beaed3a9",
   "url": "/ssarangi",
   "username": "ssarangi",
   "v": 5
  },
  "html": "yeah I do.. let me see if i can paste it here.. ",
  "id": "560c233b552ed791327a0bd5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 8,
  "sent": "2015-09-30T18:00:27.746Z",
  "text": "yeah I do.. let me see if i can paste it here.. ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2015-09-30T18:01:15.563Z",
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "you can use <a href=\"http://gist.github.com\" rel=\"nofollow\" target=\"_blank\" class=\"link\">http://gist.github.com</a>",
  "id": "560c2367108c147b64d88459",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 8,
  "sent": "2015-09-30T18:01:11.262Z",
  "text": "you can use http://gist.github.com",
  "unread": false,
  "urls": [
   {
    "url": "http://gist.github.com"
   }
  ],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/ssarangi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/239816?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/239816?v=4&s=60",
   "displayName": "Satyajit Sarangi",
   "gv": "4",
   "id": "55df76410fc9f982beaed3a9",
   "url": "/ssarangi",
   "username": "ssarangi",
   "v": 5
  },
  "html": "<a href=\"https://gist.github.com/ssarangi/28ba8262aa007d11e588\" rel=\"nofollow\" target=\"_blank\" class=\"link\">https://gist.github.com/ssarangi/28ba8262aa007d11e588</a>",
  "id": "560c237bdfb3151302858f1c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 8,
  "sent": "2015-09-30T18:01:31.837Z",
  "text": "https://gist.github.com/ssarangi/28ba8262aa007d11e588",
  "unread": false,
  "urls": [
   {
    "url": "https://gist.github.com/ssarangi/28ba8262aa007d11e588"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/ssarangi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/239816?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/239816?v=4&s=60",
   "displayName": "Satyajit Sarangi",
   "gv": "4",
   "id": "55df76410fc9f982beaed3a9",
   "url": "/ssarangi",
   "username": "ssarangi",
   "v": 5
  },
  "html": "something like this",
  "id": "560c237d081f3a9c044daa23",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 8,
  "sent": "2015-09-30T18:01:33.901Z",
  "text": "something like this",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/ssarangi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/239816?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/239816?v=4&s=60",
   "displayName": "Satyajit Sarangi",
   "gv": "4",
   "id": "55df76410fc9f982beaed3a9",
   "url": "/ssarangi",
   "username": "ssarangi",
   "v": 5
  },
  "html": "NotImplementedError: offset=9 opcode=0x0 opname=&lt;0&gt;",
  "id": "560c23d6dfb3151302858f32",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 8,
  "sent": "2015-09-30T18:03:02.153Z",
  "text": "NotImplementedError: offset=9 opcode=0x0 opname=<0>",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "oh, I see. Well, if you&#39;re sharing the closure with a Python function, you need to marshall the data back to Python. That&#39;s doable of course, though you need to be careful when you do it (perhaps when the function ends?).",
  "id": "560c23db9030ff5a5f526793",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 8,
  "sent": "2015-09-30T18:03:07.543Z",
  "text": "oh, I see. Well, if you're sharing the closure with a Python function, you need to marshall the data back to Python. That's doable of course, though you need to be careful when you do it (perhaps when the function ends?).",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "(One way would be to consider the closure value a hidden function return value)",
  "id": "560c2427108c147b64d8845a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 8,
  "sent": "2015-09-30T18:04:23.757Z",
  "text": "(One way would be to consider the closure value a hidden function return value)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/ssarangi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/239816?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/239816?v=4&s=60",
   "displayName": "Satyajit Sarangi",
   "gv": "4",
   "id": "55df76410fc9f982beaed3a9",
   "url": "/ssarangi",
   "username": "ssarangi",
   "v": 5
  },
  "html": "sure.. it could be returned",
  "id": "560c243995756f1402bcb367",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 8,
  "sent": "2015-09-30T18:04:41.896Z",
  "text": "sure.. it could be returned",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/ssarangi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/239816?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/239816?v=4&s=60",
   "displayName": "Satyajit Sarangi",
   "gv": "4",
   "id": "55df76410fc9f982beaed3a9",
   "url": "/ssarangi",
   "username": "ssarangi",
   "v": 5
  },
  "html": "but then it needs to be converted to a pyobject ?",
  "id": "560c244595756f1402bcb368",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 8,
  "sent": "2015-09-30T18:04:53.815Z",
  "text": "but then it needs to be converted to a pyobject ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "yes, and stored back in the closure cell",
  "id": "560c2450180bfe8a29ebd3b1",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 8,
  "sent": "2015-09-30T18:05:04.671Z",
  "text": "yes, and stored back in the closure cell",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/ssarangi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/239816?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/239816?v=4&s=60",
   "displayName": "Satyajit Sarangi",
   "gv": "4",
   "id": "55df76410fc9f982beaed3a9",
   "url": "/ssarangi",
   "username": "ssarangi",
   "v": 5
  },
  "html": "I see... ",
  "id": "560c2464552ed791327a0c16",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2015-09-30T18:05:24.045Z",
  "text": "I see... ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "If your goal is to contribute, this is all non-trivial.",
  "id": "560c247b9030ff5a5f526794",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2015-09-30T18:05:47.572Z",
  "text": "If your goal is to contribute, this is all non-trivial.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/ssarangi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/239816?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/239816?v=4&s=60",
   "displayName": "Satyajit Sarangi",
   "gv": "4",
   "id": "55df76410fc9f982beaed3a9",
   "url": "/ssarangi",
   "username": "ssarangi",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"pitrou\" class=\"mention\">@pitrou</span> I understand... this gives me a little more digging to do but if there is something more trivial I can start with that too",
  "id": "560c24b1081f3a9c044daa5c",
  "issues": [],
  "mentions": [
   {
    "screenName": "pitrou",
    "userId": "54935c59db8155e6700e0da8",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 9,
  "sent": "2015-09-30T18:06:41.436Z",
  "text": "@pitrou I understand... this gives me a little more digging to do but if there is something more trivial I can start with that too",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/ssarangi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/239816?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/239816?v=4&s=60",
   "displayName": "Satyajit Sarangi",
   "gv": "4",
   "id": "55df76410fc9f982beaed3a9",
   "url": "/ssarangi",
   "username": "ssarangi",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"pitrou\" class=\"mention\">@pitrou</span> any pointers ?",
  "id": "560c24c2552ed791327a0c21",
  "issues": [],
  "mentions": [
   {
    "screenName": "pitrou",
    "userId": "54935c59db8155e6700e0da8",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 9,
  "sent": "2015-09-30T18:06:58.920Z",
  "text": "@pitrou any pointers ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2015-09-30T18:07:49.784Z",
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "For simpler things, you could try to see if there are missing Numpy functions or methods that would be easy to implement. Or ditto with the Python standard library.",
  "id": "560c24ee9030ff5a5f526795",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2015-09-30T18:07:42.906Z",
  "text": "For simpler things, you could try to see if there are missing Numpy functions or methods that would be easy to implement. Or ditto with the Python standard library.",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/ssarangi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/239816?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/239816?v=4&s=60",
   "displayName": "Satyajit Sarangi",
   "gv": "4",
   "id": "55df76410fc9f982beaed3a9",
   "url": "/ssarangi",
   "username": "ssarangi",
   "v": 5
  },
  "html": "I see.. I could give that a shot... anything on llvmlite.. I am quite a bit familiar on that side for llvm",
  "id": "560c2521f4b61c106fb2d753",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2015-09-30T18:08:33.022Z",
  "text": "I see.. I could give that a shot... anything on llvmlite.. I am quite a bit familiar on that side for llvm",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "Stuff like numpy.searchsorted() perhaps, or the Python bisect module...",
  "id": "560c2525180bfe8a29ebd3b2",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2015-09-30T18:08:37.197Z",
  "text": "Stuff like numpy.searchsorted() perhaps, or the Python bisect module...",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "Ah, llvmlite, good question. Let me think.",
  "id": "560c252d9030ff5a5f526796",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2015-09-30T18:08:45.093Z",
  "text": "Ah, llvmlite, good question. Let me think.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/ssarangi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/239816?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/239816?v=4&s=60",
   "displayName": "Satyajit Sarangi",
   "gv": "4",
   "id": "55df76410fc9f982beaed3a9",
   "url": "/ssarangi",
   "username": "ssarangi",
   "v": 5
  },
  "html": ":)",
  "id": "560c254a081f3a9c044daa77",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2015-09-30T18:09:14.735Z",
  "text": ":)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "Perhaps something to interface llvmlite with Linux perf? There was a very short discussion about that here: <span data-link-type=\"issue\" data-issue=\"98\" data-issue-repo=\"numba/llvmlite\" class=\"issue\">numba/llvmlite#98</span>",
  "id": "560c25639030ff5a5f526797",
  "issues": [
   {
    "number": "98",
    "repo": "numba/llvmlite"
   }
  ],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2015-09-30T18:09:39.343Z",
  "text": "Perhaps something to interface llvmlite with Linux perf? There was a very short discussion about that here: https://github.com/numba/llvmlite/pull/98",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/ssarangi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/239816?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/239816?v=4&s=60",
   "displayName": "Satyajit Sarangi",
   "gv": "4",
   "id": "55df76410fc9f982beaed3a9",
   "url": "/ssarangi",
   "username": "ssarangi",
   "v": 5
  },
  "html": "cool.. let me start with the numpy.searchsorted and also take a look at the llvmlite<span data-link-type=\"issue\" data-issue=\"98\" class=\"issue\">#98</span>",
  "id": "560c2604552ed791327a0c5b",
  "issues": [
   {
    "number": "98"
   }
  ],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2015-09-30T18:12:20.337Z",
  "text": "cool.. let me start with the numpy.searchsorted and also take a look at the llvmlite#98",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/ssarangi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/239816?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/239816?v=4&s=60",
   "displayName": "Satyajit Sarangi",
   "gv": "4",
   "id": "55df76410fc9f982beaed3a9",
   "url": "/ssarangi",
   "username": "ssarangi",
   "v": 5
  },
  "html": "Hi.. am looking a simple function which just prints a constant string (like print(&#39;hello&#39;)) in nopython mode... ",
  "id": "56201ba88b09e2973cce7fba",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 8,
  "sent": "2015-10-15T21:33:28.226Z",
  "text": "Hi.. am looking a simple function which just prints a constant string (like print('hello')) in nopython mode... ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/ssarangi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/239816?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/239816?v=4&s=60",
   "displayName": "Satyajit Sarangi",
   "gv": "4",
   "id": "55df76410fc9f982beaed3a9",
   "url": "/ssarangi",
   "username": "ssarangi",
   "v": 5
  },
  "html": "this fails and while tracing I see that in lowering it fails because it couldn&#39;t get matched to the print_charseq",
  "id": "56201bbd8b09e2973cce7fbd",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 8,
  "sent": "2015-10-15T21:33:49.318Z",
  "text": "this fails and while tracing I see that in lowering it fails because it couldn't get matched to the print_charseq",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/ssarangi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/239816?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/239816?v=4&s=60",
   "displayName": "Satyajit Sarangi",
   "gv": "4",
   "id": "55df76410fc9f982beaed3a9",
   "url": "/ssarangi",
   "username": "ssarangi",
   "v": 5
  },
  "html": "the type inference keeps it as a Opaque(&#39;str&#39;) type which doesn&#39;t match the charseq either... ",
  "id": "56201be034cd85cd6d5c3ff9",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 8,
  "sent": "2015-10-15T21:34:24.854Z",
  "text": "the type inference keeps it as a Opaque('str') type which doesn't match the charseq either... ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/ssarangi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/239816?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/239816?v=4&s=60",
   "displayName": "Satyajit Sarangi",
   "gv": "4",
   "id": "55df76410fc9f982beaed3a9",
   "url": "/ssarangi",
   "username": "ssarangi",
   "v": 5
  },
  "html": "so there are a couple of ways to fix this but I wanted some feedback on what you guys think is the best way to do it",
  "id": "56201bf6854578c35b2a283a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 8,
  "sent": "2015-10-15T21:34:46.422Z",
  "text": "so there are a couple of ways to fix this but I wanted some feedback on what you guys think is the best way to do it",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "the most sustainable way would be to add nopython mode support for the str type",
  "id": "56201c1fb0edc67638cef2ea",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 8,
  "sent": "2015-10-15T21:35:27.804Z",
  "text": "the most sustainable way would be to add nopython mode support for the str type",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "but it&#39;s also non-trivial, especially taking into account py2 and py3&#39;s various representations",
  "id": "56201c30b0edc67638cef2ec",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 8,
  "sent": "2015-10-15T21:35:44.228Z",
  "text": "but it's also non-trivial, especially taking into account py2 and py3's various representations",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/ssarangi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/239816?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/239816?v=4&s=60",
   "displayName": "Satyajit Sarangi",
   "gv": "4",
   "id": "55df76410fc9f982beaed3a9",
   "url": "/ssarangi",
   "username": "ssarangi",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"pitrou\" class=\"mention\">@pitrou</span>: yeah that&#39;s what I was thinking too.. also would unicode differences cause more headaches",
  "id": "56201c43854578c35b2a283f",
  "issues": [],
  "mentions": [
   {
    "screenName": "pitrou",
    "userId": "54935c59db8155e6700e0da8",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 9,
  "sent": "2015-10-15T21:36:03.156Z",
  "text": "@pitrou: yeah that's what I was thinking too.. also would unicode differences cause more headaches",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/ssarangi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/239816?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/239816?v=4&s=60",
   "displayName": "Satyajit Sarangi",
   "gv": "4",
   "id": "55df76410fc9f982beaed3a9",
   "url": "/ssarangi",
   "username": "ssarangi",
   "v": 5
  },
  "html": "?",
  "id": "56201c4334cd85cd6d5c400b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 8,
  "sent": "2015-10-15T21:36:03.788Z",
  "text": "?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "depends what you call headaches :-) the code would certainly have to account for the variations, yes",
  "id": "56201c5cb0edc67638cef2ed",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2015-10-15T21:36:28.457Z",
  "text": "depends what you call headaches :-) the code would certainly have to account for the variations, yes",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "although on py2 we may limit ourselves to the str type, at first",
  "id": "56201c68b0edc67638cef2ee",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2015-10-15T21:36:40.268Z",
  "text": "although on py2 we may limit ourselves to the str type, at first",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/ssarangi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/239816?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/239816?v=4&s=60",
   "displayName": "Satyajit Sarangi",
   "gv": "4",
   "id": "55df76410fc9f982beaed3a9",
   "url": "/ssarangi",
   "username": "ssarangi",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"pitrou\" class=\"mention\">@pitrou</span>: :) so what different representations are there in py2 vs py3 for basic str type only ?",
  "id": "56201c7d68cecef349868511",
  "issues": [],
  "mentions": [
   {
    "screenName": "pitrou",
    "userId": "54935c59db8155e6700e0da8",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 9,
  "sent": "2015-10-15T21:37:01.368Z",
  "text": "@pitrou: :) so what different representations are there in py2 vs py3 for basic str type only ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/ssarangi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/239816?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/239816?v=4&s=60",
   "displayName": "Satyajit Sarangi",
   "gv": "4",
   "id": "55df76410fc9f982beaed3a9",
   "url": "/ssarangi",
   "username": "ssarangi",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"pitrou\" class=\"mention\">@pitrou</span>: Can&#39;t this just be represented as a i8* for llvm... it seems like debug_print also does something similar ?",
  "id": "56201cea356b58993c49462f",
  "issues": [],
  "mentions": [
   {
    "screenName": "pitrou",
    "userId": "54935c59db8155e6700e0da8",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 9,
  "sent": "2015-10-15T21:38:50.467Z",
  "text": "@pitrou: Can't this just be represented as a i8* for llvm... it seems like debug_print also does something similar ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "in py2, str is a 8-bit string (close to py3&#39;s bytes type), in py3, str uses a flexible representation (see PEP 393)",
  "id": "56201cf101bc5e92296bf69c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2015-10-15T21:38:57.400Z",
  "text": "in py2, str is a 8-bit string (close to py3's bytes type), in py3, str uses a flexible representation (see PEP 393)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2015-10-15T21:39:33.154Z",
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "<blockquote>\n<p><span data-link-type=\"mention\" data-screen-name=\"pitrou\" class=\"mention\">@pitrou</span>: Can&#39;t this just be represented as a i8* for llvm... it seems like debug_print also does something similar ?</p></blockquote>\n<p>ha, no, not at all... you need to store at least the length <em>and</em> pointer... </p>",
  "id": "56201d114341a44a5c6dd520",
  "issues": [],
  "mentions": [
   {
    "screenName": "pitrou",
    "userId": "54935c59db8155e6700e0da8",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 9,
  "sent": "2015-10-15T21:39:29.593Z",
  "text": "> @pitrou: Can't this just be represented as a i8* for llvm... it seems like debug_print also does something similar ?\n\nha, no, not at all... you need to store at least the length *and* pointer... ",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/ssarangi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/239816?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/239816?v=4&s=60",
   "displayName": "Satyajit Sarangi",
   "gv": "4",
   "id": "55df76410fc9f982beaed3a9",
   "url": "/ssarangi",
   "username": "ssarangi",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"pitrou\" class=\"mention\">@pitrou</span>: so its 1, 2 and 4 byte representation.. so just for simplicity if i start with 1 byte.. right now the type i see is str.. so in the printimpl.py do we define another method which handles strings ? or reuse print_charseq (although my understanding is it would work for constant strings only) ? Also can&#39;t we take advantage of the debug_print implementation either ?",
  "id": "56201e8777333bcf6d92cf8d",
  "issues": [],
  "mentions": [
   {
    "screenName": "pitrou",
    "userId": "54935c59db8155e6700e0da8",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 9,
  "sent": "2015-10-15T21:45:43.828Z",
  "text": "@pitrou: so its 1, 2 and 4 byte representation.. so just for simplicity if i start with 1 byte.. right now the type i see is str.. so in the printimpl.py do we define another method which handles strings ? or reuse print_charseq (although my understanding is it would work for constant strings only) ? Also can't we take advantage of the debug_print implementation either ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "You would first have to define the type in numba.types, then perhaps start by handling literals",
  "id": "56201eddb0edc67638cef2f5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2015-10-15T21:47:09.722Z",
  "text": "You would first have to define the type in numba.types, then perhaps start by handling literals",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/ssarangi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/239816?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/239816?v=4&s=60",
   "displayName": "Satyajit Sarangi",
   "gv": "4",
   "id": "55df76410fc9f982beaed3a9",
   "url": "/ssarangi",
   "username": "ssarangi",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"pitrou\" class=\"mention\">@pitrou</span>: so numba.types already has string = Opaque(&#39;str&#39;)",
  "id": "56201ef877333bcf6d92cf9f",
  "issues": [],
  "mentions": [
   {
    "screenName": "pitrou",
    "userId": "54935c59db8155e6700e0da8",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 9,
  "sent": "2015-10-15T21:47:36.347Z",
  "text": "@pitrou: so numba.types already has string = Opaque('str')",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/ssarangi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/239816?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/239816?v=4&s=60",
   "displayName": "Satyajit Sarangi",
   "gv": "4",
   "id": "55df76410fc9f982beaed3a9",
   "url": "/ssarangi",
   "username": "ssarangi",
   "v": 5
  },
  "html": "so i was assuming an i8 pointer type for the 1 byte strings only",
  "id": "56201f4e854578c35b2a28c5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2015-10-15T21:49:02.727Z",
  "text": "so i was assuming an i8 pointer type for the 1 byte strings only",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "yeah, but that&#39;s too crude. You will probably have to define a dedicated type class (especially given at some point we&#39;ll need to handle the various representations)",
  "id": "56201f604341a44a5c6dd52a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2015-10-15T21:49:20.542Z",
  "text": "yeah, but that's too crude. You will probably have to define a dedicated type class (especially given at some point we'll need to handle the various representations)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/ssarangi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/239816?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/239816?v=4&s=60",
   "displayName": "Satyajit Sarangi",
   "gv": "4",
   "id": "55df76410fc9f982beaed3a9",
   "url": "/ssarangi",
   "username": "ssarangi",
   "v": 5
  },
  "html": "makes sense.. so something like a String class by itself which can take bit width ?",
  "id": "56201f7468cecef34986859d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2015-10-15T21:49:40.318Z",
  "text": "makes sense.. so something like a String class by itself which can take bit width ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "The second thing would be to add support for that type in the typeof() function (see numba.typing.typeof)",
  "id": "56201f7701bc5e92296bf6a2",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2015-10-15T21:49:43.330Z",
  "text": "The second thing would be to add support for that type in the typeof() function (see numba.typing.typeof)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "Yes, for example",
  "id": "56201f7a4341a44a5c6dd52c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2015-10-15T21:49:46.327Z",
  "text": "Yes, for example",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/ssarangi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/239816?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/239816?v=4&s=60",
   "displayName": "Satyajit Sarangi",
   "gv": "4",
   "id": "55df76410fc9f982beaed3a9",
   "url": "/ssarangi",
   "username": "ssarangi",
   "v": 5
  },
  "html": "sorry.. bytewidth",
  "id": "56201f7b854578c35b2a28cd",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2015-10-15T21:49:47.233Z",
  "text": "sorry.. bytewidth",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/ssarangi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/239816?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/239816?v=4&s=60",
   "displayName": "Satyajit Sarangi",
   "gv": "4",
   "id": "55df76410fc9f982beaed3a9",
   "url": "/ssarangi",
   "username": "ssarangi",
   "v": 5
  },
  "html": "right.. i saw that part",
  "id": "56201f8634cd85cd6d5c409e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2015-10-15T21:49:58.382Z",
  "text": "right.. i saw that part",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/ssarangi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/239816?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/239816?v=4&s=60",
   "displayName": "Satyajit Sarangi",
   "gv": "4",
   "id": "55df76410fc9f982beaed3a9",
   "url": "/ssarangi",
   "username": "ssarangi",
   "v": 5
  },
  "html": "one thing i didn&#39;t understand",
  "id": "56201f8e34cd85cd6d5c40a1",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2015-10-15T21:50:06.478Z",
  "text": "one thing i didn't understand",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/ssarangi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/239816?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/239816?v=4&s=60",
   "displayName": "Satyajit Sarangi",
   "gv": "4",
   "id": "55df76410fc9f982beaed3a9",
   "url": "/ssarangi",
   "username": "ssarangi",
   "v": 5
  },
  "html": "was the type.Kind parameter",
  "id": "56201f968b09e2973cce8067",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2015-10-15T21:50:14.195Z",
  "text": "was the type.Kind parameter",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/ssarangi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/239816?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/239816?v=4&s=60",
   "displayName": "Satyajit Sarangi",
   "gv": "4",
   "id": "55df76410fc9f982beaed3a9",
   "url": "/ssarangi",
   "username": "ssarangi",
   "v": 5
  },
  "html": "i understood that basically its for checking if a type is a super type of some base type",
  "id": "56201fa9854578c35b2a28d5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2015-10-15T21:50:33.452Z",
  "text": "i understood that basically its for checking if a type is a super type of some base type",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/ssarangi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/239816?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/239816?v=4&s=60",
   "displayName": "Satyajit Sarangi",
   "gv": "4",
   "id": "55df76410fc9f982beaed3a9",
   "url": "/ssarangi",
   "username": "ssarangi",
   "v": 5
  },
  "html": "but I didn&#39;t quite understand one comparison - (isinstance(formal, types.Kind)",
  "id": "5620200c68cecef3498685bb",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2015-10-15T21:52:12.932Z",
  "text": "but I didn't quite understand one comparison - (isinstance(formal, types.Kind)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/ssarangi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/239816?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/239816?v=4&s=60",
   "displayName": "Satyajit Sarangi",
   "gv": "4",
   "id": "55df76410fc9f982beaed3a9",
   "url": "/ssarangi",
   "username": "ssarangi",
   "v": 5
  },
  "html": "in base.py - _match function",
  "id": "5620201934cd85cd6d5c40aa",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2015-10-15T21:52:25.088Z",
  "text": "in base.py - _match function",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/ssarangi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/239816?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/239816?v=4&s=60",
   "displayName": "Satyajit Sarangi",
   "gv": "4",
   "id": "55df76410fc9f982beaed3a9",
   "url": "/ssarangi",
   "username": "ssarangi",
   "v": 5
  },
  "html": "of Overloads",
  "id": "56202022356b58993c4946c9",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2015-10-15T21:52:34.290Z",
  "text": "of Overloads",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "oh... it&#39;s because <code>@implement</code> normally dispatches on type instances (like types.int64), so if you want it to dispatch on the type class (like types.Integer), you wrap it in a types.Kind",
  "id": "5620202fb0edc67638cef302",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2015-10-15T21:52:47.205Z",
  "text": "oh... it's because `@implement` normally dispatches on type instances (like types.int64), so if you want it to dispatch on the type class (like types.Integer), you wrap it in a types.Kind",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "it&#39;s a hack more than anything else",
  "id": "56202036b0edc67638cef303",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2015-10-15T21:52:54.646Z",
  "text": "it's a hack more than anything else",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/ssarangi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/239816?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/239816?v=4&s=60",
   "displayName": "Satyajit Sarangi",
   "gv": "4",
   "id": "55df76410fc9f982beaed3a9",
   "url": "/ssarangi",
   "username": "ssarangi",
   "v": 5
  },
  "html": "oh ok",
  "id": "5620203f854578c35b2a28ef",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2015-10-15T21:53:03.482Z",
  "text": "oh ok",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "and long term I think we should remove it and only dispatch on type classes",
  "id": "56202044b0edc67638cef304",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2015-10-15T21:53:08.140Z",
  "text": "and long term I think we should remove it and only dispatch on type classes",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/ssarangi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/239816?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/239816?v=4&s=60",
   "displayName": "Satyajit Sarangi",
   "gv": "4",
   "id": "55df76410fc9f982beaed3a9",
   "url": "/ssarangi",
   "username": "ssarangi",
   "v": 5
  },
  "html": "ok.. so once we define the type... lets say a String class.. now in type inference we map the string to this String class... ",
  "id": "5620207d77333bcf6d92cfd1",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2015-10-15T21:54:05.456Z",
  "text": "ok.. so once we define the type... lets say a String class.. now in type inference we map the string to this String class... ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "yes",
  "id": "562020894341a44a5c6dd534",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2015-10-15T21:54:17.482Z",
  "text": "yes",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/ssarangi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/239816?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/239816?v=4&s=60",
   "displayName": "Satyajit Sarangi",
   "gv": "4",
   "id": "55df76410fc9f982beaed3a9",
   "url": "/ssarangi",
   "username": "ssarangi",
   "v": 5
  },
  "html": "ok.. so then the last thing is which print implementation do we use.. ? we have for Int, float and charSeq",
  "id": "562020a077333bcf6d92cfd9",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2015-10-15T21:54:40.404Z",
  "text": "ok.. so then the last thing is which print implementation do we use.. ? we have for Int, float and charSeq",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/ssarangi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/239816?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/239816?v=4&s=60",
   "displayName": "Satyajit Sarangi",
   "gv": "4",
   "id": "55df76410fc9f982beaed3a9",
   "url": "/ssarangi",
   "username": "ssarangi",
   "v": 5
  },
  "html": "so will it be a new method or reuse CharSeq",
  "id": "562020ab854578c35b2a2902",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2015-10-15T21:54:51.825Z",
  "text": "so will it be a new method or reuse CharSeq",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/ssarangi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/239816?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/239816?v=4&s=60",
   "displayName": "Satyajit Sarangi",
   "gv": "4",
   "id": "55df76410fc9f982beaed3a9",
   "url": "/ssarangi",
   "username": "ssarangi",
   "v": 5
  },
  "html": "by getting length of string",
  "id": "562020b068cecef3498685d0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2015-10-15T21:54:56.499Z",
  "text": "by getting length of string",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "I would suggest proceeding step by step (for example you can add a test to test_typeof)",
  "id": "562020b1b0edc67638cef308",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2015-10-15T21:54:57.615Z",
  "text": "I would suggest proceeding step by step (for example you can add a test to test_typeof)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "I think it will be a new method",
  "id": "562020be01bc5e92296bf6ab",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2015-10-15T21:55:10.199Z",
  "text": "I think it will be a new method",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/ssarangi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/239816?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/239816?v=4&s=60",
   "displayName": "Satyajit Sarangi",
   "gv": "4",
   "id": "55df76410fc9f982beaed3a9",
   "url": "/ssarangi",
   "username": "ssarangi",
   "v": 5
  },
  "html": "i see.. makes sense.. ",
  "id": "562020c2356b58993c4946da",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2015-10-15T21:55:14.788Z",
  "text": "i see.. makes sense.. ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "charseq is a very specific thing (a fixed-length bytestring embedded in a numpy array)",
  "id": "562020cab0edc67638cef309",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2015-10-15T21:55:22.151Z",
  "text": "charseq is a very specific thing (a fixed-length bytestring embedded in a numpy array)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/ssarangi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/239816?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/239816?v=4&s=60",
   "displayName": "Satyajit Sarangi",
   "gv": "4",
   "id": "55df76410fc9f982beaed3a9",
   "url": "/ssarangi",
   "username": "ssarangi",
   "v": 5
  },
  "html": "ok let me give the test_typeof as the first thing to do... ",
  "id": "562020d08b09e2973cce80a2",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2015-10-15T21:55:28.293Z",
  "text": "ok let me give the test_typeof as the first thing to do... ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/ssarangi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/239816?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/239816?v=4&s=60",
   "displayName": "Satyajit Sarangi",
   "gv": "4",
   "id": "55df76410fc9f982beaed3a9",
   "url": "/ssarangi",
   "username": "ssarangi",
   "v": 5
  },
  "html": "i see",
  "id": "562020d38b09e2973cce80a3",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2015-10-15T21:55:31.004Z",
  "text": "i see",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2015-10-15T21:56:16.207Z",
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "yes, since the architecture is non-trivial and not exhaustively documented, it&#39;s good to have some insurance you&#39;re doing the right thing :)",
  "id": "562020fab0edc67638cef30c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2015-10-15T21:56:10.430Z",
  "text": "yes, since the architecture is non-trivial and not exhaustively documented, it's good to have some insurance you're doing the right thing :)",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/ssarangi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/239816?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/239816?v=4&s=60",
   "displayName": "Satyajit Sarangi",
   "gv": "4",
   "id": "55df76410fc9f982beaed3a9",
   "url": "/ssarangi",
   "username": "ssarangi",
   "v": 5
  },
  "html": ":) absolutely... I will keep pinging you if you don&#39;t mind.. as I get stuck",
  "id": "5620211c77333bcf6d92cfe8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2015-10-15T21:56:44.714Z",
  "text": ":) absolutely... I will keep pinging you if you don't mind.. as I get stuck",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "feel free to do it",
  "id": "562021264341a44a5c6dd538",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2015-10-15T21:56:54.922Z",
  "text": "feel free to do it",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/ssarangi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/239816?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/239816?v=4&s=60",
   "displayName": "Satyajit Sarangi",
   "gv": "4",
   "id": "55df76410fc9f982beaed3a9",
   "url": "/ssarangi",
   "username": "ssarangi",
   "v": 5
  },
  "html": "thanks :)",
  "id": "5620212a356b58993c4946f0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2015-10-15T21:56:58.711Z",
  "text": "thanks :)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/richardotis",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/6405510?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/6405510?v=4&s=60",
   "displayName": "Richard Otis",
   "gv": "4",
   "id": "55a137c15e0d51bd787b0b26",
   "url": "/richardotis",
   "username": "richardotis",
   "v": 13
  },
  "html": "I&#39;d appreciate eyes on a frustrating issue I&#39;m having <span data-link-type=\"issue\" data-issue=\"1529\" class=\"issue\">#1529</span> ",
  "id": "5643b4f25f3db8f60ab61336",
  "issues": [
   {
    "number": "1529"
   }
  ],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2015-11-11T21:36:50.954Z",
  "text": "I'd appreciate eyes on a frustrating issue I'm having #1529 ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/avounotr",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/6311636?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/6311636?v=3&s=60",
   "displayName": "Asterios Vounotrypidis",
   "gv": "3",
   "id": "5620975b16b6c7089cb72eea",
   "url": "/avounotr",
   "username": "avounotr",
   "v": 2
  },
  "html": "hi there.",
  "id": "5673efd3a95dea5d42154ae5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2015-12-18T11:36:51.586Z",
  "text": "hi there.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/avounotr",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/6311636?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/6311636?v=3&s=60",
   "displayName": "Asterios Vounotrypidis",
   "gv": "3",
   "id": "5620975b16b6c7089cb72eea",
   "url": "/avounotr",
   "username": "avounotr",
   "v": 2
  },
  "html": "is anybody here?",
  "id": "5673efe25155bfb75b1736e3",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2015-12-18T11:37:06.593Z",
  "text": "is anybody here?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/gmarkall",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/535640?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/535640?v=3&s=60",
   "displayName": "Graham Markall",
   "gv": "3",
   "id": "55b342020fc9f982beaaedf1",
   "url": "/gmarkall",
   "username": "gmarkall",
   "v": 6
  },
  "html": "people are here :-)",
  "id": "5673ff36f31bbe91555b293b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2015-12-18T12:42:30.164Z",
  "text": "people are here :-)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/avounotr",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/6311636?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/6311636?v=3&s=60",
   "displayName": "Asterios Vounotrypidis",
   "gv": "3",
   "id": "5620975b16b6c7089cb72eea",
   "url": "/avounotr",
   "username": "avounotr",
   "v": 2
  },
  "html": "ok thanks",
  "id": "56740092cc068a5e42f1f17e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2015-12-18T12:48:18.656Z",
  "text": "ok thanks",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/avounotr",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/6311636?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/6311636?v=3&s=60",
   "displayName": "Asterios Vounotrypidis",
   "gv": "3",
   "id": "5620975b16b6c7089cb72eea",
   "url": "/avounotr",
   "username": "avounotr",
   "v": 2
  },
  "html": "I would like to ask you a question",
  "id": "5674009b5155bfb75b173986",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2015-12-18T12:48:27.918Z",
  "text": "I would like to ask you a question",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/avounotr",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/6311636?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/6311636?v=3&s=60",
   "displayName": "Asterios Vounotrypidis",
   "gv": "3",
   "id": "5620975b16b6c7089cb72eea",
   "url": "/avounotr",
   "username": "avounotr",
   "v": 2
  },
  "html": "I am trying to create a list of lists, which is something that I can do in python, but I am afraid that numba does not allow this action",
  "id": "567400ce69a89a8f552f271d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2015-12-18T12:49:18.170Z",
  "text": "I am trying to create a list of lists, which is something that I can do in python, but I am afraid that numba does not allow this action",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/avounotr",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/6311636?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/6311636?v=3&s=60",
   "displayName": "Asterios Vounotrypidis",
   "gv": "3",
   "id": "5620975b16b6c7089cb72eea",
   "url": "/avounotr",
   "username": "avounotr",
   "v": 2
  },
  "html": "something like that:<br>team = []<br>team.append(<a href=\"https://github.com/linuxdeepin/deepin-emacs/tree/master/site-lisp/extensions/webkit\" rel=\"nofollow\" target=\"_blank\" class=\"link\">1</a>)",
  "id": "567400f2a95dea5d42154d55",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2015-12-18T12:49:54.894Z",
  "text": "something like that:\nteam = []\nteam.append([1])",
  "unread": false,
  "urls": [
   {
    "url": "https://github.com/linuxdeepin/deepin-emacs/tree/master/site-lisp/extensions/webkit"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/avounotr",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/6311636?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/6311636?v=3&s=60",
   "displayName": "Asterios Vounotrypidis",
   "gv": "3",
   "id": "5620975b16b6c7089cb72eea",
   "url": "/avounotr",
   "username": "avounotr",
   "v": 2
  },
  "html": "is there any other way to do this thing?",
  "id": "56740164cc068a5e42f1f19f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2015-12-18T12:51:48.354Z",
  "text": "is there any other way to do this thing?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/gmarkall",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/535640?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/535640?v=3&s=60",
   "displayName": "Graham Markall",
   "gv": "3",
   "id": "55b342020fc9f982beaaedf1",
   "url": "/gmarkall",
   "username": "gmarkall",
   "v": 6
  },
  "html": "can you explain a bit more about the context of what you&#39;re trying to implement? it&#39;s a bit tricky to suggest an alternative without really understanding what you&#39;re implementing",
  "id": "567401cff31bbe91555b29a8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2015-12-18T12:53:35.402Z",
  "text": "can you explain a bit more about the context of what you're trying to implement? it's a bit tricky to suggest an alternative without really understanding what you're implementing",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2015-12-18T14:40:12.549Z",
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/avounotr",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/6311636?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/6311636?v=3&s=60",
   "displayName": "Asterios Vounotrypidis",
   "gv": "3",
   "id": "5620975b16b6c7089cb72eea",
   "url": "/avounotr",
   "username": "avounotr",
   "v": 2
  },
  "html": "<p>ok sorry. Lets say that I run this function with python:</p><p><span data-link-type=\"mention\" data-screen-name=\"jit\" class=\"mention\">@jit</span>(nopython=True)<br>def testFunction():<br>   team = []<br>   team.append(<a href=\"https://github.com/linuxdeepin/deepin-emacs/tree/master/site-lisp/extensions/webkit\" rel=\"nofollow\" target=\"_blank\" class=\"link\">1</a>)</p>",
  "id": "56741a9b091b6f9e0439b2a6",
  "issues": [],
  "mentions": [
   {
    "screenName": "jit",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 10,
  "sent": "2015-12-18T14:39:23.107Z",
  "text": "ok sorry. Lets say that I run this function with python:\n\n@jit(nopython=True)\ndef testFunction():\n   team = []\n   team.append([1])",
  "unread": false,
  "urls": [
   {
    "url": "https://github.com/linuxdeepin/deepin-emacs/tree/master/site-lisp/extensions/webkit"
   }
  ],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/avounotr",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/6311636?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/6311636?v=3&s=60",
   "displayName": "Asterios Vounotrypidis",
   "gv": "3",
   "id": "5620975b16b6c7089cb72eea",
   "url": "/avounotr",
   "username": "avounotr",
   "v": 2
  },
  "html": "Numba will give me an error because I am trying to make a list inside a list, and I am asking if I can do this with another method.",
  "id": "56741af8091b6f9e0439b2b5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2015-12-18T14:40:56.349Z",
  "text": "Numba will give me an error because I am trying to make a list inside a list, and I am asking if I can do this with another method.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/gmarkall",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/535640?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/535640?v=3&s=60",
   "displayName": "Graham Markall",
   "gv": "3",
   "id": "55b342020fc9f982beaaedf1",
   "url": "/gmarkall",
   "username": "gmarkall",
   "v": 6
  },
  "html": "what version of numba are you using? that doesn&#39;t result in an error for me",
  "id": "56741be769a89a8f552f2bb3",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2015-12-18T14:44:55.960Z",
  "text": "what version of numba are you using? that doesn't result in an error for me",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/avounotr",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/6311636?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/6311636?v=3&s=60",
   "displayName": "Asterios Vounotrypidis",
   "gv": "3",
   "id": "5620975b16b6c7089cb72eea",
   "url": "/avounotr",
   "username": "avounotr",
   "v": 2
  },
  "html": "0.22.1",
  "id": "56741c4f69a89a8f552f2bbf",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2015-12-18T14:46:39.181Z",
  "text": "0.22.1",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/gmarkall",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/535640?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/535640?v=3&s=60",
   "displayName": "Graham Markall",
   "gv": "3",
   "id": "55b342020fc9f982beaaedf1",
   "url": "/gmarkall",
   "username": "gmarkall",
   "v": 6
  },
  "html": "If I execute:",
  "id": "56741c5e37169e856a757ad4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2015-12-18T14:46:54.489Z",
  "text": "If I execute:",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/gmarkall",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/535640?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/535640?v=3&s=60",
   "displayName": "Graham Markall",
   "gv": "3",
   "id": "55b342020fc9f982beaaedf1",
   "url": "/gmarkall",
   "username": "gmarkall",
   "v": 6
  },
  "html": "<pre><code><span class=\"keyword\">from</span> numba <span class=\"keyword\">import</span> jit\n\n<span class=\"decorator\">@jit(nopython=True)</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">testFunction</span><span class=\"params\">()</span>:</span>\n    team = []\n    team.append(<span class=\"number\">1</span>)\n\ntestFunction()</code></pre>then there is no error  with 0.22.1 for me",
  "id": "56741c835155bfb75b173e09",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2015-12-18T14:47:31.051Z",
  "text": "```\nfrom numba import jit\n\n@jit(nopython=True)\ndef testFunction():\n    team = []\n    team.append(1)\n\ntestFunction()\n\n```\nthen there is no error  with 0.22.1 for me",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/gmarkall",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/535640?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/535640?v=3&s=60",
   "displayName": "Graham Markall",
   "gv": "3",
   "id": "55b342020fc9f982beaaedf1",
   "url": "/gmarkall",
   "username": "gmarkall",
   "v": 6
  },
  "html": "perhaps you mean <code>team.append([1])</code> or something like that?",
  "id": "56741ca3f99ceb846ae69be0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2015-12-18T14:48:03.821Z",
  "text": "perhaps you mean `team.append([1])` or something like that?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/avounotr",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/6311636?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/6311636?v=3&s=60",
   "displayName": "Asterios Vounotrypidis",
   "gv": "3",
   "id": "5620975b16b6c7089cb72eea",
   "url": "/avounotr",
   "username": "avounotr",
   "v": 2
  },
  "html": "yes",
  "id": "56741ccff31bbe91555b2e0c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2015-12-18T14:48:47.235Z",
  "text": "yes",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/avounotr",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/6311636?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/6311636?v=3&s=60",
   "displayName": "Asterios Vounotrypidis",
   "gv": "3",
   "id": "5620975b16b6c7089cb72eea",
   "url": "/avounotr",
   "username": "avounotr",
   "v": 2
  },
  "html": "I mean [1]",
  "id": "56741cd2f240f5a004172e8d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2015-12-18T14:48:50.921Z",
  "text": "I mean [1]",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/gmarkall",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/535640?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/535640?v=3&s=60",
   "displayName": "Graham Markall",
   "gv": "3",
   "id": "55b342020fc9f982beaaedf1",
   "url": "/gmarkall",
   "username": "gmarkall",
   "v": 6
  },
  "html": "anyway - the problem with suggesting what to do is that i have no idea why you&#39;re trying to create nested lists... choosing an alternative depends on what it is that you plan to do with those nested lists, and perhaps what you&#39;re constructing them from",
  "id": "56741cd369a89a8f552f2bd6",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2015-12-18T14:48:51.064Z",
  "text": "anyway - the problem with suggesting what to do is that i have no idea why you're trying to create nested lists... choosing an alternative depends on what it is that you plan to do with those nested lists, and perhaps what you're constructing them from",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/avounotr",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/6311636?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/6311636?v=3&s=60",
   "displayName": "Asterios Vounotrypidis",
   "gv": "3",
   "id": "5620975b16b6c7089cb72eea",
   "url": "/avounotr",
   "username": "avounotr",
   "v": 2
  },
  "html": "gitter auto delete []  which I wrote twice",
  "id": "56741ce937169e856a757af4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2015-12-18T14:49:13.012Z",
  "text": "gitter auto delete []  which I wrote twice",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/gmarkall",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/535640?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/535640?v=3&s=60",
   "displayName": "Graham Markall",
   "gv": "3",
   "id": "55b342020fc9f982beaaedf1",
   "url": "/gmarkall",
   "username": "gmarkall",
   "v": 6
  },
  "html": "you can put code in backticks to stop it doing that",
  "id": "56741d14f240f5a004172e96",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2015-12-18T14:49:56.548Z",
  "text": "you can put code in backticks to stop it doing that",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/avounotr",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/6311636?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/6311636?v=3&s=60",
   "displayName": "Asterios Vounotrypidis",
   "gv": "3",
   "id": "5620975b16b6c7089cb72eea",
   "url": "/avounotr",
   "username": "avounotr",
   "v": 2
  },
  "html": "a ok thanks",
  "id": "56741d3ff99ceb846ae69bf9",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2015-12-18T14:50:39.934Z",
  "text": "a ok thanks",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/avounotr",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/6311636?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/6311636?v=3&s=60",
   "displayName": "Asterios Vounotrypidis",
   "gv": "3",
   "id": "5620975b16b6c7089cb72eea",
   "url": "/avounotr",
   "username": "avounotr",
   "v": 2
  },
  "html": "I am asking if for example I could do the same thing for example with tuples inside list",
  "id": "56741d6f5155bfb75b173e33",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2015-12-18T14:51:27.113Z",
  "text": "I am asking if for example I could do the same thing for example with tuples inside list",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/avounotr",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/6311636?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/6311636?v=3&s=60",
   "displayName": "Asterios Vounotrypidis",
   "gv": "3",
   "id": "5620975b16b6c7089cb72eea",
   "url": "/avounotr",
   "username": "avounotr",
   "v": 2
  },
  "html": "the reason why I would like to use this structure is a little complicated to explain right now",
  "id": "56741d95f240f5a004172eac",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2015-12-18T14:52:05.038Z",
  "text": "the reason why I would like to use this structure is a little complicated to explain right now",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/gmarkall",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/535640?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/535640?v=3&s=60",
   "displayName": "Graham Markall",
   "gv": "3",
   "id": "55b342020fc9f982beaaedf1",
   "url": "/gmarkall",
   "username": "gmarkall",
   "v": 6
  },
  "html": "so, this works:<pre><code><span class=\"keyword\">from</span> numba <span class=\"keyword\">import</span> jit\n\n<span class=\"decorator\">@jit(nopython=True)</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">testFunction</span><span class=\"params\">()</span>:</span>\n    team = []\n    team.append((<span class=\"number\">1</span>,))\n    team.append((<span class=\"number\">1</span>,))\n    <span class=\"keyword\">return</span> team\n\nprint(testFunction())</code></pre>",
  "id": "56741e12f99ceb846ae69c1f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2015-12-18T14:54:10.934Z",
  "text": "so, this works:\n```\nfrom numba import jit\n\n@jit(nopython=True)\ndef testFunction():\n    team = []\n    team.append((1,))\n    team.append((1,))\n    return team\n\nprint(testFunction())\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/gmarkall",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/535640?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/535640?v=3&s=60",
   "displayName": "Graham Markall",
   "gv": "3",
   "id": "55b342020fc9f982beaaedf1",
   "url": "/gmarkall",
   "username": "gmarkall",
   "v": 6
  },
  "html": "but this does not:<pre><code><span class=\"keyword\">from</span> numba <span class=\"keyword\">import</span> jit\n\n<span class=\"decorator\">@jit(nopython=True)</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">testFunction</span><span class=\"params\">()</span>:</span>\n    team = []\n    team.append((<span class=\"number\">1</span>,))\n    team.append((<span class=\"number\">1</span>,<span class=\"number\">2</span>))\n    <span class=\"keyword\">return</span> team\n\nprint(testFunction())</code></pre>",
  "id": "56741e29f31bbe91555b2e3b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2015-12-18T14:54:33.560Z",
  "text": "but this does not:\n```\nfrom numba import jit\n\n@jit(nopython=True)\ndef testFunction():\n    team = []\n    team.append((1,))\n    team.append((1,2))\n    return team\n\nprint(testFunction())\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/gmarkall",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/535640?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/535640?v=3&s=60",
   "displayName": "Graham Markall",
   "gv": "3",
   "id": "55b342020fc9f982beaaedf1",
   "url": "/gmarkall",
   "username": "gmarkall",
   "v": 6
  },
  "html": "(which may be a bug)",
  "id": "56741e2ff31bbe91555b2e3c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2015-12-18T14:54:39.931Z",
  "text": "(which may be a bug)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/gmarkall",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/535640?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/535640?v=3&s=60",
   "displayName": "Graham Markall",
   "gv": "3",
   "id": "55b342020fc9f982beaaedf1",
   "url": "/gmarkall",
   "username": "gmarkall",
   "v": 6
  },
  "html": "it seems that if your tuples are all the same length you can make a list of them",
  "id": "56741e5237169e856a757b3d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2015-12-18T14:55:14.829Z",
  "text": "it seems that if your tuples are all the same length you can make a list of them",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/gmarkall",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/535640?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/535640?v=3&s=60",
   "displayName": "Graham Markall",
   "gv": "3",
   "id": "55b342020fc9f982beaaedf1",
   "url": "/gmarkall",
   "username": "gmarkall",
   "v": 6
  },
  "html": "but attempting to put different-length tuples is a problem",
  "id": "56741e79f31bbe91555b2e4b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2015-12-18T14:55:53.291Z",
  "text": "but attempting to put different-length tuples is a problem",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/gmarkall",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/535640?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/535640?v=3&s=60",
   "displayName": "Graham Markall",
   "gv": "3",
   "id": "55b342020fc9f982beaaedf1",
   "url": "/gmarkall",
   "username": "gmarkall",
   "v": 6
  },
  "html": "actually, thinking about it, the reason different-length tuples in the same list doesn&#39;t work is probably because it would present a problem for type inference so I suspect that&#39;s a current limitation rather than a bug that the second snippet above doesn&#39;t work",
  "id": "56741ea1f99ceb846ae69c37",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2015-12-18T14:56:33.927Z",
  "text": "actually, thinking about it, the reason different-length tuples in the same list doesn't work is probably because it would present a problem for type inference so I suspect that's a current limitation rather than a bug that the second snippet above doesn't work",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2015-12-18T15:08:42.074Z",
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/avounotr",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/6311636?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/6311636?v=3&s=60",
   "displayName": "Asterios Vounotrypidis",
   "gv": "3",
   "id": "5620975b16b6c7089cb72eea",
   "url": "/avounotr",
   "username": "avounotr",
   "v": 2
  },
  "html": "thank you but this is not a solution in my problem",
  "id": "5674216937169e856a757bd4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2015-12-18T15:08:25.071Z",
  "text": "thank you but this is not a solution in my problem",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/avounotr",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/6311636?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/6311636?v=3&s=60",
   "displayName": "Asterios Vounotrypidis",
   "gv": "3",
   "id": "5620975b16b6c7089cb72eea",
   "url": "/avounotr",
   "username": "avounotr",
   "v": 2
  },
  "html": "i need tuple like this:<br><code>team[0].append((1,))</code>",
  "id": "567421a0f31bbe91555b2ed3",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2015-12-18T15:09:20.442Z",
  "text": "i need tuple like this:\n`\nteam[0].append((1,))\n`\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "It is going to be hard to represent this kind of data in a way that Numba can operate on, unfortunately.",
  "id": "5674272ff31bbe91555b2fcd",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2015-12-18T15:33:03.250Z",
  "text": "It is going to be hard to represent this kind of data in a way that Numba can operate on, unfortunately.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2016-01-11T00:19:17.902Z",
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/dhirschfeld",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/881019?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/881019?v=4&s=60",
   "displayName": "Dave Hirschfeld",
   "gv": "4",
   "id": "533187555e986b0712effbbd",
   "url": "/dhirschfeld",
   "username": "dhirschfeld",
   "v": 26
  },
  "html": "Do keywords work for numba functions?<pre><code class=\"python\"><span class=\"decorator\">@vectorize([float64(float64, float64, float64)], nopython=True)</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span><span class=\"params\">(a, b, c)</span>:</span>\n    <span class=\"keyword\">return</span> (a + b)*c</code></pre><pre><code class=\"python\">In [<span class=\"number\">3</span>]: f(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)\nOut[<span class=\"number\">3</span>]: <span class=\"number\">9.0</span>\nIn [<span class=\"number\">4</span>]: f(<span class=\"number\">1</span>, <span class=\"number\">2</span>, c=<span class=\"number\">3</span>)\nTraceback (most recent call last):\n\n  File <span class=\"string\">\"&lt;ipython-input-4-77b1b1a79edf&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;\n    f(<span class=\"number\">1</span>, <span class=\"number\">2</span>, c=<span class=\"number\">3</span>)\n\nValueError: invalid number of arguments</code></pre>",
  "id": "5692f4ee766922073602efce",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2016-01-11T00:18:54.600Z",
  "text": "Do keywords work for numba functions?\n```python\n@vectorize([float64(float64, float64, float64)], nopython=True)\ndef f(a, b, c):\n    return (a + b)*c\n```\n```python\nIn [3]: f(1, 2, 3)\nOut[3]: 9.0\nIn [4]: f(1, 2, c=3)\nTraceback (most recent call last):\n\n  File \"<ipython-input-4-77b1b1a79edf>\", line 1, in <module>\n    f(1, 2, c=3)\n\nValueError: invalid number of arguments\n```",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/dhirschfeld",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/881019?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/881019?v=4&s=60",
   "displayName": "Dave Hirschfeld",
   "gv": "4",
   "id": "533187555e986b0712effbbd",
   "url": "/dhirschfeld",
   "username": "dhirschfeld",
   "v": 26
  },
  "html": "Is there a way to call a vectorized function from another one in nopython mode:<pre><code class=\"python\">In [<span class=\"number\">16</span>]: <span class=\"decorator\">@vectorize([float64(float64, float64, float64)], nopython=True)</span>\n    ...: <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span><span class=\"params\">(a, b, c)</span>:</span>\n    ...:     <span class=\"keyword\">return</span> (a + b)*c\n    ...: \n    ...: <span class=\"decorator\">@vectorize([float64(float64, float64, float64)], nopython=True)</span>\n    ...: <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f2</span><span class=\"params\">(a, b ,c)</span>:</span>\n    ...:     <span class=\"keyword\">return</span> <span class=\"number\">2</span>*f(a, b,  c)\n    ...: \nTraceback (most recent call last):\n\n  File <span class=\"string\">\"&lt;ipython-input-16-dfe8218a35d9&gt;\"</span>, line <span class=\"number\">5</span>, <span class=\"keyword\">in</span> &lt;module&gt;\n    <span class=\"decorator\">@vectorize([float64(float64, float64, float64)], nopython=True)</span>\n\n  File <span class=\"string\">\"C:\\Users\\dhirschf\\AppData\\Roaming\\Continuum\\Anaconda3\\lib\\site-packages\\numba\\npyufunc\\decorators.py\"</span>, line <span class=\"number\">111</span>, <span class=\"keyword\">in</span> wrap\n    vec.add(fty)\n\n  File <span class=\"string\">\"C:\\Users\\dhirschf\\AppData\\Roaming\\Continuum\\Anaconda3\\lib\\site-packages\\numba\\npyufunc\\ufuncbuilder.py\"</span>, line <span class=\"number\">163</span>, <span class=\"keyword\">in</span> add\n    self.nb_func, targetoptions, sig, argtypes, restype)\n\n  File <span class=\"string\">\"C:\\Users\\dhirschf\\AppData\\Roaming\\Continuum\\Anaconda3\\lib\\site-packages\\numba\\npyufunc\\ufuncbuilder.py\"</span>, line <span class=\"number\">89</span>, <span class=\"keyword\">in</span> _compile_element_wise_function\n    cres = nb_func.compile(sig, **targetoptions)\n\n  File <span class=\"string\">\"C:\\Users\\dhirschf\\AppData\\Roaming\\Continuum\\Anaconda3\\lib\\site-packages\\numba\\npyufunc\\ufuncbuilder.py\"</span>, line <span class=\"number\">65</span>, <span class=\"keyword\">in</span> compile\n    flags=flags, locals=locals)\n\n  File <span class=\"string\">\"C:\\Users\\dhirschf\\AppData\\Roaming\\Continuum\\Anaconda3\\lib\\site-packages\\numba\\compiler.py\"</span>, line <span class=\"number\">665</span>, <span class=\"keyword\">in</span> compile_extra\n    <span class=\"keyword\">return</span> pipeline.compile_extra(func)\n\n  File <span class=\"string\">\"C:\\Users\\dhirschf\\AppData\\Roaming\\Continuum\\Anaconda3\\lib\\site-packages\\numba\\compiler.py\"</span>, line <span class=\"number\">366</span>, <span class=\"keyword\">in</span> compile_extra\n    <span class=\"keyword\">return</span> self.compile_bytecode(bc, func_attr=self.func_attr)\n\n  File <span class=\"string\">\"C:\\Users\\dhirschf\\AppData\\Roaming\\Continuum\\Anaconda3\\lib\\site-packages\\numba\\compiler.py\"</span>, line <span class=\"number\">375</span>, <span class=\"keyword\">in</span> compile_bytecode\n    <span class=\"keyword\">return</span> self._compile_bytecode()\n\n  File <span class=\"string\">\"C:\\Users\\dhirschf\\AppData\\Roaming\\Continuum\\Anaconda3\\lib\\site-packages\\numba\\compiler.py\"</span>, line <span class=\"number\">652</span>, <span class=\"keyword\">in</span> _compile_bytecode\n    <span class=\"keyword\">return</span> pm.run(self.status)\n\n  File <span class=\"string\">\"C:\\Users\\dhirschf\\AppData\\Roaming\\Continuum\\Anaconda3\\lib\\site-packages\\numba\\compiler.py\"</span>, line <span class=\"number\">251</span>, <span class=\"keyword\">in</span> run\n    <span class=\"keyword\">raise</span> patched_exception\n\n  File <span class=\"string\">\"C:\\Users\\dhirschf\\AppData\\Roaming\\Continuum\\Anaconda3\\lib\\site-packages\\numba\\compiler.py\"</span>, line <span class=\"number\">243</span>, <span class=\"keyword\">in</span> run\n    res = stage()\n\n  File <span class=\"string\">\"C:\\Users\\dhirschf\\AppData\\Roaming\\Continuum\\Anaconda3\\lib\\site-packages\\numba\\compiler.py\"</span>, line <span class=\"number\">463</span>, <span class=\"keyword\">in</span> stage_nopython_frontend\n    self.locals)\n\n  File <span class=\"string\">\"C:\\Users\\dhirschf\\AppData\\Roaming\\Continuum\\Anaconda3\\lib\\site-packages\\numba\\compiler.py\"</span>, line <span class=\"number\">779</span>, <span class=\"keyword\">in</span> type_inference_stage\n    infer.build_constraint()\n\n  File <span class=\"string\">\"C:\\Users\\dhirschf\\AppData\\Roaming\\Continuum\\Anaconda3\\lib\\site-packages\\numba\\typeinfer.py\"</span>, line <span class=\"number\">549</span>, <span class=\"keyword\">in</span> build_constraint\n    self.constrain_statement(inst)\n\n  File <span class=\"string\">\"C:\\Users\\dhirschf\\AppData\\Roaming\\Continuum\\Anaconda3\\lib\\site-packages\\numba\\typeinfer.py\"</span>, line <span class=\"number\">672</span>, <span class=\"keyword\">in</span> constrain_statement\n    self.typeof_assign(inst)\n\n  File <span class=\"string\">\"C:\\Users\\dhirschf\\AppData\\Roaming\\Continuum\\Anaconda3\\lib\\site-packages\\numba\\typeinfer.py\"</span>, line <span class=\"number\">722</span>, <span class=\"keyword\">in</span> typeof_assign\n    self.typeof_global(inst, inst.target, value)\n\n  File <span class=\"string\">\"C:\\Users\\dhirschf\\AppData\\Roaming\\Continuum\\Anaconda3\\lib\\site-packages\\numba\\typeinfer.py\"</span>, line <span class=\"number\">788</span>, <span class=\"keyword\">in</span> typeof_global\n    loc=inst.loc)\n\nTypingError: Untyped <span class=\"keyword\">global</span> name <span class=\"string\">'f'</span></code></pre>",
  "id": "569319780712a5b63b4ca7a1",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2016-01-11T02:54:48.481Z",
  "text": "Is there a way to call a vectorized function from another one in nopython mode:\n```python\nIn [16]: @vectorize([float64(float64, float64, float64)], nopython=True)\n    ...: def f(a, b, c):\n    ...:     return (a + b)*c\n    ...: \n    ...: @vectorize([float64(float64, float64, float64)], nopython=True)\n    ...: def f2(a, b ,c):\n    ...:     return 2*f(a, b,  c)\n    ...: \nTraceback (most recent call last):\n\n  File \"<ipython-input-16-dfe8218a35d9>\", line 5, in <module>\n    @vectorize([float64(float64, float64, float64)], nopython=True)\n\n  File \"C:\\Users\\dhirschf\\AppData\\Roaming\\Continuum\\Anaconda3\\lib\\site-packages\\numba\\npyufunc\\decorators.py\", line 111, in wrap\n    vec.add(fty)\n\n  File \"C:\\Users\\dhirschf\\AppData\\Roaming\\Continuum\\Anaconda3\\lib\\site-packages\\numba\\npyufunc\\ufuncbuilder.py\", line 163, in add\n    self.nb_func, targetoptions, sig, argtypes, restype)\n\n  File \"C:\\Users\\dhirschf\\AppData\\Roaming\\Continuum\\Anaconda3\\lib\\site-packages\\numba\\npyufunc\\ufuncbuilder.py\", line 89, in _compile_element_wise_function\n    cres = nb_func.compile(sig, **targetoptions)\n\n  File \"C:\\Users\\dhirschf\\AppData\\Roaming\\Continuum\\Anaconda3\\lib\\site-packages\\numba\\npyufunc\\ufuncbuilder.py\", line 65, in compile\n    flags=flags, locals=locals)\n\n  File \"C:\\Users\\dhirschf\\AppData\\Roaming\\Continuum\\Anaconda3\\lib\\site-packages\\numba\\compiler.py\", line 665, in compile_extra\n    return pipeline.compile_extra(func)\n\n  File \"C:\\Users\\dhirschf\\AppData\\Roaming\\Continuum\\Anaconda3\\lib\\site-packages\\numba\\compiler.py\", line 366, in compile_extra\n    return self.compile_bytecode(bc, func_attr=self.func_attr)\n\n  File \"C:\\Users\\dhirschf\\AppData\\Roaming\\Continuum\\Anaconda3\\lib\\site-packages\\numba\\compiler.py\", line 375, in compile_bytecode\n    return self._compile_bytecode()\n\n  File \"C:\\Users\\dhirschf\\AppData\\Roaming\\Continuum\\Anaconda3\\lib\\site-packages\\numba\\compiler.py\", line 652, in _compile_bytecode\n    return pm.run(self.status)\n\n  File \"C:\\Users\\dhirschf\\AppData\\Roaming\\Continuum\\Anaconda3\\lib\\site-packages\\numba\\compiler.py\", line 251, in run\n    raise patched_exception\n\n  File \"C:\\Users\\dhirschf\\AppData\\Roaming\\Continuum\\Anaconda3\\lib\\site-packages\\numba\\compiler.py\", line 243, in run\n    res = stage()\n\n  File \"C:\\Users\\dhirschf\\AppData\\Roaming\\Continuum\\Anaconda3\\lib\\site-packages\\numba\\compiler.py\", line 463, in stage_nopython_frontend\n    self.locals)\n\n  File \"C:\\Users\\dhirschf\\AppData\\Roaming\\Continuum\\Anaconda3\\lib\\site-packages\\numba\\compiler.py\", line 779, in type_inference_stage\n    infer.build_constraint()\n\n  File \"C:\\Users\\dhirschf\\AppData\\Roaming\\Continuum\\Anaconda3\\lib\\site-packages\\numba\\typeinfer.py\", line 549, in build_constraint\n    self.constrain_statement(inst)\n\n  File \"C:\\Users\\dhirschf\\AppData\\Roaming\\Continuum\\Anaconda3\\lib\\site-packages\\numba\\typeinfer.py\", line 672, in constrain_statement\n    self.typeof_assign(inst)\n\n  File \"C:\\Users\\dhirschf\\AppData\\Roaming\\Continuum\\Anaconda3\\lib\\site-packages\\numba\\typeinfer.py\", line 722, in typeof_assign\n    self.typeof_global(inst, inst.target, value)\n\n  File \"C:\\Users\\dhirschf\\AppData\\Roaming\\Continuum\\Anaconda3\\lib\\site-packages\\numba\\typeinfer.py\", line 788, in typeof_global\n    loc=inst.loc)\n\nTypingError: Untyped global name 'f'\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/gmarkall",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/535640?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/535640?v=3&s=60",
   "displayName": "Graham Markall",
   "gv": "3",
   "id": "55b342020fc9f982beaaedf1",
   "url": "/gmarkall",
   "username": "gmarkall",
   "v": 6
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"dhirschfeld\" class=\"mention\">@dhirschfeld</span> with regards to your first question, they do work for numba jitted functions, but not for ufuncs, which are created by the vectorize decorator",
  "id": "569377ad766922073602fc0b",
  "issues": [],
  "mentions": [
   {
    "screenName": "dhirschfeld",
    "userId": "533187555e986b0712effbbd",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 12,
  "sent": "2016-01-11T09:36:45.273Z",
  "text": "@dhirschfeld with regards to your first question, they do work for numba jitted functions, but not for ufuncs, which are created by the vectorize decorator",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/gmarkall",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/535640?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/535640?v=3&s=60",
   "displayName": "Graham Markall",
   "gv": "3",
   "id": "55b342020fc9f982beaaedf1",
   "url": "/gmarkall",
   "username": "gmarkall",
   "v": 6
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"dhirschfeld\" class=\"mention\">@dhirschfeld</span> this may be able to be changed in the future, but at the moment we reuse NumPy&#39;s ufunc dispatch machinery which doesn&#39;t seem to support this. If we move away from using this, it should technically be possible to support",
  "id": "569377f6b1f439094a076c5d",
  "issues": [],
  "mentions": [
   {
    "screenName": "dhirschfeld",
    "userId": "533187555e986b0712effbbd",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 12,
  "sent": "2016-01-11T09:37:58.245Z",
  "text": "@dhirschfeld this may be able to be changed in the future, but at the moment we reuse NumPy's ufunc dispatch machinery which doesn't seem to support this. If we move away from using this, it should technically be possible to support",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/gmarkall",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/535640?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/535640?v=3&s=60",
   "displayName": "Graham Markall",
   "gv": "3",
   "id": "55b342020fc9f982beaaedf1",
   "url": "/gmarkall",
   "username": "gmarkall",
   "v": 6
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"dhirschfeld\" class=\"mention\">@dhirschfeld</span> your second example appears to work for me with Numba 0.22.1 - which version are you using?",
  "id": "569378b9ee13050b38a2cc69",
  "issues": [],
  "mentions": [
   {
    "screenName": "dhirschfeld",
    "userId": "533187555e986b0712effbbd",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 12,
  "sent": "2016-01-11T09:41:13.954Z",
  "text": "@dhirschfeld your second example appears to work for me with Numba 0.22.1 - which version are you using?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2016-01-11T12:05:04.245Z",
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/dhirschfeld",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/881019?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/881019?v=4&s=60",
   "displayName": "Dave Hirschfeld",
   "gv": "4",
   "id": "533187555e986b0712effbbd",
   "url": "/dhirschfeld",
   "username": "dhirschfeld",
   "v": 26
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"gmarkall\" class=\"mention\">@gmarkall</span> - thanks for letting me know, it would be nice to have but there probably are more useful issues to be spending time on",
  "id": "56939975b1f439094a077169",
  "issues": [],
  "mentions": [
   {
    "screenName": "gmarkall",
    "userId": "55b342020fc9f982beaaedf1",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 12,
  "sent": "2016-01-11T12:00:53.594Z",
  "text": "@gmarkall - thanks for letting me know, it would be nice to have but there probably are more useful issues to be spending time on",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "editedAt": "2016-01-11T12:02:30.063Z",
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/dhirschfeld",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/881019?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/881019?v=4&s=60",
   "displayName": "Dave Hirschfeld",
   "gv": "4",
   "id": "533187555e986b0712effbbd",
   "url": "/dhirschfeld",
   "username": "dhirschfeld",
   "v": 26
  },
  "html": "Regarding numba I was on a recent master version. On a different but similarly recent version at home I get the same issue<pre><code class=\"python\">In [<span class=\"number\">7</span>]: numba.__version__\nOut[<span class=\"number\">7</span>]: <span class=\"string\">'0.22.1+307.g2d214ad'</span></code></pre>",
  "id": "569399c60712a5b63b4cb584",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2016-01-11T12:02:14.026Z",
  "text": "Regarding numba I was on a recent master version. On a different but similarly recent version at home I get the same issue\n```python\nIn [7]: numba.__version__\nOut[7]: '0.22.1+307.g2d214ad'\n```",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "editedAt": "2016-01-11T12:09:57.546Z",
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/dhirschfeld",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/881019?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/881019?v=4&s=60",
   "displayName": "Dave Hirschfeld",
   "gv": "4",
   "id": "533187555e986b0712effbbd",
   "url": "/dhirschfeld",
   "username": "dhirschfeld",
   "v": 26
  },
  "html": "I have Anaconda Python 3.5.1 on Win10 x64, numpy 1.10.1",
  "id": "56939a480712a5b63b4cb590",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2016-01-11T12:04:24.092Z",
  "text": "I have Anaconda Python 3.5.1 on Win10 x64, numpy 1.10.1",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/dhirschfeld",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/881019?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/881019?v=4&s=60",
   "displayName": "Dave Hirschfeld",
   "gv": "4",
   "id": "533187555e986b0712effbbd",
   "url": "/dhirschfeld",
   "username": "dhirschfeld",
   "v": 26
  },
  "html": "Just tested numba 0.22.1 and I get the same issue with <code>Untyped global name &#39;f&#39;</code>",
  "id": "56939be0d739f50a3602dc63",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2016-01-11T12:11:12.793Z",
  "text": "Just tested numba 0.22.1 and I get the same issue with `Untyped global name 'f'`",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2016-01-11T12:13:37.400Z",
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/dhirschfeld",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/881019?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/881019?v=4&s=60",
   "displayName": "Dave Hirschfeld",
   "gv": "4",
   "id": "533187555e986b0712effbbd",
   "url": "/dhirschfeld",
   "username": "dhirschfeld",
   "v": 26
  },
  "html": "Happy to open an issue to keep track - just let me know and I can get to it in the morning...",
  "id": "56939c66b1f439094a0771e7",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2016-01-11T12:13:26.909Z",
  "text": "Happy to open an issue to keep track - just let me know and I can get to it in the morning...",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"dhirschfeld\" class=\"mention\">@dhirschfeld</span>: Please do.  This is something we definitely want to support.",
  "id": "5693c0428fdd3c0c382df4cc",
  "issues": [],
  "mentions": [
   {
    "screenName": "dhirschfeld",
    "userId": "533187555e986b0712effbbd",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 12,
  "sent": "2016-01-11T14:46:26.258Z",
  "text": "@dhirschfeld: Please do.  This is something we definitely want to support.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/dhirschfeld",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/881019?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/881019?v=4&s=60",
   "displayName": "Dave Hirschfeld",
   "gv": "4",
   "id": "533187555e986b0712effbbd",
   "url": "/dhirschfeld",
   "username": "dhirschfeld",
   "v": 26
  },
  "html": "I opened <span data-link-type=\"issue\" data-issue=\"1610\" class=\"issue\">#1610</span> to track the problem.",
  "id": "56942289d739f50a3602f749",
  "issues": [
   {
    "number": "1610"
   }
  ],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2016-01-11T21:45:45.920Z",
  "text": "I opened #1610 to track the problem.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/dhirschfeld",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/881019?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/881019?v=4&s=60",
   "displayName": "Dave Hirschfeld",
   "gv": "4",
   "id": "533187555e986b0712effbbd",
   "url": "/dhirschfeld",
   "username": "dhirschfeld",
   "v": 26
  },
  "html": "When using sphinx automodule with numba vectorized functions I get warnings like <code>&#39;DUFunc&#39; object has no attribute &#39;__mro__&#39;</code> and the signature of the method doesn&#39;t get recognised. This is likely related to my previous issue of kwargs not being recognised for vectorized functions but I thought I&#39;d mention it as something else to be aware of with vectorized functions",
  "id": "569f0eda5de13b3f15e41768",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2016-01-20T04:36:42.570Z",
  "text": "When using sphinx automodule with numba vectorized functions I get warnings like `'DUFunc' object has no attribute '__mro__'` and the signature of the method doesn't get recognised. This is likely related to my previous issue of kwargs not being recognised for vectorized functions but I thought I'd mention it as something else to be aware of with vectorized functions",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/nmichaud",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/648190?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/648190?v=4&s=60",
   "displayName": "Naveen Michaud-Agrawal",
   "gv": "4",
   "id": "5644c6b116b6c7089cba7bdd",
   "url": "/nmichaud",
   "username": "nmichaud",
   "v": 7
  },
  "html": "interesting post on reddit about using numba to compute a simple physical system (metropolis monte carlo on a Lennard-Jones system) - <a href=\"https://www.reddit.com/r/Python/comments/431tsm/numba_applied_to_high_intensity_computations_a/\" rel=\"nofollow\" target=\"_blank\" class=\"link\">https://www.reddit.com/r/Python/comments/431tsm/numba_applied_to_high_intensity_computations_a/</a>",
  "id": "56ab8f468fbaf4220afa1cac",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2016-01-29T16:11:50.612Z",
  "text": "interesting post on reddit about using numba to compute a simple physical system (metropolis monte carlo on a Lennard-Jones system) - https://www.reddit.com/r/Python/comments/431tsm/numba_applied_to_high_intensity_computations_a/",
  "unread": false,
  "urls": [
   {
    "url": "https://www.reddit.com/r/Python/comments/431tsm/numba_applied_to_high_intensity_computations_a/"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/datnamer",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/8646471?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/8646471?v=4&s=60",
   "displayName": "datnamer",
   "gv": "4",
   "id": "54602d6fdb8155e6700d316b",
   "url": "/datnamer",
   "username": "datnamer",
   "v": 10
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"pitrou\" class=\"mention\">@pitrou</span> I want to use a scipy distributions object inside a numba class field and in JIT nopython functions. They are quite complex objects with inheritance etc.... would the next extension API be able to cope?",
  "id": "56b90edb3fab8f985ec954b0",
  "issues": [],
  "mentions": [
   {
    "screenName": "pitrou",
    "userId": "54935c59db8155e6700e0da8",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 13,
  "sent": "2016-02-08T21:55:39.777Z",
  "text": "@pitrou I want to use a scipy distributions object inside a numba class field and in JIT nopython functions. They are quite complex objects with inheritance etc.... would the next extension API be able to cope?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/datnamer",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/8646471?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/8646471?v=4&s=60",
   "displayName": "datnamer",
   "gv": "4",
   "id": "54602d6fdb8155e6700d316b",
   "url": "/datnamer",
   "username": "datnamer",
   "v": 10
  },
  "html": "<a href=\"https://github.com/scipy/scipy/blob/v0.17.0/scipy/stats/_continuous_distns.py\" rel=\"nofollow\" target=\"_blank\" class=\"link\">https://github.com/scipy/scipy/blob/v0.17.0/scipy/stats/_continuous_distns.py</a>",
  "id": "56b90f16bd3dfe40303dbcc8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2016-02-08T21:56:38.868Z",
  "text": "https://github.com/scipy/scipy/blob/v0.17.0/scipy/stats/_continuous_distns.py",
  "unread": false,
  "urls": [
   {
    "url": "https://github.com/scipy/scipy/blob/v0.17.0/scipy/stats/_continuous_distns.py"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/dhirschfeld",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/881019?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/881019?v=4&s=60",
   "displayName": "Dave Hirschfeld",
   "gv": "4",
   "id": "533187555e986b0712effbbd",
   "url": "/dhirschfeld",
   "username": "dhirschfeld",
   "v": 26
  },
  "html": "If I want to use a C++ class from numba what are my options? It seems CFFI doesn&#39;t support C++ classes well?",
  "id": "56c04c0f0295dc53403e25e4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2016-02-14T09:42:39.920Z",
  "text": "If I want to use a C++ class from numba what are my options? It seems CFFI doesn't support C++ classes well?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/dhirschfeld",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/881019?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/881019?v=4&s=60",
   "displayName": "Dave Hirschfeld",
   "gv": "4",
   "id": "533187555e986b0712effbbd",
   "url": "/dhirschfeld",
   "username": "dhirschfeld",
   "v": 26
  },
  "html": "I see that you can write an <code>extern &quot;C&quot;</code> wrapper but AFAICS this would require instantiating the class and calling the method in the wrapper function thereby paying the cost of construction/destruction on every call. Is that correct? ",
  "id": "56c04cd30295dc53403e25f8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2016-02-14T09:45:55.909Z",
  "text": "I see that you can write an `extern \"C\"` wrapper but AFAICS this would require instantiating the class and calling the method in the wrapper function thereby paying the cost of construction/destruction on every call. Is that correct? ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/gmarkall",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/535640?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/535640?v=3&s=60",
   "displayName": "Graham Markall",
   "gv": "3",
   "id": "55b342020fc9f982beaaedf1",
   "url": "/gmarkall",
   "username": "gmarkall",
   "v": 6
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"dhirschfeld\" class=\"mention\">@dhirschfeld</span> You could write a C API around your C++ API that wraps and unwraps pointers to C++ objects in pointers to opaque structs. For example, in LLVM there are &quot;wrap&quot; and &quot;unwrap&quot; macros which can be used to create the mapping between C++ types and opaque struct types - then when you want to pass in an object from the C side, you unwrap it by calling the unwrap function, and if you want to return an object from C++ through the C API, you call the wrap function. E.g. of a couple of uses in llvmlite: <a href=\"https://github.com/numba/llvmlite/blob/master/ffi/executionengine.cpp#L45\" rel=\"nofollow\" target=\"_blank\" class=\"link\">https://github.com/numba/llvmlite/blob/master/ffi/executionengine.cpp#L45</a> and <a href=\"https://github.com/numba/llvmlite/blob/master/ffi/module.cpp#L119\" rel=\"nofollow\" target=\"_blank\" class=\"link\">https://github.com/numba/llvmlite/blob/master/ffi/module.cpp#L119</a>",
  "id": "56c1d0d6bc5dee6c04256155",
  "issues": [],
  "mentions": [
   {
    "screenName": "dhirschfeld",
    "userId": "533187555e986b0712effbbd",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 13,
  "sent": "2016-02-15T13:21:26.992Z",
  "text": "@dhirschfeld You could write a C API around your C++ API that wraps and unwraps pointers to C++ objects in pointers to opaque structs. For example, in LLVM there are \"wrap\" and \"unwrap\" macros which can be used to create the mapping between C++ types and opaque struct types - then when you want to pass in an object from the C side, you unwrap it by calling the unwrap function, and if you want to return an object from C++ through the C API, you call the wrap function. E.g. of a couple of uses in llvmlite: https://github.com/numba/llvmlite/blob/master/ffi/executionengine.cpp#L45 and https://github.com/numba/llvmlite/blob/master/ffi/module.cpp#L119",
  "unread": false,
  "urls": [
   {
    "url": "https://github.com/numba/llvmlite/blob/master/ffi/executionengine.cpp#L45"
   },
   {
    "url": "https://github.com/numba/llvmlite/blob/master/ffi/module.cpp#L119"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/gmarkall",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/535640?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/535640?v=3&s=60",
   "displayName": "Graham Markall",
   "gv": "3",
   "id": "55b342020fc9f982beaaedf1",
   "url": "/gmarkall",
   "username": "gmarkall",
   "v": 6
  },
  "html": "(note: the implementation of wrap and unwrap in llvmlite appears to be a bit different than how I&#39;ve described - but creating a macro that I can use to create many wrap/unwrap functions is how I usually do it when wrapping a C++ library for use with CFFI)",
  "id": "56c1d1054dfe1fa71ffce054",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2016-02-15T13:22:13.461Z",
  "text": "(note: the implementation of wrap and unwrap in llvmlite appears to be a bit different than how I've described - but creating a macro that I can use to create many wrap/unwrap functions is how I usually do it when wrapping a C++ library for use with CFFI)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/dhirschfeld",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/881019?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/881019?v=4&s=60",
   "displayName": "Dave Hirschfeld",
   "gv": "4",
   "id": "533187555e986b0712effbbd",
   "url": "/dhirschfeld",
   "username": "dhirschfeld",
   "v": 26
  },
  "html": "Thanks,  <span data-link-type=\"mention\" data-screen-name=\"gmarkall\" class=\"mention\">@gmarkall</span>  - that looks like it might be beyond my competence in C/C++ but it&#39;s good to have a starting point  so I can give it a go...",
  "id": "56c5b1b1611729797fd2a4d5",
  "issues": [],
  "mentions": [
   {
    "screenName": "gmarkall",
    "userId": "55b342020fc9f982beaaedf1",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 13,
  "sent": "2016-02-18T11:57:37.754Z",
  "text": "Thanks,  @gmarkall  - that looks like it might be beyond my competence in C/C++ but it's good to have a starting point  so I can give it a go...",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/gmarkall",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/535640?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/535640?v=3&s=60",
   "displayName": "Graham Markall",
   "gv": "3",
   "id": "55b342020fc9f982beaaedf1",
   "url": "/gmarkall",
   "username": "gmarkall",
   "v": 6
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"dhirschfeld\" class=\"mention\">@dhirschfeld</span> the macro I was thinking of looks like:",
  "id": "56c5c15f611729797fd2a7a4",
  "issues": [],
  "mentions": [
   {
    "screenName": "dhirschfeld",
    "userId": "533187555e986b0712effbbd",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 13,
  "sent": "2016-02-18T13:04:31.970Z",
  "text": "@dhirschfeld the macro I was thinking of looks like:",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/gmarkall",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/535640?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/535640?v=3&s=60",
   "displayName": "Graham Markall",
   "gv": "3",
   "id": "55b342020fc9f982beaaedf1",
   "url": "/gmarkall",
   "username": "gmarkall",
   "v": 6
  },
  "html": "<h1>define DEFINE_CONVERSION_FUNCTION(ty, ref)                 \\</h1>\n<pre><code><span class=\"keyword\">inline</span> ty *unwrap(ref P) {                              \\\n    <span class=\"keyword\">return</span> <span class=\"keyword\">reinterpret_cast</span>&lt;ty*&gt;(P);                    \\\n}                                                       \\\n                                                        \\\n<span class=\"function\"><span class=\"keyword\">inline</span> ref <span class=\"title\">wrap</span><span class=\"params\">(<span class=\"keyword\">const</span> ty *P)</span> </span>{                          \\\n    <span class=\"keyword\">return</span> <span class=\"keyword\">reinterpret_cast</span>&lt;ref&gt;(<span class=\"keyword\">const_cast</span>&lt;ty*&gt;(P));   \\\n}</code></pre>",
  "id": "56c5c16255deeec468621df0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2016-02-18T13:04:34.320Z",
  "text": "#define DEFINE_CONVERSION_FUNCTION(ty, ref)                 \\\n    inline ty *unwrap(ref P) {                              \\\n        return reinterpret_cast<ty*>(P);                    \\\n    }                                                       \\\n                                                            \\\n    inline ref wrap(const ty *P) {                          \\\n        return reinterpret_cast<ref>(const_cast<ty*>(P));   \\\n    }\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/gmarkall",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/535640?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/535640?v=3&s=60",
   "displayName": "Graham Markall",
   "gv": "3",
   "id": "55b342020fc9f982beaaedf1",
   "url": "/gmarkall",
   "username": "gmarkall",
   "v": 6
  },
  "html": "<h1>define DEFINE_CONVERSION_FUNCTION(ty, ref)                 \\</h1>\n<pre><code><span class=\"keyword\">inline</span> ty *unwrap(ref P) {                              \\\n    <span class=\"keyword\">return</span> <span class=\"keyword\">reinterpret_cast</span>&lt;ty*&gt;(P);                    \\\n}                                                       \\\n                                                        \\\n<span class=\"function\"><span class=\"keyword\">inline</span> ref <span class=\"title\">wrap</span><span class=\"params\">(<span class=\"keyword\">const</span> ty *P)</span> </span>{                          \\\n    <span class=\"keyword\">return</span> <span class=\"keyword\">reinterpret_cast</span>&lt;ref&gt;(<span class=\"keyword\">const_cast</span>&lt;ty*&gt;(P));   \\\n}</code></pre>```",
  "id": "56c5c16cafaa77c168108679",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2016-02-18T13:04:44.360Z",
  "text": "#define DEFINE_CONVERSION_FUNCTION(ty, ref)                 \\\n    inline ty *unwrap(ref P) {                              \\\n        return reinterpret_cast<ty*>(P);                    \\\n    }                                                       \\\n                                                            \\\n    inline ref wrap(const ty *P) {                          \\\n        return reinterpret_cast<ref>(const_cast<ty*>(P));   \\\n    }\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/gmarkall",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/535640?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/535640?v=3&s=60",
   "displayName": "Graham Markall",
   "gv": "3",
   "id": "55b342020fc9f982beaaedf1",
   "url": "/gmarkall",
   "username": "gmarkall",
   "v": 6
  },
  "html": "grrr",
  "id": "56c5c16fafaa77c16810867b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2016-02-18T13:04:47.019Z",
  "text": "grrr",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/gmarkall",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/535640?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/535640?v=3&s=60",
   "displayName": "Graham Markall",
   "gv": "3",
   "id": "55b342020fc9f982beaaedf1",
   "url": "/gmarkall",
   "username": "gmarkall",
   "v": 6
  },
  "html": "try again",
  "id": "56c5c170afaa77c16810867d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2016-02-18T13:04:48.834Z",
  "text": "try again",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/gmarkall",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/535640?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/535640?v=3&s=60",
   "displayName": "Graham Markall",
   "gv": "3",
   "id": "55b342020fc9f982beaaedf1",
   "url": "/gmarkall",
   "username": "gmarkall",
   "v": 6
  },
  "html": "<pre><code><span class=\"comment\">#define DEFINE_CONVERSION_FUNCTION(ty, ref)                 \\</span>\n    inline ty *unwrap(ref P) {                              <span class=\"string\">\\</span>\n        <span class=\"keyword\">return</span> reinterpret_cast&lt;ty*&gt;(P);                    <span class=\"string\">\\</span>\n    }                                                       <span class=\"string\">\\</span>\n                                                            <span class=\"string\">\\</span>\n    inline ref wrap(<span class=\"keyword\">const</span> ty *P) {                          <span class=\"string\">\\</span>\n        <span class=\"keyword\">return</span> reinterpret_cast&lt;ref&gt;(const_cast&lt;ty*&gt;(P));   <span class=\"string\">\\</span>\n    }</code></pre>",
  "id": "56c5c194aa5f8e7a7f675342",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2016-02-18T13:05:24.716Z",
  "text": "```\n#define DEFINE_CONVERSION_FUNCTION(ty, ref)                 \\\n    inline ty *unwrap(ref P) {                              \\\n        return reinterpret_cast<ty*>(P);                    \\\n    }                                                       \\\n                                                            \\\n    inline ref wrap(const ty *P) {                          \\\n        return reinterpret_cast<ref>(const_cast<ty*>(P));   \\\n    }\n\n```\n\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/gmarkall",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/535640?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/535640?v=3&s=60",
   "displayName": "Graham Markall",
   "gv": "3",
   "id": "55b342020fc9f982beaaedf1",
   "url": "/gmarkall",
   "username": "gmarkall",
   "v": 6
  },
  "html": "Then supposing I have a class called Car and a class called Bike that I want to pass in and out of the C API, I make a couple of structs:",
  "id": "56c5c1e7443730631ea985ae",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2016-02-18T13:06:47.178Z",
  "text": "Then supposing I have a class called Car and a class called Bike that I want to pass in and out of the C API, I make a couple of structs:",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/gmarkall",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/535640?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/535640?v=3&s=60",
   "displayName": "Graham Markall",
   "gv": "3",
   "id": "55b342020fc9f982beaaedf1",
   "url": "/gmarkall",
   "username": "gmarkall",
   "v": 6
  },
  "html": "<pre><code><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> Car* CarRef;\n<span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> Bike* BikeRef;</code></pre>",
  "id": "56c5c22bafaa77c16810869a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2016-02-18T13:07:55.588Z",
  "text": "```\ntypedef struct Car* CarRef;\ntypedef struct Bike* BikeRef;\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/gmarkall",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/535640?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/535640?v=3&s=60",
   "displayName": "Graham Markall",
   "gv": "3",
   "id": "55b342020fc9f982beaaedf1",
   "url": "/gmarkall",
   "username": "gmarkall",
   "v": 6
  },
  "html": "and use the macro for each of them and the C++ class:",
  "id": "56c5c23e1c98d5621ea7c5e1",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2016-02-18T13:08:14.752Z",
  "text": "and use the macro for each of them and the C++ class:",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/gmarkall",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/535640?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/535640?v=3&s=60",
   "displayName": "Graham Markall",
   "gv": "3",
   "id": "55b342020fc9f982beaaedf1",
   "url": "/gmarkall",
   "username": "gmarkall",
   "v": 6
  },
  "html": "<pre><code>DEFINE_CONVERSION_FUNCTION<span class=\"list\">(<span class=\"keyword\">transport</span>:<span class=\"keyword\">:Car</span>, CarRef)</span>\nDEFINE_CONVERSION_FUNCTION<span class=\"list\">(<span class=\"keyword\">transport</span>:<span class=\"keyword\">:Bike</span>, BikeRef)</span></code></pre>",
  "id": "56c5c26e34be37957fd10e88",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2016-02-18T13:09:02.742Z",
  "text": "```\nDEFINE_CONVERSION_FUNCTION(transport::Car, CarRef)\nDEFINE_CONVERSION_FUNCTION(transport::Bike, BikeRef)\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/gmarkall",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/535640?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/535640?v=3&s=60",
   "displayName": "Graham Markall",
   "gv": "3",
   "id": "55b342020fc9f982beaaedf1",
   "url": "/gmarkall",
   "username": "gmarkall",
   "v": 6
  },
  "html": "Then supposing I want to have afunction that returns a Car through the C API it might look like:",
  "id": "56c5c28fafaa77c1681086b5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2016-02-18T13:09:35.471Z",
  "text": "Then supposing I want to have afunction that returns a Car through the C API it might look like:",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/gmarkall",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/535640?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/535640?v=3&s=60",
   "displayName": "Graham Markall",
   "gv": "3",
   "id": "55b342020fc9f982beaaedf1",
   "url": "/gmarkall",
   "username": "gmarkall",
   "v": 6
  },
  "html": "<pre><code>CarRef <span class=\"function\">make_a_new_car</span>() {\n     return <span class=\"function\">wrap</span>(transport<span class=\"value\">::<span class=\"function\">Car</span>());</span></code></pre>",
  "id": "56c5c2b6611729797fd2a7e7",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2016-02-18T13:10:14.447Z",
  "text": "```\nCarRef make_a_new_car() {\n     return wrap(transport::Car());\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/gmarkall",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/535640?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/535640?v=3&s=60",
   "displayName": "Graham Markall",
   "gv": "3",
   "id": "55b342020fc9f982beaaedf1",
   "url": "/gmarkall",
   "username": "gmarkall",
   "v": 6
  },
  "html": "(that uses the wrap macro that was created because of DEFINE_CONVERSION_FUNCTION) - if I want to pass a Car to a function through the C API, I can use the unwrap macro:",
  "id": "56c5c2f9afaa77c1681086da",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2016-02-18T13:11:21.341Z",
  "text": "(that uses the wrap macro that was created because of DEFINE_CONVERSION_FUNCTION) - if I want to pass a Car to a function through the C API, I can use the unwrap macro:",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/gmarkall",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/535640?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/535640?v=3&s=60",
   "displayName": "Graham Markall",
   "gv": "3",
   "id": "55b342020fc9f982beaaedf1",
   "url": "/gmarkall",
   "username": "gmarkall",
   "v": 6
  },
  "html": "<pre><code><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">scrap_a_car</span><span class=\"params\">(CarRef c)</span> </span>{\n    <span class=\"function\"><span class=\"keyword\">delete</span> <span class=\"title\">unwrap</span><span class=\"params\">(c)</span></span>;\n}</code></pre>",
  "id": "56c5c312611729797fd2a7fb",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2016-02-18T13:11:46.645Z",
  "text": "```\nvoid scrap_a_car(CarRef c) {\n    delete unwrap(c);\n}\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/gmarkall",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/535640?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/535640?v=3&s=60",
   "displayName": "Graham Markall",
   "gv": "3",
   "id": "55b342020fc9f982beaaedf1",
   "url": "/gmarkall",
   "username": "gmarkall",
   "v": 6
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"dhirschfeld\" class=\"mention\">@dhirschfeld</span> so you can use this pattern to create all the conversions you need to make your C API - just copy/paste the macro and those definitions and edit them to suit your types, and then write a C function for each C++ function that you&#39;re wrapping. You may need multiple C functions if you&#39;re specialising templates",
  "id": "56c5c350afaa77c1681086f6",
  "issues": [],
  "mentions": [
   {
    "screenName": "dhirschfeld",
    "userId": "533187555e986b0712effbbd",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 13,
  "sent": "2016-02-18T13:12:48.561Z",
  "text": "@dhirschfeld so you can use this pattern to create all the conversions you need to make your C API - just copy/paste the macro and those definitions and edit them to suit your types, and then write a C function for each C++ function that you're wrapping. You may need multiple C functions if you're specialising templates",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/gabrielelanaro",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/239875?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/239875?v=4&s=60",
   "displayName": "Gabriele Lanaro",
   "gv": "4",
   "id": "54ed49fb15522ed4b3dc7097",
   "url": "/gabrielelanaro",
   "username": "gabrielelanaro",
   "v": 10
  },
  "html": "Hi numba people, I would like to implement some fast hash function for strings in numba. I was wondering  if it is possible to access a string as an array (I get typeerror if I try to iterate on a string).",
  "id": "5704330615b4d27b083eff8b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2016-04-05T21:49:58.501Z",
  "text": "Hi numba people, I would like to implement some fast hash function for strings in numba. I was wondering  if it is possible to access a string as an array (I get typeerror if I try to iterate on a string).",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/datnamer",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/8646471?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/8646471?v=4&s=60",
   "displayName": "datnamer",
   "gv": "4",
   "id": "54602d6fdb8155e6700d316b",
   "url": "/datnamer",
   "username": "datnamer",
   "v": 10
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"gabrielelanaro\" class=\"mention\">@gabrielelanaro</span>  probably better to ask on the mialing list",
  "id": "5717f9285b5164bf56ee71be",
  "issues": [],
  "mentions": [
   {
    "screenName": "gabrielelanaro",
    "userId": "54ed49fb15522ed4b3dc7097",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 14,
  "sent": "2016-04-20T21:48:24.749Z",
  "text": "@gabrielelanaro  probably better to ask on the mialing list",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"gabrielelanaro\" class=\"mention\">@gabrielelanaro</span> , we don&#39;t support many string operations (due to tricky unicode handling ).  In python3, you can  first encode the string into <code>bytes</code>.  Iterating on <code>bytes</code> works.<pre><code class=\"python\"><span class=\"decorator\">@jit(nopython=True)</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">(x)</span>:</span>\n    c = <span class=\"number\">0</span>\n    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> x:\n        c += i\n    <span class=\"keyword\">return</span> c\n\ns = <span class=\"string\">\"abc\"</span>.encode(<span class=\"string\">'utf8'</span>)\n<span class=\"comment\"># s = bytearray(s)  # needed for python2</span>\nprint(foo(s))</code></pre>",
  "id": "5718202db129b59c56da0c19",
  "issues": [],
  "mentions": [
   {
    "screenName": "gabrielelanaro",
    "userId": "54ed49fb15522ed4b3dc7097",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 14,
  "sent": "2016-04-21T00:34:53.867Z",
  "text": "@gabrielelanaro , we don't support many string operations (due to tricky unicode handling ).  In python3, you can  first encode the string into `bytes`.  Iterating on `bytes` works.\n\n```python\n@jit(nopython=True)\ndef foo(x):\n    c = 0\n    for i in x:\n        c += i\n    return c\n\ns = \"abc\".encode('utf8')\n# s = bytearray(s)  # needed for python2\nprint(foo(s))\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2016-05-10T07:24:16.090Z",
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/dhirschfeld",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/881019?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/881019?v=4&s=60",
   "displayName": "Dave Hirschfeld",
   "gv": "4",
   "id": "533187555e986b0712effbbd",
   "url": "/dhirschfeld",
   "username": "dhirschfeld",
   "v": 26
  },
  "html": "<p>Just updated to the latest numba (thanks for fixing the Windows CI) to try out the new <code>cfunc</code> with <code>scipy.integrate</code>. My integrand takes a couple of float64 arguments which I pass in the <em>args</em> parameter. Defining <code>@cfunc(float64(float64, float64, float64), nopython=True)</code> fails with:</p><pre><code class=\"python\">error: quad: first argument <span class=\"keyword\">is</span> a ctypes function pointer <span class=\"keyword\">with</span> incorrect signature</code></pre><p>If I change the signature to <code>@cfunc(float64(float64, float64[:]), nopython=True)</code> I get:</p><pre><code class=\"python\">TypeError: Cannot convert Numba type <span class=\"string\">'array(float64, 1d, A)'</span> to ctypes type</code></pre><p>and <code>@cfunc(float64(float64, Tuple([float64, float64])), nopython=True)</code> fails with </p><pre><code class=\"python\">TypeError: Cannot convert Numba type <span class=\"string\">'(float64 x 2)'</span> to ctypes type</code></pre><p>Is it supported to pass in arguments to <code>scipy.integrate</code> if so, how?</p>",
  "id": "57318c81b51b0e294850b537",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2016-05-10T07:23:45.169Z",
  "text": "Just updated to the latest numba (thanks for fixing the Windows CI) to try out the new `cfunc` with `scipy.integrate`. My integrand takes a couple of float64 arguments which I pass in the *args* parameter. Defining `@cfunc(float64(float64, float64, float64), nopython=True)` fails with:\n```python\nerror: quad: first argument is a ctypes function pointer with incorrect signature\n```\nIf I change the signature to `@cfunc(float64(float64, float64[:]), nopython=True)` I get:\n```python\nTypeError: Cannot convert Numba type 'array(float64, 1d, A)' to ctypes type\n```\nand `@cfunc(float64(float64, Tuple([float64, float64])), nopython=True)` fails with \n```python\nTypeError: Cannot convert Numba type '(float64 x 2)' to ctypes type\n```\nIs it supported to pass in arguments to `scipy.integrate` if so, how?",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/dhirschfeld",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/881019?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/881019?v=4&s=60",
   "displayName": "Dave Hirschfeld",
   "gv": "4",
   "id": "533187555e986b0712effbbd",
   "url": "/dhirschfeld",
   "username": "dhirschfeld",
   "v": 26
  },
  "html": "<code>@cfunc(float64(float64, CPointer(float64)), nopython=True)</code> also fails with<pre><code><span class=\"keyword\">error</span>: quad: <span class=\"keyword\">first</span> argument <span class=\"keyword\">is</span> a ctypes function pointer <span class=\"keyword\">with</span> incorrect signature</code></pre>",
  "id": "57318f8af36daf63798e215d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2016-05-10T07:36:42.114Z",
  "text": "`@cfunc(float64(float64, CPointer(float64)), nopython=True)` also fails with\n```\nerror: quad: first argument is a ctypes function pointer with incorrect signature\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2016-05-10T07:39:33.160Z",
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/dhirschfeld",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/881019?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/881019?v=4&s=60",
   "displayName": "Dave Hirschfeld",
   "gv": "4",
   "id": "533187555e986b0712effbbd",
   "url": "/dhirschfeld",
   "username": "dhirschfeld",
   "v": 26
  },
  "html": "If it is supposed to be supported, replicating the example in the <a href=\"http://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.quad.html#scipy.integrate.quad\" rel=\"nofollow\" target=\"_blank\" class=\"link\"><code>quad</code> docstring</a> would  be very helpful in understanding how to port it to numba",
  "id": "5731901d3170252648f586bc",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2016-05-10T07:39:09.530Z",
  "text": "If it is supposed to be supported, replicating the example in the [`quad` docstring](http://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.quad.html#scipy.integrate.quad) would  be very helpful in understanding how to port it to numba",
  "unread": false,
  "urls": [
   {
    "url": "http://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.quad.html#scipy.integrate.quad"
   }
  ],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"dhirschfeld\" class=\"mention\">@dhirschfeld</span> no, it&#39;s not supported, but you can use module-wide constants if possible",
  "id": "5731ddb63aeaa1d81ca1dc63",
  "issues": [],
  "mentions": [
   {
    "screenName": "dhirschfeld",
    "userId": "533187555e986b0712effbbd",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 16,
  "sent": "2016-05-10T13:10:14.113Z",
  "text": "@dhirschfeld no, it's not supported, but you can use module-wide constants if possible",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/pitrou",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1721820?v=4&s=60",
   "displayName": "Antoine Pitrou",
   "gv": "4",
   "id": "54935c59db8155e6700e0da8",
   "url": "/pitrou",
   "username": "pitrou",
   "v": 5
  },
  "html": "part of the reason it&#39;s not supported is the bogus argument handling in scipy: <span data-link-type=\"issue\" data-issue=\"4831\" data-issue-repo=\"scipy/scipy\" class=\"issue\">scipy/scipy#4831</span>",
  "id": "5731ddd9fc827ebf1dfb4505",
  "issues": [
   {
    "number": "4831",
    "repo": "scipy/scipy"
   }
  ],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2016-05-10T13:10:49.212Z",
  "text": "part of the reason it's not supported is the bogus argument handling in scipy: https://github.com/scipy/scipy/issues/4831",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/dhirschfeld",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/881019?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/881019?v=4&s=60",
   "displayName": "Dave Hirschfeld",
   "gv": "4",
   "id": "533187555e986b0712effbbd",
   "url": "/dhirschfeld",
   "username": "dhirschfeld",
   "v": 26
  },
  "html": "Damn, I feared as much :( I&#39;ll ask on the scipy list as I think it could be a killer functionality!",
  "id": "57326525f9a53a60793da347",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2016-05-10T22:48:05.716Z",
  "text": "Damn, I feared as much :( I'll ask on the scipy list as I think it could be a killer functionality!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/dhirschfeld",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/881019?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/881019?v=4&s=60",
   "displayName": "Dave Hirschfeld",
   "gv": "4",
   "id": "533187555e986b0712effbbd",
   "url": "/dhirschfeld",
   "username": "dhirschfeld",
   "v": 26
  },
  "html": "For reference, using a closure to capture the other arguments <em>does</em> work, but at the cost of recompiling the integrand on every call to the function which kills performance. The plain python version takes 1ms, the <code>jit</code> version takes 200\u00b5s whereas the closure/<code>cfunc</code> version takes 30ms :/",
  "id": "57326741b51b0e2948510cd6",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2016-05-10T22:57:05.511Z",
  "text": "For reference, using a closure to capture the other arguments *does* work, but at the cost of recompiling the integrand on every call to the function which kills performance. The plain python version takes 1ms, the `jit` version takes 200\u00b5s whereas the closure/`cfunc` version takes 30ms :/",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/datnamer",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/8646471?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/8646471?v=4&s=60",
   "displayName": "datnamer",
   "gv": "4",
   "id": "54602d6fdb8155e6700d316b",
   "url": "/datnamer",
   "username": "datnamer",
   "v": 10
  },
  "html": "<a href=\"http://d10genes.github.io/blog/2016/05/03/word2vec/\" rel=\"nofollow\" target=\"_blank\" class=\"link\">http://d10genes.github.io/blog/2016/05/03/word2vec/</a>",
  "id": "57332e223170252648f60b1f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2016-05-11T13:05:38.463Z",
  "text": "http://d10genes.github.io/blog/2016/05/03/word2vec/",
  "unread": false,
  "urls": [
   {
    "url": "http://d10genes.github.io/blog/2016/05/03/word2vec/"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/datnamer",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/8646471?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/8646471?v=4&s=60",
   "displayName": "datnamer",
   "gv": "4",
   "id": "54602d6fdb8155e6700d316b",
   "url": "/datnamer",
   "username": "datnamer",
   "v": 10
  },
  "html": "word2vec with numba",
  "id": "57332e28f36daf63798ea787",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2016-05-11T13:05:44.882Z",
  "text": "word2vec with numba",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/3/notsological",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/18405375?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/18405375?v=3&s=60",
   "displayName": "notsological",
   "gv": "3",
   "id": "570bf4b6187bb6f0eadef0dd",
   "url": "/notsological",
   "username": "notsological",
   "v": 2
  },
  "html": "Hello. Why is:",
  "id": "57530bf5824488852c4ee64c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2016-06-04T17:12:21.737Z",
  "text": "Hello. Why is:",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2016-06-04T17:12:40.685Z",
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/3/notsological",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/18405375?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/18405375?v=3&s=60",
   "displayName": "notsological",
   "gv": "3",
   "id": "570bf4b6187bb6f0eadef0dd",
   "url": "/notsological",
   "username": "notsological",
   "v": 2
  },
  "html": "",
  "id": "57530c031097267921304fb0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2016-06-04T17:12:35.895Z",
  "text": "",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "editedAt": "2016-06-04T17:21:15.601Z",
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/3/notsological",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/18405375?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/18405375?v=3&s=60",
   "displayName": "notsological",
   "gv": "3",
   "id": "570bf4b6187bb6f0eadef0dd",
   "url": "/notsological",
   "username": "notsological",
   "v": 2
  },
  "html": "<pre><code><span class=\"atom\">a</span> = <span class=\"atom\">np</span>.<span class=\"atom\">array</span>([<span class=\"number\">5</span>, <span class=\"number\">15.2</span>, .<span class=\"number\">2</span>])\n<span class=\"atom\">b</span> = <span class=\"atom\">np</span>.<span class=\"atom\">array</span>([-<span class=\"number\">2.1</span>, -<span class=\"number\">9.98</span>, <span class=\"number\">8</span>])\n<span class=\"comment\">%timeit x = a - b</span></code></pre><p><code>&gt; 1000000 loops, best of 3: 728 ns per loop</code></p><p>faster than:</p><pre><code><span class=\"decorator\">@jit</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">substract</span><span class=\"params\">(a, b)</span>:</span>\n    <span class=\"keyword\">return</span> a - b\n\nfirst_run = substract(a, b)\n%timeit x = substract(a, b)</code></pre><p><code>&gt; 1000000 loops, best of 3: 1.47 \u00b5s per loop</code>?</p>",
  "id": "57530c24e8163f872c4df945",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2016-06-04T17:13:08.987Z",
  "text": "```\na = np.array([5, 15.2, .2])\nb = np.array([-2.1, -9.98, 8])\n%timeit x = a - b\n``` \n```> 1000000 loops, best of 3: 728 ns per loop```\n\nfaster than:\n\n```\n@jit\ndef substract(a, b):\n    return a - b\n\nfirst_run = substract(a, b)\n%timeit x = substract(a, b)```\n```> 1000000 loops, best of 3: 1.47 \u00b5s per loop```?",
  "unread": false,
  "urls": [],
  "v": 18
 },
 {
  "editedAt": "2016-06-04T17:13:29.021Z",
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/3/notsological",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/18405375?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/18405375?v=3&s=60",
   "displayName": "notsological",
   "gv": "3",
   "id": "570bf4b6187bb6f0eadef0dd",
   "url": "/notsological",
   "username": "notsological",
   "v": 2
  },
  "html": "",
  "id": "57530c299be9c5b637f06f62",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2016-06-04T17:13:13.846Z",
  "text": "",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/3/notsological",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/18405375?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/18405375?v=3&s=60",
   "displayName": "notsological",
   "gv": "3",
   "id": "570bf4b6187bb6f0eadef0dd",
   "url": "/notsological",
   "username": "notsological",
   "v": 2
  },
  "html": "I thought that numba was optimized for array-based computations.",
  "id": "57530ee5824488852c4ee6bf",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2016-06-04T17:24:53.050Z",
  "text": "I thought that numba was optimized for array-based computations.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/gmarkall",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/535640?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/535640?v=3&s=60",
   "displayName": "Graham Markall",
   "gv": "3",
   "id": "55b342020fc9f982beaaedf1",
   "url": "/gmarkall",
   "username": "gmarkall",
   "v": 6
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"notsological\" class=\"mention\">@notsological</span> do you plan to use numba for arrays that are that short?",
  "id": "575457e2824488852c4f114a",
  "issues": [],
  "mentions": [
   {
    "screenName": "notsological",
    "userId": "570bf4b6187bb6f0eadef0dd",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 15,
  "sent": "2016-06-05T16:48:34.018Z",
  "text": "@notsological do you plan to use numba for arrays that are that short?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/gmarkall",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/535640?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/535640?v=3&s=60",
   "displayName": "Graham Markall",
   "gv": "3",
   "id": "55b342020fc9f982beaaedf1",
   "url": "/gmarkall",
   "username": "gmarkall",
   "v": 6
  },
  "html": "you should try benchmarking with longer arrays. There is a constant overhead for calling a jitted function, which will be amortised if your array is longer",
  "id": "575458003bdac7ae37b4c92e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2016-06-05T16:49:04.642Z",
  "text": "you should try benchmarking with longer arrays. There is a constant overhead for calling a jitted function, which will be amortised if your array is longer",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/gmarkall",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/535640?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/535640?v=3&s=60",
   "displayName": "Graham Markall",
   "gv": "3",
   "id": "55b342020fc9f982beaaedf1",
   "url": "/gmarkall",
   "username": "gmarkall",
   "v": 6
  },
  "html": "secondly, the function you&#39;re benchmarking is very simple... try benchmarking a slightly more complicated computation to see more of an improvement",
  "id": "5754582f1097267921307a3c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2016-06-05T16:49:51.590Z",
  "text": "secondly, the function you're benchmarking is very simple... try benchmarking a slightly more complicated computation to see more of an improvement",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/gmarkall",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/535640?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/535640?v=3&s=60",
   "displayName": "Graham Markall",
   "gv": "3",
   "id": "55b342020fc9f982beaaedf1",
   "url": "/gmarkall",
   "username": "gmarkall",
   "v": 6
  },
  "html": "and also... if you&#39;re going to be doing operations element-by-element, it is also worth looking at the vectorize decorator that lets you write the function in terms of one element, which will be compiled to a numpy ufunc that operates on arrays of arbitrary shape",
  "id": "57545865824488852c4f115b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2016-06-05T16:50:45.359Z",
  "text": "and also... if you're going to be doing operations element-by-element, it is also worth looking at the vectorize decorator that lets you write the function in terms of one element, which will be compiled to a numpy ufunc that operates on arrays of arbitrary shape",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/3/notsological",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/18405375?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/18405375?v=3&s=60",
   "displayName": "notsological",
   "gv": "3",
   "id": "570bf4b6187bb6f0eadef0dd",
   "url": "/notsological",
   "username": "notsological",
   "v": 2
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"gmarkall\" class=\"mention\">@gmarkall</span> I made some tests, your remarks did help.",
  "id": "5754785810972679213080a2",
  "issues": [],
  "mentions": [
   {
    "screenName": "gmarkall",
    "userId": "55b342020fc9f982beaaedf1",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 15,
  "sent": "2016-06-05T19:07:04.081Z",
  "text": "@gmarkall I made some tests, your remarks did help.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "Yeah, Numba is not going to beat NumPy on simple operations (NumPy is also compiled!) since Numba\u2019s overhead to enter nopython mode will become the bottleneck for very short calculations.",
  "id": "575587bae96484d0692ffe80",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2016-06-06T14:24:58.243Z",
  "text": "Yeah, Numba is not going to beat NumPy on simple operations (NumPy is also compiled!) since Numba\u2019s overhead to enter nopython mode will become the bottleneck for very short calculations.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2016-06-19T13:22:24.865Z",
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/3/notsological",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/18405375?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/18405375?v=3&s=60",
   "displayName": "notsological",
   "gv": "3",
   "id": "570bf4b6187bb6f0eadef0dd",
   "url": "/notsological",
   "username": "notsological",
   "v": 2
  },
  "html": "",
  "id": "57669c5aa82a6b0079a6fe32",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2016-06-19T13:21:30.018Z",
  "text": "",
  "unread": false,
  "urls": [],
  "v": 3
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "For those attending Scipy, I will be around for questions and help.  No official sprint though.  I am planning to work on things related to the <a href=\"https://python-compilers-workshop.github.io/\" rel=\"nofollow\" target=\"_blank\" class=\"link\">https://python-compilers-workshop.github.io/</a>",
  "id": "578a4471d11cd288122fe4d0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2016-07-16T14:28:01.606Z",
  "text": "For those attending Scipy, I will be around for questions and help.  No official sprint though.  I am planning to work on things related to the https://python-compilers-workshop.github.io/",
  "unread": false,
  "urls": [
   {
    "url": "https://python-compilers-workshop.github.io/"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/datnamer",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/8646471?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/8646471?v=4&s=60",
   "displayName": "datnamer",
   "gv": "4",
   "id": "54602d6fdb8155e6700d316b",
   "url": "/datnamer",
   "username": "datnamer",
   "v": 10
  },
  "html": "FYI an interesting idea to help numba adoption would be integration with tensorflow to write new ops in pure python. This would probably need integration numpy autograd to get gradients and hand them off to TF also.",
  "id": "578d0fd72d04e058517ab3dc",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2016-07-18T17:20:23.757Z",
  "text": "FYI an interesting idea to help numba adoption would be integration with tensorflow to write new ops in pure python. This would probably need integration numpy autograd to get gradients and hand them off to TF also.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/datnamer",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/8646471?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/8646471?v=4&s=60",
   "displayName": "datnamer",
   "gv": "4",
   "id": "54602d6fdb8155e6700d316b",
   "url": "/datnamer",
   "username": "datnamer",
   "v": 10
  },
  "html": "tf already has something like 23k stars ",
  "id": "578d0feb9f35137e67cb22ed",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2016-07-18T17:20:43.865Z",
  "text": "tf already has something like 23k stars ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/dhirschfeld",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/881019?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/881019?v=4&s=60",
   "displayName": "Dave Hirschfeld",
   "gv": "4",
   "id": "533187555e986b0712effbbd",
   "url": "/dhirschfeld",
   "username": "dhirschfeld",
   "v": 26
  },
  "html": "Am I correct that there is no way to directly vectorize a jitted function other than by creating a shim function?<pre><code class=\"python\">In [<span class=\"number\">151</span>]: type(func)\nOut[<span class=\"number\">151</span>]: numba.targets.registry.CPUDispatcher\n\nIn [<span class=\"number\">152</span>]: f = numba.vectorize(func.signatures, target=<span class=\"string\">'cpu'</span>)(func)\nTraceback (most recent call last):\n\n  File <span class=\"string\">\"&lt;ipython-input-152-79c4e42b865b&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;\n    f = numba.vectorize(func.signatures, target=<span class=\"string\">'cpu'</span>)(func)\n\n  File <span class=\"string\">\"C:\\Python\\lib\\site-packages\\numba\\npyufunc\\decorators.py\"</span>, line <span class=\"number\">107</span>, <span class=\"keyword\">in</span> wrap\n    vec = Vectorize(func, **kws)\n\n  File <span class=\"string\">\"C:\\Python\\lib\\site-packages\\numba\\npyufunc\\decorators.py\"</span>, line <span class=\"number\">33</span>, <span class=\"keyword\">in</span> __new__\n    <span class=\"keyword\">return</span> imp(func, identity, kws)\n\n  File <span class=\"string\">\"C:\\Python\\lib\\site-packages\\numba\\npyufunc\\dufunc.py\"</span>, line <span class=\"number\">80</span>, <span class=\"keyword\">in</span> __init__\n    super(DUFunc, self).__init__(dispatcher, **kws)\n\n  File <span class=\"string\">\"C:\\Python\\lib\\inspect.py\"</span>, line <span class=\"number\">1043</span>, <span class=\"keyword\">in</span> getargspec\n    getfullargspec(func)\n\n  File <span class=\"string\">\"C:\\Python\\lib\\inspect.py\"</span>, line <span class=\"number\">1095</span>, <span class=\"keyword\">in</span> getfullargspec\n    <span class=\"keyword\">raise</span> TypeError(<span class=\"string\">'unsupported callable'</span>) <span class=\"keyword\">from</span> ex\n\nTypeError: unsupported callable</code></pre>",
  "id": "57ce774ffe284f6c302af817",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2016-09-06T07:59:11.158Z",
  "text": "Am I correct that there is no way to directly vectorize a jitted function other than by creating a shim function?\n```python\nIn [151]: type(func)\nOut[151]: numba.targets.registry.CPUDispatcher\n\nIn [152]: f = numba.vectorize(func.signatures, target='cpu')(func)\nTraceback (most recent call last):\n\n  File \"<ipython-input-152-79c4e42b865b>\", line 1, in <module>\n    f = numba.vectorize(func.signatures, target='cpu')(func)\n\n  File \"C:\\Python\\lib\\site-packages\\numba\\npyufunc\\decorators.py\", line 107, in wrap\n    vec = Vectorize(func, **kws)\n\n  File \"C:\\Python\\lib\\site-packages\\numba\\npyufunc\\decorators.py\", line 33, in __new__\n    return imp(func, identity, kws)\n\n  File \"C:\\Python\\lib\\site-packages\\numba\\npyufunc\\dufunc.py\", line 80, in __init__\n    super(DUFunc, self).__init__(dispatcher, **kws)\n\n  File \"C:\\Python\\lib\\inspect.py\", line 1043, in getargspec\n    getfullargspec(func)\n\n  File \"C:\\Python\\lib\\inspect.py\", line 1095, in getfullargspec\n    raise TypeError('unsupported callable') from ex\n\nTypeError: unsupported callable\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/dhirschfeld",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/881019?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/881019?v=4&s=60",
   "displayName": "Dave Hirschfeld",
   "gv": "4",
   "id": "533187555e986b0712effbbd",
   "url": "/dhirschfeld",
   "username": "dhirschfeld",
   "v": 26
  },
  "html": "Is there a better way than the below hack to automate wrapping a jitted func?<pre><code class=\"python\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">vectorize</span><span class=\"params\">(func, *, target=<span class=\"string\">'cpu'</span>)</span>:</span>\n    <span class=\"string\">\"\"\"Vectorizes a jumba jitted function `func`\n\n    Parameters\n    ----------\n    func : numba.dispatcher.Dispatcher\n        A function which has already been jitted\n\n    Optional Parameters\n    -------------------    \n    target : str, {'cpu', 'parallel', 'cuda'}\n        Any valid ufunc target\n\n    Returns\n    -------\n    DUFunc\n        A numba Dynamic Universal Function which wraps the \n        jitted function `func`\n\n    \"\"\"</span>\n    <span class=\"keyword\">import</span> inspect\n    <span class=\"keyword\">from</span> textwrap <span class=\"keyword\">import</span> dedent\n    <span class=\"keyword\">from</span> numba <span class=\"keyword\">import</span> vectorize\n    <span class=\"keyword\">from</span> numba.dispatcher <span class=\"keyword\">import</span> Dispatcher\n    <span class=\"keyword\">assert</span> isinstance(func, Dispatcher)\n    code = <span class=\"string\">\"\"\"\n    @vectorize({signatures}, target={target!r})\n    def {func_name}({parameters}):\n        return func({parameters})\n    \"\"\"</span>\n    name = func.__name__\n    parameters = inspect.signature(func).parameters\n    parameters = <span class=\"string\">', '</span>.join(parameters.keys())\n    code = code.format(\n        signatures=func.signatures,\n        target=target,\n        func_name=name,\n        parameters=parameters,\n    )\n    exec(dedent(code))\n    <span class=\"keyword\">return</span> locals()[name]</code></pre>",
  "id": "57ce796d77c1b70d7fec10e9",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2016-09-06T08:08:13.334Z",
  "text": "Is there a better way than the below hack to automate wrapping a jitted func?\n```python\ndef vectorize(func, *, target='cpu'):\n    \"\"\"Vectorizes a jumba jitted function `func`\n\n    Parameters\n    ----------\n    func : numba.dispatcher.Dispatcher\n        A function which has already been jitted\n\n    Optional Parameters\n    -------------------    \n    target : str, {'cpu', 'parallel', 'cuda'}\n        Any valid ufunc target\n\n    Returns\n    -------\n    DUFunc\n        A numba Dynamic Universal Function which wraps the \n        jitted function `func`\n\n    \"\"\"\n    import inspect\n    from textwrap import dedent\n    from numba import vectorize\n    from numba.dispatcher import Dispatcher\n    assert isinstance(func, Dispatcher)\n    code = \"\"\"\n    @vectorize({signatures}, target={target!r})\n    def {func_name}({parameters}):\n        return func({parameters})\n    \"\"\"\n    name = func.__name__\n    parameters = inspect.signature(func).parameters\n    parameters = ', '.join(parameters.keys())\n    code = code.format(\n        signatures=func.signatures,\n        target=target,\n        func_name=name,\n        parameters=parameters,\n    )\n    exec(dedent(code))\n    return locals()[name]\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"dhirschfeld\" class=\"mention\">@dhirschfeld</span>: You are correct, although that does seem like something we should add support for.",
  "id": "57ceb96677c1b70d7fecdead",
  "issues": [],
  "mentions": [
   {
    "screenName": "dhirschfeld",
    "userId": "533187555e986b0712effbbd",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 14,
  "sent": "2016-09-06T12:41:10.147Z",
  "text": "@dhirschfeld: You are correct, although that does seem like something we should add support for.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/dhirschfeld",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/881019?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/881019?v=4&s=60",
   "displayName": "Dave Hirschfeld",
   "gv": "4",
   "id": "533187555e986b0712effbbd",
   "url": "/dhirschfeld",
   "username": "dhirschfeld",
   "v": 26
  },
  "html": "Thanks, I opened <span data-link-type=\"issue\" data-issue=\"2114\" class=\"issue\">#2114</span> to track it...",
  "id": "57cf4b9b1baa312a6bdcc81a",
  "issues": [
   {
    "number": "2114"
   }
  ],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2016-09-06T23:04:59.639Z",
  "text": "Thanks, I opened #2114 to track it...",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/gmarkall",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/535640?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/535640?v=3&s=60",
   "displayName": "Graham Markall",
   "gv": "3",
   "id": "55b342020fc9f982beaaedf1",
   "url": "/gmarkall",
   "username": "gmarkall",
   "v": 6
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"seibert\" class=\"mention\">@seibert</span> do you know of anyone working on / having got numba to work on pypy at the moment?",
  "id": "57d295f21e2af97718920f9c",
  "issues": [],
  "mentions": [
   {
    "screenName": "seibert",
    "userId": "55b68af40fc9f982beab2a3c",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 14,
  "sent": "2016-09-09T10:58:58.387Z",
  "text": "@seibert do you know of anyone working on / having got numba to work on pypy at the moment?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/gmarkall",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/535640?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/535640?v=3&s=60",
   "displayName": "Graham Markall",
   "gv": "3",
   "id": "55b342020fc9f982beaaedf1",
   "url": "/gmarkall",
   "username": "gmarkall",
   "v": 6
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"seibert\" class=\"mention\">@seibert</span> also, thanks for your email comments that I didn&#39;t reply to the other day - it was very helpful",
  "id": "57d296041aacfaf84b0384b5",
  "issues": [],
  "mentions": [
   {
    "screenName": "seibert",
    "userId": "55b68af40fc9f982beab2a3c",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 14,
  "sent": "2016-09-09T10:59:16.009Z",
  "text": "@seibert also, thanks for your email comments that I didn't reply to the other day - it was very helpful",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "No one has tried to get numba to work on pypy.  I suspect there are several issues, even now that pypy has better support for the CPython API.",
  "id": "57d2ba041aacfaf84b04170d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2016-09-09T13:32:52.519Z",
  "text": "No one has tried to get numba to work on pypy.  I suspect there are several issues, even now that pypy has better support for the CPython API.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "The main remaining issue (speculating here) will be related to support for the NumPy C API.  Numba needs to be able to directly manipulate ndarray C structs, as well as call various C functions exported by NumPy.",
  "id": "57d2ba6cf4360c681820aa11",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2016-09-09T13:34:36.107Z",
  "text": "The main remaining issue (speculating here) will be related to support for the NumPy C API.  Numba needs to be able to directly manipulate ndarray C structs, as well as call various C functions exported by NumPy.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/gmarkall",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/535640?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/535640?v=3&s=60",
   "displayName": "Graham Markall",
   "gv": "3",
   "id": "55b342020fc9f982beaaedf1",
   "url": "/gmarkall",
   "username": "gmarkall",
   "v": 6
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"seibert\" class=\"mention\">@seibert</span> thanks - I thought that was the case, but wanted to make sure before claiming that was the case :-)",
  "id": "57d2bcdb1e2af9771892b07f",
  "issues": [],
  "mentions": [
   {
    "screenName": "seibert",
    "userId": "55b68af40fc9f982beab2a3c",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 14,
  "sent": "2016-09-09T13:44:59.501Z",
  "text": "@seibert thanks - I thought that was the case, but wanted to make sure before claiming that was the case :-)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/linwoodc3",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2884914?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2884914?v=4&s=60",
   "displayName": "Linwood Creekmore",
   "gv": "4",
   "id": "5796009e40f3a6eec05c5aa0",
   "url": "/linwoodc3",
   "username": "linwoodc3",
   "v": 22
  },
  "html": "Greetings all",
  "id": "57d48889b37816b14fa8f436",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2016-09-10T22:26:17.551Z",
  "text": "Greetings all",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/linwoodc3",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2884914?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2884914?v=4&s=60",
   "displayName": "Linwood Creekmore",
   "gv": "4",
   "id": "5796009e40f3a6eec05c5aa0",
   "url": "/linwoodc3",
   "username": "linwoodc3",
   "v": 22
  },
  "html": "I&#39;m haivng an install problem",
  "id": "57d4888d7b9f8167113b0bfc",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2016-09-10T22:26:21.539Z",
  "text": "I'm haivng an install problem",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/linwoodc3",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2884914?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2884914?v=4&s=60",
   "displayName": "Linwood Creekmore",
   "gv": "4",
   "id": "5796009e40f3a6eec05c5aa0",
   "url": "/linwoodc3",
   "username": "linwoodc3",
   "v": 22
  },
  "html": "receiving this:",
  "id": "57d4889d83c1556511b80fea",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2016-09-10T22:26:37.012Z",
  "text": "receiving this:",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/linwoodc3",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2884914?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2884914?v=4&s=60",
   "displayName": "Linwood Creekmore",
   "gv": "4",
   "id": "5796009e40f3a6eec05c5aa0",
   "url": "/linwoodc3",
   "username": "linwoodc3",
   "v": 22
  },
  "html": "<pre><code class=\"python\">cannot <span class=\"keyword\">import</span> name  _typeconv</code></pre>",
  "id": "57d488c6a0e8dbb04f29d009",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2016-09-10T22:27:18.978Z",
  "text": "```python\ncannot import name  _typeconv\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/linwoodc3",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2884914?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2884914?v=4&s=60",
   "displayName": "Linwood Creekmore",
   "gv": "4",
   "id": "5796009e40f3a6eec05c5aa0",
   "url": "/linwoodc3",
   "username": "linwoodc3",
   "v": 22
  },
  "html": "on air gapped network",
  "id": "57d488cf7b9f8167113b0cba",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2016-09-10T22:27:27.046Z",
  "text": "on air gapped network",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/linwoodc3",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2884914?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2884914?v=4&s=60",
   "displayName": "Linwood Creekmore",
   "gv": "4",
   "id": "5796009e40f3a6eec05c5aa0",
   "url": "/linwoodc3",
   "username": "linwoodc3",
   "v": 22
  },
  "html": "built LLVM 3.8.1, using llvmlite 13.0, trying to install numba 0.27",
  "id": "57d488e2a0e8dbb04f29d078",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2016-09-10T22:27:46.916Z",
  "text": "built LLVM 3.8.1, using llvmlite 13.0, trying to install numba 0.27",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/linwoodc3",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2884914?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2884914?v=4&s=60",
   "displayName": "Linwood Creekmore",
   "gv": "4",
   "id": "5796009e40f3a6eec05c5aa0",
   "url": "/linwoodc3",
   "username": "linwoodc3",
   "v": 22
  },
  "html": "using GCC 5.2",
  "id": "57d488f1d274dbdf3507fd7f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2016-09-10T22:28:01.665Z",
  "text": "using GCC 5.2",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/linwoodc3",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2884914?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2884914?v=4&s=60",
   "displayName": "Linwood Creekmore",
   "gv": "4",
   "id": "5796009e40f3a6eec05c5aa0",
   "url": "/linwoodc3",
   "username": "linwoodc3",
   "v": 22
  },
  "html": "<code>the python setup.py build</code> in llvmlite works fine..so does the <code>python setup.py install</code>",
  "id": "57d48920b37816b14fa8f5af",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2016-09-10T22:28:48.696Z",
  "text": "`the python setup.py build` in llvmlite works fine..so does the `python setup.py install`",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/linwoodc3",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2884914?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2884914?v=4&s=60",
   "displayName": "Linwood Creekmore",
   "gv": "4",
   "id": "5796009e40f3a6eec05c5aa0",
   "url": "/linwoodc3",
   "username": "linwoodc3",
   "v": 22
  },
  "html": "even get through the <code>python setup.py install</code> in numba, but get one error",
  "id": "57d48958cba69fe735029698",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2016-09-10T22:29:44.245Z",
  "text": "even get through the `python setup.py install` in numba, but get one error",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/linwoodc3",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2884914?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2884914?v=4&s=60",
   "displayName": "Linwood Creekmore",
   "gv": "4",
   "id": "5796009e40f3a6eec05c5aa0",
   "url": "/linwoodc3",
   "username": "linwoodc3",
   "v": 22
  },
  "html": "<pre><code class=\"python\">Extracting numba-<span class=\"number\">0.27</span>.0......\n    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,v: int)</span>:</span>\nSyntaxError: invalid syntax\n\nnumba <span class=\"number\">0.27</span>.0 <span class=\"keyword\">is</span> already the active version <span class=\"keyword\">in</span> easy-install.pth</code></pre>",
  "id": "57d489beb8d4c138408324cc",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2016-09-10T22:31:26.959Z",
  "text": "```python\nExtracting numba-0.27.0......\n    def __init__(self,v: int):\nSyntaxError: invalid syntax\n\nnumba 0.27.0 is already the active version in easy-install.pth\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/linwoodc3",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2884914?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2884914?v=4&s=60",
   "displayName": "Linwood Creekmore",
   "gv": "4",
   "id": "5796009e40f3a6eec05c5aa0",
   "url": "/linwoodc3",
   "username": "linwoodc3",
   "v": 22
  },
  "html": "Any help appreciated",
  "id": "57d489c9d274dbdf3507ff0d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2016-09-10T22:31:37.104Z",
  "text": "Any help appreciated",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/gmarkall",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/535640?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/535640?v=3&s=60",
   "displayName": "Graham Markall",
   "gv": "3",
   "id": "55b342020fc9f982beaaedf1",
   "url": "/gmarkall",
   "username": "gmarkall",
   "v": 6
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"linwoodc3\" class=\"mention\">@linwoodc3</span> if you do <code>python setup.py build_ext --inplace</code> in your numba source folder then run runtests.py, does that work? (trying to determine if it was a problem that happened related to installation)",
  "id": "57d52db9cba69fe73503d622",
  "issues": [],
  "mentions": [
   {
    "screenName": "linwoodc3",
    "userId": "5796009e40f3a6eec05c5aa0",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 14,
  "sent": "2016-09-11T10:11:05.113Z",
  "text": "@linwoodc3 if you do `python setup.py build_ext --inplace` in your numba source folder then run runtests.py, does that work? (trying to determine if it was a problem that happened related to installation)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/linwoodc3",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2884914?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2884914?v=4&s=60",
   "displayName": "Linwood Creekmore",
   "gv": "4",
   "id": "5796009e40f3a6eec05c5aa0",
   "url": "/linwoodc3",
   "username": "linwoodc3",
   "v": 22
  },
  "html": "let me try",
  "id": "57d6e6adcba69fe73508ed4f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2016-09-12T17:32:29.222Z",
  "text": "let me try",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/linwoodc3",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2884914?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2884914?v=4&s=60",
   "displayName": "Linwood Creekmore",
   "gv": "4",
   "id": "5796009e40f3a6eec05c5aa0",
   "url": "/linwoodc3",
   "username": "linwoodc3",
   "v": 22
  },
  "html": "Got a <pre><code class=\"python\">running build_ext\n&lt;path info&gt;\nLLVM version...  <span class=\"number\">3.8</span>.1\n\nmake: Nothing to be done <span class=\"keyword\">for</span> <span class=\"string\">'all'</span></code></pre>",
  "id": "57d70645b8d4c1384089f954",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2016-09-12T19:47:17.881Z",
  "text": "Got a \n```python\nrunning build_ext\n<path info>\nLLVM version...  3.8.1\n\nmake: Nothing to be done for 'all'\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/linwoodc3",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2884914?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2884914?v=4&s=60",
   "displayName": "Linwood Creekmore",
   "gv": "4",
   "id": "5796009e40f3a6eec05c5aa0",
   "url": "/linwoodc3",
   "username": "linwoodc3",
   "v": 22
  },
  "html": "Correction",
  "id": "57d70683cba69fe73509702d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2016-09-12T19:48:19.571Z",
  "text": "Correction",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/linwoodc3",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2884914?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2884914?v=4&s=60",
   "displayName": "Linwood Creekmore",
   "gv": "4",
   "id": "5796009e40f3a6eec05c5aa0",
   "url": "/linwoodc3",
   "username": "linwoodc3",
   "v": 22
  },
  "html": "Wait",
  "id": "57d706c2ef19fa3f407c992c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2016-09-12T19:49:22.354Z",
  "text": "Wait",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/linwoodc3",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2884914?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2884914?v=4&s=60",
   "displayName": "Linwood Creekmore",
   "gv": "4",
   "id": "5796009e40f3a6eec05c5aa0",
   "url": "/linwoodc3",
   "username": "linwoodc3",
   "v": 22
  },
  "html": "<p>Ran that in numba source folder, then launched runtests.py; Lot&#39;s of dots, I&#39;ll only put the RuntimeWarnings<br>:</p><pre><code class=\"python\">skipped CUDA tests\nskipped CUDA tests\n\n....test_array_exprs.py:<span class=\"number\">25</span>:\nRuntimeWarning: invalid value encountered <span class=\"keyword\">in</span> sqrt\n\ntest_array_exprs.py:<span class=\"number\">48</span>:\nRuntimeWarning: invalide value encountered <span class=\"keyword\">in</span> true_divide</code></pre><p>but it&#39;s still running</p>",
  "id": "57d707fad274dbdf350ef1f5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2016-09-12T19:54:34.217Z",
  "text": "Ran that in numba source folder, then launched runtests.py; Lot's of dots, I'll only put the RuntimeWarnings\n:\n\n```python\nskipped CUDA tests\nskipped CUDA tests\n\n....test_array_exprs.py:25:\nRuntimeWarning: invalid value encountered in sqrt\n\ntest_array_exprs.py:48:\nRuntimeWarning: invalide value encountered in true_divide\n\n\n```\n\nbut it's still running",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/linwoodc3",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2884914?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2884914?v=4&s=60",
   "displayName": "Linwood Creekmore",
   "gv": "4",
   "id": "5796009e40f3a6eec05c5aa0",
   "url": "/linwoodc3",
   "username": "linwoodc3",
   "v": 22
  },
  "html": "Final result",
  "id": "57d70b7bef19fa3f407caaa0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2016-09-12T20:09:31.830Z",
  "text": "Final result",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/linwoodc3",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2884914?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2884914?v=4&s=60",
   "displayName": "Linwood Creekmore",
   "gv": "4",
   "id": "5796009e40f3a6eec05c5aa0",
   "url": "/linwoodc3",
   "username": "linwoodc3",
   "v": 22
  },
  "html": "<pre><code class=\"python\">Ran <span class=\"number\">6414</span> tests <span class=\"keyword\">in</span> <span class=\"number\">1227.631</span>s\n\n\nOK (skipped=<span class=\"number\">59</span>,expected failures=<span class=\"number\">5</span>)</code></pre>",
  "id": "57d70bc4cba69fe735098406",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2016-09-12T20:10:44.153Z",
  "text": "```python\nRan 6414 tests in 1227.631s\n\n\nOK (skipped=59,expected failures=5)\n```\n\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/linwoodc3",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2884914?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2884914?v=4&s=60",
   "displayName": "Linwood Creekmore",
   "gv": "4",
   "id": "5796009e40f3a6eec05c5aa0",
   "url": "/linwoodc3",
   "username": "linwoodc3",
   "v": 22
  },
  "html": "It worked...something about the build_ext worked",
  "id": "57d70e6db8d4c138408a1680",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2016-09-12T20:22:05.362Z",
  "text": "It worked...something about the build_ext worked",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/gmarkall",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/535640?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/535640?v=3&s=60",
   "displayName": "Graham Markall",
   "gv": "3",
   "id": "55b342020fc9f982beaaedf1",
   "url": "/gmarkall",
   "username": "gmarkall",
   "v": 6
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"linwoodc3\" class=\"mention\">@linwoodc3</span> I guess something went wrong when numba was installed to your python installation, if it works from the numba source folder",
  "id": "57d7d4b17b9f816711445d26",
  "issues": [],
  "mentions": [
   {
    "screenName": "linwoodc3",
    "userId": "5796009e40f3a6eec05c5aa0",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 14,
  "sent": "2016-09-13T10:28:01.221Z",
  "text": "@linwoodc3 I guess something went wrong when numba was installed to your python installation, if it works from the numba source folder",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/linwoodc3",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2884914?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2884914?v=4&s=60",
   "displayName": "Linwood Creekmore",
   "gv": "4",
   "id": "5796009e40f3a6eec05c5aa0",
   "url": "/linwoodc3",
   "username": "linwoodc3",
   "v": 22
  },
  "html": "Thanks <span data-link-type=\"mention\" data-screen-name=\"gmarkall\" class=\"mention\">@gmarkall</span> ",
  "id": "57d7e4167b9f816711449873",
  "issues": [],
  "mentions": [
   {
    "screenName": "gmarkall",
    "userId": "55b342020fc9f982beaaedf1",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 14,
  "sent": "2016-09-13T11:33:42.253Z",
  "text": "Thanks @gmarkall ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/3/bsdis",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1256202?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1256202?v=3&s=60",
   "displayName": "bsdis",
   "gv": "3",
   "id": "54f4280015522ed4b3dcab17",
   "url": "/bsdis",
   "username": "bsdis",
   "v": 7
  },
  "html": "Hi, i am trying to numba optimize code with fftw library in a loop. But I get an error:  TypeError: Failed at nopython (nopython frontend)<br>Arg 5 of pyobject is not legal in nopython mode.  What is the correct way to numba optimize this snippet?",
  "id": "57dcd1cb33c63ba01a0c7bee",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2016-09-17T05:16:59.486Z",
  "text": "Hi, i am trying to numba optimize code with fftw library in a loop. But I get an error:  TypeError: Failed at nopython (nopython frontend)\nArg 5 of pyobject is not legal in nopython mode.  What is the correct way to numba optimize this snippet?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/3/bsdis",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1256202?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1256202?v=3&s=60",
   "displayName": "bsdis",
   "gv": "3",
   "id": "54f4280015522ed4b3dcab17",
   "url": "/bsdis",
   "username": "bsdis",
   "v": 7
  },
  "html": "<pre><code><span class=\"keyword\">import</span> sys\n<span class=\"keyword\">import</span> pyfftw\n<span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np\n<span class=\"keyword\">import</span> scipy.signal\n<span class=\"keyword\">import</span> scipy.fftpack\n<span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt\n<span class=\"keyword\">from</span> timeit <span class=\"keyword\">import</span> Timer\n<span class=\"keyword\">import</span> time\n<span class=\"keyword\">from</span> numba <span class=\"keyword\">import</span> jit\n\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create_signal</span><span class=\"params\">(fs = <span class=\"number\">10000</span>, N = <span class=\"number\">20000</span>)</span>:</span>\n    <span class=\"comment\"># Timebase</span>\n    t = np.linspace(<span class=\"number\">1</span>,N,num=N)\n\n    <span class=\"comment\"># Signal frequencies, f1 is musical 'A'</span>\n    f1 = <span class=\"number\">440</span>\n    f2 = <span class=\"number\">8</span> * f1\n\n    <span class=\"comment\"># Signal power, 20Vrms here, try making this smaller or bigger</span>\n    a = <span class=\"number\">20.0</span> * np.sqrt(<span class=\"number\">2</span>)\n\n    <span class=\"comment\"># Noise power, equal to 0.1 V**2/Hz, make this smaller like 0.0001</span>\n    noise = <span class=\"number\">0.0001</span> * fs / <span class=\"number\">2</span>\n\n    <span class=\"comment\"># Construct the data</span>\n    d = a * np.sin(<span class=\"number\">2</span>*np.pi*t*f1/fs) + <span class=\"number\">2</span> * a * np.sin(<span class=\"number\">2</span>*np.pi*t*f2/fs)\n    d += np.random.normal(scale = np.sqrt(noise), size = t.shape)\n    <span class=\"keyword\">return</span> d\n\n<span class=\"decorator\">@jit(nopython=True)</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">runpyfftw</span><span class=\"params\">(s, dbins, prf, win, ws, fft)</span>:</span>\n    rdysig = np.tile(win,(dbins,<span class=\"number\">1</span>)) * scipy.signal.detrend(s)\n    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(rdysig.shape[<span class=\"number\">0</span>]):\n        v = fft( rdysig[i,:].flatten() )\n        psd = <span class=\"number\">2</span> * (np.real(v) * np.imag( v ))/(prf * ws)\n\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span>\n\n    pyfftw.interfaces.cache.enable()\n    prf = <span class=\"number\">10000</span>\n    secs = <span class=\"number\">2</span>\n    fftsize = <span class=\"number\">10000</span>\n    dbins = <span class=\"number\">800</span>\n    a = pyfftw.empty_aligned(prf * secs, dtype=<span class=\"string\">'float32'</span>)\n    fft = pyfftw.builders.fft(a)\n    s = np.tile( create_signal(prf, prf * secs)[np.newaxis] , (dbins,<span class=\"number\">1</span>) )\n    win = np.hanning(prf * secs)\n    ws = np.sum(win**<span class=\"number\">2</span>\n    t = time.process_time()\n    runpyfftw(s, dbins, prf, win, ws, fft)\n    print(time.process_time() - t)</code></pre>That was the code",
  "id": "57dcd22f18291e10487b4b33",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2016-09-17T05:18:38.956Z",
  "text": "```\nimport sys\nimport pyfftw\nimport numpy as np\nimport scipy.signal\nimport scipy.fftpack\nimport matplotlib.pyplot as plt\nfrom timeit import Timer\nimport time\nfrom numba import jit\n\ndef create_signal(fs = 10000, N = 20000):\n    # Timebase\n    t = np.linspace(1,N,num=N)\n\n    # Signal frequencies, f1 is musical 'A'\n    f1 = 440\n    f2 = 8 * f1\n\n    # Signal power, 20Vrms here, try making this smaller or bigger\n    a = 20.0 * np.sqrt(2)\n\n    # Noise power, equal to 0.1 V**2/Hz, make this smaller like 0.0001\n    noise = 0.0001 * fs / 2\n\n    # Construct the data\n    d = a * np.sin(2*np.pi*t*f1/fs) + 2 * a * np.sin(2*np.pi*t*f2/fs)\n    d += np.random.normal(scale = np.sqrt(noise), size = t.shape)\n    return d\n\n@jit(nopython=True)\ndef runpyfftw(s, dbins, prf, win, ws, fft):\n    rdysig = np.tile(win,(dbins,1)) * scipy.signal.detrend(s)\n    for i in range(rdysig.shape[0]):\n        v = fft( rdysig[i,:].flatten() )\n        psd = 2 * (np.real(v) * np.imag( v ))/(prf * ws)\n\ndef main():\n\n    pyfftw.interfaces.cache.enable()\n    prf = 10000\n    secs = 2\n    fftsize = 10000\n    dbins = 800\n    a = pyfftw.empty_aligned(prf * secs, dtype='float32')\n    fft = pyfftw.builders.fft(a)\n    s = np.tile( create_signal(prf, prf * secs)[np.newaxis] , (dbins,1) )\n    win = np.hanning(prf * secs)\n    ws = np.sum(win**2\n    t = time.process_time()\n    runpyfftw(s, dbins, prf, win, ws, fft)\n    print(time.process_time() - t)\n```\n\nThat was the code",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/gmarkall",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/535640?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/535640?v=3&s=60",
   "displayName": "Graham Markall",
   "gv": "3",
   "id": "55b342020fc9f982beaaedf1",
   "url": "/gmarkall",
   "username": "gmarkall",
   "v": 6
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"pitrou\" class=\"mention\">@pitrou</span> Is the pointer-stuffing into lists (hiding a pointer in the allocated member) just a left-over from before the mechanism to associate arbitrary data with python objects was added for sets (object_set_private_data etc.), or is it also a performance optimisation?",
  "id": "57ed7f19b0ff456d3ad0b50a",
  "issues": [],
  "mentions": [
   {
    "screenName": "pitrou",
    "userId": "54935c59db8155e6700e0da8",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 11,
  "sent": "2016-09-29T20:52:41.046Z",
  "text": "@pitrou Is the pointer-stuffing into lists (hiding a pointer in the allocated member) just a left-over from before the mechanism to associate arbitrary data with python objects was added for sets (object_set_private_data etc.), or is it also a performance optimisation?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/gmarkall",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/535640?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/535640?v=3&s=60",
   "displayName": "Graham Markall",
   "gv": "3",
   "id": "55b342020fc9f982beaaedf1",
   "url": "/gmarkall",
   "username": "gmarkall",
   "v": 6
  },
  "html": "(also, I think that it does the pointer stuffing even when unboxing fails for a list, whereas it does not for sets, which seems suspicious)",
  "id": "57ed7fe1b0ff456d3ad0b82f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2016-09-29T20:56:01.323Z",
  "text": "(also, I think that it does the pointer stuffing even when unboxing fails for a list, whereas it does not for sets, which seems suspicious)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/dhirschfeld",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/881019?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/881019?v=4&s=60",
   "displayName": "Dave Hirschfeld",
   "gv": "4",
   "id": "533187555e986b0712effbbd",
   "url": "/dhirschfeld",
   "username": "dhirschfeld",
   "v": 26
  },
  "html": "I can&#39;t seem to figure out how to specify a record array dype with numba and cant&#39; seem to find any examples - all the examples I can see <em>cheat</em> by using<code>typeof</code> on an already existing numpy recarray rather than constructing the numba type from scratch. Concretely, any help making the below work would be much appreciated!<pre><code class=\"python\">In [<span class=\"number\">156</span>]: <span class=\"decorator\">@jit(Record([('alpha', '&lt;f8'), ('beta', '&lt;f8')]))</span>\n     ...: <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_alpha</span><span class=\"params\">(rec)</span>:</span>\n     ...:     <span class=\"keyword\">return</span> rec.alpha\nTraceback (most recent call last):\n\n  File <span class=\"string\">\"&lt;ipython-input-156-2e9c93501ecb&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;\n    <span class=\"decorator\">@jit(Record([('alpha', '&lt;f8'), ('beta', '&lt;f8')]))</span>\n\n  File <span class=\"string\">\"C:\\bin\\Anaconda3\\lib\\site-packages\\numba\\types\\abstract.py\"</span>, line <span class=\"number\">60</span>, <span class=\"keyword\">in</span> __call__\n    inst = type.__call__(cls, *args, **kwargs)\n\nTypeError: __init__() missing <span class=\"number\">4</span> required positional arguments: <span class=\"string\">'fields'</span>, <span class=\"string\">'size'</span>, <span class=\"string\">'aligned'</span>, <span class=\"keyword\">and</span> <span class=\"string\">'dtype'</span></code></pre>",
  "id": "5806054f36d642263680e596",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2016-10-18T11:19:43.385Z",
  "text": "I can't seem to figure out how to specify a record array dype with numba and cant' seem to find any examples - all the examples I can see *cheat* by using`typeof` on an already existing numpy recarray rather than constructing the numba type from scratch. Concretely, any help making the below work would be much appreciated!\n```python\nIn [156]: @jit(Record([('alpha', '<f8'), ('beta', '<f8')]))\n     ...: def get_alpha(rec):\n     ...:     return rec.alpha\nTraceback (most recent call last):\n\n  File \"<ipython-input-156-2e9c93501ecb>\", line 1, in <module>\n    @jit(Record([('alpha', '<f8'), ('beta', '<f8')]))\n\n  File \"C:\\bin\\Anaconda3\\lib\\site-packages\\numba\\types\\abstract.py\", line 60, in __call__\n    inst = type.__call__(cls, *args, **kwargs)\n\nTypeError: __init__() missing 4 required positional arguments: 'fields', 'size', 'aligned', and 'dtype'\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/dhirschfeld",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/881019?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/881019?v=4&s=60",
   "displayName": "Dave Hirschfeld",
   "gv": "4",
   "id": "533187555e986b0712effbbd",
   "url": "/dhirschfeld",
   "username": "dhirschfeld",
   "v": 26
  },
  "html": "<p>My actual usecase is trying to specify a record array dtype to the <code>carray</code> func - e.g.</p><pre><code class=\"python\"><span class=\"decorator\">@cfunc(float64(float64, types.voidptr))</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f2</span><span class=\"params\">(x, args)</span>:</span>\n    dtype = np.dtype([(<span class=\"string\">'mu'</span>, np.float64),(<span class=\"string\">'alpha'</span>, np.float64)])\n    args = carray(args, (<span class=\"number\">1</span>,), dtype=dtype)\n    mu = args.mu[<span class=\"number\">0</span>]\n    alpha = args.alpha[<span class=\"number\">0</span>]\n    <span class=\"keyword\">return</span> np.exp(-alpha*x**<span class=\"number\">2</span>)/(<span class=\"number\">1</span>+np.exp(-(x-mu)))</code></pre><p>...results in the below compilation error</p><pre><code><span class=\"type\">UntypedAttributeError</span>: <span class=\"type\">Unknown</span> attribute 'dtype' <span class=\"keyword\">of</span> <span class=\"typedef\"><span class=\"keyword\">type</span> <span class=\"type\">Module</span><span class=\"container\">(&lt;<span class=\"title\">module</span> '<span class=\"title\">numpy'</span> <span class=\"title\">from</span> '<span class=\"type\">C</span>:\\\\<span class=\"title\">bin</span>\\\\<span class=\"type\">Anaconda3</span>\\\\<span class=\"title\">lib</span>\\\\<span class=\"title\">site</span>-<span class=\"title\">packages</span>\\\\<span class=\"title\">numpy</span>\\\\<span class=\"title\">__init__</span>.<span class=\"title\">py'</span>&gt;)</span></span></code></pre>",
  "id": "58060b4f36d642263680fc6a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2016-10-18T11:45:19.947Z",
  "text": "My actual usecase is trying to specify a record array dtype to the `carray` func - e.g.\n```python\n@cfunc(float64(float64, types.voidptr))\ndef f2(x, args):\n    dtype = np.dtype([('mu', np.float64),('alpha', np.float64)])\n    args = carray(args, (1,), dtype=dtype)\n    mu = args.mu[0]\n    alpha = args.alpha[0]\n    return np.exp(-alpha*x**2)/(1+np.exp(-(x-mu)))\n```\n...results in the below compilation error\n```\nUntypedAttributeError: Unknown attribute 'dtype' of type Module(<module 'numpy' from 'C:\\\\bin\\\\Anaconda3\\\\lib\\\\site-packages\\\\numpy\\\\__init__.py'>)\n```\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/dhirschfeld",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/881019?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/881019?v=4&s=60",
   "displayName": "Dave Hirschfeld",
   "gv": "4",
   "id": "533187555e986b0712effbbd",
   "url": "/dhirschfeld",
   "username": "dhirschfeld",
   "v": 26
  },
  "html": "So, how can I specify inside the <code>f2</code> function that the dtype of <code>args</code> should be <code>np.dtype([(&#39;mu&#39;, np.float64),(&#39;alpha&#39;, np.float64)])</code>?",
  "id": "58060b8880020cc608ef003c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2016-10-18T11:46:16.650Z",
  "text": "So, how can I specify inside the `f2` function that the dtype of `args` should be `np.dtype([('mu', np.float64),('alpha', np.float64)])`?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/dhirschfeld",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/881019?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/881019?v=4&s=60",
   "displayName": "Dave Hirschfeld",
   "gv": "4",
   "id": "533187555e986b0712effbbd",
   "url": "/dhirschfeld",
   "username": "dhirschfeld",
   "v": 26
  },
  "html": "This is in reference to my testing of the new <code>LowLevelCallable</code> in scipy and how that plays withe numba&#39;s <code>cfunc</code>/<code>carray</code><br><span data-link-type=\"issue\" data-issue=\"6509\" data-issue-repo=\"scipy/scipy\" class=\"issue\">scipy/scipy#6509</span>",
  "id": "580613eb36d64226368120f7",
  "issues": [
   {
    "number": "6509",
    "repo": "scipy/scipy"
   }
  ],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2016-10-18T12:22:03.011Z",
  "text": "This is in reference to my testing of the new `LowLevelCallable` in scipy and how that plays withe numba's `cfunc`/`carray`\nhttps://github.com/scipy/scipy/pull/6509",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2016-10-18T13:14:51.965Z",
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"dhirschfeld\" class=\"mention\">@dhirschfeld</span> , you just need to pull the <code>dtype</code> variable into a global",
  "id": "580620344829257761346c65",
  "issues": [],
  "mentions": [
   {
    "screenName": "dhirschfeld",
    "userId": "533187555e986b0712effbbd",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 12,
  "sent": "2016-10-18T13:14:28.717Z",
  "text": "@dhirschfeld , you just need to pull the ``dtype`` variable into a global",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "<pre><code class=\"python\">\ndtype = np.dtype([(<span class=\"string\">'mu'</span>, np.float64),(<span class=\"string\">'alpha'</span>, np.float64)])\n\n<span class=\"decorator\">@cfunc(float64(float64, types.voidptr))</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f2</span><span class=\"params\">(x, args)</span>:</span>\n    args = carray(args, (<span class=\"number\">1</span>,), dtype=dtype)</code></pre>",
  "id": "5806207180020cc608ef5b1b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2016-10-18T13:15:29.957Z",
  "text": "```python\n\ndtype = np.dtype([('mu', np.float64),('alpha', np.float64)])\n\n@cfunc(float64(float64, types.voidptr))\ndef f2(x, args):\n    args = carray(args, (1,), dtype=dtype)\n\n```\n\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/dhirschfeld",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/881019?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/881019?v=4&s=60",
   "displayName": "Dave Hirschfeld",
   "gv": "4",
   "id": "533187555e986b0712effbbd",
   "url": "/dhirschfeld",
   "username": "dhirschfeld",
   "v": 26
  },
  "html": "Thanks - that&#39;s the route I was heading down so it&#39;s good to know there&#39;s no better way",
  "id": "5806292db17b667961d10e27",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2016-10-18T13:52:45.513Z",
  "text": "Thanks - that's the route I was heading down so it's good to know there's no better way",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/dhirschfeld",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/881019?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/881019?v=4&s=60",
   "displayName": "Dave Hirschfeld",
   "gv": "4",
   "id": "533187555e986b0712effbbd",
   "url": "/dhirschfeld",
   "username": "dhirschfeld",
   "v": 26
  },
  "html": "Inside of <code>f2</code> is there anyway to unpack the values of args automatically? e.g. <code>values = [args[name] for name in dtype.names]</code>",
  "id": "58062da9b827179842d215b7",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2016-10-18T14:11:53.209Z",
  "text": "Inside of `f2` is there anyway to unpack the values of args automatically? e.g. `values = [args[name] for name in dtype.names]`\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/dhirschfeld",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/881019?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/881019?v=4&s=60",
   "displayName": "Dave Hirschfeld",
   "gv": "4",
   "id": "533187555e986b0712effbbd",
   "url": "/dhirschfeld",
   "username": "dhirschfeld",
   "v": 26
  },
  "html": "Specifically I&#39;m trying to write a generic wrapper to create callback functions but not having luck automatically unpacking the record array:<pre><code class=\"python\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">callback</span><span class=\"params\">(func)</span>:</span>\n    <span class=\"keyword\">from</span> numba.types <span class=\"keyword\">import</span> voidptr\n    <span class=\"keyword\">from</span> numba.dispatcher <span class=\"keyword\">import</span> Dispatcher\n    <span class=\"keyword\">assert</span> isinstance(func, Dispatcher)\n    s = func.nopython_signatures[<span class=\"number\">0</span>]\n    dtype = np.dtype([\n        (<span class=\"string\">'f{:d}'</span>.format(idx), np.dtype(typ.name))\n         <span class=\"keyword\">for</span> idx, typ <span class=\"keyword\">in</span> enumerate(s.args[<span class=\"number\">1</span>:])\n    ])\n    names = dtype.names\n    sig = s.return_type(s.args[<span class=\"number\">0</span>], types.voidptr)\n    <span class=\"decorator\">@cfunc(sig)</span>\n    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">ccallback</span><span class=\"params\">(x, args)</span>:</span>\n        args = carray(args, (<span class=\"number\">1</span>,), dtype=dtype)\n        args = [args[name] <span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> names]\n        <span class=\"keyword\">return</span> func(x, *args) \n    <span class=\"keyword\">return</span> ccallback</code></pre>",
  "id": "58069ef180020cc608f1befc",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2016-10-18T22:15:13.901Z",
  "text": "Specifically I'm trying to write a generic wrapper to create callback functions but not having luck automatically unpacking the record array:\n```python\ndef callback(func):\n    from numba.types import voidptr\n    from numba.dispatcher import Dispatcher\n    assert isinstance(func, Dispatcher)\n    s = func.nopython_signatures[0]\n    dtype = np.dtype([\n        ('f{:d}'.format(idx), np.dtype(typ.name))\n         for idx, typ in enumerate(s.args[1:])\n    ])\n    names = dtype.names\n    sig = s.return_type(s.args[0], types.voidptr)\n    @cfunc(sig)\n    def ccallback(x, args):\n        args = carray(args, (1,), dtype=dtype)\n        args = [args[name] for name in names]\n        return func(x, *args) \n    return ccallback\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/dhirschfeld",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/881019?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/881019?v=4&s=60",
   "displayName": "Dave Hirschfeld",
   "gv": "4",
   "id": "533187555e986b0712effbbd",
   "url": "/dhirschfeld",
   "username": "dhirschfeld",
   "v": 26
  },
  "html": "Is something like that even possible?",
  "id": "58069f0a8d2babbd088567ba",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2016-10-18T22:15:38.802Z",
  "text": "Is something like that even possible?\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/dhirschfeld",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/881019?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/881019?v=4&s=60",
   "displayName": "Dave Hirschfeld",
   "gv": "4",
   "id": "533187555e986b0712effbbd",
   "url": "/dhirschfeld",
   "username": "dhirschfeld",
   "v": 26
  },
  "html": "In case it helps anyone, here&#39;s an ugly hack using exec to automatically create a callback function from any numba jitted function<pre><code class=\"python\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">callback</span><span class=\"params\">(func, *, nopython=True)</span>:</span>\n    <span class=\"string\">\"\"\"Creates a callback function which packs all arguments to func after\n    the first into a voidptr so that it can be used with the scipy\n    `LowLevelCallable` [1]_ function.\n\n    Parameters\n    ----------\n    func : numba.dispatcher.Dispatcher\n        A jitted function\n    nopython : bool\n        Passed through to the `numba.cfunc` decorator\n\n    Returns\n    -------\n    CFunc\n        A numba CFunc callback which calls the underlying `func`\n\n    Examples\n    --------\n    &gt;&gt;&gt; import ctypes\n    &gt;&gt;&gt; from scipy import LowLevelCallback\n    &gt;&gt;&gt; @jit(float64(float64, float64, float64), nopython=True)\n    &gt;&gt;&gt; def B(t, x, y):\n    ...     return t**(x-1) * (1-t)**(y-1)\n    ...\n    &gt;&gt;&gt; cb = callback(B)\n    &gt;&gt;&gt; args = np.rec.array((0.3, 1.9), dtype=[('x', float),('y', float)])\n    &gt;&gt;&gt; voidptr = ctypes.c_voidp(args.ctypes.data)\n    &gt;&gt;&gt; llcb = LowLevelCallback(cb, voidptr)\n    &gt;&gt;&gt; args = args[()]\n    &gt;&gt;&gt; B(0.5, 0.3, 1.9)\n    0.870550563296124\n    &gt;&gt;&gt; B(0.5, args.x, args.y)\n    0.870550563296124\n\n    References\n    ----------\n    .. [1]  https://926-1460385-gh.circle-artifacts.com/0//home/ubuntu/scipy/doc/build/html-scipyorg/generated/scipy.LowLevelCallable.html#scipy.LowLevelCallable\n\n    \"\"\"</span>\n    <span class=\"keyword\">from</span> textwrap <span class=\"keyword\">import</span> dedent\n    <span class=\"keyword\">import</span> numba\n    <span class=\"keyword\">from</span> numba <span class=\"keyword\">import</span> cfunc, carray\n    <span class=\"keyword\">from</span> numba.types <span class=\"keyword\">import</span> voidptr\n    <span class=\"keyword\">from</span> numba.dispatcher <span class=\"keyword\">import</span> Dispatcher\n    <span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np\n    <span class=\"keyword\">assert</span> isinstance(func, Dispatcher)\n    sig = func.nopython_signatures[<span class=\"number\">0</span>]\n    dtype = np.dtype([\n        (<span class=\"string\">'f{:d}'</span>.format(idx), np.dtype(typ.name))\n         <span class=\"keyword\">for</span> idx, typ <span class=\"keyword\">in</span> enumerate(sig.args[<span class=\"number\">1</span>:])\n    ])\n    args = <span class=\"string\">', '</span>.join(<span class=\"string\">\"args.f%d\"</span> % idx <span class=\"keyword\">for</span> idx <span class=\"keyword\">in</span> range(len(dtype.names)))\n    signature = <span class=\"string\">\"{return_type}({}, voidptr)\"</span>\n    signature = signature.format(\n        sig.args[<span class=\"number\">0</span>], return_type=sig.return_type,\n    )\n    code = <span class=\"string\">\"\"\"\n    @cfunc({signature}, nopython={nopython})\n    def ccallback(x, args):\n        args = carray(args, (1,), dtype=dtype)[0]\n        return func(x, {args})\n    \"\"\"</span>\n    code = code.format(\n        signature=signature,\n        nopython=nopython,\n        args=args,\n    )\n    ns = locals()\n    ns[<span class=\"string\">'func'</span>] = func\n    numba_types = {\n        name: getattr(numba.types, name) <span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> numba.types.__all__\n    }\n    ns.update(numba_types)\n    exec(dedent(code), ns, ns)\n    <span class=\"keyword\">return</span> locals()[<span class=\"string\">'ccallback'</span>]</code></pre>",
  "id": "5806c44ab827179842d4bd47",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2016-10-19T00:54:34.093Z",
  "text": "In case it helps anyone, here's an ugly hack using exec to automatically create a callback function from any numba jitted function\n```python\ndef callback(func, *, nopython=True):\n    \"\"\"Creates a callback function which packs all arguments to func after\n    the first into a voidptr so that it can be used with the scipy\n    `LowLevelCallable` [1]_ function.\n    \n    Parameters\n    ----------\n    func : numba.dispatcher.Dispatcher\n        A jitted function\n    nopython : bool\n        Passed through to the `numba.cfunc` decorator\n    \n    Returns\n    -------\n    CFunc\n        A numba CFunc callback which calls the underlying `func`\n\n    Examples\n    --------\n    >>> import ctypes\n    >>> from scipy import LowLevelCallback\n    >>> @jit(float64(float64, float64, float64), nopython=True)\n    >>> def B(t, x, y):\n    ...     return t**(x-1) * (1-t)**(y-1)\n    ...\n    >>> cb = callback(B)\n    >>> args = np.rec.array((0.3, 1.9), dtype=[('x', float),('y', float)])\n    >>> voidptr = ctypes.c_voidp(args.ctypes.data)\n    >>> llcb = LowLevelCallback(cb, voidptr)\n    >>> args = args[()]\n    >>> B(0.5, 0.3, 1.9)\n    0.870550563296124\n    >>> B(0.5, args.x, args.y)\n    0.870550563296124\n\n    References\n    ----------\n    .. [1]  https://926-1460385-gh.circle-artifacts.com/0//home/ubuntu/scipy/doc/build/html-scipyorg/generated/scipy.LowLevelCallable.html#scipy.LowLevelCallable\n\n    \"\"\"\n    from textwrap import dedent\n    import numba\n    from numba import cfunc, carray\n    from numba.types import voidptr\n    from numba.dispatcher import Dispatcher\n    import numpy as np\n    assert isinstance(func, Dispatcher)\n    sig = func.nopython_signatures[0]\n    dtype = np.dtype([\n        ('f{:d}'.format(idx), np.dtype(typ.name))\n         for idx, typ in enumerate(sig.args[1:])\n    ])\n    args = ', '.join(\"args.f%d\" % idx for idx in range(len(dtype.names)))\n    signature = \"{return_type}({}, voidptr)\"\n    signature = signature.format(\n        sig.args[0], return_type=sig.return_type,\n    )\n    code = \"\"\"\n    @cfunc({signature}, nopython={nopython})\n    def ccallback(x, args):\n        args = carray(args, (1,), dtype=dtype)[0]\n        return func(x, {args})\n    \"\"\"\n    code = code.format(\n        signature=signature,\n        nopython=nopython,\n        args=args,\n    )\n    ns = locals()\n    ns['func'] = func\n    numba_types = {\n        name: getattr(numba.types, name) for name in numba.types.__all__\n    }\n    ns.update(numba_types)\n    exec(dedent(code), ns, ns)\n    return locals()['ccallback']\n```\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/FaustinCarter",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/10946756?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/10946756?v=4&s=60",
   "displayName": "Faustin Carter",
   "gv": "4",
   "id": "580cd26bd73408ce4f303a4d",
   "url": "/FaustinCarter",
   "username": "FaustinCarter",
   "v": 1
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"dhirschfeld\" class=\"mention\">@dhirschfeld</span> Regarding getting <code>scipy.integrate.quad</code> working with <code>numba</code>, I posted a solution as a reply to issue 4831 on scipy&#39;s github: <span data-link-type=\"issue\" data-issue=\"4831\" data-issue-repo=\"scipy/scipy\" class=\"issue\">scipy/scipy#4831</span>",
  "id": "581ccb06c2f2cf7275ce18e5",
  "issues": [
   {
    "number": "4831",
    "repo": "scipy/scipy"
   }
  ],
  "mentions": [
   {
    "screenName": "dhirschfeld",
    "userId": "533187555e986b0712effbbd",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 12,
  "sent": "2016-11-04T17:53:10.932Z",
  "text": "@dhirschfeld Regarding getting `scipy.integrate.quad` working with `numba`, I posted a solution as a reply to issue 4831 on scipy's github: https://github.com/scipy/scipy/issues/4831",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2016-11-04T18:01:17.110Z",
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/FaustinCarter",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/10946756?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/10946756?v=4&s=60",
   "displayName": "Faustin Carter",
   "gv": "4",
   "id": "580cd26bd73408ce4f303a4d",
   "url": "/FaustinCarter",
   "username": "FaustinCarter",
   "v": 1
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"dhirschfeld\" class=\"mention\">@dhirschfeld</span> I guess I might as well post the working example here too:<pre><code><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np\n<span class=\"keyword\">import</span> ctypes <span class=\"keyword\">as</span> ct\n<span class=\"keyword\">import</span> numba\n<span class=\"keyword\">import</span> scipy.integrate <span class=\"keyword\">as</span> sint\n\n<span class=\"comment\">#Set the signature of the future types function</span>\n<span class=\"comment\">#The second argument must be a pointer or it won't work right,</span>\n<span class=\"comment\">#but this will cause problems because of the bug in scipy</span>\n<span class=\"comment\">#because scipy looks for a double instead of a pointer</span>\nc_sig = numba.types.double(numba.types.intc, numba.types.CPointer(numba.types.double))\n\n<span class=\"comment\">#Turn the integrand function into a ctypes function</span>\n<span class=\"decorator\">@numba.cfunc(c_sig)</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_integrand</span><span class=\"params\">(n, a)</span>:</span>\n    args = numba.carray(a, n)\n    x = args[<span class=\"number\">0</span>]\n    b = args[<span class=\"number\">1</span>]\n\n    <span class=\"keyword\">return</span> b*np.exp(-x)/x**<span class=\"number\">2</span>\n\n<span class=\"comment\">#Force the argtypes to be what quad expects</span>\nmy_integrand.ctypes.argtypes = (ct.c_int, ct.c_double)\n\n<span class=\"comment\">#Now this will work just fine!</span>\nsint.quad(my_integrand.ctypes, <span class=\"number\">1</span>, np.inf, (<span class=\"number\">2</span>))</code></pre>",
  "id": "581cccde6cb720763037a929",
  "issues": [],
  "mentions": [
   {
    "screenName": "dhirschfeld",
    "userId": "533187555e986b0712effbbd",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 13,
  "sent": "2016-11-04T18:01:02.584Z",
  "text": "@dhirschfeld I guess I might as well post the working example here too:\n\n```\nimport numpy as np\nimport ctypes as ct\nimport numba\nimport scipy.integrate as sint\n\n#Set the signature of the future types function\n#The second argument must be a pointer or it won't work right,\n#but this will cause problems because of the bug in scipy\n#because scipy looks for a double instead of a pointer\nc_sig = numba.types.double(numba.types.intc, numba.types.CPointer(numba.types.double))\n\n#Turn the integrand function into a ctypes function\n@numba.cfunc(c_sig)\ndef my_integrand(n, a):\n    args = numba.carray(a, n)\n    x = args[0]\n    b = args[1]\n\n    return b*np.exp(-x)/x**2\n\n#Force the argtypes to be what quad expects\nmy_integrand.ctypes.argtypes = (ct.c_int, ct.c_double)\n\n#Now this will work just fine!\nsint.quad(my_integrand.ctypes, 1, np.inf, (2))\n```",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/dhirschfeld",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/881019?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/881019?v=4&s=60",
   "displayName": "Dave Hirschfeld",
   "gv": "4",
   "id": "533187555e986b0712effbbd",
   "url": "/dhirschfeld",
   "username": "dhirschfeld",
   "v": 26
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"FaustinCarter\" class=\"mention\">@FaustinCarter</span> - thanks for posting, good to know there&#39;s a workaround. I still think there&#39;s a lot of value in the single common interface defined by <code>LowLevelCallable</code> but it&#39;s good to know you can make use of it as it is now.",
  "id": "581d3087e097df757570cb84",
  "issues": [],
  "mentions": [
   {
    "screenName": "FaustinCarter",
    "userId": "580cd26bd73408ce4f303a4d",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 16,
  "sent": "2016-11-05T01:06:15.169Z",
  "text": "@FaustinCarter - thanks for posting, good to know there's a workaround. I still think there's a lot of value in the single common interface defined by `LowLevelCallable` but it's good to know you can make use of it as it is now.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/datnamer",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/8646471?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/8646471?v=4&s=60",
   "displayName": "datnamer",
   "gv": "4",
   "id": "54602d6fdb8155e6700d316b",
   "url": "/datnamer",
   "username": "datnamer",
   "v": 10
  },
  "html": "Any plans for the open JIT class issues? Will we eventually be able to inline their methods also?",
  "id": "585af341c5a4e0233bb4c723",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2016-12-21T21:25:21.780Z",
  "text": "Any plans for the open JIT class issues? Will we eventually be able to inline their methods also?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/gmarkall",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/535640?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/535640?v=3&s=60",
   "displayName": "Graham Markall",
   "gv": "3",
   "id": "55b342020fc9f982beaaedf1",
   "url": "/gmarkall",
   "username": "gmarkall",
   "v": 6
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"seibert\" class=\"mention\">@seibert</span> Is the numba-users mailing list moderated? I just made a post to it but I don&#39;t see it appearing (maybe because my Google account has Google+ disabled?)",
  "id": "5880cdf9519afee26b8760c2",
  "issues": [],
  "mentions": [
   {
    "screenName": "seibert",
    "userId": "55b68af40fc9f982beab2a3c",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 16,
  "sent": "2017-01-19T14:32:25.773Z",
  "text": "@seibert Is the numba-users mailing list moderated? I just made a post to it but I don't see it appearing (maybe because my Google account has Google+ disabled?)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/3/gmarkall",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/535640?v=3&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/535640?v=3&s=60",
   "displayName": "Graham Markall",
   "gv": "3",
   "id": "55b342020fc9f982beaaedf1",
   "url": "/gmarkall",
   "username": "gmarkall",
   "v": 6
  },
  "html": "(The post was about running Numba on PyPy: <a href=\"http://www.embecosm.com/2017/01/19/running-numba-on-pypy/\" rel=\"nofollow\" target=\"_blank\" class=\"link\">http://www.embecosm.com/2017/01/19/running-numba-on-pypy/</a> )",
  "id": "5880ce25cbcb2817708d7bdb",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2017-01-19T14:33:09.802Z",
  "text": "(The post was about running Numba on PyPy: http://www.embecosm.com/2017/01/19/running-numba-on-pypy/ )",
  "unread": false,
  "urls": [
   {
    "url": "http://www.embecosm.com/2017/01/19/running-numba-on-pypy/"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/a-reisberg",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/16026762?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/16026762?v=4&s=60",
   "displayName": "Alex Reisberg",
   "gv": "4",
   "id": "56bd1d2fe610378809c10544",
   "url": "/a-reisberg",
   "username": "a-reisberg",
   "v": 37
  },
  "html": "Hi all, I&#39;m new here. Just came across this document:<br><a href=\"https://github.com/ContinuumIO/numba-nextgen-docs/blob/master/README.md\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://github.com/ContinuumIO/numba-nextgen-docs/blob/master/README.md</a>",
  "id": "597b906245fc670746d63e80",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2017-07-28T19:28:34.364Z",
  "text": "Hi all, I'm new here. Just came across this document:\nhttps://github.com/ContinuumIO/numba-nextgen-docs/blob/master/README.md",
  "unread": false,
  "urls": [
   {
    "url": "https://github.com/ContinuumIO/numba-nextgen-docs/blob/master/README.md"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/a-reisberg",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/16026762?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/16026762?v=4&s=60",
   "displayName": "Alex Reisberg",
   "gv": "4",
   "id": "56bd1d2fe610378809c10544",
   "url": "/a-reisberg",
   "username": "a-reisberg",
   "v": 37
  },
  "html": "The document is quite old. I wonder how much of it is already realized in current version of numba?",
  "id": "597b907276a757f80855f77f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2017-07-28T19:28:50.417Z",
  "text": "The document is quite old. I wonder how much of it is already realized in current version of numba?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "Alright Gitter channel announced on Twitter.  Await the incoming flood.",
  "id": "5a4e931a0163b02810b24e62",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-01-04T20:48:26.248Z",
  "text": "Alright Gitter channel announced on Twitter.  Await the incoming flood.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/tamasgal",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1730350?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1730350?v=4&s=60",
   "displayName": "Tamas Gal",
   "gv": "4",
   "id": "561ba079d33f749381a916cf",
   "url": "/tamasgal",
   "username": "tamasgal",
   "v": 7
  },
  "html": "Hmmm im curious \ud83d\ude02",
  "id": "5a4e93840163b02810b25185",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-01-04T20:50:12.993Z",
  "text": "Hmmm im curious \ud83d\ude02",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/MarquitoForrest",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/10695734?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/10695734?v=4&s=60",
   "displayName": "Marquito Forrest",
   "gv": "4",
   "id": "5a2ea6a7d73408ce4f82cd70",
   "url": "/MarquitoForrest",
   "username": "MarquitoForrest",
   "v": 3
  },
  "html": "Since there seems to be not much of a flood yet I wish to ask a question: what is the best way to jit-compile a class method? So far I am putting the heavy lifting type of code in a regular function (with a jit decorator), which I call from the (not compiled) class method. But then it will usually be the case that I have to pass a lot of parameters which leads to ugly function calls. But anyhow maybe that\u2019s actually not so bad. In case anyone has a better idea on that I would like to hear it! Thanks! Numba is really great!",
  "id": "5a4f9152edd2230811170fcf",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-01-05T14:53:06.407Z",
  "text": "Since there seems to be not much of a flood yet I wish to ask a question: what is the best way to jit-compile a class method? So far I am putting the heavy lifting type of code in a regular function (with a jit decorator), which I call from the (not compiled) class method. But then it will usually be the case that I have to pass a lot of parameters which leads to ugly function calls. But anyhow maybe that\u2019s actually not so bad. In case anyone has a better idea on that I would like to hear it! Thanks! Numba is really great!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "The interaction between classes and <span data-link-type=\"mention\" data-screen-name=\"jit\" class=\"mention\">@jit</span> is not fully figured out at this point.  We have the <span data-link-type=\"mention\" data-screen-name=\"jitclass\" class=\"mention\">@jitclass</span> decorator, but it is very limited and I would not suggest using it at the moment.",
  "id": "5a4f91ab29ec6ac311c10d37",
  "issues": [],
  "mentions": [
   {
    "screenName": "jit",
    "userIds": []
   },
   {
    "screenName": "jitclass",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 14,
  "sent": "2018-01-05T14:54:35.374Z",
  "text": "The interaction between classes and @jit is not fully figured out at this point.  We have the @jitclass decorator, but it is very limited and I would not suggest using it at the moment.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "The main issue is that for Numba to be able to generate efficient code, it needs to be able to handle the type of <code>self</code> in the method (i.e. your class) in nopython mode.",
  "id": "5a4f91d529ec6ac311c10db4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-01-05T14:55:17.990Z",
  "text": "The main issue is that for Numba to be able to generate efficient code, it needs to be able to handle the type of `self` in the method (i.e. your class) in nopython mode.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "That ultimately requires storing attributes in your class in a more C-like manner, which is what <span data-link-type=\"mention\" data-screen-name=\"jitclass\" class=\"mention\">@jitclass</span> does, but there are lots of corner cases that need to be figured out.",
  "id": "5a4f920bba39a53f1adcd9bd",
  "issues": [],
  "mentions": [
   {
    "screenName": "jitclass",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 13,
  "sent": "2018-01-05T14:56:11.168Z",
  "text": "That ultimately requires storing attributes in your class in a more C-like manner, which is what @jitclass does, but there are lots of corner cases that need to be figured out.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/MarquitoForrest",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/10695734?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/10695734?v=4&s=60",
   "displayName": "Marquito Forrest",
   "gv": "4",
   "id": "5a2ea6a7d73408ce4f82cd70",
   "url": "/MarquitoForrest",
   "username": "MarquitoForrest",
   "v": 3
  },
  "html": "Alright got the gist of it. Thanks ",
  "id": "5a4f927229ec6ac311c11273",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-01-05T14:57:54.289Z",
  "text": "Alright got the gist of it. Thanks ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "Yeah, sorry I don&#39;t have a better solution.  It is on our radar, though.",
  "id": "5a4f93baba39a53f1adce781",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-01-05T15:03:22.603Z",
  "text": "Yeah, sorry I don't have a better solution.  It is on our radar, though.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "One thing that might help in the short term if you find yourself passing groups of arguments into different Numba functions is to bundle related groups together into namedtuples, which Numba does support in nopython mode.  It might make your <span data-link-type=\"mention\" data-screen-name=\"jit\" class=\"mention\">@jit</span> function signatures a little less awkward.",
  "id": "5a4f95905355812e57565472",
  "issues": [],
  "mentions": [
   {
    "screenName": "jit",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 14,
  "sent": "2018-01-05T15:11:12.979Z",
  "text": "One thing that might help in the short term if you find yourself passing groups of arguments into different Numba functions is to bundle related groups together into namedtuples, which Numba does support in nopython mode.  It might make your @jit function signatures a little less awkward.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/MarquitoForrest",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/10695734?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/10695734?v=4&s=60",
   "displayName": "Marquito Forrest",
   "gv": "4",
   "id": "5a2ea6a7d73408ce4f82cd70",
   "url": "/MarquitoForrest",
   "username": "MarquitoForrest",
   "v": 3
  },
  "html": "Ok i will look into named tuples!",
  "id": "5a4f96170505ad8b45ba9436",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-01-05T15:13:27.757Z",
  "text": "Ok i will look into named tuples!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/MarquitoForrest",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/10695734?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/10695734?v=4&s=60",
   "displayName": "Marquito Forrest",
   "gv": "4",
   "id": "5a2ea6a7d73408ce4f82cd70",
   "url": "/MarquitoForrest",
   "username": "MarquitoForrest",
   "v": 3
  },
  "html": "I tried dict and it was not working so that\u2019s pretty much the type of answer I was expecting/ hoping for. Good",
  "id": "5a4f964cedd2230811172b5d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-01-05T15:14:20.104Z",
  "text": "I tried dict and it was not working so that\u2019s pretty much the type of answer I was expecting/ hoping for. Good",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "yeah, dict is not supported (yet), but since namedtuples have a fixed set of attributes, Numba can handle them much better.",
  "id": "5a4f966eedd2230811172c09",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-01-05T15:14:54.696Z",
  "text": "yeah, dict is not supported (yet), but since namedtuples have a fixed set of attributes, Numba can handle them much better.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/MarquitoForrest",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/10695734?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/10695734?v=4&s=60",
   "displayName": "Marquito Forrest",
   "gv": "4",
   "id": "5a2ea6a7d73408ce4f82cd70",
   "url": "/MarquitoForrest",
   "username": "MarquitoForrest",
   "v": 3
  },
  "html": "Makes a lot of sense actually ",
  "id": "5a4f9f6629ec6ac311c15c47",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-01-05T15:53:10.361Z",
  "text": "Makes a lot of sense actually ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ssomanch",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/4571022?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/4571022?v=4&s=60",
   "displayName": "ssomanch",
   "gv": "4",
   "id": "5a4fbff4d73408ce4f865d52",
   "url": "/ssomanch",
   "username": "ssomanch",
   "v": 1
  },
  "html": "list generator in numba. Can someone help me answer the question posted here <a href=\"https://stackoverflow.com/questions/48118734/how-to-operate-on-list-generator-using-numba\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://stackoverflow.com/questions/48118734/how-to-operate-on-list-generator-using-numba</a>",
  "id": "5a4fc016ce68c3bc7481ec60",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-01-05T18:12:38.902Z",
  "text": "list generator in numba. Can someone help me answer the question posted here https://stackoverflow.com/questions/48118734/how-to-operate-on-list-generator-using-numba",
  "unread": false,
  "urls": [
   {
    "url": "https://stackoverflow.com/questions/48118734/how-to-operate-on-list-generator-using-numba"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ssomanch",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/4571022?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/4571022?v=4&s=60",
   "displayName": "ssomanch",
   "gv": "4",
   "id": "5a4fbff4d73408ce4f865d52",
   "url": "/ssomanch",
   "username": "ssomanch",
   "v": 1
  },
  "html": "The code is simply using next method on a generator of a list in python",
  "id": "5a4fc0695355812e57574528",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-01-05T18:14:01.410Z",
  "text": "The code is simply using next method on a generator of a list in python",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-01-05T19:04:32.169Z",
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"ssomanch\" class=\"mention\">@ssomanch</span> I posted an answer to SO",
  "id": "5a4fcc3b29ec6ac311c269cc",
  "issues": [],
  "mentions": [
   {
    "screenName": "ssomanch",
    "userId": "5a4fbff4d73408ce4f865d52",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 13,
  "sent": "2018-01-05T19:04:27.176Z",
  "text": "@ssomanch I posted an answer to SO",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ssomanch",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/4571022?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/4571022?v=4&s=60",
   "displayName": "ssomanch",
   "gv": "4",
   "id": "5a4fbff4d73408ce4f865d52",
   "url": "/ssomanch",
   "username": "ssomanch",
   "v": 1
  },
  "html": "Thanks <span data-link-type=\"mention\" data-screen-name=\"sklam\" class=\"mention\">@sklam</span> . I&#39;m currently using your solution already. However, as you can imagine, this alternative is memory (and time) intensive for large arrays. ",
  "id": "5a4fccb0232e79134dce3a8c",
  "issues": [],
  "mentions": [
   {
    "screenName": "sklam",
    "userId": "55b689f50fc9f982beab2a24",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 13,
  "sent": "2018-01-05T19:06:24.148Z",
  "text": "Thanks @sklam . I'm currently using your solution already. However, as you can imagine, this alternative is memory (and time) intensive for large arrays. ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ssomanch",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/4571022?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/4571022?v=4&s=60",
   "displayName": "ssomanch",
   "gv": "4",
   "id": "5a4fbff4d73408ce4f865d52",
   "url": "/ssomanch",
   "username": "ssomanch",
   "v": 1
  },
  "html": "Do you know when the generator is supported in numba? ",
  "id": "5a4fccd629ec6ac311c26d66",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-01-05T19:07:02.045Z",
  "text": "Do you know when the generator is supported in numba? ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "actually generator is supported but just not in generator-expression form.",
  "id": "5a4fd291290a1f4561532180",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-01-05T19:31:29.682Z",
  "text": "actually generator is supported but just not in generator-expression form.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "try this",
  "id": "5a4fd295232e79134dce5b10",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-01-05T19:31:33.178Z",
  "text": "try this",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "<pre><code>\n<span class=\"decorator\">@numba.jit(nopython=True)</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">the_gen</span><span class=\"params\">(simple_list, number)</span>:</span>\n    <span class=\"keyword\">for</span> ind <span class=\"keyword\">in</span> range(len(simple_list)):\n        <span class=\"keyword\">if</span> simple_list[ind] != number:\n            <span class=\"keyword\">yield</span> ind\n\n\n<span class=\"decorator\">@numba.jit(nopython=True, nogil=True)</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">perform_search</span><span class=\"params\">(simple_list, number)</span>:</span>\n    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> the_gen(simple_list, number):\n        print(i)</code></pre>",
  "id": "5a4fd298232e79134dce5b42",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-01-05T19:31:36.440Z",
  "text": "```\n\n@numba.jit(nopython=True)\ndef the_gen(simple_list, number):\n    for ind in range(len(simple_list)):\n        if simple_list[ind] != number:\n            yield ind\n\n\n@numba.jit(nopython=True, nogil=True)\ndef perform_search(simple_list, number):\n    for i in the_gen(simple_list, number):\n        print(i)\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ssomanch",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/4571022?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/4571022?v=4&s=60",
   "displayName": "ssomanch",
   "gv": "4",
   "id": "5a4fbff4d73408ce4f865d52",
   "url": "/ssomanch",
   "username": "ssomanch",
   "v": 1
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"sklam\" class=\"mention\">@sklam</span> : Nice! This makes sense. Thanks for the suggestion. I&#39;ll try this. ",
  "id": "5a4fd32929ec6ac311c29342",
  "issues": [],
  "mentions": [
   {
    "screenName": "sklam",
    "userId": "55b689f50fc9f982beab2a24",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 13,
  "sent": "2018-01-05T19:34:01.692Z",
  "text": "@sklam : Nice! This makes sense. Thanks for the suggestion. I'll try this. ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/g/u/aw200920092009_twitter",
   "avatarUrlMedium": "https://abs.twimg.com/sticky/default_profile_images/default_profile_normal.png?s=128",
   "avatarUrlSmall": "https://abs.twimg.com/sticky/default_profile_images/default_profile_normal.png?s=60",
   "displayName": "Andrew Wang",
   "id": "5a4fec13d73408ce4f866506",
   "url": "/aw200920092009_twitter",
   "username": "aw200920092009_twitter"
  },
  "html": "<p>i got the nan created by cuda.to_device as detailed below. When calling the function with original array, it works fine, but when transfer it by cuda.to_device, it created nan, why?  Thanks in advance for help/suggestion/comment.  </p><p>from scipy.stats.stats import spearmanr</p><p><span data-link-type=\"mention\" data-screen-name=\"jit\" class=\"mention\">@jit</span><br>def foo(d_a):<br>   row=d_a.shape[0]<br>   for i in range(row):<br>     for j in range(i+1,row):<br>       coef,p = spearmanr(d_a[i,],d_a[j,])<br>       print(i,j,coef,p)</p><p>a=np.random.random([3,20])<br>d_a = cuda.to_device(a)</p><blockquote>\n<blockquote>\n<blockquote>\n<p>foo(a)<br>0 1 -0.018045112782 0.939809199541<br>0 2 0.0285714285714 0.904822414737<br>1 2 0.206015037594 0.383532553093<br>foo(d_a)<br>0 1 nan nan<br>0 2 nan nan<br>1 2 nan nan</p></blockquote>\n</blockquote>\n</blockquote>\n",
  "id": "5a4fef96290a1f456153b700",
  "issues": [],
  "mentions": [
   {
    "screenName": "jit",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 13,
  "sent": "2018-01-05T21:35:18.626Z",
  "text": "           \ni got the nan created by cuda.to_device as detailed below. When calling the function with original array, it works fine, but when transfer it by cuda.to_device, it created nan, why?  Thanks in advance for help/suggestion/comment.  \n\nfrom scipy.stats.stats import spearmanr\n\n@jit\ndef foo(d_a):\n   row=d_a.shape[0] \n   for i in range(row):\n     for j in range(i+1,row):\n       coef,p = spearmanr(d_a[i,],d_a[j,])\n       print(i,j,coef,p)\n\n\na=np.random.random([3,20])\nd_a = cuda.to_device(a)\n\n>>> foo(a)\n0 1 -0.018045112782 0.939809199541\n0 2 0.0285714285714 0.904822414737\n1 2 0.206015037594 0.383532553093\n>>> foo(d_a)\n0 1 nan nan\n0 2 nan nan\n1 2 nan nan\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"aw200920092009_twitter\" class=\"mention\">@aw200920092009_twitter</span> , <code>cuda.to_device</code> creates a gpu array  that is not a subclass of numpy array but  <code>spearmanr</code> is expecting numpy arrays.  <code>spearmanr</code> cannot operate directly on the gpu array",
  "id": "5a4ff9c229ec6ac311c369f7",
  "issues": [],
  "mentions": [
   {
    "screenName": "aw200920092009_twitter",
    "userId": "5a4fec13d73408ce4f866506",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 13,
  "sent": "2018-01-05T22:18:42.996Z",
  "text": "@aw200920092009_twitter , `cuda.to_device` creates a gpu array  that is not a subclass of numpy array but  `spearmanr` is expecting numpy arrays.  `spearmanr` cannot operate directly on the gpu array",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "the numba gpu array cannot be used as a direct replacement for numpy arrays.",
  "id": "5a4ffa04232e79134dcf2f66",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-01-05T22:19:48.635Z",
  "text": "the numba gpu array cannot be used as a direct replacement for numpy arrays.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/g/u/aw200920092009_twitter",
   "avatarUrlMedium": "https://abs.twimg.com/sticky/default_profile_images/default_profile_normal.png?s=128",
   "avatarUrlSmall": "https://abs.twimg.com/sticky/default_profile_images/default_profile_normal.png?s=60",
   "displayName": "Andrew Wang",
   "id": "5a4fec13d73408ce4f866506",
   "url": "/aw200920092009_twitter",
   "username": "aw200920092009_twitter"
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"sklam\" class=\"mention\">@sklam</span>, Thank you so much for your response and clarification, so how to save the time in data transferring and make it fast, like my case? any suggestion? thanks again ",
  "id": "5a4fffe40505ad8b45bce508",
  "issues": [],
  "mentions": [
   {
    "screenName": "sklam",
    "userId": "55b689f50fc9f982beab2a24",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 13,
  "sent": "2018-01-05T22:44:52.761Z",
  "text": "@sklam, Thank you so much for your response and clarification, so how to save the time in data transferring and make it fast, like my case? any suggestion? thanks again ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"aw200920092009_twitter\" class=\"mention\">@aw200920092009_twitter</span> , there isn\u2019t much you can do to save cpu&lt;-&gt;gpu data transfer time.  All you can do is make the transfer worthwhile by having a very fast gpu function.  That means writing your own fast version of <code>spearmanr</code>.  ",
  "id": "5a5002dd290a1f45615415bb",
  "issues": [],
  "mentions": [
   {
    "screenName": "aw200920092009_twitter",
    "userId": "5a4fec13d73408ce4f866506",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 12,
  "sent": "2018-01-05T22:57:33.639Z",
  "text": "@aw200920092009_twitter , there isn\u2019t much you can do to save cpu<->gpu data transfer time.  All you can do is make the transfer worthwhile by having a very fast gpu function.  That means writing your own fast version of `spearmanr`.  ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "btw, numba will not be able to speedup the <code>foo</code> function you posted because it doesn\u2019t kn how to compile <code>spearmanr</code>.",
  "id": "5a50037d29ec6ac311c3a29f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-01-05T23:00:13.385Z",
  "text": "btw, numba will not be able to speedup the `foo` function you posted because it doesn\u2019t kn how to compile `spearmanr`.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/g/u/aw200920092009_twitter",
   "avatarUrlMedium": "https://abs.twimg.com/sticky/default_profile_images/default_profile_normal.png?s=128",
   "avatarUrlSmall": "https://abs.twimg.com/sticky/default_profile_images/default_profile_normal.png?s=60",
   "displayName": "Andrew Wang",
   "id": "5a4fec13d73408ce4f866506",
   "url": "/aw200920092009_twitter",
   "username": "aw200920092009_twitter"
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"sklam\" class=\"mention\">@sklam</span>, thanks, writing this simple function spearmanr would not be hard in cpu, but  i am wondering if my code could be compiled when done since i am new in gpu. i used julia that seemed faster than python, but it also had another problem in gpu. ",
  "id": "5a5007b05355812e5758cfca",
  "issues": [],
  "mentions": [
   {
    "screenName": "sklam",
    "userId": "55b689f50fc9f982beab2a24",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 14,
  "sent": "2018-01-05T23:18:08.981Z",
  "text": "@sklam, thanks, writing this simple function spearmanr would not be hard in cpu, but  i am wondering if my code could be compiled when done since i am new in gpu. i used julia that seemed faster than python, but it also had another problem in gpu. ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"aw200920092009_twitter\" class=\"mention\">@aw200920092009_twitter</span> , do you already know you need the GPU speedup?  Otherwise, you can start with a CPU implementation and try out if the <a href=\"http://numba.pydata.org/numba-doc/latest/user/parallel.html\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">new experiment automatic parallelizing features</a> are giving you enough speedup.",
  "id": "5a539772232e79134dde9740",
  "issues": [],
  "mentions": [
   {
    "screenName": "aw200920092009_twitter",
    "userId": "5a4fec13d73408ce4f866506",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 14,
  "sent": "2018-01-08T16:08:18.178Z",
  "text": "@aw200920092009_twitter , do you already know you need the GPU speedup?  Otherwise, you can start with a CPU implementation and try out if the [new experiment automatic parallelizing features](http://numba.pydata.org/numba-doc/latest/user/parallel.html) are giving you enough speedup.",
  "unread": false,
  "urls": [
   {
    "url": "http://numba.pydata.org/numba-doc/latest/user/parallel.html"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/datnamer",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/8646471?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/8646471?v=4&s=60",
   "displayName": "datnamer",
   "gv": "4",
   "id": "54602d6fdb8155e6700d316b",
   "url": "/datnamer",
   "username": "datnamer",
   "v": 10
  },
  "html": "Any idea how I can type jit classes dynamically in the same way functions are? Is this possible?",
  "id": "5a53b75183152df26d47540d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-01-08T18:24:17.443Z",
  "text": "Any idea how I can type jit classes dynamically in the same way functions are? Is this possible?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "one thing that i\u2019d do is to make a factory method:",
  "id": "5a53b825290a1f4561640379",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-01-08T18:27:49.007Z",
  "text": "one thing that i\u2019d do is to make a factory method:",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "<pre><code class=\"python\">\n\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">rhdict</span><span class=\"params\">(keytype, valtype, hashfn)</span>:</span>\n    <span class=\"string\">\"\"\"robinhood hashing based dictionary\n    \"\"\"</span>\n    spec = OrderedDict()\n    spec[<span class=\"string\">'_capacity'</span>] = types.intp\n    spec[<span class=\"string\">'_size'</span>] = types.intp\n    spec[<span class=\"string\">'_keys'</span>] = keytype[::<span class=\"number\">1</span>]\n    spec[<span class=\"string\">'_vals'</span>] = valtype[::<span class=\"number\">1</span>]\n    spec[<span class=\"string\">'_pdists'</span>] = types.int8[::<span class=\"number\">1</span>]\n    spec[<span class=\"string\">'_infos'</span>] = types.int8[::<span class=\"number\">1</span>]\n\n    key_dtype = as_dtype(keytype)\n    val_dtype = as_dtype(valtype)\n    meta_dtype = as_dtype(types.int8)\n\n    <span class=\"decorator\">@jitclass(spec)</span>\n    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RHDict</span><span class=\"params\">(RHDictBase)</span>:</span>\n        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_alloc</span><span class=\"params\">(self, capacity)</span>:</span>\n            self._capacity = capacity\n            self._size = <span class=\"number\">0</span>\n            self._keys = np.empty(capacity, dtype=key_dtype)\n            self._vals = np.empty(capacity, dtype=val_dtype)\n            self._pdists = np.empty(capacity, dtype=meta_dtype)\n            self._infos = np.zeros(capacity, dtype=meta_dtype)\n            self._pdists[...] = -<span class=\"number\">1</span>\n\n        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_hash</span><span class=\"params\">(self, key)</span>:</span>\n            <span class=\"keyword\">return</span> hashfn(key)\n\n    <span class=\"keyword\">return</span> RHDict</code></pre>",
  "id": "5a53b83e0505ad8b45ccea56",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-01-08T18:28:14.512Z",
  "text": "```python\n\n\ndef rhdict(keytype, valtype, hashfn):\n    \"\"\"robinhood hashing based dictionary\n    \"\"\"\n    spec = OrderedDict()\n    spec['_capacity'] = types.intp\n    spec['_size'] = types.intp\n    spec['_keys'] = keytype[::1]\n    spec['_vals'] = valtype[::1]\n    spec['_pdists'] = types.int8[::1]\n    spec['_infos'] = types.int8[::1]\n\n    key_dtype = as_dtype(keytype)\n    val_dtype = as_dtype(valtype)\n    meta_dtype = as_dtype(types.int8)\n\n    @jitclass(spec)\n    class RHDict(RHDictBase):\n        def _alloc(self, capacity):\n            self._capacity = capacity\n            self._size = 0\n            self._keys = np.empty(capacity, dtype=key_dtype)\n            self._vals = np.empty(capacity, dtype=val_dtype)\n            self._pdists = np.empty(capacity, dtype=meta_dtype)\n            self._infos = np.zeros(capacity, dtype=meta_dtype)\n            self._pdists[...] = -1\n\n        def _hash(self, key):\n            return hashfn(key)\n\n    return RHDict\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "^^^ an example",
  "id": "5a53b848b48e8c3566b626ad",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-01-08T18:28:24.233Z",
  "text": "^^^ an example",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/mrocklin",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/306380?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/306380?v=4&s=60",
   "displayName": "Matthew Rocklin",
   "gv": "4",
   "id": "530c03e25e986b0712efafb8",
   "url": "/mrocklin",
   "username": "mrocklin",
   "v": 17
  },
  "html": "Does anyone have experience with <a href=\"http://bohrium.readthedocs.io/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://bohrium.readthedocs.io/</a> ?",
  "id": "5a53dc5d6117191e613f8430",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-01-08T21:02:21.459Z",
  "text": "Does anyone have experience with http://bohrium.readthedocs.io/ ?",
  "unread": false,
  "urls": [
   {
    "url": "http://bohrium.readthedocs.io/"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/mrocklin",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/306380?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/306380?v=4&s=60",
   "displayName": "Matthew Rocklin",
   "gv": "4",
   "id": "530c03e25e986b0712efafb8",
   "url": "/mrocklin",
   "username": "mrocklin",
   "v": 17
  },
  "html": "(sorry for the semi-off-topic question)",
  "id": "5a53dc680505ad8b45cdc336",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-01-08T21:02:32.439Z",
  "text": "(sorry for the semi-off-topic question)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"mrocklin\" class=\"mention\">@mrocklin</span> , I have looked through it\u2019s source code to see what kind of magic they used to achieve the CPU&lt;-&gt;GPU comm.  But that\u2019s it.",
  "id": "5a53dcabce68c3bc7493e0c5",
  "issues": [],
  "mentions": [
   {
    "screenName": "mrocklin",
    "userId": "530c03e25e986b0712efafb8",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 18,
  "sent": "2018-01-08T21:03:39.648Z",
  "text": "@mrocklin , I have looked through it\u2019s source code to see what kind of magic they used to achieve the CPU<->GPU comm.  But that\u2019s it.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/datnamer",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/8646471?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/8646471?v=4&s=60",
   "displayName": "datnamer",
   "gv": "4",
   "id": "54602d6fdb8155e6700d316b",
   "url": "/datnamer",
   "username": "datnamer",
   "v": 10
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"sklam\" class=\"mention\">@sklam</span>  that should work thanks",
  "id": "5a53f622b48e8c3566b79710",
  "issues": [],
  "mentions": [
   {
    "screenName": "sklam",
    "userId": "55b689f50fc9f982beab2a24",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 16,
  "sent": "2018-01-08T22:52:18.377Z",
  "text": "@sklam  that should work thanks",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/g/u/SamaBerenjian_twitter",
   "avatarUrlMedium": "https://abs.twimg.com/sticky/default_profile_images/default_profile_normal.png?s=128",
   "avatarUrlSmall": "https://abs.twimg.com/sticky/default_profile_images/default_profile_normal.png?s=60",
   "displayName": "Samaneh Berenjian",
   "id": "5a4fb90bd73408ce4f865c0f",
   "url": "/SamaBerenjian_twitter",
   "username": "SamaBerenjian_twitter"
  },
  "html": "Hi, I have written a control flow function for my  code, when trying to view that using llvm.view_dot_graph(dot, view=True). The problem is that,  when it is rendered it only shows me the function name but not  the diagram. Does anyone know what may cause this? would you please help me for this? ",
  "id": "5a566b62b48e8c3566c4e1a3",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-01-10T19:37:06.138Z",
  "text": "Hi, I have written a control flow function for my  code, when trying to view that using llvm.view_dot_graph(dot, view=True). The problem is that,  when it is rendered it only shows me the function name but not  the diagram. Does anyone know what may cause this? would you please help me for this? \n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "<p><span data-link-type=\"mention\" data-screen-name=\"SamaBerenjian_twitter\" class=\"mention\">@SamaBerenjian_twitter</span>, It\u2019s likely that the function is declaration-only and have not yet been defined.  When you print your function, does it show</p><pre><code><span class=\"tag\">declare</span> <span class=\"tag\">i32</span> <span class=\"at_rule\">@<span class=\"keyword\">\"foo\u201d()</span></span></code></pre><p>?<br>If yes, it hasn\u2019t been defined.</p>",
  "id": "5a567b7fce68c3bc74a1bc6a",
  "issues": [],
  "mentions": [
   {
    "screenName": "SamaBerenjian_twitter",
    "userId": "5a4fb90bd73408ce4f865c0f",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 15,
  "sent": "2018-01-10T20:45:51.092Z",
  "text": "@SamaBerenjian_twitter, It\u2019s likely that the function is declaration-only and have not yet been defined.  When you print your function, does it show\n```\ndeclare i32 @\"foo\u201d()\n```\n?\nIf yes, it hasn\u2019t been defined.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "a defined function should start with the <code>define</code> keyword instead, i.e.<pre><code><span class=\"tag\">define</span> <span class=\"tag\">i32</span> <span class=\"at_rule\">@<span class=\"keyword\">\"foo\"()</span>\n</span>{\n<span class=\"class\">.2</span>:\n}</code></pre>",
  "id": "5a567bb1290a1f456172d346",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-01-10T20:46:41.079Z",
  "text": "a defined function should start with the `define` keyword instead, i.e.\n```\ndefine i32 @\"foo\"()\n{\n.2:\n}\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/datnamer",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/8646471?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/8646471?v=4&s=60",
   "displayName": "datnamer",
   "gv": "4",
   "id": "54602d6fdb8155e6700d316b",
   "url": "/datnamer",
   "username": "datnamer",
   "v": 10
  },
  "html": "<p>Hi, I saw the gufunc gist posted in the wiki. Looks interesting and I have some questions:</p><p>Would there be a way to lift an already jitted function without rewriting it?</p>",
  "id": "5a57cd9c83152df26d5d631a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-01-11T20:48:28.426Z",
  "text": "Hi, I saw the gufunc gist posted in the wiki. Looks interesting and I have some questions:\n\nWould there be a way to lift an already jitted function without rewriting it?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-01-11T20:52:27.471Z",
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/g/u/SamaBerenjian_twitter",
   "avatarUrlMedium": "https://abs.twimg.com/sticky/default_profile_images/default_profile_normal.png?s=128",
   "avatarUrlSmall": "https://abs.twimg.com/sticky/default_profile_images/default_profile_normal.png?s=60",
   "displayName": "Samaneh Berenjian",
   "id": "5a4fb90bd73408ce4f865c0f",
   "url": "/SamaBerenjian_twitter",
   "username": "SamaBerenjian_twitter"
  },
  "html": "<p><span data-link-type=\"mention\" data-screen-name=\"sklam\" class=\"mention\">@sklam</span>  No my function is defined: I have the following:  </p><p> var code =&quot; @&quot;bbl_0x4087b0&quot;()<br>{<br>entry:<br>&quot;;</p>",
  "id": "5a57cdf86117191e6154d064",
  "issues": [],
  "mentions": [
   {
    "screenName": "sklam",
    "userId": "55b689f50fc9f982beab2a24",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 13,
  "sent": "2018-01-11T20:50:00.256Z",
  "text": "@sklam  No my function is defined: I have the following:  \n \n var code =\" @\"bbl_0x4087b0\"() \n{\nentry:\n\";\n",
  "unread": false,
  "urls": [],
  "v": 4
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/datnamer",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/8646471?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/8646471?v=4&s=60",
   "displayName": "datnamer",
   "gv": "4",
   "id": "54602d6fdb8155e6700d316b",
   "url": "/datnamer",
   "username": "datnamer",
   "v": 10
  },
  "html": "<p>How about type constraints in the variables of the function signature? Like T is a float.</p><p>Regarding &quot;Overload resolution&quot;, is that like dispatch user defined logic based on argument types?  Like a library or user   would define custom dot operator  with logic  between a distributed matrix and out of core vector. </p><p>Also, have you considered using type hints for this purpose?</p>",
  "id": "5a57ce8cce68c3bc74a85686",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-01-11T20:52:28.533Z",
  "text": "How about type constraints in the variables of the function signature? Like T is a float.\n\nRegarding \"Overload resolution\", is that like dispatch user defined logic based on argument types?  Like a library or user   would define custom dot operator  with logic  between a distributed matrix and out of core vector. \n\nAlso, have you considered using type hints for this purpose?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "Lifting a jitted function should be pretty easy to do, especially since jitted functions carry around their original Python bytecode",
  "id": "5a57dc735a9ebe4f75770324",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-01-11T21:51:47.284Z",
  "text": "Lifting a jitted function should be pretty easy to do, especially since jitted functions carry around their original Python bytecode",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "so worst case, we just feed that bytecode back into the gufunc compiler",
  "id": "5a57dc896117191e61552259",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-01-11T21:52:09.001Z",
  "text": "so worst case, we just feed that bytecode back into the gufunc compiler",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "we haven&#39;t talked about user configurable overload resolution.  right now the dispatching code is pretty hard wired for our specific type resolution system",
  "id": "5a57dcb483152df26d5db3d8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-01-11T21:52:52.498Z",
  "text": "we haven't talked about user configurable overload resolution.  right now the dispatching code is pretty hard wired for our specific type resolution system",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/datnamer",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/8646471?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/8646471?v=4&s=60",
   "displayName": "datnamer",
   "gv": "4",
   "id": "54602d6fdb8155e6700d316b",
   "url": "/datnamer",
   "username": "datnamer",
   "v": 10
  },
  "html": "<p><span data-link-type=\"mention\" data-screen-name=\"seibert\" class=\"mention\">@seibert</span> Thanks. I&#39;m referring to the overload resolution in this : <a href=\"https://gist.github.com/sklam/6245c0b98159cf306bd527174827ba4a\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://gist.github.com/sklam/6245c0b98159cf306bd527174827ba4a</a> </p><p>&quot;Overload resolution: Allow custom resolution function in the underlying impl. Different user facing API may provide different resolution logic. This could be useful to reuse the new gufunc system to unify all numba function dispatch system.&quot; </p>",
  "id": "5a57e92dce68c3bc74a8d924",
  "issues": [],
  "mentions": [
   {
    "screenName": "seibert",
    "userId": "55b68af40fc9f982beab2a3c",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 14,
  "sent": "2018-01-11T22:46:05.578Z",
  "text": "@seibert Thanks. I'm referring to the overload resolution in this : https://gist.github.com/sklam/6245c0b98159cf306bd527174827ba4a \n\n\"Overload resolution: Allow custom resolution function in the underlying impl. Different user facing API may provide different resolution logic. This could be useful to reuse the new gufunc system to unify all numba function dispatch system.\" ",
  "unread": false,
  "urls": [
   {
    "url": "https://gist.github.com/sklam/6245c0b98159cf306bd527174827ba4a"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/datnamer",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/8646471?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/8646471?v=4&s=60",
   "displayName": "datnamer",
   "gv": "4",
   "id": "54602d6fdb8155e6700d316b",
   "url": "/datnamer",
   "username": "datnamer",
   "v": 10
  },
  "html": "Would that solve the usecase? ",
  "id": "5a57e946ae53c15903d8c003",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-01-11T22:46:30.163Z",
  "text": "Would that solve the usecase? ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/datnamer",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/8646471?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/8646471?v=4&s=60",
   "displayName": "datnamer",
   "gv": "4",
   "id": "54602d6fdb8155e6700d316b",
   "url": "/datnamer",
   "username": "datnamer",
   "v": 10
  },
  "html": "Actually I should probably just comment on the gist since there is already one there",
  "id": "5a57ebe25a9ebe4f757751c1",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-01-11T22:57:38.960Z",
  "text": "Actually I should probably just comment on the gist since there is already one there",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-01-16T15:46:14.002Z",
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/g/u/SamaBerenjian_twitter",
   "avatarUrlMedium": "https://abs.twimg.com/sticky/default_profile_images/default_profile_normal.png?s=128",
   "avatarUrlSmall": "https://abs.twimg.com/sticky/default_profile_images/default_profile_normal.png?s=60",
   "displayName": "Samaneh Berenjian",
   "id": "5a4fb90bd73408ce4f865c0f",
   "url": "/SamaBerenjian_twitter",
   "username": "SamaBerenjian_twitter"
  },
  "html": "Has anyone any experience on simulating control flow  of x86 code assembly to LLVMLite?",
  "id": "5a5e1df2517037a212b2f61b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-01-16T15:44:50.204Z",
  "text": "Has anyone any experience on simulating control flow  of x86 code assembly to LLVMLite?",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/shobhitvnagar",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/35485001?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/35485001?v=4&s=60",
   "displayName": "shobhitvnagar",
   "gv": "4",
   "id": "5a601c63d73408ce4f88d97c",
   "url": "/shobhitvnagar",
   "username": "shobhitvnagar"
  },
  "html": "<p>trying to run numba with cuda support<br>I get the following error</p><p>Python 3.6.3 |Anaconda custom (64-bit)| (default, Oct 13 2017, 12:02:49)<br>[GCC 7.2.0] on linux<br>Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</p><pre><code>        <span class=\"keyword\">from</span> numba <span class=\"keyword\">import</span> cuda\n        <span class=\"keyword\">print</span>(cuda.gpus)</code></pre><p>Traceback (most recent call last):<br>File &quot;/opt/anaconda3/lib/python3.6/site-packages/numba/cuda/cudadrv/driver.py&quot;, line 220, in initialize<br>self.cuInit(0)<br>File &quot;/opt/anaconda3/lib/python3.6/site-packages/numba/cuda/cudadrv/driver.py&quot;, line 259, in safe_cuda_api_call<br>self._check_error(fname, retcode)<br>File &quot;/opt/anaconda3/lib/python3.6/site-packages/numba/cuda/cudadrv/driver.py&quot;, line 296, in _check_error<br>raise CudaAPIError(retcode, msg)<br>numba.cuda.cudadrv.driver.CudaAPIError: [999] Call to cuInit results in CUDA_ERROR_UNKNOWN</p><p>During handling of the above exception, another exception occurred:<br>Traceback (most recent call last):<br>File &quot;&quot;, line 1, in<br>File &quot;/opt/anaconda3/lib/python3.6/site-packages/numba/cuda/cudadrv/devices.py&quot;, line 43, in str<br>return &#39;, &#39;.join([str(d) for d in self.lst])<br>File &quot;/opt/anaconda3/lib/python3.6/site-packages/numba/cuda/cudadrv/devices.py&quot;, line 26, in getattr<br>numdev = driver.get_device_count()<br>File &quot;/opt/anaconda3/lib/python3.6/site-packages/numba/cuda/cudadrv/driver.py&quot;, line 307, in get_device_count<br>self.cuDeviceGetCount(byref(count))<br>File &quot;/opt/anaconda3/lib/python3.6/site-packages/numba/cuda/cudadrv/driver.py&quot;, line 244, in getattr<br>self.initialize()<br>File &quot;/opt/anaconda3/lib/python3.6/site-packages/numba/cuda/cudadrv/driver.py&quot;, line 223, in initialize<br>raise CudaSupportError(&quot;Error at driver init: \\n%s:&quot; % e)<br>numba.cuda.cudadrv.error.CudaSupportError: Error at driver init:<br>[999] Call to cuInit results in CUDA_ERROR_UNKNOWN:</p>",
  "id": "5a601c91b48e8c3566f4029f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-01-18T04:03:29.134Z",
  "text": "trying to run numba with cuda support\nI get the following error\n\nPython 3.6.3 |Anaconda custom (64-bit)| (default, Oct 13 2017, 12:02:49)\n[GCC 7.2.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n\n            from numba import cuda\n            print(cuda.gpus)\n\nTraceback (most recent call last):\nFile \"/opt/anaconda3/lib/python3.6/site-packages/numba/cuda/cudadrv/driver.py\", line 220, in initialize\nself.cuInit(0)\nFile \"/opt/anaconda3/lib/python3.6/site-packages/numba/cuda/cudadrv/driver.py\", line 259, in safe_cuda_api_call\nself._check_error(fname, retcode)\nFile \"/opt/anaconda3/lib/python3.6/site-packages/numba/cuda/cudadrv/driver.py\", line 296, in _check_error\nraise CudaAPIError(retcode, msg)\nnumba.cuda.cudadrv.driver.CudaAPIError: [999] Call to cuInit results in CUDA_ERROR_UNKNOWN\n\nDuring handling of the above exception, another exception occurred:\nTraceback (most recent call last):\nFile \"\", line 1, in\nFile \"/opt/anaconda3/lib/python3.6/site-packages/numba/cuda/cudadrv/devices.py\", line 43, in str\nreturn ', '.join([str(d) for d in self.lst])\nFile \"/opt/anaconda3/lib/python3.6/site-packages/numba/cuda/cudadrv/devices.py\", line 26, in getattr\nnumdev = driver.get_device_count()\nFile \"/opt/anaconda3/lib/python3.6/site-packages/numba/cuda/cudadrv/driver.py\", line 307, in get_device_count\nself.cuDeviceGetCount(byref(count))\nFile \"/opt/anaconda3/lib/python3.6/site-packages/numba/cuda/cudadrv/driver.py\", line 244, in getattr\nself.initialize()\nFile \"/opt/anaconda3/lib/python3.6/site-packages/numba/cuda/cudadrv/driver.py\", line 223, in initialize\nraise CudaSupportError(\"Error at driver init: \\n%s:\" % e)\nnumba.cuda.cudadrv.error.CudaSupportError: Error at driver init:\n[999] Call to cuInit results in CUDA_ERROR_UNKNOWN:",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/shobhitvnagar",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/35485001?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/35485001?v=4&s=60",
   "displayName": "shobhitvnagar",
   "gv": "4",
   "id": "5a601c63d73408ce4f88d97c",
   "url": "/shobhitvnagar",
   "username": "shobhitvnagar"
  },
  "html": "<hr>\n",
  "id": "5a601ca05a9ebe4f759ef0f5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-01-18T04:03:44.361Z",
  "text": "------------------------",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/shobhitvnagar",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/35485001?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/35485001?v=4&s=60",
   "displayName": "shobhitvnagar",
   "gv": "4",
   "id": "5a601c63d73408ce4f88d97c",
   "url": "/shobhitvnagar",
   "username": "shobhitvnagar"
  },
  "html": "I have nvidia k80 gpu",
  "id": "5a601cb65ade18be398d5480",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-01-18T04:04:06.201Z",
  "text": "I have nvidia k80 gpu",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/shobhitvnagar",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/35485001?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/35485001?v=4&s=60",
   "displayName": "shobhitvnagar",
   "gv": "4",
   "id": "5a601c63d73408ce4f88d97c",
   "url": "/shobhitvnagar",
   "username": "shobhitvnagar"
  },
  "html": "RHEL 7.4",
  "id": "5a601cc7517037a212be35f2",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-01-18T04:04:23.295Z",
  "text": "RHEL 7.4",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/shobhitvnagar",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/35485001?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/35485001?v=4&s=60",
   "displayName": "shobhitvnagar",
   "gv": "4",
   "id": "5a601c63d73408ce4f88d97c",
   "url": "/shobhitvnagar",
   "username": "shobhitvnagar"
  },
  "html": "cudatoolkit 8",
  "id": "5a601cd05a9ebe4f759ef183",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-01-18T04:04:32.729Z",
  "text": "cudatoolkit 8",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"shobhitvnagar\" class=\"mention\">@shobhitvnagar</span> , I commented on your issue <span data-link-type=\"issue\" data-issue=\"2688\" class=\"issue\">#2688</span>.  Basically, I think you have an outdated cuda driver.",
  "id": "5a6220e46117191e61884577",
  "issues": [
   {
    "number": "2688"
   }
  ],
  "mentions": [
   {
    "screenName": "shobhitvnagar",
    "userId": "5a601c63d73408ce4f88d97c",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 11,
  "sent": "2018-01-19T16:46:28.036Z",
  "text": "@shobhitvnagar , I commented on your issue #2688.  Basically, I think you have an outdated cuda driver.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/jbednar",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1695496?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1695496?v=4&s=60",
   "displayName": "James A. Bednar",
   "gv": "4",
   "id": "556df3e915522ed4b3e14e4c",
   "url": "/jbednar",
   "username": "jbednar",
   "v": 15
  },
  "html": "I&#39;m having a problem using datashader with numba.jit(parallel=True), but am not sure how to address it.  I&#39;ve got code that seems to work fine in datashader as long as I do not enable parallel=True on numba.jit:",
  "id": "5a622987290a1f4561acd3b3",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-01-19T17:23:19.553Z",
  "text": "I'm having a problem using datashader with numba.jit(parallel=True), but am not sure how to address it.  I've got code that seems to work fine in datashader as long as I do not enable parallel=True on numba.jit:",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/jbednar",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1695496?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1695496?v=4&s=60",
   "displayName": "James A. Bednar",
   "gv": "4",
   "id": "556df3e915522ed4b3e14e4c",
   "url": "/jbednar",
   "username": "jbednar",
   "v": 15
  },
  "html": "<a href=\"https://files.gitter.im/numba/numba/GLbm/image.png\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\"><img src=\"https://files.gitter.im/numba/numba/GLbm/thumb/image.png\" alt=\"image.png\" rel=\"nofollow\"></a>",
  "id": "5a62298d290a1f4561acd3d0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-01-19T17:23:25.208Z",
  "text": "[![image.png](https://files.gitter.im/numba/numba/GLbm/thumb/image.png)](https://files.gitter.im/numba/numba/GLbm/image.png)",
  "unread": false,
  "urls": [
   {
    "url": "https://files.gitter.im/numba/numba/GLbm/thumb/image.png"
   },
   {
    "url": "https://files.gitter.im/numba/numba/GLbm/image.png"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/jbednar",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1695496?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1695496?v=4&s=60",
   "displayName": "James A. Bednar",
   "gv": "4",
   "id": "556df3e915522ed4b3e14e4c",
   "url": "/jbednar",
   "username": "jbednar",
   "v": 15
  },
  "html": "But previously when parallel=True was enabled, numba aborted with a complaint about &quot;parfors&quot;.  Unfortunately, now that I made it work by turning parallel off, I can&#39;t replicate it not working; I assume the compiled version got cached somewhere...",
  "id": "5a622a4cba39a53f1a37d23f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-01-19T17:26:36.750Z",
  "text": "But previously when parallel=True was enabled, numba aborted with a complaint about \"parfors\".  Unfortunately, now that I made it work by turning parallel off, I can't replicate it not working; I assume the compiled version got cached somewhere...",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"jbednar\" class=\"mention\">@jbednar</span>, do you have a reproducer?",
  "id": "5a622aaeba39a53f1a37d4da",
  "issues": [],
  "mentions": [
   {
    "screenName": "jbednar",
    "userId": "556df3e915522ed4b3e14e4c",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 10,
  "sent": "2018-01-19T17:28:14.000Z",
  "text": "@jbednar, do you have a reproducer?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/jbednar",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1695496?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1695496?v=4&s=60",
   "displayName": "James A. Bednar",
   "gv": "4",
   "id": "556df3e915522ed4b3e14e4c",
   "url": "/jbednar",
   "username": "jbednar",
   "v": 15
  },
  "html": "I will if you can tell me how to delete the cached compiled code?",
  "id": "5a622ac2ce68c3bc74db2130",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-01-19T17:28:34.000Z",
  "text": "I will if you can tell me how to delete the cached compiled code?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "which OS ?",
  "id": "5a622ad96117191e618887a8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-01-19T17:28:57.397Z",
  "text": "which OS ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/jbednar",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1695496?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1695496?v=4&s=60",
   "displayName": "James A. Bednar",
   "gv": "4",
   "id": "556df3e915522ed4b3e14e4c",
   "url": "/jbednar",
   "username": "jbednar",
   "v": 15
  },
  "html": "OS X.  ",
  "id": "5a622ae0ba39a53f1a37d608",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-01-19T17:29:04.768Z",
  "text": "OS X.  ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "take a look in <code>__pycache__</code>",
  "id": "5a622af1517037a212ca2bb7",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-01-19T17:29:21.803Z",
  "text": "take a look in `__pycache__`",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/jbednar",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1695496?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1695496?v=4&s=60",
   "displayName": "James A. Bednar",
   "gv": "4",
   "id": "556df3e915522ed4b3e14e4c",
   "url": "/jbednar",
   "username": "jbednar",
   "v": 15
  },
  "html": "I&#39;m using datashader master (though I don&#39;t <em>think</em> that matters),  xarray 0.9.6, and numba latest dev from the numba channel (though I had the same with 0.36.0 released).",
  "id": "5a622b139cdc721e4fa1cdb1",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-01-19T17:29:55.828Z",
  "text": "I'm using datashader master (though I don't *think* that matters),  xarray 0.9.6, and numba latest dev from the numba channel (though I had the same with 0.36.0 released).",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": ".nbc and .nbi are cache files",
  "id": "5a622b179cdc721e4fa1cdb9",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-01-19T17:29:59.220Z",
  "text": ".nbc and .nbi are cache files",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/jbednar",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1695496?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1695496?v=4&s=60",
   "displayName": "James A. Bednar",
   "gv": "4",
   "id": "556df3e915522ed4b3e14e4c",
   "url": "/jbednar",
   "username": "jbednar",
   "v": 15
  },
  "html": "Where is pycache?",
  "id": "5a622b2f9cdc721e4fa1ceaf",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-01-19T17:30:23.241Z",
  "text": "Where is pycache?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "PWD?",
  "id": "5a622b4fe014122650672d81",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-01-19T17:30:55.228Z",
  "text": "PWD?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "I&#39;ll go look at OSX and make sure it is",
  "id": "5a622b575a9ebe4f75aafd3e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-01-19T17:31:03.426Z",
  "text": "I'll go look at OSX and make sure it is",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/jbednar",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1695496?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1695496?v=4&s=60",
   "displayName": "James A. Bednar",
   "gv": "4",
   "id": "556df3e915522ed4b3e14e4c",
   "url": "/jbednar",
   "username": "jbednar",
   "v": 15
  },
  "html": "Ah, it&#39;s in the module&#39;s directory.",
  "id": "5a622b63ae53c159030bc3a5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-01-19T17:31:15.431Z",
  "text": "Ah, it's in the module's directory.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "right they live along side with the .pyc files ",
  "id": "5a622b816117191e61888d12",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-01-19T17:31:45.994Z",
  "text": "right they live along side with the .pyc files ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-01-19T17:33:56.182Z",
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/jbednar",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1695496?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1695496?v=4&s=60",
   "displayName": "James A. Bednar",
   "gv": "4",
   "id": "556df3e915522ed4b3e14e4c",
   "url": "/jbednar",
   "username": "jbednar",
   "v": 15
  },
  "html": "Deleting <code>datashader/__pycache__/</code> doesn&#39;t seem to do it.",
  "id": "5a622bfaae53c159030bc8c0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-01-19T17:33:46.790Z",
  "text": "Deleting ``datashader/__pycache__/`` doesn't seem to do it.",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "<a href=\"http://numba.pydata.org/numba-doc/dev/reference/jit-compilation.html\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://numba.pydata.org/numba-doc/dev/reference/jit-compilation.html</a>",
  "id": "5a622c16ce68c3bc74db282c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-01-19T17:34:14.845Z",
  "text": "http://numba.pydata.org/numba-doc/dev/reference/jit-compilation.html",
  "unread": false,
  "urls": [
   {
    "url": "http://numba.pydata.org/numba-doc/dev/reference/jit-compilation.html"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "the cache locations are listed there",
  "id": "5a622c1d5ade18be39991b76",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-01-19T17:34:21.612Z",
  "text": "the cache locations are listed there",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "&quot;If true, cache enables a file-based cache to shorten compilation times...&quot;",
  "id": "5a622c2d5a9ebe4f75ab012e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-01-19T17:34:37.338Z",
  "text": "\"If true, cache enables a file-based cache to shorten compilation times...\"",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/jbednar",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1695496?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1695496?v=4&s=60",
   "displayName": "James A. Bednar",
   "gv": "4",
   "id": "556df3e915522ed4b3e14e4c",
   "url": "/jbednar",
   "username": "jbednar",
   "v": 15
  },
  "html": "Drat!  I started out with a mysterious error message from numba, started posting about it here, but then started debugging by turning off parallel, and now can&#39;t reproduce the problem at all!  I&#39;ll come back when I can.",
  "id": "5a622c3e290a1f4561ace87b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-01-19T17:34:54.147Z",
  "text": "Drat!  I started out with a mysterious error message from numba, started posting about it here, but then started debugging by turning off parallel, and now can't reproduce the problem at all!  I'll come back when I can.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "Same version of Numba ?",
  "id": "5a622c4e517037a212ca33ff",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-01-19T17:35:10.180Z",
  "text": "Same version of Numba ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "not from the numba channel but from main ?",
  "id": "5a622c5c5ade18be39991d33",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-01-19T17:35:24.449Z",
  "text": "not from the numba channel but from main ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-01-19T17:35:33.370Z",
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "Also, set env-var <code>NUMBA_DEBUG_CACHE=1</code> to make numba dump out every cache file it loads/writes",
  "id": "5a622c5d290a1f4561ace8ec",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-01-19T17:35:25.946Z",
  "text": "Also, set env-var `NUMBA_DEBUG_CACHE=1` to make numba dump out every cache file it loads/writes",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "Also, are you sure parallel is still working, as it might be that it has spotted something it doesn&#39;t like and has bailed out to the njit pipeline",
  "id": "5a622c866117191e618892f7",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-01-19T17:36:06.455Z",
  "text": "Also, are you sure parallel is still working, as it might be that it has spotted something it doesn't like and has bailed out to the njit pipeline",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"jbednar\" class=\"mention\">@jbednar</span> <a href=\"http://numba.pydata.org/numba-doc/dev/user/faq.html#how-can-i-tell-if-parallel-true-worked\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://numba.pydata.org/numba-doc/dev/user/faq.html#how-can-i-tell-if-parallel-true-worked</a>",
  "id": "5a622cc8ba39a53f1a37e2a8",
  "issues": [],
  "mentions": [
   {
    "screenName": "jbednar",
    "userId": "556df3e915522ed4b3e14e4c",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 11,
  "sent": "2018-01-19T17:37:12.416Z",
  "text": "@jbednar http://numba.pydata.org/numba-doc/dev/user/faq.html#how-can-i-tell-if-parallel-true-worked",
  "unread": false,
  "urls": [
   {
    "url": "http://numba.pydata.org/numba-doc/dev/user/faq.html#how-can-i-tell-if-parallel-true-worked"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/jbednar",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1695496?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1695496?v=4&s=60",
   "displayName": "James A. Bednar",
   "gv": "4",
   "id": "556df3e915522ed4b3e14e4c",
   "url": "/jbednar",
   "username": "jbednar",
   "v": 15
  },
  "html": "I&#39;m not the least bit sure parallel is working, but I&#39;m going to have to give up.  I&#39;ve had it print out the cache files being used, deleted them, and made sure that the new run generated new ones (it does).  I changed numba versions, and back again.  Throughout all of it, ever since that one fateful moment when I tried disabling parallel=True, everything works.  So my theory is that because none of this particular datashader code has changed in months, I had some compiled version on my hard drive that caused whatever &quot;parfors&quot; message I was originally getting from numba.  And once I edited the source file to turn off parallel=True, it forced the code to be compiled again, and the current numba code (on main or the numba channel) no longer has whatever problem this was (which I failed to capture while trying to do so!).  ",
  "id": "5a6262d35a9ebe4f75ac4f3f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-01-19T21:27:47.689Z",
  "text": "I'm not the least bit sure parallel is working, but I'm going to have to give up.  I've had it print out the cache files being used, deleted them, and made sure that the new run generated new ones (it does).  I changed numba versions, and back again.  Throughout all of it, ever since that one fateful moment when I tried disabling parallel=True, everything works.  So my theory is that because none of this particular datashader code has changed in months, I had some compiled version on my hard drive that caused whatever \"parfors\" message I was originally getting from numba.  And once I edited the source file to turn off parallel=True, it forced the code to be compiled again, and the current numba code (on main or the numba channel) no longer has whatever problem this was (which I failed to capture while trying to do so!).  ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/jbednar",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1695496?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1695496?v=4&s=60",
   "displayName": "James A. Bednar",
   "gv": "4",
   "id": "556df3e915522ed4b3e14e4c",
   "url": "/jbednar",
   "username": "jbednar",
   "v": 15
  },
  "html": "If all that&#39;s true (and I admit it is speculative), there&#39;s no problem, and if I ever see someone with a similar message I&#39;ll tell them to delete their <code>__pycache__</code> dirs and try again.  If it&#39;s not true, I&#39;ll probably run into the problem again, and this time I&#39;ll capture the output!  Thanks for the help.",
  "id": "5a626304ae53c159030d10bf",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-01-19T21:28:36.084Z",
  "text": "If all that's true (and I admit it is speculative), there's no problem, and if I ever see someone with a similar message I'll tell them to delete their ``__pycache__`` dirs and try again.  If it's not true, I'll probably run into the problem again, and this time I'll capture the output!  Thanks for the help.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/jbednar",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1695496?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1695496?v=4&s=60",
   "displayName": "James A. Bednar",
   "gv": "4",
   "id": "556df3e915522ed4b3e14e4c",
   "url": "/jbednar",
   "username": "jbednar",
   "v": 15
  },
  "html": "For what it&#39;s worth, I found the traceback sitting around in another shell:<pre><code>---------------------------------------------------------------------------\nKeyError                                  Traceback (most recent call last)\n&lt;ipython-input-<span class=\"number\">7</span>-<span class=\"number\">297</span>a6a9fa056&gt; <span class=\"keyword\">in</span> &lt;module&gt;()\n      <span class=\"number\">2</span> \n      <span class=\"number\">3</span> cvs = ds.Canvas(plot_height=n, plot_width=n, x_range=[-<span class=\"number\">1</span>,<span class=\"number\">1</span>], y_range=[-<span class=\"number\">1</span>,<span class=\"number\">1</span>])\n----&gt; <span class=\"number\">4</span> agg = cvs.raster(da)\n      <span class=\"number\">5</span> tf.shade(agg)\n\n<span class=\"regexp\">~/datashader_git/</span>datashader/core.py <span class=\"keyword\">in</span> raster(self, source, layer, upsample_method, downsample_method, nan_value)\n    <span class=\"number\">367</span>             <span class=\"keyword\">if</span> downsample_method <span class=\"keyword\">in</span> [<span class=\"string\">'var'</span>, <span class=\"string\">'std'</span>]:\n    <span class=\"number\">368</span>                 source_window = source_window.astype(<span class=\"string\">'f'</span>)\n--&gt; <span class=\"number\">369</span>             data = resample_2d(source_window, **kwargs)\n    <span class=\"number\">370</span>             layers = <span class=\"number\">1</span>\n    <span class=\"number\">371</span>         <span class=\"string\">else:</span>\n\n<span class=\"regexp\">~/datashader_git/</span>datashader/resampling.py <span class=\"keyword\">in</span> resample_2d(src, w, h, ds_method, us_method, fill_value, mode_rank, out)\n    <span class=\"number\">105</span>     mask, use_mask = _get_mask(src)\n    <span class=\"number\">106</span>     fill_value = _get_fill_value(fill_value, src, out)\n--&gt; <span class=\"number\">107</span>     <span class=\"keyword\">return</span> _mask_or_not(_resample_2d(src, mask, use_mask, ds_method, us_method, fill_value, mode_rank, out),\n    <span class=\"number\">108</span>                         src, fill_value)\n    <span class=\"number\">109</span> \n\n<span class=\"regexp\">~/datashader_git/</span>datashader/resampling.py <span class=\"keyword\">in</span> _resample_2d(src, mask, use_mask, ds_method, us_method, fill_value, mode_rank, out)\n    <span class=\"number\">262</span>             <span class=\"keyword\">return</span> downsampling_method(src, mask, use_mask, ds_method, fill_value, mode_rank, out)\n    <span class=\"number\">263</span>     elif out_w &gt; src_w or out_h &gt; <span class=\"string\">src_h:</span>\n--&gt; <span class=\"number\">264</span>         <span class=\"keyword\">return</span> upsampling_method(src, mask, use_mask, fill_value, out)\n    <span class=\"number\">265</span>     <span class=\"keyword\">return</span> src\n    <span class=\"number\">266</span> \n\n<span class=\"regexp\">~/anaconda/</span>envs<span class=\"regexp\">/ds/</span>lib<span class=\"regexp\">/python3.6/</span>site-packages<span class=\"regexp\">/numba/</span>dispatcher.py <span class=\"keyword\">in</span> _compile_for_args(self, *args, **kws)\n    <span class=\"number\">305</span>                 argtypes.append(self.typeof_pyval(a))\n    <span class=\"number\">306</span>         <span class=\"string\">try:</span>\n--&gt; <span class=\"number\">307</span>             <span class=\"keyword\">return</span> self.compile(tuple(argtypes))\n    <span class=\"number\">308</span>         except errors.TypingError <span class=\"keyword\">as</span> <span class=\"string\">e:</span>\n    <span class=\"number\">309</span>             # Intercept typing error that may be due to an argument\n\n<span class=\"regexp\">~/anaconda/</span>envs<span class=\"regexp\">/ds/</span>lib<span class=\"regexp\">/python3.6/</span>site-packages<span class=\"regexp\">/numba/</span>dispatcher.py <span class=\"keyword\">in</span> compile(self, sig)\n    <span class=\"number\">577</span> \n    <span class=\"number\">578</span>                 self._cache_misses[sig] += <span class=\"number\">1</span>\n--&gt; <span class=\"number\">579</span>                 cres = self._compiler.compile(args, return_type)\n    <span class=\"number\">580</span>                 self.add_overload(cres)\n    <span class=\"number\">581</span>                 self._cache.save_overload(sig, cres)\n\n<span class=\"regexp\">~/anaconda/</span>envs<span class=\"regexp\">/ds/</span>lib<span class=\"regexp\">/python3.6/</span>site-packages<span class=\"regexp\">/numba/</span>dispatcher.py <span class=\"keyword\">in</span> compile(self, args, return_type)\n     <span class=\"number\">78</span>                                       impl,\n     <span class=\"number\">79</span>                                       args=args, return_type=return_type,\n---&gt; <span class=\"number\">80</span>                                       flags=flags, locals=self.locals)\n     <span class=\"number\">81</span>         # Check typing error <span class=\"keyword\">if</span> object mode is used\n     <span class=\"number\">82</span>         <span class=\"keyword\">if</span> cres.typing_error is not None and not flags.<span class=\"string\">enable_pyobject:</span>\n\n<span class=\"regexp\">~/anaconda/</span>envs<span class=\"regexp\">/ds/</span>lib<span class=\"regexp\">/python3.6/</span>site-packages<span class=\"regexp\">/numba/</span>compiler.py <span class=\"keyword\">in</span> compile_extra(typingctx, targetctx, func, args, return_type, flags, locals, library)\n    <span class=\"number\">764</span>     pipeline = Pipeline(typingctx, targetctx, library,\n    <span class=\"number\">765</span>                         args, return_type, flags, locals)\n--&gt; <span class=\"number\">766</span>     <span class=\"keyword\">return</span> pipeline.compile_extra(func)\n    <span class=\"number\">767</span> \n    <span class=\"number\">768</span> \n\n<span class=\"regexp\">~/anaconda/</span>envs<span class=\"regexp\">/ds/</span>lib<span class=\"regexp\">/python3.6/</span>site-packages<span class=\"regexp\">/numba/</span>compiler.py <span class=\"keyword\">in</span> compile_extra(self, func)\n    <span class=\"number\">360</span>         self.lifted = ()\n    <span class=\"number\">361</span>         self.lifted_from = None\n--&gt; <span class=\"number\">362</span>         <span class=\"keyword\">return</span> self._compile_bytecode()\n    <span class=\"number\">363</span> \n    <span class=\"number\">364</span>     <span class=\"keyword\">def</span> compile_ir(self, func_ir, lifted=(), lifted_from=None):\n\n<span class=\"regexp\">~/anaconda/</span>envs<span class=\"regexp\">/ds/</span>lib<span class=\"regexp\">/python3.6/</span>site-packages<span class=\"regexp\">/numba/</span>compiler.py <span class=\"keyword\">in</span> _compile_bytecode(self)\n    <span class=\"number\">723</span>         <span class=\"string\">\"\"\"\n    724         assert self.func_ir is None\n--&gt; 725         return self._compile_core()\n    726 \n    727     def _compile_ir(self):\n\n~/anaconda/envs/ds/lib/python3.6/site-packages/numba/compiler.py in _compile_core(self)\n    710 \n    711         pm.finalize()\n--&gt; 712         res = pm.run(self.status)\n    713         if res is not None:\n    714             # Early pipeline completion</span></code></pre>",
  "id": "5a626a8d5ade18be399a924f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2018-01-19T22:00:45.142Z",
  "text": "For what it's worth, I found the traceback sitting around in another shell:\n\n```\n---------------------------------------------------------------------------\nKeyError                                  Traceback (most recent call last)\n<ipython-input-7-297a6a9fa056> in <module>()\n      2 \n      3 cvs = ds.Canvas(plot_height=n, plot_width=n, x_range=[-1,1], y_range=[-1,1])\n----> 4 agg = cvs.raster(da)\n      5 tf.shade(agg)\n\n~/datashader_git/datashader/core.py in raster(self, source, layer, upsample_method, downsample_method, nan_value)\n    367             if downsample_method in ['var', 'std']:\n    368                 source_window = source_window.astype('f')\n--> 369             data = resample_2d(source_window, **kwargs)\n    370             layers = 1\n    371         else:\n\n~/datashader_git/datashader/resampling.py in resample_2d(src, w, h, ds_method, us_method, fill_value, mode_rank, out)\n    105     mask, use_mask = _get_mask(src)\n    106     fill_value = _get_fill_value(fill_value, src, out)\n--> 107     return _mask_or_not(_resample_2d(src, mask, use_mask, ds_method, us_method, fill_value, mode_rank, out),\n    108                         src, fill_value)\n    109 \n\n~/datashader_git/datashader/resampling.py in _resample_2d(src, mask, use_mask, ds_method, us_method, fill_value, mode_rank, out)\n    262             return downsampling_method(src, mask, use_mask, ds_method, fill_value, mode_rank, out)\n    263     elif out_w > src_w or out_h > src_h:\n--> 264         return upsampling_method(src, mask, use_mask, fill_value, out)\n    265     return src\n    266 \n\n~/anaconda/envs/ds/lib/python3.6/site-packages/numba/dispatcher.py in _compile_for_args(self, *args, **kws)\n    305                 argtypes.append(self.typeof_pyval(a))\n    306         try:\n--> 307             return self.compile(tuple(argtypes))\n    308         except errors.TypingError as e:\n    309             # Intercept typing error that may be due to an argument\n\n~/anaconda/envs/ds/lib/python3.6/site-packages/numba/dispatcher.py in compile(self, sig)\n    577 \n    578                 self._cache_misses[sig] += 1\n--> 579                 cres = self._compiler.compile(args, return_type)\n    580                 self.add_overload(cres)\n    581                 self._cache.save_overload(sig, cres)\n\n~/anaconda/envs/ds/lib/python3.6/site-packages/numba/dispatcher.py in compile(self, args, return_type)\n     78                                       impl,\n     79                                       args=args, return_type=return_type,\n---> 80                                       flags=flags, locals=self.locals)\n     81         # Check typing error if object mode is used\n     82         if cres.typing_error is not None and not flags.enable_pyobject:\n\n~/anaconda/envs/ds/lib/python3.6/site-packages/numba/compiler.py in compile_extra(typingctx, targetctx, func, args, return_type, flags, locals, library)\n    764     pipeline = Pipeline(typingctx, targetctx, library,\n    765                         args, return_type, flags, locals)\n--> 766     return pipeline.compile_extra(func)\n    767 \n    768 \n\n~/anaconda/envs/ds/lib/python3.6/site-packages/numba/compiler.py in compile_extra(self, func)\n    360         self.lifted = ()\n    361         self.lifted_from = None\n--> 362         return self._compile_bytecode()\n    363 \n    364     def compile_ir(self, func_ir, lifted=(), lifted_from=None):\n\n~/anaconda/envs/ds/lib/python3.6/site-packages/numba/compiler.py in _compile_bytecode(self)\n    723         \"\"\"\n    724         assert self.func_ir is None\n--> 725         return self._compile_core()\n    726 \n    727     def _compile_ir(self):\n\n~/anaconda/envs/ds/lib/python3.6/site-packages/numba/compiler.py in _compile_core(self)\n    710 \n    711         pm.finalize()\n--> 712         res = pm.run(self.status)\n    713         if res is not None:\n    714             # Early pipeline completion\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/jbednar",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1695496?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1695496?v=4&s=60",
   "displayName": "James A. Bednar",
   "gv": "4",
   "id": "556df3e915522ed4b3e14e4c",
   "url": "/jbednar",
   "username": "jbednar",
   "v": 15
  },
  "html": "<pre><code>~<span class=\"regexp\">/anaconda/envs</span><span class=\"regexp\">/ds/lib</span><span class=\"regexp\">/python3.6/site</span>-packages/numba/compiler.py <span class=\"keyword\">in</span> run(<span class=\"keyword\">self</span>, status)\n    <span class=\"number\">246</span>                     <span class=\"comment\"># No more fallback pipelines?</span>\n    <span class=\"number\">247</span>                     if <span class=\"symbol\">is_final_pipeline:</span>\n--&gt; <span class=\"number\">248</span>                         raise patched_exception\n    <span class=\"number\">249</span>                     <span class=\"comment\"># Go to next fallback pipeline</span>\n    <span class=\"number\">250</span>                     <span class=\"symbol\">else:</span>\n\n~<span class=\"regexp\">/anaconda/envs</span><span class=\"regexp\">/ds/lib</span><span class=\"regexp\">/python3.6/site</span>-packages/numba/compiler.py <span class=\"keyword\">in</span> run(<span class=\"keyword\">self</span>, status)\n    <span class=\"number\">238</span>                 <span class=\"symbol\">try:</span>\n    <span class=\"number\">239</span>                     event(stage_name)\n--&gt; <span class=\"number\">240</span>                     stage()\n    <span class=\"number\">241</span>                 except <span class=\"constant\">_EarlyPipelineCompletion </span>as <span class=\"symbol\">e:</span>\n    <span class=\"number\">242</span>                     <span class=\"keyword\">return</span> e.result\n\n~<span class=\"regexp\">/anaconda/envs</span><span class=\"regexp\">/ds/lib</span><span class=\"regexp\">/python3.6/site</span>-packages/numba/compiler.py <span class=\"keyword\">in</span> stage_parfor_pass(<span class=\"keyword\">self</span>)\n    <span class=\"number\">495</span>             <span class=\"keyword\">self</span>.type_annotation.calltypes, <span class=\"keyword\">self</span>.return_type, <span class=\"keyword\">self</span>.typingctx,\n    <span class=\"number\">496</span>             <span class=\"keyword\">self</span>.flags.auto_parallel)\n--&gt; <span class=\"number\">497</span>         parfor_pass.run()\n    <span class=\"number\">498</span> \n    <span class=\"number\">499</span>         if config.<span class=\"constant\">WARNINGS:</span>\n\n~<span class=\"regexp\">/anaconda/envs</span><span class=\"regexp\">/ds/lib</span><span class=\"regexp\">/python3.6/site</span>-packages/numba/parfor.py <span class=\"keyword\">in</span> run(<span class=\"keyword\">self</span>)\n    <span class=\"number\">269</span>         <span class=\"string\">\"\"</span><span class=\"string\">\"run parfor conversion pass: replace Numpy calls\n    270         with Parfors when possible and optimize the IR.\"</span><span class=\"string\">\"\"</span>\n--&gt; <span class=\"number\">271</span>         <span class=\"keyword\">self</span>.func_ir.blocks = simplify_CFG(<span class=\"keyword\">self</span>.func_ir.blocks)\n    <span class=\"number\">272</span>         <span class=\"comment\"># remove Del statements for easier optimization</span>\n    <span class=\"number\">273</span>         remove_dels(<span class=\"keyword\">self</span>.func_ir.blocks)\n\n~<span class=\"regexp\">/anaconda/envs</span><span class=\"regexp\">/ds/lib</span><span class=\"regexp\">/python3.6/site</span>-packages/numba/ir_utils.py <span class=\"keyword\">in</span> simplify_CFG(blocks)\n   <span class=\"number\">1101</span>         delete_block = <span class=\"constant\">True</span>\n   <span class=\"number\">1102</span>         <span class=\"keyword\">for</span> (p, q) <span class=\"keyword\">in</span> <span class=\"symbol\">predecessors:</span>\n-&gt; <span class=\"number\">1103</span>             block = blocks[p]\n   <span class=\"number\">1104</span>             if isinstance(block.body[-<span class=\"number\">1</span>], ir.<span class=\"constant\">Jump)</span><span class=\"symbol\">:</span>\n   <span class=\"number\">1105</span>                 block.body[-<span class=\"number\">1</span>] = copy.copy(inst)\n\n<span class=\"constant\">KeyError:</span> <span class=\"string\">'Failed at nopython (convert to parfors)'</span></code></pre>",
  "id": "5a626ae45a9ebe4f75ac80a1",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2018-01-19T22:02:12.477Z",
  "text": "```\n~/anaconda/envs/ds/lib/python3.6/site-packages/numba/compiler.py in run(self, status)\n    246                     # No more fallback pipelines?\n    247                     if is_final_pipeline:\n--> 248                         raise patched_exception\n    249                     # Go to next fallback pipeline\n    250                     else:\n\n~/anaconda/envs/ds/lib/python3.6/site-packages/numba/compiler.py in run(self, status)\n    238                 try:\n    239                     event(stage_name)\n--> 240                     stage()\n    241                 except _EarlyPipelineCompletion as e:\n    242                     return e.result\n\n~/anaconda/envs/ds/lib/python3.6/site-packages/numba/compiler.py in stage_parfor_pass(self)\n    495             self.type_annotation.calltypes, self.return_type, self.typingctx,\n    496             self.flags.auto_parallel)\n--> 497         parfor_pass.run()\n    498 \n    499         if config.WARNINGS:\n\n~/anaconda/envs/ds/lib/python3.6/site-packages/numba/parfor.py in run(self)\n    269         \"\"\"run parfor conversion pass: replace Numpy calls\n    270         with Parfors when possible and optimize the IR.\"\"\"\n--> 271         self.func_ir.blocks = simplify_CFG(self.func_ir.blocks)\n    272         # remove Del statements for easier optimization\n    273         remove_dels(self.func_ir.blocks)\n\n~/anaconda/envs/ds/lib/python3.6/site-packages/numba/ir_utils.py in simplify_CFG(blocks)\n   1101         delete_block = True\n   1102         for (p, q) in predecessors:\n-> 1103             block = blocks[p]\n   1104             if isinstance(block.body[-1], ir.Jump):\n   1105                 block.body[-1] = copy.copy(inst)\n\nKeyError: 'Failed at nopython (convert to parfors)'\n```\n\n\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/jbednar",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1695496?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1695496?v=4&s=60",
   "displayName": "James A. Bednar",
   "gv": "4",
   "id": "556df3e915522ed4b3e14e4c",
   "url": "/jbednar",
   "username": "jbednar",
   "v": 15
  },
  "html": "Ok, success!  Or rather failure.  I&#39;ve got a test script that seems reproducible now:<pre><code>import numpy as np, datashader as ds, xarray as xr, datashader<span class=\"class\">.utils</span> as du\nfrom datashader import transfer_functions as tf\n\nn=<span class=\"number\">50</span>\nx_r=(<span class=\"number\">0.0</span>,<span class=\"number\">4.5</span>)\n\ndef <span class=\"function\"><span class=\"title\">f</span><span class=\"params\">(x,y)</span></span>:\n    return np.<span class=\"function\"><span class=\"title\">sin</span><span class=\"params\">(x**<span class=\"number\">2</span>+y**<span class=\"number\">2</span>)</span></span>\n\nls  = np.<span class=\"function\"><span class=\"title\">linspace</span><span class=\"params\">(*x_r, n)</span></span>\nx,y = np.<span class=\"function\"><span class=\"title\">meshgrid</span><span class=\"params\">(ls, ls)</span></span>\nz   = <span class=\"function\"><span class=\"title\">f</span><span class=\"params\">(x,y)</span></span>\n\nda = xr.<span class=\"function\"><span class=\"title\">DataArray</span><span class=\"params\">(z, coords={<span class=\"string\">'x'</span>: ls, <span class=\"string\">'y'</span>: ls}, dims=(<span class=\"string\">'y'</span>, <span class=\"string\">'x'</span>)</span></span>)\n\ncvs = ds.<span class=\"function\"><span class=\"title\">Canvas</span><span class=\"params\">(plot_height=n*<span class=\"number\">5</span>, plot_width=n*<span class=\"number\">5</span>, x_range=x_r, y_range=x_r)</span></span>\nagg = cvs.<span class=\"function\"><span class=\"title\">raster</span><span class=\"params\">(da)</span></span>\n<span class=\"tag\">img</span> = tf.<span class=\"function\"><span class=\"title\">shade</span><span class=\"params\">(agg)</span></span>\n\ndu.<span class=\"function\"><span class=\"title\">export_image</span><span class=\"params\">(img, <span class=\"string\">\"parfors\"</span>)</span></span></code></pre>",
  "id": "5a626eef9cdc721e4fa35a19",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2018-01-19T22:19:27.694Z",
  "text": "Ok, success!  Or rather failure.  I've got a test script that seems reproducible now:\n\n```\nimport numpy as np, datashader as ds, xarray as xr, datashader.utils as du\nfrom datashader import transfer_functions as tf\n\nn=50\nx_r=(0.0,4.5)\n\ndef f(x,y):\n    return np.sin(x**2+y**2)\n\nls  = np.linspace(*x_r, n)\nx,y = np.meshgrid(ls, ls)\nz   = f(x,y)\n\nda = xr.DataArray(z, coords={'x': ls, 'y': ls}, dims=('y', 'x'))\n\ncvs = ds.Canvas(plot_height=n*5, plot_width=n*5, x_range=x_r, y_range=x_r)\nagg = cvs.raster(da)\nimg = tf.shade(agg)\n\ndu.export_image(img, \"parfors\")\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-01-19T22:21:03.846Z",
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/jbednar",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1695496?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1695496?v=4&s=60",
   "displayName": "James A. Bednar",
   "gv": "4",
   "id": "556df3e915522ed4b3e14e4c",
   "url": "/jbednar",
   "username": "jbednar",
   "v": 15
  },
  "html": "If I call that &quot;parfors.py&quot;, then run &quot;python parfors.py&quot; with datashader=0.6.2, xarray=0.9.6, numpy=1.13.1, and numba=0.37.0dev1+25.ga8a973f, I get the &quot;KeyError: &#39;Failed at nopython (convert to parfors)&quot; message consistently unless I disable parallel=True in the jit call.",
  "id": "5a626f3fce68c3bc74dcb103",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-01-19T22:20:47.496Z",
  "text": "If I call that \"parfors.py\", then run \"python parfors.py\" with datashader=0.6.2, xarray=0.9.6, numpy=1.13.1, and numba=0.37.0dev1+25.ga8a973f, I get the \"KeyError: 'Failed at nopython (convert to parfors)\" message consistently unless I disable parallel=True in the jit call.",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "good to have a reproducer.  I\u2019ll give it a try in a bit.",
  "id": "5a626f775ade18be399aa915",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-01-19T22:21:43.443Z",
  "text": "good to have a reproducer.  I\u2019ll give it a try in a bit.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/jbednar",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1695496?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1695496?v=4&s=60",
   "displayName": "James A. Bednar",
   "gv": "4",
   "id": "556df3e915522ed4b3e14e4c",
   "url": "/jbednar",
   "username": "jbednar",
   "v": 15
  },
  "html": "Traceback:<pre><code>$ python parfors<span class=\"class\">.py</span>\nTraceback (most recent call last):\n  File <span class=\"string\">\"parfors.py\"</span>, line <span class=\"number\">17</span>, <span class=\"keyword\">in</span> &lt;module&gt;\n    agg = cvs.<span class=\"function\"><span class=\"title\">raster</span><span class=\"params\">(da)</span></span>\n  File <span class=\"string\">\"/Users/jbednar/anaconda/envs/ds/lib/python3.6/site-packages/datashader/core.py\"</span>, line <span class=\"number\">299</span>, <span class=\"keyword\">in</span> raster\n    data = <span class=\"function\"><span class=\"title\">resample_2d</span><span class=\"params\">(source_window, **kwargs)</span></span>\n  File <span class=\"string\">\"/Users/jbednar/anaconda/envs/ds/lib/python3.6/site-packages/datashader/resampling.py\"</span>, line <span class=\"number\">107</span>, <span class=\"keyword\">in</span> resample_2d\n    return _mask_or_not(_resample_2d(src, <span class=\"attribute\">mask</span>, use_mask, ds_method, us_method, fill_value, mode_rank, out),\n  File <span class=\"string\">\"/Users/jbednar/anaconda/envs/ds/lib/python3.6/site-packages/datashader/resampling.py\"</span>, line <span class=\"number\">264</span>, <span class=\"keyword\">in</span> _resample_2d\n    return <span class=\"function\"><span class=\"title\">upsampling_method</span><span class=\"params\">(src, mask, use_mask, fill_value, out)</span></span>\n  File <span class=\"string\">\"/Users/jbednar/anaconda/envs/ds/lib/python3.6/site-packages/numba/dispatcher.py\"</span>, line <span class=\"number\">307</span>, <span class=\"keyword\">in</span> _compile_for_args\n    return self.<span class=\"function\"><span class=\"title\">compile</span><span class=\"params\">(tuple(argtypes)</span></span>)\n  File <span class=\"string\">\"/Users/jbednar/anaconda/envs/ds/lib/python3.6/site-packages/numba/dispatcher.py\"</span>, line <span class=\"number\">579</span>, <span class=\"keyword\">in</span> compile\n    cres = self._compiler.<span class=\"function\"><span class=\"title\">compile</span><span class=\"params\">(args, return_type)</span></span>\n  File <span class=\"string\">\"/Users/jbednar/anaconda/envs/ds/lib/python3.6/site-packages/numba/dispatcher.py\"</span>, line <span class=\"number\">80</span>, <span class=\"keyword\">in</span> compile\n    flags=flags, locals=self.locals)\n  File <span class=\"string\">\"/Users/jbednar/anaconda/envs/ds/lib/python3.6/site-packages/numba/compiler.py\"</span>, line <span class=\"number\">766</span>, <span class=\"keyword\">in</span> compile_extra\n    return pipeline.<span class=\"function\"><span class=\"title\">compile_extra</span><span class=\"params\">(func)</span></span>\n  File <span class=\"string\">\"/Users/jbednar/anaconda/envs/ds/lib/python3.6/site-packages/numba/compiler.py\"</span>, line <span class=\"number\">362</span>, <span class=\"keyword\">in</span> compile_extra\n    return self._compile_bytecode()\n  File <span class=\"string\">\"/Users/jbednar/anaconda/envs/ds/lib/python3.6/site-packages/numba/compiler.py\"</span>, line <span class=\"number\">725</span>, <span class=\"keyword\">in</span> _compile_bytecode\n    return self._compile_core()\n  File <span class=\"string\">\"/Users/jbednar/anaconda/envs/ds/lib/python3.6/site-packages/numba/compiler.py\"</span>, line <span class=\"number\">712</span>, <span class=\"keyword\">in</span> _compile_core\n    res = pm.<span class=\"function\"><span class=\"title\">run</span><span class=\"params\">(self.status)</span></span>\n  File <span class=\"string\">\"/Users/jbednar/anaconda/envs/ds/lib/python3.6/site-packages/numba/compiler.py\"</span>, line <span class=\"number\">248</span>, <span class=\"keyword\">in</span> run\n    raise patched_exception\n  File <span class=\"string\">\"/Users/jbednar/anaconda/envs/ds/lib/python3.6/site-packages/numba/compiler.py\"</span>, line <span class=\"number\">240</span>, <span class=\"keyword\">in</span> run\n    <span class=\"function\"><span class=\"title\">stage</span><span class=\"params\">()</span></span>\n  File <span class=\"string\">\"/Users/jbednar/anaconda/envs/ds/lib/python3.6/site-packages/numba/compiler.py\"</span>, line <span class=\"number\">497</span>, <span class=\"keyword\">in</span> stage_parfor_pass\n    parfor_pass.<span class=\"function\"><span class=\"title\">run</span><span class=\"params\">()</span></span>\n  File <span class=\"string\">\"/Users/jbednar/anaconda/envs/ds/lib/python3.6/site-packages/numba/parfor.py\"</span>, line <span class=\"number\">271</span>, <span class=\"keyword\">in</span> run\n    self<span class=\"class\">.func_ir</span><span class=\"class\">.blocks</span> = <span class=\"function\"><span class=\"title\">simplify_CFG</span><span class=\"params\">(self.func_ir.blocks)</span></span>\n  File <span class=\"string\">\"/Users/jbednar/anaconda/envs/ds/lib/python3.6/site-packages/numba/ir_utils.py\"</span>, line <span class=\"number\">1103</span>, <span class=\"keyword\">in</span> simplify_CFG\n    block = blocks[p]\nKeyError: <span class=\"string\">'Failed at nopython (convert to parfors)\\n442'</span></code></pre>",
  "id": "5a626f7a5ade18be399aa96e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-01-19T22:21:46.524Z",
  "text": "Traceback:\n\n```\n$ python parfors.py\nTraceback (most recent call last):\n  File \"parfors.py\", line 17, in <module>\n    agg = cvs.raster(da)\n  File \"/Users/jbednar/anaconda/envs/ds/lib/python3.6/site-packages/datashader/core.py\", line 299, in raster\n    data = resample_2d(source_window, **kwargs)\n  File \"/Users/jbednar/anaconda/envs/ds/lib/python3.6/site-packages/datashader/resampling.py\", line 107, in resample_2d\n    return _mask_or_not(_resample_2d(src, mask, use_mask, ds_method, us_method, fill_value, mode_rank, out),\n  File \"/Users/jbednar/anaconda/envs/ds/lib/python3.6/site-packages/datashader/resampling.py\", line 264, in _resample_2d\n    return upsampling_method(src, mask, use_mask, fill_value, out)\n  File \"/Users/jbednar/anaconda/envs/ds/lib/python3.6/site-packages/numba/dispatcher.py\", line 307, in _compile_for_args\n    return self.compile(tuple(argtypes))\n  File \"/Users/jbednar/anaconda/envs/ds/lib/python3.6/site-packages/numba/dispatcher.py\", line 579, in compile\n    cres = self._compiler.compile(args, return_type)\n  File \"/Users/jbednar/anaconda/envs/ds/lib/python3.6/site-packages/numba/dispatcher.py\", line 80, in compile\n    flags=flags, locals=self.locals)\n  File \"/Users/jbednar/anaconda/envs/ds/lib/python3.6/site-packages/numba/compiler.py\", line 766, in compile_extra\n    return pipeline.compile_extra(func)\n  File \"/Users/jbednar/anaconda/envs/ds/lib/python3.6/site-packages/numba/compiler.py\", line 362, in compile_extra\n    return self._compile_bytecode()\n  File \"/Users/jbednar/anaconda/envs/ds/lib/python3.6/site-packages/numba/compiler.py\", line 725, in _compile_bytecode\n    return self._compile_core()\n  File \"/Users/jbednar/anaconda/envs/ds/lib/python3.6/site-packages/numba/compiler.py\", line 712, in _compile_core\n    res = pm.run(self.status)\n  File \"/Users/jbednar/anaconda/envs/ds/lib/python3.6/site-packages/numba/compiler.py\", line 248, in run\n    raise patched_exception\n  File \"/Users/jbednar/anaconda/envs/ds/lib/python3.6/site-packages/numba/compiler.py\", line 240, in run\n    stage()\n  File \"/Users/jbednar/anaconda/envs/ds/lib/python3.6/site-packages/numba/compiler.py\", line 497, in stage_parfor_pass\n    parfor_pass.run()\n  File \"/Users/jbednar/anaconda/envs/ds/lib/python3.6/site-packages/numba/parfor.py\", line 271, in run\n    self.func_ir.blocks = simplify_CFG(self.func_ir.blocks)\n  File \"/Users/jbednar/anaconda/envs/ds/lib/python3.6/site-packages/numba/ir_utils.py\", line 1103, in simplify_CFG\n    block = blocks[p]\nKeyError: 'Failed at nopython (convert to parfors)\\n442'\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "I can reproduce the problem locally",
  "id": "5a627228ae53c159030d636d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-01-19T22:33:12.729Z",
  "text": "I can reproduce the problem locally",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "The error is probably depending on the order of iteration of dictionary entries.  That\u2019s why it may disappear.",
  "id": "5a627484ba39a53f1a397141",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-01-19T22:43:16.206Z",
  "text": "The error is probably depending on the order of iteration of dictionary entries.  That\u2019s why it may disappear.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "I may have a fix.  Running the full numba testsuite now.",
  "id": "5a6274e2ae53c159030d70e7",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-01-19T22:44:50.966Z",
  "text": "I may have a fix.  Running the full numba testsuite now.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"jbednar\" class=\"mention\">@jbednar</span> , i have a patch: <span data-link-type=\"issue\" data-issue=\"2698\" data-issue-repo=\"numba/numba\" class=\"issue\">numba/numba#2698</span>",
  "id": "5a627887e01412265068e7bd",
  "issues": [
   {
    "number": "2698",
    "repo": "numba/numba"
   }
  ],
  "mentions": [
   {
    "screenName": "jbednar",
    "userId": "556df3e915522ed4b3e14e4c",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 12,
  "sent": "2018-01-19T23:00:23.392Z",
  "text": "@jbednar , i have a patch: https://github.com/numba/numba/pull/2698",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/jbednar",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1695496?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1695496?v=4&s=60",
   "displayName": "James A. Bednar",
   "gv": "4",
   "id": "556df3e915522ed4b3e14e4c",
   "url": "/jbednar",
   "username": "jbednar",
   "v": 15
  },
  "html": "That explains the shifty behavior!  Glad I was able to catch it eventually.",
  "id": "5a635269e0141226506c5a36",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-01-20T14:30:01.011Z",
  "text": "That explains the shifty behavior!  Glad I was able to catch it eventually.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/jbednar",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1695496?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1695496?v=4&s=60",
   "displayName": "James A. Bednar",
   "gv": "4",
   "id": "556df3e915522ed4b3e14e4c",
   "url": "/jbednar",
   "username": "jbednar",
   "v": 15
  },
  "html": "And thanks for the amazingly quick service!",
  "id": "5a635276ae53c1590310e3e9",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-01-20T14:30:14.236Z",
  "text": "And thanks for the amazingly quick service!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/bzm3r",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/4350451?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/4350451?v=4&s=60",
   "displayName": "Brian Merchant",
   "gv": "4",
   "id": "57bf5d9640f3a6eec0615b6e",
   "url": "/bzm3r",
   "username": "bzm3r",
   "v": 4
  },
  "html": "hi all, a research project i am the first author on has been accepted in &quot;Developmental Biology&quot;. the simulations i wrote for the project made heavy use of numba, and i would really like to give a formal shoutout under &quot;Acknowledgements&quot;. My current thought is to put in a sentence like &quot;Python models made use of the open source project numba[ref], to dramatically increase simulation speed.&quot; Ref: <a href=\"https://numba.pydata.org/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://numba.pydata.org/</a>",
  "id": "5a63b281517037a212d127fe",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-01-20T21:20:01.286Z",
  "text": "hi all, a research project i am the first author on has been accepted in \"Developmental Biology\". the simulations i wrote for the project made heavy use of numba, and i would really like to give a formal shoutout under \"Acknowledgements\". My current thought is to put in a sentence like \"Python models made use of the open source project numba[ref], to dramatically increase simulation speed.\" Ref: https://numba.pydata.org/",
  "unread": false,
  "urls": [
   {
    "url": "https://numba.pydata.org/"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/bzm3r",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/4350451?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/4350451?v=4&s=60",
   "displayName": "Brian Merchant",
   "gv": "4",
   "id": "57bf5d9640f3a6eec0615b6e",
   "url": "/bzm3r",
   "username": "bzm3r",
   "v": 4
  },
  "html": "what do you guys think of that?",
  "id": "5a63b2889cdc721e4fa8aecb",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-01-20T21:20:08.787Z",
  "text": "what do you guys think of that?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/bzm3r",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/4350451?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/4350451?v=4&s=60",
   "displayName": "Brian Merchant",
   "gv": "4",
   "id": "57bf5d9640f3a6eec0615b6e",
   "url": "/bzm3r",
   "username": "bzm3r",
   "v": 4
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"sklam\" class=\"mention\">@sklam</span> <span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span> please see above!",
  "id": "5a63b2949cdc721e4fa8aed6",
  "issues": [],
  "mentions": [
   {
    "screenName": "sklam",
    "userId": "55b689f50fc9f982beab2a24",
    "userIds": []
   },
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 14,
  "sent": "2018-01-20T21:20:20.652Z",
  "text": "@sklam @stuartarchibald please see above!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/bzm3r",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/4350451?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/4350451?v=4&s=60",
   "displayName": "Brian Merchant",
   "gv": "4",
   "id": "57bf5d9640f3a6eec0615b6e",
   "url": "/bzm3r",
   "username": "bzm3r",
   "v": 4
  },
  "html": "please let me know asap :)",
  "id": "5a63b2c7ae53c1590312a3da",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-01-20T21:21:11.811Z",
  "text": "please let me know asap :)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/mbargull",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/10598343?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/10598343?v=4&s=60",
   "displayName": "Marcel Bargull",
   "gv": "4",
   "id": "59e4b3ecd73408ce4f7a3dce",
   "url": "/mbargull",
   "username": "mbargull",
   "v": 79
  },
  "html": "<a href=\"http://numba.pydata.org/numba-doc/latest/user/faq.html?highlight=acm#how-do-i-reference-cite-acknowledge-numba-in-other-work\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://numba.pydata.org/numba-doc/latest/user/faq.html?highlight=acm#how-do-i-reference-cite-acknowledge-numba-in-other-work</a>",
  "id": "5a63b392e0141226506e10a8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-01-20T21:24:34.557Z",
  "text": "http://numba.pydata.org/numba-doc/latest/user/faq.html?highlight=acm#how-do-i-reference-cite-acknowledge-numba-in-other-work",
  "unread": false,
  "urls": [
   {
    "url": "http://numba.pydata.org/numba-doc/latest/user/faq.html?highlight=acm#how-do-i-reference-cite-acknowledge-numba-in-other-work"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/bzm3r",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/4350451?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/4350451?v=4&s=60",
   "displayName": "Brian Merchant",
   "gv": "4",
   "id": "57bf5d9640f3a6eec0615b6e",
   "url": "/bzm3r",
   "username": "bzm3r",
   "v": 4
  },
  "html": "nice, thanks!",
  "id": "5a63b8d65ade18be39a021f1",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-01-20T21:47:02.496Z",
  "text": "nice, thanks!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Morning, anyone present to answer a question?",
  "id": "5a6595935ade18be39a7e940",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-01-22T07:41:07.789Z",
  "text": "Morning, anyone present to answer a question?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/tamasgal",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1730350?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1730350?v=4&s=60",
   "displayName": "Tamas Gal",
   "gv": "4",
   "id": "561ba079d33f749381a916cf",
   "url": "/tamasgal",
   "username": "tamasgal",
   "v": 7
  },
  "html": "Just ask ",
  "id": "5a6595e0d9f895c360452152",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-01-22T07:42:24.334Z",
  "text": "Just ask ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "I&#39;m trying to calculate an expected value. I&#39;ve scipy-stats&#39; multivariate_normal.pdf as a function p. I have a function called to_integrate which calculates p(x)*w(x). I&#39;d like to use numba to speed up this computation as it needs to be done many times for integration. However, numba can&#39;t determine the Numba type of a class &#39;method&#39;.",
  "id": "5a659633d9f895c36045229c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-01-22T07:43:47.683Z",
  "text": "I'm trying to calculate an expected value. I've scipy-stats' multivariate_normal.pdf as a function p. I have a function called to_integrate which calculates p(x)*w(x). I'd like to use numba to speed up this computation as it needs to be done many times for integration. However, numba can't determine the Numba type of a class 'method'.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "I tried using p = jit(p) but that yields &quot;invalid usage of + with parameters ((float64 x 6), array(float64, 1d, C))",
  "id": "5a65967598927d57451d3872",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-01-22T07:44:53.974Z",
  "text": "I tried using p = jit(p) but that yields \"invalid usage of + with parameters ((float64 x 6), array(float64, 1d, C))",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "(latter being a typing error)",
  "id": "5a6596d65a9ebe4f75b9f73e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-01-22T07:46:30.534Z",
  "text": "(latter being a typing error)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/tamasgal",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1730350?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1730350?v=4&s=60",
   "displayName": "Tamas Gal",
   "gv": "4",
   "id": "561ba079d33f749381a916cf",
   "url": "/tamasgal",
   "username": "tamasgal",
   "v": 7
  },
  "html": "Do you have a code snippet?",
  "id": "5a65986ace68c3bc74e9af5c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-01-22T07:53:14.946Z",
  "text": "Do you have a code snippet?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Yeah sec",
  "id": "5a6598735ade18be39a7f925",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-01-22T07:53:23.712Z",
  "text": "Yeah sec",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/tamasgal",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1730350?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1730350?v=4&s=60",
   "displayName": "Tamas Gal",
   "gv": "4",
   "id": "561ba079d33f749381a916cf",
   "url": "/tamasgal",
   "username": "tamasgal",
   "v": 7
  },
  "html": "When using numba it\u2019s always better to go low level. It sounds like you are using some custom classes ",
  "id": "5a659889ae53c159031a8856",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-01-22T07:53:45.156Z",
  "text": "When using numba it\u2019s always better to go low level. It sounds like you are using some custom classes ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "<a href=\"https://ybin.me/p/ef5bb6659b916d1e#Nfx9TBJJ7wlG5U0vuxyobZCu2s5EN6EKXDD5aY47nFY=\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://ybin.me/p/ef5bb6659b916d1e#Nfx9TBJJ7wlG5U0vuxyobZCu2s5EN6EKXDD5aY47nFY=</a>",
  "id": "5a6598dfd9f895c360452e13",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-01-22T07:55:11.516Z",
  "text": "https://ybin.me/p/ef5bb6659b916d1e#Nfx9TBJJ7wlG5U0vuxyobZCu2s5EN6EKXDD5aY47nFY=",
  "unread": false,
  "urls": [
   {
    "url": "https://ybin.me/p/ef5bb6659b916d1e#Nfx9TBJJ7wlG5U0vuxyobZCu2s5EN6EKXDD5aY47nFY="
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "It looks horrible, I am aware",
  "id": "5a659902517037a212d927c3",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-01-22T07:55:46.252Z",
  "text": "It looks horrible, I am aware",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "But numba didn&#39;t want to cooperate with tuple() either.",
  "id": "5a6599416117191e619763f9",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-01-22T07:56:49.144Z",
  "text": "But numba didn't want to cooperate with tuple() either.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/tamasgal",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1730350?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1730350?v=4&s=60",
   "displayName": "Tamas Gal",
   "gv": "4",
   "id": "561ba079d33f749381a916cf",
   "url": "/tamasgal",
   "username": "tamasgal",
   "v": 7
  },
  "html": "Ah you are jitting the scipy function too",
  "id": "5a65998a5a9ebe4f75ba03d4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-01-22T07:58:02.317Z",
  "text": "Ah you are jitting the scipy function too",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "It doesn&#39;t work without jitting the scipy function either :P",
  "id": "5a6599a2ce68c3bc74e9b6ce",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-01-22T07:58:26.714Z",
  "text": "It doesn't work without jitting the scipy function either :P",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/tamasgal",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1730350?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1730350?v=4&s=60",
   "displayName": "Tamas Gal",
   "gv": "4",
   "id": "561ba079d33f749381a916cf",
   "url": "/tamasgal",
   "username": "tamasgal",
   "v": 7
  },
  "html": "I\u2019m pretty sure this is too much for numba ",
  "id": "5a6599a65ade18be39a7ff63",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-01-22T07:58:30.057Z",
  "text": "I\u2019m pretty sure this is too much for numba ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "so your suggestion is to just reimplement the multivariate_normal function?",
  "id": "5a6599b6517037a212d92aa8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-01-22T07:58:46.610Z",
  "text": "so your suggestion is to just reimplement the multivariate_normal function?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/tamasgal",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1730350?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1730350?v=4&s=60",
   "displayName": "Tamas Gal",
   "gv": "4",
   "id": "561ba079d33f749381a916cf",
   "url": "/tamasgal",
   "username": "tamasgal",
   "v": 7
  },
  "html": "Also if you are redefining the function in each iteration, you\u2019ll get a much slower code \ud83d\ude09",
  "id": "5a6599d098927d57451d481d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-01-22T07:59:12.157Z",
  "text": "Also if you are redefining the function in each iteration, you\u2019ll get a much slower code \ud83d\ude09",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "I am aware",
  "id": "5a6599e36117191e61976714",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-01-22T07:59:31.667Z",
  "text": "I am aware",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "At current complexity level, it would take 140 days to do the entire thign",
  "id": "5a6599ec6117191e6197672c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-01-22T07:59:40.408Z",
  "text": "At current complexity level, it would take 140 days to do the entire thign",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/tamasgal",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1730350?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1730350?v=4&s=60",
   "displayName": "Tamas Gal",
   "gv": "4",
   "id": "561ba079d33f749381a916cf",
   "url": "/tamasgal",
   "username": "tamasgal",
   "v": 7
  },
  "html": "Yes probably the easiest way is to reimplement it, although it sounds a bit horrible ",
  "id": "5a6599fb98927d57451d48dd",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-01-22T07:59:55.291Z",
  "text": "Yes probably the easiest way is to reimplement it, although it sounds a bit horrible ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": " \u00af_(\u30c4)_/\u00af",
  "id": "5a659a14ae53c159031a9007",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-01-22T08:00:20.268Z",
  "text": " \u00af\\_(\u30c4)_/\u00af",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "I mean look at that horrible horrible tuple creation",
  "id": "5a659a206117191e6197683e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-01-22T08:00:32.344Z",
  "text": "I mean look at that horrible horrible tuple creation",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Can&#39;t sink any lower than that, really",
  "id": "5a659a27e01412265076071f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-01-22T08:00:39.757Z",
  "text": "Can't sink any lower than that, really",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/tamasgal",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1730350?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1730350?v=4&s=60",
   "displayName": "Tamas Gal",
   "gv": "4",
   "id": "561ba079d33f749381a916cf",
   "url": "/tamasgal",
   "username": "tamasgal",
   "v": 7
  },
  "html": "jitting scipy function will almost certainly never work, too much going on under the hood ",
  "id": "5a659a2d98927d57451d4981",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-01-22T08:00:45.313Z",
  "text": "jitting scipy function will almost certainly never work, too much going on under the hood ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/tamasgal",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1730350?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1730350?v=4&s=60",
   "displayName": "Tamas Gal",
   "gv": "4",
   "id": "561ba079d33f749381a916cf",
   "url": "/tamasgal",
   "username": "tamasgal",
   "v": 7
  },
  "html": "Also higher level functions are very tricky in numba, unfortunately ",
  "id": "5a659a3bce68c3bc74e9ba1b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-01-22T08:00:59.962Z",
  "text": "Also higher level functions are very tricky in numba, unfortunately ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/tamasgal",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1730350?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1730350?v=4&s=60",
   "displayName": "Tamas Gal",
   "gv": "4",
   "id": "561ba079d33f749381a916cf",
   "url": "/tamasgal",
   "username": "tamasgal",
   "v": 7
  },
  "html": "\ud83d\ude02",
  "id": "5a659a446117191e6197693a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-01-22T08:01:08.575Z",
  "text": "\ud83d\ude02",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Yeah",
  "id": "5a659a445a9ebe4f75ba0761",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-01-22T08:01:08.956Z",
  "text": "Yeah",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Compiling is hard mayne",
  "id": "5a659a4bce68c3bc74e9ba50",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-01-22T08:01:15.636Z",
  "text": "Compiling is hard mayne",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/tamasgal",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1730350?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1730350?v=4&s=60",
   "displayName": "Tamas Gal",
   "gv": "4",
   "id": "561ba079d33f749381a916cf",
   "url": "/tamasgal",
   "username": "tamasgal",
   "v": 7
  },
  "html": "Chances are too high that there is something which triggers nopython mode",
  "id": "5a659a616117191e61976a5d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-01-22T08:01:37.796Z",
  "text": "Chances are too high that there is something which triggers nopython mode",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "You mean nonopython mode?",
  "id": "5a659a74d9f895c360453576",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-01-22T08:01:56.649Z",
  "text": "You mean nonopython mode?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/tamasgal",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1730350?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1730350?v=4&s=60",
   "displayName": "Tamas Gal",
   "gv": "4",
   "id": "561ba079d33f749381a916cf",
   "url": "/tamasgal",
   "username": "tamasgal",
   "v": 7
  },
  "html": "Even a dict lookup is enough",
  "id": "5a659a77ae53c159031a9305",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-01-22T08:01:59.916Z",
  "text": "Even a dict lookup is enough",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/tamasgal",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1730350?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1730350?v=4&s=60",
   "displayName": "Tamas Gal",
   "gv": "4",
   "id": "561ba079d33f749381a916cf",
   "url": "/tamasgal",
   "username": "tamasgal",
   "v": 7
  },
  "html": "Yes",
  "id": "5a659a7f5a9ebe4f75ba09f7",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-01-22T08:02:07.361Z",
  "text": "Yes",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Yeah.",
  "id": "5a659a84ae53c159031a9327",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-01-22T08:02:12.348Z",
  "text": "Yeah.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/tamasgal",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1730350?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1730350?v=4&s=60",
   "displayName": "Tamas Gal",
   "gv": "4",
   "id": "561ba079d33f749381a916cf",
   "url": "/tamasgal",
   "username": "tamasgal",
   "v": 7
  },
  "html": "Nonopython mode \ud83d\ude09",
  "id": "5a659a860ad3e04b1b512135",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-01-22T08:02:14.204Z",
  "text": "Nonopython mode \ud83d\ude09",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Also known as yespython mode.",
  "id": "5a659a8d517037a212d92f7f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-01-22T08:02:21.199Z",
  "text": "Also known as yespython mode.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/tamasgal",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1730350?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1730350?v=4&s=60",
   "displayName": "Tamas Gal",
   "gv": "4",
   "id": "561ba079d33f749381a916cf",
   "url": "/tamasgal",
   "username": "tamasgal",
   "v": 7
  },
  "html": "\ud83d\ude05",
  "id": "5a659a9898927d57451d4ba8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-01-22T08:02:32.788Z",
  "text": "\ud83d\ude05",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/tamasgal",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1730350?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1730350?v=4&s=60",
   "displayName": "Tamas Gal",
   "gv": "4",
   "id": "561ba079d33f749381a916cf",
   "url": "/tamasgal",
   "username": "tamasgal",
   "v": 7
  },
  "html": "You can also have a look at the Julia language if you like JITting btw",
  "id": "5a659ab0517037a212d93017",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-01-22T08:02:56.962Z",
  "text": "You can also have a look at the Julia language if you like JITting btw",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "I&#39;m not a particular fan of JIT&#39;ing in specific",
  "id": "5a659ac25a9ebe4f75ba0afa",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-01-22T08:03:14.084Z",
  "text": "I'm not a particular fan of JIT'ing in specific",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/tamasgal",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1730350?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1730350?v=4&s=60",
   "displayName": "Tamas Gal",
   "gv": "4",
   "id": "561ba079d33f749381a916cf",
   "url": "/tamasgal",
   "username": "tamasgal",
   "v": 7
  },
  "html": "You can call your Python code from Julia without overhead ",
  "id": "5a659ac4e01412265076097e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-01-22T08:03:16.810Z",
  "text": "You can call your Python code from Julia without overhead ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "I just want faest",
  "id": "5a659ac7d9f895c36045370e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-01-22T08:03:19.682Z",
  "text": "I just want faest",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/tamasgal",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1730350?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1730350?v=4&s=60",
   "displayName": "Tamas Gal",
   "gv": "4",
   "id": "561ba079d33f749381a916cf",
   "url": "/tamasgal",
   "username": "tamasgal",
   "v": 7
  },
  "html": "Julia is \ud83d\ude09",
  "id": "5a659ace98927d57451d4c5f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-01-22T08:03:26.901Z",
  "text": "Julia is \ud83d\ude09",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "I am aware",
  "id": "5a659b1c0ad3e04b1b512431",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-01-22T08:04:44.572Z",
  "text": "I am aware",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Wanna learn rust tho",
  "id": "5a659b286117191e61976e3e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-01-22T08:04:56.451Z",
  "text": "Wanna learn rust tho",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Anyway, thanks for your help",
  "id": "5a659b350ad3e04b1b512594",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-01-22T08:05:09.608Z",
  "text": "Anyway, thanks for your help",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/tamasgal",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1730350?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1730350?v=4&s=60",
   "displayName": "Tamas Gal",
   "gv": "4",
   "id": "561ba079d33f749381a916cf",
   "url": "/tamasgal",
   "username": "tamasgal",
   "v": 7
  },
  "html": "\ud83d\udc4d",
  "id": "5a659b3ae014122650760cd2",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-01-22T08:05:14.972Z",
  "text": "\ud83d\udc4d",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/lifengjin",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/10468599?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/10468599?v=4&s=60",
   "displayName": "lifengjin",
   "gv": "4",
   "id": "5a677f24d73408ce4f89c42d",
   "url": "/lifengjin",
   "username": "lifengjin",
   "v": 2
  },
  "html": "hi. is it possible to do something like CUDA:   extern <strong>shared</strong> float temp[]; ",
  "id": "5a677f5a98927d574528462b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-01-23T18:30:50.392Z",
  "text": "hi. is it possible to do something like CUDA:   extern __shared__ float temp[]; ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"lifengjin\" class=\"mention\">@lifengjin</span> , it\u2019s possible but not well advertised because the API is a bit ugly and limited.  You just need to \u201callocate&quot; a shared array with 0 size and pass in the sharedmem size at kernel launch.",
  "id": "5a6784556117191e61a2785d",
  "issues": [],
  "mentions": [
   {
    "screenName": "lifengjin",
    "userId": "5a677f24d73408ce4f89c42d",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 19,
  "sent": "2018-01-23T18:52:05.607Z",
  "text": "@lifengjin , it\u2019s possible but not well advertised because the API is a bit ugly and limited.  You just need to \u201callocate\" a shared array with 0 size and pass in the sharedmem size at kernel launch.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "See example usage at: <a href=\"https://github.com/numba/numba/blob/be5fb1f32dab825333e4d1676fb08552cbf34851/numba/cuda/tests/cudapy/test_sync.py#L33-L38\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://github.com/numba/numba/blob/be5fb1f32dab825333e4d1676fb08552cbf34851/numba/cuda/tests/cudapy/test_sync.py#L33-L38</a>",
  "id": "5a67849eae53c1590325f018",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 20,
  "sent": "2018-01-23T18:53:18.098Z",
  "text": "See example usage at: https://github.com/numba/numba/blob/be5fb1f32dab825333e4d1676fb08552cbf34851/numba/cuda/tests/cudapy/test_sync.py#L33-L38",
  "unread": false,
  "urls": [
   {
    "url": "https://github.com/numba/numba/blob/be5fb1f32dab825333e4d1676fb08552cbf34851/numba/cuda/tests/cudapy/test_sync.py#L33-L38"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/lifengjin",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/10468599?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/10468599?v=4&s=60",
   "displayName": "lifengjin",
   "gv": "4",
   "id": "5a677f24d73408ce4f89c42d",
   "url": "/lifengjin",
   "username": "lifengjin",
   "v": 2
  },
  "html": "that&#39;s what I want. thanks a lot.",
  "id": "5a6784be98927d57452868aa",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 20,
  "sent": "2018-01-23T18:53:50.051Z",
  "text": "that's what I want. thanks a lot.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Question: I want to convert a small list to tuple in a jitted function, but Numba can&#39;t determine the type of tuple. Any workarounds? I already tried getting the output of the other function to tuple, but numba doesn&#39;t play nice with comprehensions",
  "id": "5a69b0cd98927d574533df59",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-01-25T10:26:21.196Z",
  "text": "Question: I want to convert a small list to tuple in a jitted function, but Numba can't determine the type of tuple. Any workarounds? I already tried getting the output of the other function to tuple, but numba doesn't play nice with comprehensions",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Nevermind, I found <span data-link-type=\"mention\" data-screen-name=\"sklam\" class=\"mention\">@sklam</span>&#39;s workaround, linked from here: <a href=\"https://groups.google.com/a/continuum.io/d/topic/numba-users/8-qIin0ntQ4\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://groups.google.com/a/continuum.io/d/topic/numba-users/8-qIin0ntQ4</a>",
  "id": "5a69b6b698927d57453400cc",
  "issues": [],
  "mentions": [
   {
    "screenName": "sklam",
    "userId": "55b689f50fc9f982beab2a24",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 18,
  "sent": "2018-01-25T10:51:34.024Z",
  "text": "Nevermind, I found @sklam's workaround, linked from here: https://groups.google.com/a/continuum.io/d/topic/numba-users/8-qIin0ntQ4",
  "unread": false,
  "urls": [
   {
    "url": "https://groups.google.com/a/continuum.io/d/topic/numba-users/8-qIin0ntQ4"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/quilder",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/26138187?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/26138187?v=4&s=60",
   "displayName": "quilder",
   "gv": "4",
   "id": "5a6cdbdfd73408ce4f8a6dad",
   "url": "/quilder",
   "username": "quilder"
  },
  "html": "Is there a way to use numba on a complete library, without having to decorate every function?",
  "id": "5a6cdc4ce217167e2c0a8ee5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-01-27T20:08:44.805Z",
  "text": "Is there a way to use numba on a complete library, without having to decorate every function?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/LGro",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/4706479?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/4706479?v=4&s=60",
   "displayName": "Lukas Gro\u00dfberger",
   "gv": "4",
   "id": "572f3970c43b8c601971c016",
   "url": "/LGro",
   "username": "LGro",
   "v": 3
  },
  "html": "Hi folks, thanks for the amazing work on numba.jit! I&#39;m also diving into the currently progressing CUDA stuff to build kernels from python code, which seems very promising.<br>I have one question that I didn&#39;t find an answer to in any of the examples. I have a main function A which repeatedly calls a device function B. This device function B should construct an array based on arguments it is given and return that array. Is there a convenient way to create an array (not constant but varying in size, dependent on the call) in GPU memory from Python/numba (either in A or B)? Maybe this is also not appropriate CUDA style, in which case I&#39;d be happy about a pointer to what architectural concepts I might still be missing. I tried <code>numba.cuda.cudadrv.devicearray</code> which doesn&#39;t work in a device function, does it?",
  "id": "5a6f1ae440259f1a33bf8e22",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-01-29T13:00:20.513Z",
  "text": "Hi folks, thanks for the amazing work on numba.jit! I'm also diving into the currently progressing CUDA stuff to build kernels from python code, which seems very promising.\nI have one question that I didn't find an answer to in any of the examples. I have a main function A which repeatedly calls a device function B. This device function B should construct an array based on arguments it is given and return that array. Is there a convenient way to create an array (not constant but varying in size, dependent on the call) in GPU memory from Python/numba (either in A or B)? Maybe this is also not appropriate CUDA style, in which case I'd be happy about a pointer to what architectural concepts I might still be missing. I tried `numba.cuda.cudadrv.devicearray` which doesn't work in a device function, does it?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/lifengjin",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/10468599?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/10468599?v=4&s=60",
   "displayName": "lifengjin",
   "gv": "4",
   "id": "5a677f24d73408ce4f89c42d",
   "url": "/lifengjin",
   "username": "lifengjin",
   "v": 2
  },
  "html": "Do streams work with Pyculib? I tried to assign different streams to different Blas instances, but I didn&#39;t see any effect on runtime. Is there anything I should pay attention to for using streams with Pyculib?",
  "id": "5a6f3eb9e217167e2c1586c8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-01-29T15:33:13.620Z",
  "text": "Do streams work with Pyculib? I tried to assign different streams to different Blas instances, but I didn't see any effect on runtime. Is there anything I should pay attention to for using streams with Pyculib?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"quilder\" class=\"mention\">@quilder</span> , no, numba is a per-function jit and it\u2019s limitation requires attention of the developer on every function decorated.  So, there is no builtin way to decorate an entire library.",
  "id": "5a6f4a614a6b0dd32b612d57",
  "issues": [],
  "mentions": [
   {
    "screenName": "quilder",
    "userId": "5a6cdbdfd73408ce4f8a6dad",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 15,
  "sent": "2018-01-29T16:22:57.829Z",
  "text": "@quilder , no, numba is a per-function jit and it\u2019s limitation requires attention of the developer on every function decorated.  So, there is no builtin way to decorate an entire library.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "<p><span data-link-type=\"mention\" data-screen-name=\"LGro\" class=\"mention\">@LGro</span> , dynamic memory allocation on the GPU is very slow and limited (i.e, you need to know the heap size in advance).  So, we don\u2019t support it since it is rarely useful.  There are only static-size array allocation (see doc starting at <a href=\"http://numba.pydata.org/numba-doc/latest/cuda/memory.html#shared-memory-and-thread-synchronization\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://numba.pydata.org/numba-doc/latest/cuda/memory.html#shared-memory-and-thread-synchronization</a>) .  </p><p>If your algorithm requires dynamic allocation of variable size array, you can:</p><ol>\n<li>make each thread output the size it needs;  </li>\n<li>do one allocation on the host side for the array (size = sum of all thread needs); </li>\n<li>let each gpu thread use it\u2019s slice of the array.</li>\n</ol>\n",
  "id": "5a6f4c4c40259f1a33c0e44f",
  "issues": [],
  "mentions": [
   {
    "screenName": "LGro",
    "userId": "572f3970c43b8c601971c016",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 15,
  "sent": "2018-01-29T16:31:08.474Z",
  "text": "@LGro , dynamic memory allocation on the GPU is very slow and limited (i.e, you need to know the heap size in advance).  So, we don\u2019t support it since it is rarely useful.  There are only static-size array allocation (see doc starting at http://numba.pydata.org/numba-doc/latest/cuda/memory.html#shared-memory-and-thread-synchronization) .  \n\nIf your algorithm requires dynamic allocation of variable size array, you can:\n\n1. make each thread output the size it needs;  \n2. do one allocation on the host side for the array (size = sum of all thread needs); \n3. let each gpu thread use it\u2019s slice of the array.\n",
  "unread": false,
  "urls": [
   {
    "url": "http://numba.pydata.org/numba-doc/latest/cuda/memory.html#shared-memory-and-thread-synchronization"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/LGro",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/4706479?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/4706479?v=4&s=60",
   "displayName": "Lukas Gro\u00dfberger",
   "gv": "4",
   "id": "572f3970c43b8c601971c016",
   "url": "/LGro",
   "username": "LGro",
   "v": 3
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"sklam\" class=\"mention\">@sklam</span> thanks a lot, I already suspected this and now have viable ideas about possible solutions",
  "id": "5a6f4df74a6b0dd32b614ba2",
  "issues": [],
  "mentions": [
   {
    "screenName": "sklam",
    "userId": "55b689f50fc9f982beab2a24",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 17,
  "sent": "2018-01-29T16:38:15.383Z",
  "text": "@sklam thanks a lot, I already suspected this and now have viable ideas about possible solutions",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"lifengjin\" class=\"mention\">@lifengjin</span> , There are many reasons for different streams of computation to not overlapping.    For instance, there may not be enough hardware resources;  Or, are there implicitly synchronizing data transfer.  I\u2019d usually use <a href=\"http://docs.nvidia.com/cuda/profiler-users-guide/index.html#visual\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">NVVP</a> to profile and visualize the execution timeline in order to diagnose the problem.",
  "id": "5a6f4dfb494bd0f5303d6096",
  "issues": [],
  "mentions": [
   {
    "screenName": "lifengjin",
    "userId": "5a677f24d73408ce4f89c42d",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 17,
  "sent": "2018-01-29T16:38:19.570Z",
  "text": "@lifengjin , There are many reasons for different streams of computation to not overlapping.    For instance, there may not be enough hardware resources;  Or, are there implicitly synchronizing data transfer.  I\u2019d usually use [NVVP](http://docs.nvidia.com/cuda/profiler-users-guide/index.html#visual) to profile and visualize the execution timeline in order to diagnose the problem.",
  "unread": false,
  "urls": [
   {
    "url": "http://docs.nvidia.com/cuda/profiler-users-guide/index.html#visual"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/lifengjin",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/10468599?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/10468599?v=4&s=60",
   "displayName": "lifengjin",
   "gv": "4",
   "id": "5a677f24d73408ce4f89c42d",
   "url": "/lifengjin",
   "username": "lifengjin",
   "v": 2
  },
  "html": "OK, thanks, I will try that.",
  "id": "5a6f4f0a98927d57454f3615",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-01-29T16:42:50.689Z",
  "text": "OK, thanks, I will try that.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/g/u/SamaBerenjian_twitter",
   "avatarUrlMedium": "https://abs.twimg.com/sticky/default_profile_images/default_profile_normal.png?s=128",
   "avatarUrlSmall": "https://abs.twimg.com/sticky/default_profile_images/default_profile_normal.png?s=60",
   "displayName": "Samaneh Berenjian",
   "id": "5a4fb90bd73408ce4f865c0f",
   "url": "/SamaBerenjian_twitter",
   "username": "SamaBerenjian_twitter"
  },
  "html": "hi all, I know that in llvm we can execute the IR file using llc. Wht about  llvmlite. How  is this going in llvmlite?",
  "id": "5a6f9ebf47505419173d8657",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-01-29T22:22:55.765Z",
  "text": "hi all, I know that in llvm we can execute the IR file using llc. Wht about  llvmlite. How  is this going in llvmlite?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"SamaBerenjian_twitter\" class=\"mention\">@SamaBerenjian_twitter</span> , see example at <a href=\"http://llvmlite.readthedocs.io/en/latest/user-guide/binding/examples.html\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://llvmlite.readthedocs.io/en/latest/user-guide/binding/examples.html</a>.  You can replace <code>llvm_ir</code> with your IR.",
  "id": "5a6faaef4a6b0dd32b63a4f2",
  "issues": [],
  "mentions": [
   {
    "screenName": "SamaBerenjian_twitter",
    "userId": "5a4fb90bd73408ce4f865c0f",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 15,
  "sent": "2018-01-29T23:14:55.402Z",
  "text": "@SamaBerenjian_twitter , see example at http://llvmlite.readthedocs.io/en/latest/user-guide/binding/examples.html.  You can replace `llvm_ir` with your IR.",
  "unread": false,
  "urls": [
   {
    "url": "http://llvmlite.readthedocs.io/en/latest/user-guide/binding/examples.html"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Back again with more questions.  Following code: <a href=\"https://ybin.me/p/eafcb595a79786f7#3/OiSb6hWPfLh8TFZJ8XXvPmjp3EEQWiZ1HxNEvJwJk=\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://ybin.me/p/eafcb595a79786f7#3/OiSb6hWPfLh8TFZJ8XXvPmjp3EEQWiZ1HxNEvJwJk=</a><br>Yields following error message: <a href=\"https://ybin.me/p/01b691b67fe9329a#gfNbNHdreCmEc2/H1GD2vEg4CF+OFLmSQhQ7T/HvtxE=\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://ybin.me/p/01b691b67fe9329a#gfNbNHdreCmEc2/H1GD2vEg4CF+OFLmSQhQ7T/HvtxE=</a>",
  "id": "5a7088ce475054191742757b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-01-30T15:01:34.952Z",
  "text": "Back again with more questions.  Following code: https://ybin.me/p/eafcb595a79786f7#3/OiSb6hWPfLh8TFZJ8XXvPmjp3EEQWiZ1HxNEvJwJk=\nYields following error message: https://ybin.me/p/01b691b67fe9329a#gfNbNHdreCmEc2/H1GD2vEg4CF+OFLmSQhQ7T/HvtxE=",
  "unread": false,
  "urls": [
   {
    "url": "https://ybin.me/p/eafcb595a79786f7#3/OiSb6hWPfLh8TFZJ8XXvPmjp3EEQWiZ1HxNEvJwJk="
   },
   {
    "url": "https://ybin.me/p/01b691b67fe9329a#gfNbNHdreCmEc2/H1GD2vEg4CF+OFLmSQhQ7T/HvtxE="
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "I can&#39;t seem to figure out why. Closures are supposed to be supported, so why is it complaining about the thing I defined in the outer scope?",
  "id": "5a7088e5ac509d207d97b170",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-01-30T15:01:57.454Z",
  "text": "I can't seem to figure out why. Closures are supposed to be supported, so why is it complaining about the thing I defined in the outer scope?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/lifengjin",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/10468599?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/10468599?v=4&s=60",
   "displayName": "lifengjin",
   "gv": "4",
   "id": "5a677f24d73408ce4f89c42d",
   "url": "/lifengjin",
   "username": "lifengjin",
   "v": 2
  },
  "html": "I see that the MemoryPointer class has a view method which seems to return a view of a subarray on the device. This seems very useful. Is it working?",
  "id": "5a708f4340259f1a33c7f6d3",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-01-30T15:29:07.834Z",
  "text": "I see that the MemoryPointer class has a view method which seems to return a view of a subarray on the device. This seems very useful. Is it working?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/lifengjin",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/10468599?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/10468599?v=4&s=60",
   "displayName": "lifengjin",
   "gv": "4",
   "id": "5a677f24d73408ce4f89c42d",
   "url": "/lifengjin",
   "username": "lifengjin",
   "v": 2
  },
  "html": "it does work. awesome.",
  "id": "5a709287e217167e2c1d4a2c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-01-30T15:43:03.318Z",
  "text": "it does work. awesome.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"Rik-de-Kort\" class=\"mention\">@Rik-de-Kort</span> , numba doesn\u2019t support referencing a <code>list</code> (<code>step_sizes</code>) as a free variable.       You can instead pass it in to the function.  Or, if <code>step_sizes</code> is constant inside <code>result()</code>, you can make it a numpy array instead.  ",
  "id": "5a70bec398927d5745578bbb",
  "issues": [],
  "mentions": [
   {
    "screenName": "Rik-de-Kort",
    "userId": "5a0ea31cd73408ce4f7f000d",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 14,
  "sent": "2018-01-30T18:51:47.790Z",
  "text": "@Rik-de-Kort , numba doesn\u2019t support referencing a `list` (`step_sizes`) as a free variable.       You can instead pass it in to the function.  Or, if `step_sizes` is constant inside `result()`, you can make it a numpy array instead.  ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"lifengjin\" class=\"mention\">@lifengjin</span> , I see that you are using non-public API (the MemoryPointer class).  Beware that the non-public API is not guaranteed to be stable.  I\u2019d like to know what you are doing so that I can suggest alternative public API for you.",
  "id": "5a70bf6a4a6b0dd32b69a67f",
  "issues": [],
  "mentions": [
   {
    "screenName": "lifengjin",
    "userId": "5a677f24d73408ce4f89c42d",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 14,
  "sent": "2018-01-30T18:54:34.358Z",
  "text": "@lifengjin , I see that you are using non-public API (the MemoryPointer class).  Beware that the non-public API is not guaranteed to be stable.  I\u2019d like to know what you are doing so that I can suggest alternative public API for you.\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/lifengjin",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/10468599?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/10468599?v=4&s=60",
   "displayName": "lifengjin",
   "gv": "4",
   "id": "5a677f24d73408ce4f89c42d",
   "url": "/lifengjin",
   "username": "lifengjin",
   "v": 2
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"sklam\" class=\"mention\">@sklam</span> Yeah I am encountering some problems. My use case is that I want to have a 3D tensor where I need to do two things to do it. First I need to build this tensor element by element and then use rows of the tensor to do things. In the building phase all of the tensor needs to be accessible. The pseudo code looks like this:<pre><code class=\"python\">A = tensor(n, m, o)\nforeach element <span class=\"keyword\">in</span> A:\n    A[element] = compute_element(A, element)\nforeach x, y <span class=\"keyword\">in</span> n, m:\n    some_number = sample_from(A[x, y, :])</code></pre>",
  "id": "5a70e32036de78850ccd8c4c",
  "issues": [],
  "mentions": [
   {
    "screenName": "sklam",
    "userId": "55b689f50fc9f982beab2a24",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 13,
  "sent": "2018-01-30T21:26:56.349Z",
  "text": "@sklam Yeah I am encountering some problems. My use case is that I want to have a 3D tensor where I need to do two things to do it. First I need to build this tensor element by element and then use rows of the tensor to do things. In the building phase all of the tensor needs to be accessible. The pseudo code looks like this:\n```python\nA = tensor(n, m, o)\nforeach element in A:\n    A[element] = compute_element(A, element)\nforeach x, y in n, m:\n    some_number = sample_from(A[x, y, :])\n```\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"lifengjin\" class=\"mention\">@lifengjin</span>, <span data-link-type=\"mention\" data-screen-name=\"njwhite\" class=\"mention\">@njwhite</span> has a PR (<span data-link-type=\"issue\" data-issue=\"2681\" data-issue-repo=\"numba/numba\" class=\"issue\">numba/numba#2681</span>) that will likely solve your problem.  It implements assignments to numba\u2019s DeviceNDArray.",
  "id": "5a70eb8b6117191e61d34575",
  "issues": [
   {
    "number": "2681",
    "repo": "numba/numba"
   }
  ],
  "mentions": [
   {
    "screenName": "lifengjin",
    "userId": "5a677f24d73408ce4f89c42d",
    "userIds": []
   },
   {
    "screenName": "njwhite",
    "userId": "5a4d0cb1d73408ce4f85e996",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 15,
  "sent": "2018-01-30T22:02:51.510Z",
  "text": "@lifengjin, @njwhite has a PR (https://github.com/numba/numba/pull/2681) that will likely solve your problem.  It implements assignments to numba\u2019s DeviceNDArray.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/lifengjin",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/10468599?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/10468599?v=4&s=60",
   "displayName": "lifengjin",
   "gv": "4",
   "id": "5a677f24d73408ce4f89c42d",
   "url": "/lifengjin",
   "username": "lifengjin",
   "v": 2
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"sklam\" class=\"mention\">@sklam</span> The first loop part is done with a kernel, so I don&#39;t need direct assignment to do it so far. But I do need slicing and that was what I wanted to do with MemoryPointers because they allow me to slice an array arbitrarily. The second loop is done with a couple of cublas function calls.",
  "id": "5a70ed7a7dcd63481ff8e28b",
  "issues": [],
  "mentions": [
   {
    "screenName": "sklam",
    "userId": "55b689f50fc9f982beab2a24",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 14,
  "sent": "2018-01-30T22:11:06.617Z",
  "text": "@sklam The first loop part is done with a kernel, so I don't need direct assignment to do it so far. But I do need slicing and that was what I wanted to do with MemoryPointers because they allow me to slice an array arbitrarily. The second loop is done with a couple of cublas function calls.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"lifengjin\" class=\"mention\">@lifengjin</span> , is DeviceNDArray slicing not working for you?  If so, we can look at fixing it.",
  "id": "5a70ee024750541917451c09",
  "issues": [],
  "mentions": [
   {
    "screenName": "lifengjin",
    "userId": "5a677f24d73408ce4f89c42d",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 14,
  "sent": "2018-01-30T22:13:22.619Z",
  "text": "@lifengjin , is DeviceNDArray slicing not working for you?  If so, we can look at fixing it.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/lifengjin",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/10468599?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/10468599?v=4&s=60",
   "displayName": "lifengjin",
   "gv": "4",
   "id": "5a677f24d73408ce4f89c42d",
   "url": "/lifengjin",
   "username": "lifengjin",
   "v": 2
  },
  "html": "Erm. Can you just slice an device array like ary[x, y, :]? I didn&#39;t know that.",
  "id": "5a70ee27494bd0f530470273",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-01-30T22:13:59.700Z",
  "text": "Erm. Can you just slice an device array like ary[x, y, :]? I didn't know that.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "Yes.  There were also some recently merged patches that make it work for more cases.",
  "id": "5a70ee7b4750541917451ef3",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-01-30T22:15:23.092Z",
  "text": "Yes.  There were also some recently merged patches that make it work for more cases.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/lifengjin",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/10468599?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/10468599?v=4&s=60",
   "displayName": "lifengjin",
   "gv": "4",
   "id": "5a677f24d73408ce4f89c42d",
   "url": "/lifengjin",
   "username": "lifengjin",
   "v": 2
  },
  "html": "Wow OK...thanks...let me experiment with it a bit more.",
  "id": "5a70eec1ac509d207d9a5311",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-01-30T22:16:33.685Z",
  "text": "Wow OK...thanks...let me experiment with it a bit more.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/lifengjin",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/10468599?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/10468599?v=4&s=60",
   "displayName": "lifengjin",
   "gv": "4",
   "id": "5a677f24d73408ce4f89c42d",
   "url": "/lifengjin",
   "username": "lifengjin",
   "v": 2
  },
  "html": "So basically for device arrays only contiguous memory slicing is possible right? <span data-link-type=\"mention\" data-screen-name=\"sklam\" class=\"mention\">@sklam</span> ",
  "id": "5a711bb36117191e61d4357c",
  "issues": [],
  "mentions": [
   {
    "screenName": "sklam",
    "userId": "55b689f50fc9f982beab2a24",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 13,
  "sent": "2018-01-31T01:28:19.238Z",
  "text": "So basically for device arrays only contiguous memory slicing is possible right? @sklam ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"sklam\" class=\"mention\">@sklam</span> That worked, thanks. Kind of unexpected though,  since np arrays are also mutable?",
  "id": "5a71d6beb3c4a0d376c25995",
  "issues": [],
  "mentions": [
   {
    "screenName": "sklam",
    "userId": "55b689f50fc9f982beab2a24",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 14,
  "sent": "2018-01-31T14:46:22.106Z",
  "text": "@sklam That worked, thanks. Kind of unexpected though,  since np arrays are also mutable?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/lifengjin",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/10468599?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/10468599?v=4&s=60",
   "displayName": "lifengjin",
   "gv": "4",
   "id": "5a677f24d73408ce4f89c42d",
   "url": "/lifengjin",
   "username": "lifengjin",
   "v": 2
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"sklam\" class=\"mention\">@sklam</span> Sorry, but is there any documentation on slicing? I am not entirely sure what works and what does not.",
  "id": "5a71f46ee217167e2c258db0",
  "issues": [],
  "mentions": [
   {
    "screenName": "sklam",
    "userId": "55b689f50fc9f982beab2a24",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 14,
  "sent": "2018-01-31T16:53:02.387Z",
  "text": "@sklam Sorry, but is there any documentation on slicing? I am not entirely sure what works and what does not.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/lifengjin",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/10468599?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/10468599?v=4&s=60",
   "displayName": "lifengjin",
   "gv": "4",
   "id": "5a677f24d73408ce4f89c42d",
   "url": "/lifengjin",
   "username": "lifengjin",
   "v": 2
  },
  "html": "<p>For example:</p><pre><code class=\"python\">x = np.arange(<span class=\"number\">0</span>, <span class=\"number\">30</span>, <span class=\"number\">1</span>).astype(np.float32)\ndx = cuda.to_device(x)\nddx = dx.reshape(<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>)\nddx0 = ddx[<span class=\"number\">0</span>]\nprint(ddx0.copy_to_host())\nddx1 = ddx[<span class=\"number\">1</span>]\nprint(ddx1.copy_to_host())</code></pre><p>In this example, ddx0 can be printed out, but ddx1 will throw an error saying <code>cuMemcpyDtoH results in CUDA_ERROR_INVALID_VALUE</code>.</p>",
  "id": "5a71f5d86117191e61d930b4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-01-31T16:59:04.284Z",
  "text": "For example:\n```python\nx = np.arange(0, 30, 1).astype(np.float32)\ndx = cuda.to_device(x)\nddx = dx.reshape(2,3,5)\nddx0 = ddx[0]\nprint(ddx0.copy_to_host())\nddx1 = ddx[1]\nprint(ddx1.copy_to_host())\n```\nIn this example, ddx0 can be printed out, but ddx1 will throw an error saying `cuMemcpyDtoH results in CUDA_ERROR_INVALID_VALUE`.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"lifengjin\" class=\"mention\">@lifengjin</span>, the contiguous memory requirement has been relaxed on the latest master.  Your example will work.  You can get the latest development build with <code>conda install -c numba numba</code>.",
  "id": "5a71f762ce68c3bc742a7b76",
  "issues": [],
  "mentions": [
   {
    "screenName": "lifengjin",
    "userId": "5a677f24d73408ce4f89c42d",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 15,
  "sent": "2018-01-31T17:05:38.857Z",
  "text": "@lifengjin, the contiguous memory requirement has been relaxed on the latest master.  Your example will work.  You can get the latest development build with `conda install -c numba numba`.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "But, the documentation is still very lacking",
  "id": "5a71f7ce4a6b0dd32b709ce7",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-01-31T17:07:26.927Z",
  "text": "But, the documentation is still very lacking",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"Rik-de-Kort\" class=\"mention\">@Rik-de-Kort</span>, numba treats globals as constants.  See <a href=\"http://numba.pydata.org/numba-doc/latest/user/faq.html#numba-doesn-t-seem-to-care-when-i-modify-a-global-variable\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://numba.pydata.org/numba-doc/latest/user/faq.html#numba-doesn-t-seem-to-care-when-i-modify-a-global-variable</a>",
  "id": "5a71f823ac509d207da0231d",
  "issues": [],
  "mentions": [
   {
    "screenName": "Rik-de-Kort",
    "userId": "5a0ea31cd73408ce4f7f000d",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 15,
  "sent": "2018-01-31T17:08:51.480Z",
  "text": "@Rik-de-Kort, numba treats globals as constants.  See http://numba.pydata.org/numba-doc/latest/user/faq.html#numba-doesn-t-seem-to-care-when-i-modify-a-global-variable",
  "unread": false,
  "urls": [
   {
    "url": "http://numba.pydata.org/numba-doc/latest/user/faq.html#numba-doesn-t-seem-to-care-when-i-modify-a-global-variable"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/lifengjin",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/10468599?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/10468599?v=4&s=60",
   "displayName": "lifengjin",
   "gv": "4",
   "id": "5a677f24d73408ce4f89c42d",
   "url": "/lifengjin",
   "username": "lifengjin",
   "v": 2
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"sklam\" class=\"mention\">@sklam</span> but ddx1 is contiguous no?",
  "id": "5a720189b3c4a0d376c39324",
  "issues": [],
  "mentions": [
   {
    "screenName": "sklam",
    "userId": "55b689f50fc9f982beab2a24",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 15,
  "sent": "2018-01-31T17:48:57.246Z",
  "text": "@sklam but ddx1 is contiguous no?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "there was a bug in device <code>.reshape</code>",
  "id": "5a7201cc98927d57455ecaae",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-01-31T17:50:04.843Z",
  "text": "there was a bug in device `.reshape`",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/lifengjin",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/10468599?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/10468599?v=4&s=60",
   "displayName": "lifengjin",
   "gv": "4",
   "id": "5a677f24d73408ce4f89c42d",
   "url": "/lifengjin",
   "username": "lifengjin",
   "v": 2
  },
  "html": "OK let me get the dev version...",
  "id": "5a7201f24a6b0dd32b70e5ac",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-01-31T17:50:42.524Z",
  "text": "OK let me get the dev version...",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/lifengjin",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/10468599?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/10468599?v=4&s=60",
   "displayName": "lifengjin",
   "gv": "4",
   "id": "5a677f24d73408ce4f89c42d",
   "url": "/lifengjin",
   "username": "lifengjin",
   "v": 2
  },
  "html": "What happens when the sliced array is not contiguous? A copy is made and the pointer returned?",
  "id": "5a72027cce68c3bc742acae6",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-01-31T17:53:00.794Z",
  "text": "What happens when the sliced array is not contiguous? A copy is made and the pointer returned?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "There was some recent changes so I have to check.  But it looks like it is preserve the non-contiguous stride when I tried.",
  "id": "5a72033fe217167e2c260643",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-01-31T17:56:15.794Z",
  "text": "There was some recent changes so I have to check.  But it looks like it is preserve the non-contiguous stride when I tried.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/lifengjin",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/10468599?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/10468599?v=4&s=60",
   "displayName": "lifengjin",
   "gv": "4",
   "id": "5a677f24d73408ce4f89c42d",
   "url": "/lifengjin",
   "username": "lifengjin",
   "v": 2
  },
  "html": "OK. Thanks. I am going to experiment with the dev version a bit more.",
  "id": "5a7203bc36de78850cd41fb1",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-01-31T17:58:20.266Z",
  "text": "OK. Thanks. I am going to experiment with the dev version a bit more.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "btw, the problem with contiguousness is usually at the host&lt;-&gt;device transfer.",
  "id": "5a7204067dcd63481fff1d56",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-01-31T17:59:34.482Z",
  "text": "btw, the problem with contiguousness is usually at the host<->device transfer.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/lifengjin",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/10468599?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/10468599?v=4&s=60",
   "displayName": "lifengjin",
   "gv": "4",
   "id": "5a677f24d73408ce4f89c42d",
   "url": "/lifengjin",
   "username": "lifengjin",
   "v": 2
  },
  "html": "I see. Does it affect Pyculib?",
  "id": "5a72045c98927d57455ee03a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-01-31T18:01:00.756Z",
  "text": "I see. Does it affect Pyculib?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "the underlying cublas library can only compute on C or F layout",
  "id": "5a720490b3c4a0d376c3abc3",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-01-31T18:01:52.232Z",
  "text": "the underlying cublas library can only compute on C or F layout",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/lifengjin",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/10468599?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/10468599?v=4&s=60",
   "displayName": "lifengjin",
   "gv": "4",
   "id": "5a677f24d73408ce4f89c42d",
   "url": "/lifengjin",
   "username": "lifengjin",
   "v": 2
  },
  "html": "Right",
  "id": "5a7204af6117191e61d9a203",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-01-31T18:02:23.411Z",
  "text": "Right",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/lifengjin",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/10468599?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/10468599?v=4&s=60",
   "displayName": "lifengjin",
   "gv": "4",
   "id": "5a677f24d73408ce4f89c42d",
   "url": "/lifengjin",
   "username": "lifengjin",
   "v": 2
  },
  "html": "Actually can you answer another question? A pyculib.blas function call seems to really cheap compared to a custom kernel launch in numba. Is this correct?",
  "id": "5a72055a47505419174b8118",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-01-31T18:05:14.699Z",
  "text": "Actually can you answer another question? A pyculib.blas function call seems to really cheap compared to a custom kernel launch in numba. Is this correct?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "Yes, the cublas library is highly optimized for the work it is doing.  ",
  "id": "5a720587ac509d207da08b9e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-01-31T18:05:59.796Z",
  "text": "Yes, the cublas library is highly optimized for the work it is doing.  ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/lifengjin",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/10468599?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/10468599?v=4&s=60",
   "displayName": "lifengjin",
   "gv": "4",
   "id": "5a677f24d73408ce4f89c42d",
   "url": "/lifengjin",
   "username": "lifengjin",
   "v": 2
  },
  "html": "The other thing I was trying to do is to do all the actual computation in C++, so I was trying to use device_pointer() and Blas._handle as C void pointers and pass them into C++ using ctypes, but it didn&#39;t work. Is it possible to allow Numba to handle Mem copies etc and use the raw pointers in C++ to do like calculation etc?",
  "id": "5a72061f98927d57455eef8f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-01-31T18:08:31.768Z",
  "text": "The other thing I was trying to do is to do all the actual computation in C++, so I was trying to use device_pointer() and Blas._handle as C void pointers and pass them into C++ using ctypes, but it didn't work. Is it possible to allow Numba to handle Mem copies etc and use the raw pointers in C++ to do like calculation etc?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/TomAugspurger",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1312546?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1312546?v=4&s=60",
   "displayName": "Tom Augspurger",
   "gv": "4",
   "id": "54a2cde7db8155e6700e4190",
   "url": "/TomAugspurger",
   "username": "TomAugspurger",
   "v": 12
  },
  "html": "<p>Statsmodels is considering using Numba for a few things. <a href=\"https://groups.google.com/d/msg/pystatsmodels/qiwUWfzW9bo/4jhl-aaPBQAJ\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://groups.google.com/d/msg/pystatsmodels/qiwUWfzW9bo/4jhl-aaPBQAJ</a> has a couple questions about numba and BLAS</p><blockquote>\n<p>A related issue is how BLAS support is baked into Numba.  In conda it uses MKL.  When you install from pip what BLAS is used?</p></blockquote>\n<p>How would you answer that?</p>",
  "id": "5a745e0ece68c3bc743740f8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-02-02T12:48:14.273Z",
  "text": "Statsmodels is considering using Numba for a few things. https://groups.google.com/d/msg/pystatsmodels/qiwUWfzW9bo/4jhl-aaPBQAJ has a couple questions about numba and BLAS\n\n> A related issue is how BLAS support is baked into Numba.  In conda it uses MKL.  When you install from pip what BLAS is used?\n\nHow would you answer that?",
  "unread": false,
  "urls": [
   {
    "url": "https://groups.google.com/d/msg/pystatsmodels/qiwUWfzW9bo/4jhl-aaPBQAJ"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/jpivarski",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/1852447?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/1852447?v=4&s=60",
   "displayName": "Jim Pivarski",
   "gv": "4",
   "id": "5a4e9793d73408ce4f862a26",
   "url": "/jpivarski",
   "username": "jpivarski",
   "v": 5
  },
  "html": "Hi, I&#39;m looking for guidance about publicizing a project based heavily on Numba. Object-Array Map (<a href=\"https://pypi.python.org/pypi/oamap\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://pypi.python.org/pypi/oamap</a>), a suite of object proxies implemented as pure array operations in Numba, just reached beta status and would likely have a similar user base as Numba itself. Is it permissible to make an announcement on <a href=\"mailto:numba-users@continuum.io\" rel=\"nofollow\">numba-users@continuum.io</a>?",
  "id": "5a7466b4ce68c3bc743772fd",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-02-02T13:25:08.630Z",
  "text": "Hi, I'm looking for guidance about publicizing a project based heavily on Numba. Object-Array Map (https://pypi.python.org/pypi/oamap), a suite of object proxies implemented as pure array operations in Numba, just reached beta status and would likely have a similar user base as Numba itself. Is it permissible to make an announcement on numba-users@continuum.io?",
  "unread": false,
  "urls": [
   {
    "url": "https://pypi.python.org/pypi/oamap"
   },
   {
    "url": "mailto:numba-users@continuum.io"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/jpivarski",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/1852447?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/1852447?v=4&s=60",
   "displayName": "Jim Pivarski",
   "gv": "4",
   "id": "5a4e9793d73408ce4f862a26",
   "url": "/jpivarski",
   "username": "jpivarski",
   "v": 5
  },
  "html": "As a semi-related question, what&#39;s the best way to import numba in Travis-CI tests? Through miniconda (<a href=\"https://conda.io/docs/user-guide/tasks/use-conda-with-travis-ci.html)?\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://conda.io/docs/user-guide/tasks/use-conda-with-travis-ci.html)?</a>",
  "id": "5a746713e217167e2c32ccdf",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-02-02T13:26:43.291Z",
  "text": "As a semi-related question, what's the best way to import numba in Travis-CI tests? Through miniconda (https://conda.io/docs/user-guide/tasks/use-conda-with-travis-ci.html)?",
  "unread": false,
  "urls": [
   {
    "url": "https://conda.io/docs/user-guide/tasks/use-conda-with-travis-ci.html)?"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"TomAugspurger\" class=\"mention\">@TomAugspurger</span>: Numba uses whatever BLAS/LAPACK that scipy was compiled with.  (We actually use the C symbols that scipy exports for Cython extensions, since NumPy doesn&#39;t expose its BLAS/LAPACK implementation.)",
  "id": "5a7486af98927d57456c4515",
  "issues": [],
  "mentions": [
   {
    "screenName": "TomAugspurger",
    "userId": "54a2cde7db8155e6700e4190",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 19,
  "sent": "2018-02-02T15:41:35.386Z",
  "text": "@TomAugspurger: Numba uses whatever BLAS/LAPACK that scipy was compiled with.  (We actually use the C symbols that scipy exports for Cython extensions, since NumPy doesn't expose its BLAS/LAPACK implementation.)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/TomAugspurger",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1312546?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1312546?v=4&s=60",
   "displayName": "Tom Augspurger",
   "gv": "4",
   "id": "54a2cde7db8155e6700e4190",
   "url": "/TomAugspurger",
   "username": "TomAugspurger",
   "v": 12
  },
  "html": "Gotcha, thanks.",
  "id": "5a7486c5a3447aac75322cce",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-02-02T15:41:57.352Z",
  "text": "Gotcha, thanks.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "Precisely for the reason you might imagine: We don&#39;t want to fix Numba to a particular BLAS, and we don&#39;t want to guess which one the user prefers.",
  "id": "5a7486e5e217167e2c33945f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-02-02T15:42:29.202Z",
  "text": "Precisely for the reason you might imagine: We don't want to fix Numba to a particular BLAS, and we don't want to guess which one the user prefers.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"jpivarski\" class=\"mention\">@jpivarski</span>: Feel free to advertise Numba-related projects on the numba-users mailing list.  As for testing Numba on Travis-CI, we obviously prefer Miniconda, but you can also pip install precompiled numba wheels now.",
  "id": "5a74873e4a6b0dd32b7e956e",
  "issues": [],
  "mentions": [
   {
    "screenName": "jpivarski",
    "userId": "5a4e9793d73408ce4f862a26",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 18,
  "sent": "2018-02-02T15:43:58.838Z",
  "text": "@jpivarski: Feel free to advertise Numba-related projects on the numba-users mailing list.  As for testing Numba on Travis-CI, we obviously prefer Miniconda, but you can also pip install precompiled numba wheels now.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/jpivarski",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/1852447?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/1852447?v=4&s=60",
   "displayName": "Jim Pivarski",
   "gv": "4",
   "id": "5a4e9793d73408ce4f862a26",
   "url": "/jpivarski",
   "username": "jpivarski",
   "v": 5
  },
  "html": "Okay, thanks. I&#39;ve been working on a Travis script that installs Miniconda--- I want to cover Python 2.6 without Numba as well, and that&#39;s the main complication.",
  "id": "5a74877a4a6b0dd32b7e969c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-02-02T15:44:58.283Z",
  "text": "Okay, thanks. I've been working on a Travis script that installs Miniconda--- I want to cover Python 2.6 without Numba as well, and that's the main complication.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "Ah right.  The anaconda team stopped building new packages for Python 2.6 a year or two ago.",
  "id": "5a74879bac509d207dadd6e8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-02-02T15:45:31.335Z",
  "text": "Ah right.  The anaconda team stopped building new packages for Python 2.6 a year or two ago.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/jpivarski",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/1852447?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/1852447?v=4&s=60",
   "displayName": "Jim Pivarski",
   "gv": "4",
   "id": "5a4e9793d73408ce4f862a26",
   "url": "/jpivarski",
   "username": "jpivarski",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"seibert\" class=\"mention\">@seibert</span> I also wanted to ask you specifically if you&#39;re still interested in a DIANA-HEP talk. Should I continue by e-mail?",
  "id": "5a7487ad6117191e61e73310",
  "issues": [],
  "mentions": [
   {
    "screenName": "seibert",
    "userId": "55b68af40fc9f982beab2a3c",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 19,
  "sent": "2018-02-02T15:45:49.120Z",
  "text": "@seibert I also wanted to ask you specifically if you're still interested in a DIANA-HEP talk. Should I continue by e-mail?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "Yeah, send me an email and we can figure out the details.",
  "id": "5a7487c298927d57456c4c76",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-02-02T15:46:10.308Z",
  "text": "Yeah, send me an email and we can figure out the details.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/jpivarski",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/1852447?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/1852447?v=4&s=60",
   "displayName": "Jim Pivarski",
   "gv": "4",
   "id": "5a4e9793d73408ce4f862a26",
   "url": "/jpivarski",
   "username": "jpivarski",
   "v": 5
  },
  "html": "Great! Talk to you later. Cheers!",
  "id": "5a7487d5b3c4a0d376d14728",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-02-02T15:46:29.884Z",
  "text": "Great! Talk to you later. Cheers!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-02-05T17:12:26.903Z",
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/g/u/SamaBerenjian_twitter",
   "avatarUrlMedium": "https://abs.twimg.com/sticky/default_profile_images/default_profile_normal.png?s=128",
   "avatarUrlSmall": "https://abs.twimg.com/sticky/default_profile_images/default_profile_normal.png?s=60",
   "displayName": "Samaneh Berenjian",
   "id": "5a4fb90bd73408ce4f865c0f",
   "url": "/SamaBerenjian_twitter",
   "username": "SamaBerenjian_twitter"
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"sklam\" class=\"mention\">@sklam</span> done. tnx. One more question. May I ask how you simulate an instruction like  &quot;call   8048350 <a href=\"http://&#x6d;&#x61;&#105;&#x6c;&#x74;&#x6f;&#58;&#112;&#117;&#116;&#x73;&#x40;&#x70;&#x6c;&#116;&#43;&#x30;&#120;&#55;&#99;\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">&#112;&#117;&#116;&#x73;&#x40;&#x70;&#x6c;&#116;&#43;&#x30;&#120;&#55;&#99;</a>&quot;.This is call to a function. May I ask which instructions and functions or modules in llvmlite would be useful for implementing such instructions?",
  "id": "5a788ec47dcd63481f1ed3a9",
  "issues": [],
  "mentions": [
   {
    "screenName": "sklam",
    "userId": "55b689f50fc9f982beab2a24",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 18,
  "sent": "2018-02-05T17:05:08.039Z",
  "text": "@sklam done. tnx. One more question. May I ask how you simulate an instruction like  \"call   8048350 <puts@plt+0x7c>\".This is call to a function. May I ask which instructions and functions or modules in llvmlite would be useful for implementing such instructions?",
  "unread": false,
  "urls": [
   {
    "url": "http://&#x6d;&#x61;&#105;&#x6c;&#x74;&#x6f;&#58;&#112;&#117;&#116;&#x73;&#x40;&#x70;&#x6c;&#116;&#43;&#x30;&#120;&#55;&#99;"
   }
  ],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"SamaBerenjian_twitter\" class=\"mention\">@SamaBerenjian_twitter</span> , if you have the address of the function, you can insert it as a constant integer and cast it to the function type with <code>builder.inttoptr</code>.  To find the address of the function, these api will be usedful: <a href=\"http://llvmlite.readthedocs.io/en/latest/user-guide/binding/dynamic-libraries.html#dynamic-libraries-and-symbols\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://llvmlite.readthedocs.io/en/latest/user-guide/binding/dynamic-libraries.html#dynamic-libraries-and-symbols</a>",
  "id": "5a78956fce68c3bc744aac90",
  "issues": [],
  "mentions": [
   {
    "screenName": "SamaBerenjian_twitter",
    "userId": "5a4fb90bd73408ce4f865c0f",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 18,
  "sent": "2018-02-05T17:33:35.527Z",
  "text": "@SamaBerenjian_twitter , if you have the address of the function, you can insert it as a constant integer and cast it to the function type with `builder.inttoptr`.  To find the address of the function, these api will be usedful: http://llvmlite.readthedocs.io/en/latest/user-guide/binding/dynamic-libraries.html#dynamic-libraries-and-symbols",
  "unread": false,
  "urls": [
   {
    "url": "http://llvmlite.readthedocs.io/en/latest/user-guide/binding/dynamic-libraries.html#dynamic-libraries-and-symbols"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/g/u/SamaBerenjian_twitter",
   "avatarUrlMedium": "https://abs.twimg.com/sticky/default_profile_images/default_profile_normal.png?s=128",
   "avatarUrlSmall": "https://abs.twimg.com/sticky/default_profile_images/default_profile_normal.png?s=60",
   "displayName": "Samaneh Berenjian",
   "id": "5a4fb90bd73408ce4f865c0f",
   "url": "/SamaBerenjian_twitter",
   "username": "SamaBerenjian_twitter"
  },
  "html": "Has anyone experience in reassemble the assembly code using llvmlite?",
  "id": "5a78b88db3c4a0d376e4f765",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-02-05T20:03:25.010Z",
  "text": "Has anyone experience in reassemble the assembly code using llvmlite?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/jpivarski",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/1852447?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/1852447?v=4&s=60",
   "displayName": "Jim Pivarski",
   "gv": "4",
   "id": "5a4e9793d73408ce4f862a26",
   "url": "/jpivarski",
   "username": "jpivarski",
   "v": 5
  },
  "html": "In what sense?",
  "id": "5a78c405b3c4a0d376e54a8a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-02-05T20:52:21.669Z",
  "text": "In what sense?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/jpivarski",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/1852447?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/1852447?v=4&s=60",
   "displayName": "Jim Pivarski",
   "gv": "4",
   "id": "5a4e9793d73408ce4f862a26",
   "url": "/jpivarski",
   "username": "jpivarski",
   "v": 5
  },
  "html": "This procedure can be used to marshal an LLVM function, send it to a remote computer, and reconstitute it for use there (which requires a reassembly in a sense): <a href=\"https://stackoverflow.com/questions/42138764/marshaling-object-code-for-a-numba-function/42198101#42198101\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://stackoverflow.com/questions/42138764/marshaling-object-code-for-a-numba-function/42198101#42198101</a>",
  "id": "5a78c48d6117191e61fb1112",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-02-05T20:54:37.465Z",
  "text": "This procedure can be used to marshal an LLVM function, send it to a remote computer, and reconstitute it for use there (which requires a reassembly in a sense): https://stackoverflow.com/questions/42138764/marshaling-object-code-for-a-numba-function/42198101#42198101",
  "unread": false,
  "urls": [
   {
    "url": "https://stackoverflow.com/questions/42138764/marshaling-object-code-for-a-numba-function/42198101#42198101"
   }
  ],
  "v": 1
 },
 {
  "editedAt": "2018-02-05T21:48:12.564Z",
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"jpivarski\" class=\"mention\">@jpivarski</span>: I know that&#39;s an old question, but Numba also supports using pickle and cloudpickle on JIT&#39;ed functions directly, doing all the hackery you describe behind the scenes for you.",
  "id": "5a78d10d7084124a343d9660",
  "issues": [],
  "mentions": [
   {
    "screenName": "jpivarski",
    "userId": "5a4e9793d73408ce4f862a26",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 19,
  "sent": "2018-02-05T21:47:57.491Z",
  "text": "@jpivarski: I know that's an old question, but Numba also supports using pickle and cloudpickle on JIT'ed functions directly, doing all the hackery you describe behind the scenes for you.",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "This is how Numba can be combined with Spark and Dask.",
  "id": "5a78d129e217167e2c47ee75",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 20,
  "sent": "2018-02-05T21:48:25.265Z",
  "text": "This is how Numba can be combined with Spark and Dask.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "which need to pickle functions to ship them to remote workers",
  "id": "5a78d1376117191e61fb689c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 21,
  "sent": "2018-02-05T21:48:39.026Z",
  "text": "which need to pickle functions to ship them to remote workers",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "(Numba will also re-JIT the function on the destination to match the CPU architecture there.)",
  "id": "5a78d1956117191e61fb6a0c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 20,
  "sent": "2018-02-05T21:50:13.625Z",
  "text": "(Numba will also re-JIT the function on the destination to match the CPU architecture there.)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-02-06T15:24:39.868Z",
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/g/u/SamaBerenjian_twitter",
   "avatarUrlMedium": "https://abs.twimg.com/sticky/default_profile_images/default_profile_normal.png?s=128",
   "avatarUrlSmall": "https://abs.twimg.com/sticky/default_profile_images/default_profile_normal.png?s=60",
   "displayName": "Samaneh Berenjian",
   "id": "5a4fb90bd73408ce4f865c0f",
   "url": "/SamaBerenjian_twitter",
   "username": "SamaBerenjian_twitter"
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"jpivarski\" class=\"mention\">@jpivarski</span>  by reassembling i mean to reconstruct the assemblies to get the file be executable. by the way, in llvmlite whenever there is a call to register like call %eax how would you get the address. I saw the modules that Siu mentioned but I have to make some symbols. Is there any example for this?",
  "id": "5a79c88636de78850cfb0f10",
  "issues": [],
  "mentions": [
   {
    "screenName": "jpivarski",
    "userId": "5a4e9793d73408ce4f862a26",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 20,
  "sent": "2018-02-06T15:23:50.093Z",
  "text": "@jpivarski  by reassembling i mean to reconstruct the assemblies to get the file be executable. by the way, in llvmlite whenever there is a call to register like call %eax how would you get the address. I saw the modules that Siu mentioned but I have to make some symbols. Is there any example for this?",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"SamaBerenjian_twitter\" class=\"mention\">@SamaBerenjian_twitter</span>, if you already can get into the content of <code>%eax</code> and assuming it is of an integer type, you can use <code>builder.bitcast</code> to convert it into a function type.",
  "id": "5a79fa247dcd63481f26e8d0",
  "issues": [],
  "mentions": [
   {
    "screenName": "SamaBerenjian_twitter",
    "userId": "5a4fb90bd73408ce4f865c0f",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 20,
  "sent": "2018-02-06T18:55:32.679Z",
  "text": "@SamaBerenjian_twitter, if you already can get into the content of `%eax` and assuming it is of an integer type, you can use `builder.bitcast` to convert it into a function type.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "btw, if you are familiar with C, I\u2019d suggest using <code>clang -emit-llvm -S yourcode.c</code> to understand how a C code of what you wanted to do is translated to LLVM IR.   Then, you can write the llvmlite code to emit the same thing.",
  "id": "5a79fb5bb3c4a0d376ec239d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 21,
  "sent": "2018-02-06T19:00:43.725Z",
  "text": "btw, if you are familiar with C, I\u2019d suggest using `clang -emit-llvm -S yourcode.c` to understand how a C code of what you wanted to do is translated to LLVM IR.   Then, you can write the llvmlite code to emit the same thing.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/g/u/SamaBerenjian_twitter",
   "avatarUrlMedium": "https://abs.twimg.com/sticky/default_profile_images/default_profile_normal.png?s=128",
   "avatarUrlSmall": "https://abs.twimg.com/sticky/default_profile_images/default_profile_normal.png?s=60",
   "displayName": "Samaneh Berenjian",
   "id": "5a4fb90bd73408ce4f865c0f",
   "url": "/SamaBerenjian_twitter",
   "username": "SamaBerenjian_twitter"
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"sklam\" class=\"mention\">@sklam</span> The problem is that I am trying to rebuild from assembly code and it is hard to make a graph and emit the instructions in the same way.",
  "id": "5a7a040cf283b8e5462a4be1",
  "issues": [],
  "mentions": [
   {
    "screenName": "sklam",
    "userId": "55b689f50fc9f982beab2a24",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 20,
  "sent": "2018-02-06T19:37:48.126Z",
  "text": "@sklam The problem is that I am trying to rebuild from assembly code and it is hard to make a graph and emit the instructions in the same way.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/g/u/SamaBerenjian_twitter",
   "avatarUrlMedium": "https://abs.twimg.com/sticky/default_profile_images/default_profile_normal.png?s=128",
   "avatarUrlSmall": "https://abs.twimg.com/sticky/default_profile_images/default_profile_normal.png?s=60",
   "displayName": "Samaneh Berenjian",
   "id": "5a4fb90bd73408ce4f865c0f",
   "url": "/SamaBerenjian_twitter",
   "username": "SamaBerenjian_twitter"
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"sklam\" class=\"mention\">@sklam</span> If i am reconstructing a CFG graph,  do we need to call a branch for such instructions? like irbuilder.indirectbr? ",
  "id": "5a7a044f7dcd63481f272ab6",
  "issues": [],
  "mentions": [
   {
    "screenName": "sklam",
    "userId": "55b689f50fc9f982beab2a24",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 20,
  "sent": "2018-02-06T19:38:55.417Z",
  "text": "@sklam If i am reconstructing a CFG graph,  do we need to call a branch for such instructions? like irbuilder.indirectbr? ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"SamaBerenjian_twitter\" class=\"mention\">@SamaBerenjian_twitter</span> , yes, you will need one of builder.branch, builder.cbranch and builder.indirectbr.",
  "id": "5a7b1efc7084124a344a06b8",
  "issues": [],
  "mentions": [
   {
    "screenName": "SamaBerenjian_twitter",
    "userId": "5a4fb90bd73408ce4f865c0f",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 19,
  "sent": "2018-02-07T15:45:00.896Z",
  "text": "@SamaBerenjian_twitter , yes, you will need one of builder.branch, builder.cbranch and builder.indirectbr.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/jimmywan",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/10406673?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/10406673?v=4&s=60",
   "displayName": "Jimmy Wan",
   "gv": "4",
   "id": "5a7b401bd73408ce4f8c211f",
   "url": "/jimmywan",
   "username": "jimmywan"
  },
  "html": "Hello, ran into a problem installing numba w/ numpy 1.14.0 since the conda package for that combo has not been built, though I did notice that I can just pip install a wheel for numba on top of numpy 1.14.0. Any danger in doing so?",
  "id": "5a7b4091e217167e2c5583ee",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-02-07T18:08:17.959Z",
  "text": "Hello, ran into a problem installing numba w/ numpy 1.14.0 since the conda package for that combo has not been built, though I did notice that I can just pip install a wheel for numba on top of numpy 1.14.0. Any danger in doing so?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"jimmywan\" class=\"mention\">@jimmywan</span>, there are numpy1.14 build of the trunk in the numba channel.  You can get it by <code>conda install -c numba numba</code>.  As for the wheels, recent numpy builds (numpy&gt;1.11?) are binary compatible.  So, you should be able to use the wheel for newer numpy.",
  "id": "5a7b417cb3c4a0d376f3506a",
  "issues": [],
  "mentions": [
   {
    "screenName": "jimmywan",
    "userId": "5a7b401bd73408ce4f8c211f",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 18,
  "sent": "2018-02-07T18:12:12.255Z",
  "text": "@jimmywan, there are numpy1.14 build of the trunk in the numba channel.  You can get it by `conda install -c numba numba`.  As for the wheels, recent numpy builds (numpy>1.11?) are binary compatible.  So, you should be able to use the wheel for newer numpy.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "btw, in the future, we will stop building conda packages for version-specific numpy as long as numpy remains binary compatible across versions.",
  "id": "5a7b41cb86ef1bb1417e5432",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-02-07T18:13:31.084Z",
  "text": "btw, in the future, we will stop building conda packages for version-specific numpy as long as numpy remains binary compatible across versions.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/jimmywan",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/10406673?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/10406673?v=4&s=60",
   "displayName": "Jimmy Wan",
   "gv": "4",
   "id": "5a7b401bd73408ce4f8c211f",
   "url": "/jimmywan",
   "username": "jimmywan"
  },
  "html": "Thanks <span data-link-type=\"mention\" data-screen-name=\"sklam\" class=\"mention\">@sklam</span> , much appreciated.",
  "id": "5a7b426f6117191e6108fc4c",
  "issues": [],
  "mentions": [
   {
    "screenName": "sklam",
    "userId": "55b689f50fc9f982beab2a24",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 18,
  "sent": "2018-02-07T18:16:15.056Z",
  "text": "Thanks @sklam , much appreciated.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/mjsottile",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/131691?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/131691?v=4&s=60",
   "displayName": "Matthew Sottile",
   "gv": "4",
   "id": "5a7d66aad73408ce4f8c6379",
   "url": "/mjsottile",
   "username": "mjsottile",
   "v": 1
  },
  "html": "Does ahead-of-time compilation apply to CUDA targets?  Looking at the documentation for AOC, it seems to be focused on CPU code generation.  I have a project using Numba for CUDA targets that works fine with the CUDA JIT compilation scheme (<span data-link-type=\"mention\" data-screen-name=\"cuda\" class=\"mention\">@cuda</span>.jit), but we are interested in having more control over when the compilation occurs.   I also noticed that the cuda jit decorator does not take the same cache parameter as the regular jit: when given &quot;cache=True&quot;, it fails with &quot;TypeError: compile_kernel() got an unexpected keyword argument &#39;cache&#39;&quot;.  Is JIT caching not yet supported for CUDA?",
  "id": "5a7d69b4b3c4a0d376fed3d1",
  "issues": [],
  "mentions": [
   {
    "screenName": "cuda",
    "userId": "54d0903adb8155e6700f6284",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 17,
  "sent": "2018-02-09T09:28:20.577Z",
  "text": "Does ahead-of-time compilation apply to CUDA targets?  Looking at the documentation for AOC, it seems to be focused on CPU code generation.  I have a project using Numba for CUDA targets that works fine with the CUDA JIT compilation scheme (@cuda.jit), but we are interested in having more control over when the compilation occurs.   I also noticed that the cuda jit decorator does not take the same cache parameter as the regular jit: when given \"cache=True\", it fails with \"TypeError: compile_kernel() got an unexpected keyword argument 'cache'\".  Is JIT caching not yet supported for CUDA?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "mjsottile: fairly sure that isn&#39;t currently supported",
  "id": "5a7d6cbece68c3bc7464df69",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-02-09T09:41:18.052Z",
  "text": "mjsottile: fairly sure that isn't currently supported",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "IIRC... AOT is CPU orientated and there&#39;s no on disk cache for CUDA",
  "id": "5a7d6d5a6117191e61145dd9",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-02-09T09:43:54.405Z",
  "text": "IIRC... AOT is CPU orientated and there's no on disk cache for CUDA",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "Perhaps open an issue for a feature request? There may be technical reasons why this is really hard to do and it&#39;d be good to capture them.",
  "id": "5a7d6da0e217167e2c61200f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-02-09T09:45:04.604Z",
  "text": "Perhaps open an issue for a feature request? There may be technical reasons why this is really hard to do and it'd be good to capture them.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "Yes, we do not have support for disk caching or AOT (they internally have some similarities) for the CUDA target.",
  "id": "5a7db0bee217167e2c62a35d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-02-09T14:31:26.048Z",
  "text": "Yes, we do not have support for disk caching or AOT (they internally have some similarities) for the CUDA target.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "When you say &quot;more control&quot; over when compilation occurs, do you mean that you want to trigger compilation prior to call time?",
  "id": "5a7db0faf283b8e5463e5142",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-02-09T14:32:26.466Z",
  "text": "When you say \"more control\" over when compilation occurs, do you mean that you want to trigger compilation prior to call time?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/RemiLehe",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/6685781?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/6685781?v=4&s=60",
   "displayName": "Remi Lehe",
   "gv": "4",
   "id": "5a7dc851d73408ce4f8c7098",
   "url": "/RemiLehe",
   "username": "RemiLehe",
   "v": 1
  },
  "html": "Hi,<br>I was wondering: is it currently possible to install and run numba on Power8 architecture?<br>Thanks!",
  "id": "5a7dcae2d74ee9f50da3dca9",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-02-09T16:22:58.448Z",
  "text": "Hi,\nI was wondering: is it currently possible to install and run numba on Power8 architecture?\nThanks!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "Not currently",
  "id": "5a7dd125f283b8e5463f1261",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-02-09T16:49:41.269Z",
  "text": "Not currently",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "A number of unit tests fail due to problems with our atomic reference counting implementation on Power8",
  "id": "5a7dd13ece68c3bc74672a24",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-02-09T16:50:06.862Z",
  "text": "A number of unit tests fail due to problems with our atomic reference counting implementation on Power8",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "We had a brief go of trying to fix it, with no success, and had to move on to other things",
  "id": "5a7dd153d74ee9f50da40626",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-02-09T16:50:27.042Z",
  "text": "We had a brief go of trying to fix it, with no success, and had to move on to other things",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "Someone from IBM recent was asking about it on the Numba issue tracker, and posted a bounty (?!) on BountySource for someone to fix it",
  "id": "5a7dd170b3c4a0d3760143b2",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-02-09T16:50:56.101Z",
  "text": "Someone from IBM recent was asking about it on the Numba issue tracker, and posted a bounty (?!) on BountySource for someone to fix it",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "Seems weird since I would not imagine many open source developers have access to Power8",
  "id": "5a7dd1904a6b0dd32bae05a4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-02-09T16:51:28.594Z",
  "text": "Seems weird since I would not imagine many open source developers have access to Power8",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/RemiLehe",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/6685781?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/6685781?v=4&s=60",
   "displayName": "Remi Lehe",
   "gv": "4",
   "id": "5a7dc851d73408ce4f8c7098",
   "url": "/RemiLehe",
   "username": "RemiLehe",
   "v": 1
  },
  "html": "OK, thanks a lot for the info. I was wondering because the US computer clusters Summit-dev and (upcoming) Summit are using  Power8/Power9.",
  "id": "5a7dda7ce217167e2c63ab7b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-02-09T17:29:32.311Z",
  "text": "OK, thanks a lot for the info. I was wondering because the US computer clusters Summit-dev and (upcoming) Summit are using  Power8/Power9.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/RemiLehe",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/6685781?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/6685781?v=4&s=60",
   "displayName": "Remi Lehe",
   "gv": "4",
   "id": "5a7dc851d73408ce4f8c7098",
   "url": "/RemiLehe",
   "username": "RemiLehe",
   "v": 1
  },
  "html": "And having numba working on them would be great :)",
  "id": "5a7ddacbb3c4a0d37601807a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-02-09T17:30:51.981Z",
  "text": "And having numba working on them would be great :)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "Yeah, we&#39;re interested but haven&#39;t had the time",
  "id": "5a7ddb20d74ee9f50da44395",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-02-09T17:32:16.006Z",
  "text": "Yeah, we're interested but haven't had the time",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/mjsottile",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/131691?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/131691?v=4&s=60",
   "displayName": "Matthew Sottile",
   "gv": "4",
   "id": "5a7d66aad73408ce4f8c6379",
   "url": "/mjsottile",
   "username": "mjsottile",
   "v": 1
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"seibert\" class=\"mention\">@seibert</span> yes, we want to trigger compilation prior to the call.",
  "id": "5a7df74d18f388e6268326fe",
  "issues": [],
  "mentions": [
   {
    "screenName": "seibert",
    "userId": "55b68af40fc9f982beab2a3c",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 18,
  "sent": "2018-02-09T19:32:29.463Z",
  "text": "@seibert yes, we want to trigger compilation prior to the call.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/teoliphant",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/254880?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/254880?v=4&s=60",
   "displayName": "Travis E. Oliphant",
   "gv": "4",
   "id": "54185f0c163965c9bc204e58",
   "url": "/teoliphant",
   "username": "teoliphant",
   "v": 11
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"jpivarski\" class=\"mention\">@jpivarski</span> Thanks for pointing out oamap.  I was looking at your cross-language presentation and agree with the framing.  It&#39;s something I&#39;ve been  thinking about for the past 4 years and is at the heart of the &quot;plures&quot; project and project xnd and ndtypes.   ndtypes is a generalization of NumPy dtypes and xnd is a generic container for anything that can be described by xnd (including structs, arrays of structs and structs of arrays).   Ideally ndtypes should be able to describe Arrow data-structures as well.   So far the project is still in R&amp;D phase but xnd and ndtypes are useable.   We are working on connecting numba for code-generation and then you have a useable system that can straightforwardly be adapted to and replicated across other languages:  <a href=\"https://github.com/plures\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://github.com/plures</a>",
  "id": "5a82419ad74ee9f50db85840",
  "issues": [],
  "mentions": [
   {
    "screenName": "jpivarski",
    "userId": "5a4e9793d73408ce4f862a26",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 15,
  "sent": "2018-02-13T01:38:34.187Z",
  "text": "@jpivarski Thanks for pointing out oamap.  I was looking at your cross-language presentation and agree with the framing.  It's something I've been  thinking about for the past 4 years and is at the heart of the \"plures\" project and project xnd and ndtypes.   ndtypes is a generalization of NumPy dtypes and xnd is a generic container for anything that can be described by xnd (including structs, arrays of structs and structs of arrays).   Ideally ndtypes should be able to describe Arrow data-structures as well.   So far the project is still in R&D phase but xnd and ndtypes are useable.   We are working on connecting numba for code-generation and then you have a useable system that can straightforwardly be adapted to and replicated across other languages:  https://github.com/plures",
  "unread": false,
  "urls": [
   {
    "url": "https://github.com/plures"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/epifanio",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/18949?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/18949?v=4&s=60",
   "displayName": "epifanio",
   "gv": "4",
   "id": "531e6e9c5e986b0712efdca9",
   "url": "/epifanio",
   "username": "epifanio",
   "v": 37
  },
  "html": "Hi <span data-link-type=\"mention\" data-screen-name=\"numba\" class=\"mention\">@numba</span><br>I was wondering if you can help me in porting a function from regular python, to <code>numba</code>",
  "id": "5a825e168c71e5e01d8a172d",
  "issues": [],
  "mentions": [
   {
    "screenName": "numba",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 16,
  "sent": "2018-02-13T03:40:06.996Z",
  "text": "Hi @numba\nI was wondering if you can help me in porting a function from regular python, to `numba`\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-02-13T03:43:13.040Z",
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/epifanio",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/18949?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/18949?v=4&s=60",
   "displayName": "epifanio",
   "gv": "4",
   "id": "531e6e9c5e986b0712efdca9",
   "url": "/epifanio",
   "username": "epifanio",
   "v": 37
  },
  "html": "<p>the function looks like:</p><pre><code><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np\n\n<span class=\"comment\"># regular polygon for testing</span>\nlenpoly = <span class=\"number\">10</span>\npolygon = [[np.sin(x)+<span class=\"number\">0.5</span>,np.cos(x)+<span class=\"number\">0.5</span>] <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> np.linspace(<span class=\"number\">0</span>,<span class=\"number\">2</span>*np.pi,lenpoly)[:-<span class=\"number\">1</span>]]\n\n<span class=\"comment\"># random points set of points to test </span>\nN = <span class=\"number\">10</span>\npoints = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> zip(np.arange(-<span class=\"number\">5</span>,<span class=\"number\">5</span>,<span class=\"number\">0.5</span>),np.arange(-<span class=\"number\">5</span>,<span class=\"number\">5</span>,<span class=\"number\">0.5</span>))]\n\n\n<span class=\"comment\"># Ray tracing</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">ray_tracing_method</span><span class=\"params\">(x,y,poly)</span>:</span>\n\n    n = len(poly)\n    inside = <span class=\"number\">0</span>\n    p1x,p1y = poly[<span class=\"number\">0</span>]\n    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n+<span class=\"number\">1</span>):\n        p2x,p2y = poly[i % n]\n        <span class=\"keyword\">if</span> y &gt; min(p1y,p2y):\n            <span class=\"keyword\">if</span> y &lt;= max(p1y,p2y):\n                <span class=\"keyword\">if</span> x &lt;= max(p1x,p2x):\n                    <span class=\"keyword\">if</span> p1y != p2y:\n                        xints = (y-p1y)*(p2x-p1x)/(p2y-p1y)+p1x\n                    <span class=\"keyword\">if</span> p1x == p2x <span class=\"keyword\">or</span> x &lt;= xints:\n                        inside = <span class=\"number\">1</span>\n        p1x,p1y = p2x,p2y\n\n    <span class=\"keyword\">return</span> inside\n\n\ninside1 = [ray_tracing_method(point[<span class=\"number\">0</span>], point[<span class=\"number\">1</span>], polygon) <span class=\"keyword\">for</span> point <span class=\"keyword\">in</span> points]</code></pre><p>I tried to simply add the <code>@jit</code> decorator : </p><pre><code><span class=\"keyword\">from</span> numba <span class=\"keyword\">import</span> jit\n\n<span class=\"property\">@jit</span></code></pre><p>But  when I try to execute it i got the following error:<br><a href=\"https://gist.github.com/387db2ed59d3c911217b50521cb87a12\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://gist.github.com/387db2ed59d3c911217b50521cb87a12</a></p>",
  "id": "5a825ea4e217167e2c78454e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-02-13T03:42:28.905Z",
  "text": "the function looks like:\n```\nimport numpy as np\n\n# regular polygon for testing\nlenpoly = 10\npolygon = [[np.sin(x)+0.5,np.cos(x)+0.5] for x in np.linspace(0,2*np.pi,lenpoly)[:-1]]\n\n# random points set of points to test \nN = 10\npoints = [i for i in zip(np.arange(-5,5,0.5),np.arange(-5,5,0.5))]\n\n\n# Ray tracing\ndef ray_tracing_method(x,y,poly):\n\n    n = len(poly)\n    inside = 0\n    p1x,p1y = poly[0]\n    for i in range(n+1):\n        p2x,p2y = poly[i % n]\n        if y > min(p1y,p2y):\n            if y <= max(p1y,p2y):\n                if x <= max(p1x,p2x):\n                    if p1y != p2y:\n                        xints = (y-p1y)*(p2x-p1x)/(p2y-p1y)+p1x\n                    if p1x == p2x or x <= xints:\n                        inside = 1\n        p1x,p1y = p2x,p2y\n\n    return inside\n\n\ninside1 = [ray_tracing_method(point[0], point[1], polygon) for point in points]\n```\n\nI tried to simply add the `@jit` decorator : \n```\nfrom numba import jit\n\n@jit\n```\nBut  when I try to execute it i got the following error:\nhttps://gist.github.com/387db2ed59d3c911217b50521cb87a12\n\n",
  "unread": false,
  "urls": [
   {
    "url": "https://gist.github.com/387db2ed59d3c911217b50521cb87a12"
   }
  ],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/epifanio",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/18949?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/18949?v=4&s=60",
   "displayName": "epifanio",
   "gv": "4",
   "id": "531e6e9c5e986b0712efdca9",
   "url": "/epifanio",
   "username": "epifanio",
   "v": 37
  },
  "html": "<p>I found this <span data-link-type=\"issue\" data-issue=\"2254\" data-issue-repo=\"numba/numba\" class=\"issue\">numba/numba#2254</span> helpfull, changing the code by declaring all the vars before the for loop:</p><pre><code><span class=\"keyword\">from</span> numba <span class=\"keyword\">import</span> jit\n\n<span class=\"decorator\">@jit</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">numba_ray_tracing_method</span><span class=\"params\">(x,y,poly)</span>:</span>\n    n = len(poly)\n    inside = <span class=\"keyword\">False</span>\n    p2x = <span class=\"number\">0.0</span>\n    p2y = <span class=\"number\">0.0</span>\n    xints = <span class=\"number\">0.0</span>\n    p1x,p1y = poly[<span class=\"number\">0</span>]\n    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n+<span class=\"number\">1</span>):\n        p2x,p2y = poly[i % n]\n        <span class=\"keyword\">if</span> y &gt; min(p1y,p2y):\n            <span class=\"keyword\">if</span> y &lt;= max(p1y,p2y):\n                <span class=\"keyword\">if</span> x &lt;= max(p1x,p2x):\n                    <span class=\"keyword\">if</span> p1y != p2y:\n                        xints = (y-p1y)*(p2x-p1x)/(p2y-p1y)+p1x\n                    <span class=\"keyword\">if</span> p1x == p2x <span class=\"keyword\">or</span> x &lt;= xints:\n                        inside = <span class=\"keyword\">not</span> inside\n        p1x,p1y = p2x,p2y\n\n    <span class=\"keyword\">return</span> inside</code></pre><p>fixed the error</p>",
  "id": "5a8263fdf283b8e5465434e2",
  "issues": [
   {
    "number": "2254",
    "repo": "numba/numba"
   }
  ],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-02-13T04:05:17.308Z",
  "text": "I found this [issue](https://github.com/numba/numba/issues/2254) helpfull, changing the code by declaring all the vars before the for loop:\n```\nfrom numba import jit\n\n@jit\ndef numba_ray_tracing_method(x,y,poly):\n    n = len(poly)\n    inside = False\n    p2x = 0.0\n    p2y = 0.0\n    xints = 0.0\n    p1x,p1y = poly[0]\n    for i in range(n+1):\n        p2x,p2y = poly[i % n]\n        if y > min(p1y,p2y):\n            if y <= max(p1y,p2y):\n                if x <= max(p1x,p2x):\n                    if p1y != p2y:\n                        xints = (y-p1y)*(p2x-p1x)/(p2y-p1y)+p1x\n                    if p1x == p2x or x <= xints:\n                        inside = not inside\n        p1x,p1y = p2x,p2y\n\n    return inside\n```\nfixed the error",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/epifanio",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/18949?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/18949?v=4&s=60",
   "displayName": "epifanio",
   "gv": "4",
   "id": "531e6e9c5e986b0712efdca9",
   "url": "/epifanio",
   "username": "epifanio",
   "v": 37
  },
  "html": "but the execution time is twice the time of the standard python implementation, so I guess I&#39;m again doing something wrong",
  "id": "5a82644ce217167e2c785fee",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-02-13T04:06:36.393Z",
  "text": "but the execution time is twice the time of the standard python implementation, so I guess I'm again doing something wrong",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/epifanio",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/18949?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/18949?v=4&s=60",
   "displayName": "epifanio",
   "gv": "4",
   "id": "531e6e9c5e986b0712efdca9",
   "url": "/epifanio",
   "username": "epifanio",
   "v": 37
  },
  "html": "it fails in nopython mode, the problem is the <code>poly</code> input, which is a list. If I cast it to array then the code build in nopython mode",
  "id": "5a826c3fce68c3bc747bf9ad",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-02-13T04:40:31.775Z",
  "text": "it fails in nopython mode, the problem is the `poly ` input, which is a list. If I cast it to array then the code build in nopython mode\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/tsoernes",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6782404?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6782404?v=4&s=60",
   "displayName": "tsoernes",
   "gv": "4",
   "id": "5630b88a16b6c7089cb88d49",
   "url": "/tsoernes",
   "username": "tsoernes",
   "v": 13
  },
  "html": "How can I specify function signature of a function in a jitclass? I tried specifying it in the spec object pass to the jitclass decorator but it won&#39;t let me. I need optional arguments for some of the functions. ",
  "id": "5a84584c5cc18726453b2bca",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-02-14T15:39:56.671Z",
  "text": "How can I specify function signature of a function in a jitclass? I tried specifying it in the spec object pass to the jitclass decorator but it won't let me. I need optional arguments for some of the functions. ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/tsoernes",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6782404?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6782404?v=4&s=60",
   "displayName": "tsoernes",
   "gv": "4",
   "id": "5630b88a16b6c7089cb88d49",
   "url": "/tsoernes",
   "username": "tsoernes",
   "v": 13
  },
  "html": "I found a method using <code>numba.FunctionType</code> but that seems deprecated",
  "id": "5a84594ae217167e2c8397d9",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-02-14T15:44:10.331Z",
  "text": "I found a method using `numba.FunctionType` but that seems deprecated",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"tsoernes\" class=\"mention\">@tsoernes</span>, I don\u2019t think there\u2019s a good way to mark a jitclass method to take optional type.  The best option for now is to make a function outside of the class to take an optional.  See the last example in <span data-link-type=\"issue\" data-issue=\"2749\" data-issue-repo=\"numba/numba\" class=\"issue\">numba/numba#2749</span>.",
  "id": "5a847806f283b8e5466045b5",
  "issues": [
   {
    "number": "2749",
    "repo": "numba/numba"
   }
  ],
  "mentions": [
   {
    "screenName": "tsoernes",
    "userId": "5630b88a16b6c7089cb88d49",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 15,
  "sent": "2018-02-14T17:55:18.420Z",
  "text": "@tsoernes, I don\u2019t think there\u2019s a good way to mark a jitclass method to take optional type.  The best option for now is to make a function outside of the class to take an optional.  See the last example in https://github.com/numba/numba/issues/2749.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/tsoernes",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6782404?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6782404?v=4&s=60",
   "displayName": "tsoernes",
   "gv": "4",
   "id": "5630b88a16b6c7089cb88d49",
   "url": "/tsoernes",
   "username": "tsoernes",
   "v": 13
  },
  "html": "How can I deal with storing and using 2D indecies in a jitclass? It seems impossible because a) numba can&#39;t infer types of tuples and function types can&#39;t be specified b) advanced indexing is not supported for 2D",
  "id": "5a849b87d74ee9f50dc59dbe",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-02-14T20:26:47.726Z",
  "text": "How can I deal with storing and using 2D indecies in a jitclass? It seems impossible because a) numba can't infer types of tuples and function types can't be specified b) advanced indexing is not supported for 2D",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-02-14T20:33:33.484Z",
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/tsoernes",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6782404?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6782404?v=4&s=60",
   "displayName": "tsoernes",
   "gv": "4",
   "id": "5630b88a16b6c7089cb88d49",
   "url": "/tsoernes",
   "username": "tsoernes",
   "v": 13
  },
  "html": "example: <a href=\"https://paste.pound-python.org/show/U2B2tZRZH5EyPOpvu4PC/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://paste.pound-python.org/show/U2B2tZRZH5EyPOpvu4PC/</a>",
  "id": "5a849c8de217167e2c855897",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-02-14T20:31:09.505Z",
  "text": "example: https://paste.pound-python.org/show/U2B2tZRZH5EyPOpvu4PC/",
  "unread": false,
  "urls": [
   {
    "url": "https://paste.pound-python.org/show/U2B2tZRZH5EyPOpvu4PC/"
   }
  ],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"tsoernes\" class=\"mention\">@tsoernes</span>, how about putting the 2D indices into an array?   You can use them as <code>(arr[0], arr[1])</code>.<br>For b), can you provide an example for the fancy indexing that isn\u2019t supported? ",
  "id": "5a84b1d75cc18726453d81ae",
  "issues": [],
  "mentions": [
   {
    "screenName": "tsoernes",
    "userId": "5630b88a16b6c7089cb88d49",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 15,
  "sent": "2018-02-14T22:01:59.325Z",
  "text": "@tsoernes, how about putting the 2D indices into an array?   You can use them as `(arr[0], arr[1])`.\nFor b), can you provide an example for the fancy indexing that isn\u2019t supported? ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-02-14T22:05:32.364Z",
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/tsoernes",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6782404?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6782404?v=4&s=60",
   "displayName": "tsoernes",
   "gv": "4",
   "id": "5630b88a16b6c7089cb88d49",
   "url": "/tsoernes",
   "username": "tsoernes",
   "v": 13
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"sklam\" class=\"mention\">@sklam</span> b) <code>arr[([1,2,3],[1,2,3])]</code>",
  "id": "5a84b29cce68c3bc748933d0",
  "issues": [],
  "mentions": [
   {
    "screenName": "sklam",
    "userId": "55b689f50fc9f982beab2a24",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 15,
  "sent": "2018-02-14T22:05:16.837Z",
  "text": "@sklam b) `arr[([1,2,3],[1,2,3])]`",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/tsoernes",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6782404?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6782404?v=4&s=60",
   "displayName": "tsoernes",
   "gv": "4",
   "id": "5630b88a16b6c7089cb88d49",
   "url": "/tsoernes",
   "username": "tsoernes",
   "v": 13
  },
  "html": "which should yield an array <code>[arr[1][1], arr[2][2], arr[3][3]]</code>",
  "id": "5a84b2f093be87284dba63c8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-02-14T22:06:40.568Z",
  "text": "which should yield an array `[arr[1][1], arr[2][2], arr[3][3]]`",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/tsoernes",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6782404?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6782404?v=4&s=60",
   "displayName": "tsoernes",
   "gv": "4",
   "id": "5630b88a16b6c7089cb88d49",
   "url": "/tsoernes",
   "username": "tsoernes",
   "v": 13
  },
  "html": "the index spec <code>([1,2,3],[1,2,3])</code> is the same as returned from np.where",
  "id": "5a84b3215cc18726453d88e9",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-02-14T22:07:29.675Z",
  "text": "the index spec `([1,2,3],[1,2,3])` is the same as returned from np.where",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/tsoernes",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6782404?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6782404?v=4&s=60",
   "displayName": "tsoernes",
   "gv": "4",
   "id": "5630b88a16b6c7089cb88d49",
   "url": "/tsoernes",
   "username": "tsoernes",
   "v": 13
  },
  "html": "i.e. <code>([row1, row2,..], ([col1,..])</code>",
  "id": "5a84b36fce68c3bc74893842",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-02-14T22:08:47.172Z",
  "text": "i.e. `([row1, row2,..], ([col1,..])`",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "I am tracking the fancyindexing issue at <span data-link-type=\"issue\" data-issue=\"2752\" data-issue-repo=\"numba/numba\" class=\"issue\">numba/numba#2752</span>",
  "id": "5a84b8d3e217167e2c85fb15",
  "issues": [
   {
    "number": "2752",
    "repo": "numba/numba"
   }
  ],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-02-14T22:31:47.193Z",
  "text": "I am tracking the fancyindexing issue at https://github.com/numba/numba/issues/2752",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-02-14T22:47:07.912Z",
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/g/u/SamaBerenjian_twitter",
   "avatarUrlMedium": "https://abs.twimg.com/sticky/default_profile_images/default_profile_normal.png?s=128",
   "avatarUrlSmall": "https://abs.twimg.com/sticky/default_profile_images/default_profile_normal.png?s=60",
   "displayName": "Samaneh Berenjian",
   "id": "5a4fb90bd73408ce4f865c0f",
   "url": "/SamaBerenjian_twitter",
   "username": "SamaBerenjian_twitter"
  },
  "html": "Does anyone know how llvm would deal with some code in c like:<br><code>extern int (*fptr)(int a);</code><br><code>int func(int b)</code><br><code>{</code><br>        <code>return fptr(b);</code><br><code>}</code> . How may I handle call to pointers specially when I do not have the address? <span data-link-type=\"mention\" data-screen-name=\"sklam\" class=\"mention\">@sklam</span>",
  "id": "5a84bbe77084124a347ab75f",
  "issues": [],
  "mentions": [
   {
    "screenName": "sklam",
    "userId": "55b689f50fc9f982beab2a24",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 14,
  "sent": "2018-02-14T22:44:55.254Z",
  "text": "Does anyone know how llvm would deal with some code in c like:                                                                                                                                                                                                                       \n`extern int (*fptr)(int a);`  \n`int func(int b)`\n`{`\n        `return fptr(b);`\n`}` . How may I handle call to pointers specially when I do not have the address? @sklam",
  "unread": false,
  "urls": [],
  "v": 4
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/RemiLehe",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/6685781?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/6685781?v=4&s=60",
   "displayName": "Remi Lehe",
   "gv": "4",
   "id": "5a7dc851d73408ce4f8c7098",
   "url": "/RemiLehe",
   "username": "RemiLehe",
   "v": 1
  },
  "html": "One quick question:<br>I was wondering whether <code>generated_jit</code> can be used in order to produce device functions?<br>In other words can it be used within <code>cuda.jit</code> kernel?",
  "id": "5a84c80f7084124a347af501",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-02-14T23:36:47.355Z",
  "text": "One quick question:\nI was wondering whether `generated_jit` can be used in order to produce device functions?\nIn other words can it be used within `cuda.jit` kernel?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Gentlemen, I think I&#39;m running into a limitation of numba, or a bug. <a href=\"https://ybin.me/p/a409c3917ddc747a#JOsTTcfwXQx14e4Y1WwoZiyQL1H7zJGpGg6zk6ROQ5E=\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://ybin.me/p/a409c3917ddc747a#JOsTTcfwXQx14e4Y1WwoZiyQL1H7zJGpGg6zk6ROQ5E=</a>",
  "id": "5a854f62d74ee9f50dc91513",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-02-15T09:14:10.821Z",
  "text": "Gentlemen, I think I'm running into a limitation of numba, or a bug. https://ybin.me/p/a409c3917ddc747a#JOsTTcfwXQx14e4Y1WwoZiyQL1H7zJGpGg6zk6ROQ5E=",
  "unread": false,
  "urls": [
   {
    "url": "https://ybin.me/p/a409c3917ddc747a#JOsTTcfwXQx14e4Y1WwoZiyQL1H7zJGpGg6zk6ROQ5E="
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Here&#39;s the error message I get: <a href=\"https://ybin.me/p/e0d9addf45ca64eb#/GcJoMQAIcKPiotouIR2YaAW1yDe+9yUG0yhq6tqN/A=\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://ybin.me/p/e0d9addf45ca64eb#/GcJoMQAIcKPiotouIR2YaAW1yDe+9yUG0yhq6tqN/A=</a>",
  "id": "5a854fa97084124a347d5a94",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-02-15T09:15:21.917Z",
  "text": "Here's the error message I get: https://ybin.me/p/e0d9addf45ca64eb#/GcJoMQAIcKPiotouIR2YaAW1yDe+9yUG0yhq6tqN/A=",
  "unread": false,
  "urls": [
   {
    "url": "https://ybin.me/p/e0d9addf45ca64eb#/GcJoMQAIcKPiotouIR2YaAW1yDe+9yUG0yhq6tqN/A="
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Literally<em>can</em> will not throw the error, while literally<em>cant</em> will.",
  "id": "5a854fd7e217167e2c88b2a3",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-02-15T09:16:07.860Z",
  "text": "Literally_can_ will not throw the error, while literally_cant_ will.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Short description: when indexing a numpy array with an integer variable, created as float but converted to int, numba will throw an indexing error. However, it will only do this when the integer conversion is done inside a loop.",
  "id": "5a855134ce68c3bc748c2080",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-02-15T09:21:56.373Z",
  "text": "Short description: when indexing a numpy array with an integer variable, created as float but converted to int, numba will throw an indexing error. However, it will only do this when the integer conversion is done inside a loop.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"Rik-de-Kort\" class=\"mention\">@Rik-de-Kort</span> thanks, this is probably a bug",
  "id": "5a8555f9d74ee9f50dc93de2",
  "issues": [],
  "mentions": [
   {
    "screenName": "Rik-de-Kort",
    "userId": "5a0ea31cd73408ce4f7f000d",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 14,
  "sent": "2018-02-15T09:42:17.253Z",
  "text": "@Rik-de-Kort thanks, this is probably a bug",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Shall I file an issue?",
  "id": "5a8556137084124a347d8574",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-02-15T09:42:43.060Z",
  "text": "Shall I file an issue?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "just tested it, I think I&#39;ve seen something similar before, but yes, please file an issue",
  "id": "5a8557154a6b0dd32bd3f282",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-02-15T09:47:01.567Z",
  "text": "just tested it, I think I've seen something similar before, but yes, please file an issue",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "(thanks :-))",
  "id": "5a8557394a6b0dd32bd3f302",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-02-15T09:47:37.373Z",
  "text": "(thanks :-))",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "No problem :)",
  "id": "5a85574ace68c3bc748c4039",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-02-15T09:47:54.878Z",
  "text": "No problem :)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "As a quick fix to your code, if you want that behaviour, rename the assigned var in <code>w=int(w)</code> to something else",
  "id": "5a8557b97084124a347d8f49",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-02-15T09:49:45.669Z",
  "text": "As a quick fix to your code, if you want that behaviour, rename the assigned var in `w=int(w)` to something else",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"njit\" class=\"mention\">@njit</span>()",
  "id": "5a8557bd5cc187264540a5a8",
  "issues": [],
  "mentions": [
   {
    "screenName": "njit",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 15,
  "sent": "2018-02-15T09:49:49.787Z",
  "text": "@njit()",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "def literally<em>cant</em>(even):",
  "id": "5a8557bd4a6b0dd32bd3f60b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-02-15T09:49:49.893Z",
  "text": "def literally_cant_(even):",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "<pre><code><span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"function\"><span class=\"title\">range</span><span class=\"params\">(<span class=\"number\">1</span>)</span></span>:</code></pre>",
  "id": "5a8557bece68c3bc748c436e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-02-15T09:49:49.991Z",
  "text": "    for _ in range(1):",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "<pre><code>    <span class=\"title\">w</span> = <span class=\"number\">0</span>.<span class=\"number\">0</span></code></pre>",
  "id": "5a8557be93be87284dbd5df8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-02-15T09:49:50.251Z",
  "text": "        w = 0.0",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "<pre><code>    <span class=\"tag\">a</span> = <span class=\"function\"><span class=\"title\">int</span><span class=\"params\">(w)</span></span></code></pre>",
  "id": "5a8557be93be87284dbd5dfa",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-02-15T09:49:50.355Z",
  "text": "        a = int(w)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "<pre><code>    <span class=\"title\">few</span> = even[a]</code></pre>",
  "id": "5a8557bee217167e2c88e09c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-02-15T09:49:50.459Z",
  "text": "        few = even[a]",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "<pre><code><span class=\"command\">return</span> <span class=\"number\">0</span></code></pre>",
  "id": "5a8557c0b3c4a0d3762747be",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-02-15T09:49:52.286Z",
  "text": "    return 0",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Yeah I figured that out ;0",
  "id": "5a8557c5f283b8e54664cb2c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-02-15T09:49:57.919Z",
  "text": "Yeah I figured that out ;0",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "ought to work",
  "id": "5a8557c6f283b8e54664cb30",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-02-15T09:49:58.265Z",
  "text": "ought to work",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "I discovered the fix before I created the MWE",
  "id": "5a8557e618f388e626a7a743",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-02-15T09:50:30.382Z",
  "text": "I discovered the fix before I created the MWE",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "great :) it was doing that that seemed familiar that makes me think there&#39;s a similar issue already",
  "id": "5a8558024a6b0dd32bd3f7a7",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-02-15T09:50:58.417Z",
  "text": "great :) it was doing that that seemed familiar that makes me think there's a similar issue already",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Issue <span data-link-type=\"issue\" data-issue=\"2753\" class=\"issue\">#2753</span>  has been filed :)",
  "id": "5a855b78b3c4a0d376276058",
  "issues": [
   {
    "number": "2753"
   }
  ],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-02-15T10:05:44.821Z",
  "text": "Issue #2753  has been filed :)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "great, thanks",
  "id": "5a855c1b4a6b0dd32bd4113e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-02-15T10:08:27.359Z",
  "text": "great, thanks",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-02-15T16:14:30.954Z",
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"SamaBerenjian_twitter\" class=\"mention\">@SamaBerenjian_twitter</span> , for the c code snippet, you should compile it thru <code>clang -emit-llvm -S yourcode.c</code> to see what llvm it is producing.  As for call to pointers with unknown address, you can declared an symbol that you resolve later with <a href=\"http://llvmlite.pydata.org/en/latest/user-guide/binding/dynamic-libraries.html\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">llvmlite.binding.add_symbol</a>.  So you still need to know the pointer at some point.",
  "id": "5a85b1d093be87284dbfbe05",
  "issues": [],
  "mentions": [
   {
    "screenName": "SamaBerenjian_twitter",
    "userId": "5a4fb90bd73408ce4f865c0f",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 16,
  "sent": "2018-02-15T16:14:08.755Z",
  "text": "@SamaBerenjian_twitter , for the c code snippet, you should compile it thru `clang -emit-llvm -S yourcode.c` to see what llvm it is producing.  As for call to pointers with unknown address, you can declared an symbol that you resolve later with [llvmlite.binding.add_symbol](http://llvmlite.pydata.org/en/latest/user-guide/binding/dynamic-libraries.html).  So you still need to know the pointer at some point.",
  "unread": false,
  "urls": [
   {
    "url": "http://llvmlite.pydata.org/en/latest/user-guide/binding/dynamic-libraries.html"
   }
  ],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/epifanio",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/18949?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/18949?v=4&s=60",
   "displayName": "epifanio",
   "gv": "4",
   "id": "531e6e9c5e986b0712efdca9",
   "url": "/epifanio",
   "username": "epifanio",
   "v": 37
  },
  "html": "<p>HI, I\u2019m trying to learn <code>numba</code> but I&#39;m having a little hard time to understand how to assign values to an array which is what is returned by a simple function. This my example numba code : </p><pre><code><span class=\"keyword\">from</span> numba <span class=\"keyword\">import</span> jit\n<span class=\"keyword\">from</span> numba.pycc <span class=\"keyword\">import</span> CC\n<span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np\ncc = CC(<span class=\"string\">'nbspatial'</span>)\n\n<span class=\"decorator\">@cc.export('s2r',  'f8[:,:](f8[:,:])')</span>\n<span class=\"decorator\">@jit</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">s2r</span><span class=\"params\">(l)</span>:</span>\n    lx = l.shape[<span class=\"number\">0</span>]\n    sesp = np.zeros((lx, <span class=\"number\">1</span>))\n    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> np.arange(lx):\n        dec = l[i,<span class=\"number\">0</span>]+(l[i,<span class=\"number\">1</span>]/<span class=\"number\">60</span>)+l[i,<span class=\"number\">2</span>]/<span class=\"number\">3600</span>\n        rad = (dec * np.pi ) / <span class=\"number\">180.</span>\n        decc = l[i,<span class=\"number\">3</span>]+(l[i,<span class=\"number\">4</span>]/<span class=\"number\">60</span>)+l[i,<span class=\"number\">5</span>]/<span class=\"number\">3600</span>\n        radd = (decc * np.pi ) / <span class=\"number\">180.</span>\n        sesp[i,:] = [rad]\n    <span class=\"keyword\">return</span> sesp</code></pre><p>Testing it with:</p><pre><code>import numpy as np\nimport nbspatial\n\n l=np.<span class=\"function\"><span class=\"title\">array</span><span class=\"params\">([[<span class=\"number\">0</span>, <span class=\"number\">25</span>, <span class=\"number\">30</span>, <span class=\"number\">15</span>, <span class=\"number\">23</span>, <span class=\"number\">43</span>], [<span class=\"number\">0</span>, <span class=\"number\">25</span>, <span class=\"number\">30</span>, <span class=\"number\">15</span>, <span class=\"number\">23</span>, <span class=\"number\">43</span>]])</span></span>\nnbspatial.<span class=\"function\"><span class=\"title\">s2r</span><span class=\"params\">(l)</span></span></code></pre><p>The results is:</p><pre><code>array(<span class=\"string\">[[ 0.],\n       [ 0.]]</span>)</code></pre><p>But  it is supposed to be:</p><pre><code>array(<span class=\"string\">[[ 0.00741765],\n       [ 0.00741765]]</span>)</code></pre><p>Cany you help me understanding what I\u2019m doing wrong?</p>",
  "id": "5a85efd4f283b8e54668b341",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-02-15T20:38:44.815Z",
  "text": "HI, I\u2019m trying to learn `numba` but I'm having a little hard time to understand how to assign values to an array which is what is returned by a simple function. This my example numba code : \n\n```\nfrom numba import jit\nfrom numba.pycc import CC\nimport numpy as np\ncc = CC('nbspatial')\n\n@cc.export('s2r',  'f8[:,:](f8[:,:])')\n@jit\ndef s2r(l):\n    lx = l.shape[0]\n    sesp = np.zeros((lx, 1))\n    for i in np.arange(lx):\n        dec = l[i,0]+(l[i,1]/60)+l[i,2]/3600\n        rad = (dec * np.pi ) / 180.\n        decc = l[i,3]+(l[i,4]/60)+l[i,5]/3600\n        radd = (decc * np.pi ) / 180.\n        sesp[i,:] = [rad]\n    return sesp\n```\nTesting it with:\n\n```\nimport numpy as np\nimport nbspatial\n\n l=np.array([[0, 25, 30, 15, 23, 43], [0, 25, 30, 15, 23, 43]])\nnbspatial.s2r(l)\n ```\n\nThe results is:\n\n```\narray([[ 0.],\n       [ 0.]])\n```\nBut  it is supposed to be:\n\n```\narray([[ 0.00741765],\n       [ 0.00741765]])\n```\nCany you help me understanding what I\u2019m doing wrong?\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "If I run your function without <code>@jit</code> (so just plain numpy), I also get <code>[[0,0]]</code> returned",
  "id": "5a85f0f2b3c4a0d3762b5231",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-02-15T20:43:30.767Z",
  "text": "If I run your function without `@jit` (so just plain numpy), I also get `[[0,0]]` returned",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "oh wait",
  "id": "5a85f1295cc187264544b4a3",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-02-15T20:44:25.120Z",
  "text": "oh wait",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "are you running in Python 2 or Python 3?",
  "id": "5a85f12ee217167e2c8ce427",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-02-15T20:44:30.651Z",
  "text": "are you running in Python 2 or Python 3?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "In my tests, Numba returns the same result as NumPy, but to get your expected answer, I have to either be using Python 3, or put <code>from __future__ import division</code> at the top of my file",
  "id": "5a85f1697084124a348171f5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-02-15T20:45:29.229Z",
  "text": "In my tests, Numba returns the same result as NumPy, but to get your expected answer, I have to either be using Python 3, or put `from __future__ import division` at the top of my file",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/epifanio",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/18949?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/18949?v=4&s=60",
   "displayName": "epifanio",
   "gv": "4",
   "id": "531e6e9c5e986b0712efdca9",
   "url": "/epifanio",
   "username": "epifanio",
   "v": 37
  },
  "html": "i\u2019m using python3.6",
  "id": "5a85f18a7084124a3481728d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-02-15T20:46:01.998Z",
  "text": "i\u2019m using python3.6",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-02-15T20:46:43.289Z",
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "ok, let me try Python 3 quickly.  I was able to get the expected answer with Python 2 and the <code>from __future__</code> change",
  "id": "5a85f1abd74ee9f50dcd38a5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-02-15T20:46:35.124Z",
  "text": "ok, let me try Python 3 quickly.  I was able to get the expected answer with Python 2 and the `from __future__` change",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "ok, yeah, I also get your expected result (<code>array([[0.00741765],[0.00741765]])</code>)when I run with Numba 0.36.2 and Python 3.6",
  "id": "5a85f268f283b8e54668c3e8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-02-15T20:49:44.407Z",
  "text": "ok, yeah, I also get your expected result (`array([[0.00741765],[0.00741765]])`)when I run with Numba 0.36.2 and Python 3.6",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "so the code you posted should work with <code>@jit</code>",
  "id": "5a85f28e4a6b0dd32bd80f9c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-02-15T20:50:22.199Z",
  "text": "so the code you posted should work with `@jit`",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "I see in your example you are calling to a precompiled nbspatial module, is it possible that module is out of date and running an earlier version of your function?",
  "id": "5a85f2cb93be87284dc16257",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-02-15T20:51:23.216Z",
  "text": "I see in your example you are calling to a precompiled nbspatial module, is it possible that module is out of date and running an earlier version of your function?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/epifanio",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/18949?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/18949?v=4&s=60",
   "displayName": "epifanio",
   "gv": "4",
   "id": "531e6e9c5e986b0712efdca9",
   "url": "/epifanio",
   "username": "epifanio",
   "v": 37
  },
  "html": "I\u2019m now trying the same code interactively in the notebook, and I got the expected result. while  trying to use it with <code>AOT</code> by compiling the file first and then running it I got the 0,0 issue",
  "id": "5a85f32be217167e2c8cf160",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-02-15T20:52:59.070Z",
  "text": "I\u2019m now trying the same code interactively in the notebook, and I got the expected result. while  trying to use it with `AOT` by compiling the file first and then running it I got the 0,0 issue",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/epifanio",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/18949?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/18949?v=4&s=60",
   "displayName": "epifanio",
   "gv": "4",
   "id": "531e6e9c5e986b0712efdca9",
   "url": "/epifanio",
   "username": "epifanio",
   "v": 37
  },
  "html": "I\u2019ll try to remove the generated <code>.so</code> and the <code>var</code> files and try again",
  "id": "5a85f344f283b8e54668cb33",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-02-15T20:53:24.312Z",
  "text": "I\u2019ll try to remove the generated `.so` and the `var` files and try again",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-02-15T20:57:37.641Z",
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/epifanio",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/18949?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/18949?v=4&s=60",
   "displayName": "epifanio",
   "gv": "4",
   "id": "531e6e9c5e986b0712efdca9",
   "url": "/epifanio",
   "username": "epifanio",
   "v": 37
  },
  "html": "I removed the <code>.so</code> and restarted the kernel, rebuilt and reimported the nbspatial module but the results is still &#39;[0,0]&#39;",
  "id": "5a85f432e217167e2c8cf6fd",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-02-15T20:57:22.312Z",
  "text": "I removed the `.so` and restarted the kernel, rebuilt and reimported the nbspatial module but the results is still '[0,0]'",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/epifanio",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/18949?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/18949?v=4&s=60",
   "displayName": "epifanio",
   "gv": "4",
   "id": "531e6e9c5e986b0712efdca9",
   "url": "/epifanio",
   "username": "epifanio",
   "v": 37
  },
  "html": "the <code>src.py</code> file is:<pre><code><span class=\"keyword\">from</span> numba <span class=\"keyword\">import</span> jit\n<span class=\"keyword\">from</span> numba.pycc <span class=\"keyword\">import</span> CC\n<span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np\ncc = CC(<span class=\"string\">'nbspatial'</span>)\n\n<span class=\"decorator\">@cc.export('s2r',  'f8[:,:](f8[:,:])')</span>\n\n<span class=\"decorator\">@jit</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">s2r</span><span class=\"params\">(l)</span>:</span>\n    lx = l.shape[<span class=\"number\">0</span>]\n    sesp = np.zeros((lx, <span class=\"number\">1</span>))\n    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> np.arange(lx):\n        dec = l[i,<span class=\"number\">0</span>]+(l[i,<span class=\"number\">1</span>]/<span class=\"number\">60</span>)+l[i,<span class=\"number\">2</span>]/<span class=\"number\">3600</span>\n        rad = (dec * np.pi ) / <span class=\"number\">180.</span>\n        decc = l[i,<span class=\"number\">3</span>]+(l[i,<span class=\"number\">4</span>]/<span class=\"number\">60</span>)+l[i,<span class=\"number\">5</span>]/<span class=\"number\">3600</span>\n        radd = (decc * np.pi ) / <span class=\"number\">180.</span>\n        sesp[i,:] = [rad]\n    <span class=\"keyword\">return</span> sesp\n\n<span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:\n    cc.compile()</code></pre>",
  "id": "5a85f48993be87284dc16d75",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-02-15T20:58:49.874Z",
  "text": "the `src.py` file is:\n```\nfrom numba import jit\nfrom numba.pycc import CC\nimport numpy as np\ncc = CC('nbspatial')\n\n@cc.export('s2r',  'f8[:,:](f8[:,:])')\n\n@jit\ndef s2r(l):\n    lx = l.shape[0]\n    sesp = np.zeros((lx, 1))\n    for i in np.arange(lx):\n        dec = l[i,0]+(l[i,1]/60)+l[i,2]/3600\n        rad = (dec * np.pi ) / 180.\n        decc = l[i,3]+(l[i,4]/60)+l[i,5]/3600\n        radd = (decc * np.pi ) / 180.\n        sesp[i,:] = [rad]\n    return sesp\n\nif __name__ == \"__main__\":\n    cc.compile()\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/epifanio",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/18949?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/18949?v=4&s=60",
   "displayName": "epifanio",
   "gv": "4",
   "id": "531e6e9c5e986b0712efdca9",
   "url": "/epifanio",
   "username": "epifanio",
   "v": 37
  },
  "html": "perhaps something wrong in the signature:  <code>@cc.export(&#39;s2r&#39;,  &#39;f8[:,:](f8[:,:])\u2019)</code> ?",
  "id": "5a85f4ba93be87284dc16e27",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-02-15T20:59:38.229Z",
  "text": "perhaps something wrong in the signature:  `@cc.export('s2r',  'f8[:,:](f8[:,:])\u2019)` ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/epifanio",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/18949?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/18949?v=4&s=60",
   "displayName": "epifanio",
   "gv": "4",
   "id": "531e6e9c5e986b0712efdca9",
   "url": "/epifanio",
   "username": "epifanio",
   "v": 37
  },
  "html": "this should help in rreproducing the issue:  <a href=\"https://gist.github.com/0e63110518f278a48662ddedd48b609b\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://gist.github.com/0e63110518f278a48662ddedd48b609b</a>",
  "id": "5a85f6f67084124a348197ca",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-02-15T21:09:10.109Z",
  "text": "this should help in rreproducing the issue:  https://gist.github.com/0e63110518f278a48662ddedd48b609b",
  "unread": false,
  "urls": [
   {
    "url": "https://gist.github.com/0e63110518f278a48662ddedd48b609b"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/tsoernes",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6782404?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6782404?v=4&s=60",
   "displayName": "tsoernes",
   "gv": "4",
   "id": "5630b88a16b6c7089cb88d49",
   "url": "/tsoernes",
   "username": "tsoernes",
   "v": 13
  },
  "html": "Any thoughts on this issue? <a href=\"https://paste.pound-python.org/show/625AuAcMDtuh1xd869Cz/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://paste.pound-python.org/show/625AuAcMDtuh1xd869Cz/</a>",
  "id": "5a860dcf66d2d6f353cd60a8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-02-15T22:46:39.723Z",
  "text": "Any thoughts on this issue? https://paste.pound-python.org/show/625AuAcMDtuh1xd869Cz/",
  "unread": false,
  "urls": [
   {
    "url": "https://paste.pound-python.org/show/625AuAcMDtuh1xd869Cz/"
   }
  ],
  "v": 1
 },
 {
  "editedAt": "2018-02-15T22:47:52.845Z",
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/tsoernes",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6782404?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6782404?v=4&s=60",
   "displayName": "tsoernes",
   "gv": "4",
   "id": "5630b88a16b6c7089cb88d49",
   "url": "/tsoernes",
   "username": "tsoernes",
   "v": 13
  },
  "html": "I&#39;ve also tried converting to int32 before passing to shape, i.e. <code>np.zeros((int32(rows+1), cols), int32)</code>",
  "id": "5a860e0d82b516321a6d4046",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-02-15T22:47:41.745Z",
  "text": "I've also tried converting to int32 before passing to shape, i.e. `np.zeros((int32(rows+1), cols), int32)`",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "editedAt": "2018-02-15T22:51:04.576Z",
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/tsoernes",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6782404?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6782404?v=4&s=60",
   "displayName": "tsoernes",
   "gv": "4",
   "id": "5630b88a16b6c7089cb88d49",
   "url": "/tsoernes",
   "username": "tsoernes",
   "v": 13
  },
  "html": "and have tried <code>np.zeros((int32(int32(rows)+1), int32(cols)), int32)</code> .. It really won&#39;t let me construct an array if I add <code>1</code> to any shape dim",
  "id": "5a860eb066d2d6f353cd66da",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-02-15T22:50:24.711Z",
  "text": "and have tried `np.zeros((int32(int32(rows)+1), int32(cols)), int32)` .. It really won't let me construct an array if I add `1` to any shape dim",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/epifanio",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/18949?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/18949?v=4&s=60",
   "displayName": "epifanio",
   "gv": "4",
   "id": "531e6e9c5e986b0712efdca9",
   "url": "/epifanio",
   "username": "epifanio",
   "v": 37
  },
  "html": "I got a <a href=\"https://github.com/numba/numba/issues/2755#issuecomment-366085305\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">nice reply</a> about my issue, thanks <span data-link-type=\"mention\" data-screen-name=\"numba-devs\" class=\"mention\">@numba-devs</span>",
  "id": "5a86104985f5a7331a599a10",
  "issues": [],
  "mentions": [
   {
    "screenName": "numba-devs",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 17,
  "sent": "2018-02-15T22:57:13.422Z",
  "text": "I got a [nice reply](https://github.com/numba/numba/issues/2755#issuecomment-366085305) about my issue, thanks @numba-devs",
  "unread": false,
  "urls": [
   {
    "url": "https://github.com/numba/numba/issues/2755#issuecomment-366085305"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/epifanio",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/18949?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/18949?v=4&s=60",
   "displayName": "epifanio",
   "gv": "4",
   "id": "531e6e9c5e986b0712efdca9",
   "url": "/epifanio",
   "username": "epifanio",
   "v": 37
  },
  "html": "I needed to declare the type in <code>l=np.array([[60, 25, 30, 15, 23, 43], [40, 25, 30, 15, 23, 43]])</code> so that it matches the signature when pre-compiling",
  "id": "5a86107bfd93ccdd2545b64e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-02-15T22:58:03.594Z",
  "text": "I needed to declare the type in `l=np.array([[60, 25, 30, 15, 23, 43], [40, 25, 30, 15, 23, 43]])` so that it matches the signature when pre-compiling",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/epifanio",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/18949?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/18949?v=4&s=60",
   "displayName": "epifanio",
   "gv": "4",
   "id": "531e6e9c5e986b0712efdca9",
   "url": "/epifanio",
   "username": "epifanio",
   "v": 37
  },
  "html": "so, with no changes in the function I can now use the code by specifying the ttype in the input array: <code>l=np.array([[60, 25, 30, 15, 23, 43], [40, 25, 30, 15, 23, 43]], dtype=np.float64)</code>",
  "id": "5a8610b6c0c10af4538bc3a4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-02-15T22:59:02.105Z",
  "text": "so, with no changes in the function I can now use the code by specifying the ttype in the input array: ```l=np.array([[60, 25, 30, 15, 23, 43], [40, 25, 30, 15, 23, 43]], dtype=np.float64)```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/tsoernes",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6782404?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6782404?v=4&s=60",
   "displayName": "tsoernes",
   "gv": "4",
   "id": "5630b88a16b6c7089cb88d49",
   "url": "/tsoernes",
   "username": "tsoernes",
   "v": 13
  },
  "html": "A better example of my issue.. <a href=\"https://paste.pound-python.org/show/MyMVAZxv1gulVd5jKgDi/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://paste.pound-python.org/show/MyMVAZxv1gulVd5jKgDi/</a>",
  "id": "5a86145c4804c9335ca03285",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-02-15T23:14:36.657Z",
  "text": "A better example of my issue.. https://paste.pound-python.org/show/MyMVAZxv1gulVd5jKgDi/",
  "unread": false,
  "urls": [
   {
    "url": "https://paste.pound-python.org/show/MyMVAZxv1gulVd5jKgDi/"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/tsoernes",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6782404?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6782404?v=4&s=60",
   "displayName": "tsoernes",
   "gv": "4",
   "id": "5630b88a16b6c7089cb88d49",
   "url": "/tsoernes",
   "username": "tsoernes",
   "v": 13
  },
  "html": "How can I set the readonly flag for an array in the type sig? <code>No conversion from readonly array(int32, 2d, C) to array(int32, 2d, C)</code>",
  "id": "5a8709b2da468f7539f56e90",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-02-16T16:41:22.254Z",
  "text": "How can I set the readonly flag for an array in the type sig? `No conversion from readonly array(int32, 2d, C) to array(int32, 2d, C)`",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "readonly=True ?",
  "id": "5a870a1a10f501211af2e5b2",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-02-16T16:43:06.631Z",
  "text": "readonly=True ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/tsoernes",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6782404?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6782404?v=4&s=60",
   "displayName": "tsoernes",
   "gv": "4",
   "id": "5630b88a16b6c7089cb88d49",
   "url": "/tsoernes",
   "username": "tsoernes",
   "v": 13
  },
  "html": "ah, got it. You can&#39;t do it using the <code>int32[:, :]</code> notation, right?",
  "id": "5a870b6510f501211af2f1ba",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-02-16T16:48:37.591Z",
  "text": "ah, got it. You can't do it using the `int32[:, :]` notation, right?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/tsoernes",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6782404?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6782404?v=4&s=60",
   "displayName": "tsoernes",
   "gv": "4",
   "id": "5630b88a16b6c7089cb88d49",
   "url": "/tsoernes",
   "username": "tsoernes",
   "v": 13
  },
  "html": "<code>Array(int32, 2, &#39;C&#39;, True)</code> worked",
  "id": "5a870b72d786ce546e70ddd8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-02-16T16:48:50.421Z",
  "text": "`Array(int32, 2, 'C', True)` worked",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "the type string is just eval&#39;d into life with <code>numba.types</code> as the locals",
  "id": "5a87102acc9e4b536eceff26",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-02-16T17:08:58.779Z",
  "text": "the type string is just eval'd into life with `numba.types` as the locals",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "Numba 0.37.0 released: <a href=\"https://groups.google.com/a/continuum.io/forum/#!topic/numba-users/cbXvsOs_JTw\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://groups.google.com/a/continuum.io/forum/#!topic/numba-users/cbXvsOs_JTw</a>",
  "id": "5a8b3f686fba1a703a73e9af",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-02-19T21:19:36.884Z",
  "text": "Numba 0.37.0 released: https://groups.google.com/a/continuum.io/forum/#!topic/numba-users/cbXvsOs_JTw",
  "unread": false,
  "urls": [
   {
    "url": "https://groups.google.com/a/continuum.io/forum/#!topic/numba-users/cbXvsOs_JTw"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Question, I have a very basic infinite loop example:<br>````python<br>def foo(a,b):",
  "id": "5a9065978f1c77ef3a48269e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-02-23T19:03:51.508Z",
  "text": "Question, I have a very basic infinite loop example:\n````python\ndef foo(a,b):",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "enter pls",
  "id": "5a90659d8f1c77ef3a4826aa",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-02-23T19:03:57.516Z",
  "text": "enter pls",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "<pre><code class=\"python\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">(a, b)</span>:</span>\n     <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:\n        <span class=\"keyword\">pass</span>\n    <span class=\"keyword\">return</span> a+b</code></pre>",
  "id": "5a9065be0202dc012e76e23a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-02-23T19:04:30.307Z",
  "text": "````python\ndef foo(a, b):\n     while True:\n        pass\n    return a+b\n````",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Which gives me the following error: ```SystemError: CPUDispatcher(&lt;function foo at 0x000001FBF059C8C8&gt;) returned NULL without setting an error````",
  "id": "5a9065d3c3c5f8b90df83dd5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-02-23T19:04:51.001Z",
  "text": "Which gives me the following error: ```SystemError: CPUDispatcher(<function foo at 0x000001FBF059C8C8>) returned NULL without setting an error````",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Is this intended behaviour?",
  "id": "5a9065e7c3c5f8b90df83e62",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-02-23T19:05:11.360Z",
  "text": "Is this intended behaviour?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "I call it with print(foo(3, 4))",
  "id": "5a9065f7a2194eb80da49609",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-02-23T19:05:27.547Z",
  "text": "I call it with print(foo(3, 4))",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-02-23T19:45:57.412Z",
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/g/u/SamaBerenjian_twitter",
   "avatarUrlMedium": "https://abs.twimg.com/sticky/default_profile_images/default_profile_normal.png?s=128",
   "avatarUrlSmall": "https://abs.twimg.com/sticky/default_profile_images/default_profile_normal.png?s=60",
   "displayName": "Samaneh Berenjian",
   "id": "5a4fb90bd73408ce4f865c0f",
   "url": "/SamaBerenjian_twitter",
   "username": "SamaBerenjian_twitter"
  },
  "html": "Does someone know how to go from the end of one function to the beginning  of the other function? does builder.goto_block work? <span data-link-type=\"mention\" data-screen-name=\"sklam\" class=\"mention\">@sklam</span>",
  "id": "5a906f6dc3c5f8b90df87704",
  "issues": [],
  "mentions": [
   {
    "screenName": "sklam",
    "userId": "55b689f50fc9f982beab2a24",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 16,
  "sent": "2018-02-23T19:45:49.503Z",
  "text": "Does someone know how to go from the end of one function to the beginning  of the other function? does builder.goto_block work? @sklam",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"Rik-de-Kort\" class=\"mention\">@Rik-de-Kort</span>, nope, <span data-link-type=\"issue\" data-issue=\"2769\" data-issue-repo=\"numba/numba\" class=\"issue\">numba/numba#2769</span> thanks for the report",
  "id": "5a907382c3c5f8b90df89017",
  "issues": [
   {
    "number": "2769",
    "repo": "numba/numba"
   }
  ],
  "mentions": [
   {
    "screenName": "Rik-de-Kort",
    "userId": "5a0ea31cd73408ce4f7f000d",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 15,
  "sent": "2018-02-23T20:03:14.904Z",
  "text": "@Rik-de-Kort, nope, https://github.com/numba/numba/issues/2769 thanks for the report",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "No problem, happy to help",
  "id": "5a92ed4d888332ee3acd99c5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-02-25T17:07:25.534Z",
  "text": "No problem, happy to help",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Is there any detailed overview of the typing system? I&#39;m interested in the implementations of various iterables, but the documentation only lists the base types",
  "id": "5a92fae553c1dbb74375b518",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-02-25T18:05:25.245Z",
  "text": "Is there any detailed overview of the typing system? I'm interested in the implementations of various iterables, but the documentation only lists the base types",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/anthonytec2",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/11021542?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/11021542?v=4&s=60",
   "displayName": "Anthony Bisulco",
   "gv": "4",
   "id": "5a9417fbd73408ce4f8ee399",
   "url": "/anthonytec2",
   "username": "anthonytec2",
   "v": 1
  },
  "html": "<p>New to Numba, anyone know what is wrong with this code: </p><pre><code>def main_loop(Mx,My,Nx,Ny,Nz,h,D,orginOffset,ep,mu,detector):\n    <span class=\"keyword\">for</span> z in range(<span class=\"number\">0</span>,Mx*My): \n        j=z<span class=\"variable\">%Mx</span>\n        i=<span class=\"keyword\">int</span>(z/Mx) \n        <span class=\"keyword\">print</span>\n        <span class=\"keyword\">pos</span>=np.array([orginOffset[<span class=\"number\">0</span>]+i*D,orginOffset[<span class=\"number\">1</span>]+D*j, <span class=\"number\">0</span>],dtype=<span class=\"string\">'np.float32'</span>)\n        dir=np.array((ep-<span class=\"keyword\">pos</span>)/np.linalg.norm(ep-<span class=\"keyword\">pos</span>),dtype=<span class=\"string\">'np.float32'</span>)\n        L=<span class=\"number\">1</span>\n        <span class=\"keyword\">while</span> <span class=\"keyword\">pos</span>[<span class=\"number\">2</span>]&lt; h+Nz:\n            <span class=\"keyword\">pos</span>,dist=onemove_in_cube_true_numba(<span class=\"keyword\">pos</span>,dir)\n            <span class=\"keyword\">if</span> <span class=\"number\">0</span> &lt;= <span class=\"keyword\">pos</span>[<span class=\"number\">0</span>] &lt; Nx <span class=\"keyword\">and</span> <span class=\"number\">0</span>&lt;=<span class=\"keyword\">pos</span>[<span class=\"number\">1</span>]&lt;Ny  <span class=\"keyword\">and</span> h&lt;=<span class=\"keyword\">pos</span>[<span class=\"number\">2</span>] &lt; h+Nz:\n                L=L*np.<span class=\"keyword\">exp</span>(-<span class=\"number\">1</span>*mu[math.floor(<span class=\"keyword\">pos</span>[<span class=\"number\">0</span>]),math.floor(<span class=\"keyword\">pos</span>[<span class=\"number\">1</span>]),math.floor(<span class=\"keyword\">pos</span>[<span class=\"number\">2</span>]-h)]*dist)\n        detector[i][j] = L;\n    <span class=\"keyword\">return</span> detector</code></pre><p>I am getting the error:<br>TypingError: Failed at nopython (nopython frontend)<br>Invalid usage of Function(&lt;built-in function array&gt;) with parameters (list(float64), dtype=const(&#39;np.float32&#39;))</p><ul>\n<li>parameterized<br>In definition 0:<br> rejected<br>[1] During: resolving callee type: Function(&lt;built-in function array&gt;)<br>[2] During: typing of call at &lt;ipython-input-3-9b814b9cb770&gt; (6)</li>\n</ul>\n",
  "id": "5a9418f4458cbde557ccdd6a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-02-26T14:25:56.558Z",
  "text": "New to Numba, anyone know what is wrong with this code: \n```\ndef main_loop(Mx,My,Nx,Ny,Nz,h,D,orginOffset,ep,mu,detector):\n    for z in range(0,Mx*My): \n        j=z%Mx\n        i=int(z/Mx) \n        print\n        pos=np.array([orginOffset[0]+i*D,orginOffset[1]+D*j, 0],dtype='np.float32')\n        dir=np.array((ep-pos)/np.linalg.norm(ep-pos),dtype='np.float32')\n        L=1\n        while pos[2]< h+Nz:\n            pos,dist=onemove_in_cube_true_numba(pos,dir)\n            if 0 <= pos[0] < Nx and 0<=pos[1]<Ny  and h<=pos[2] < h+Nz:\n                L=L*np.exp(-1*mu[math.floor(pos[0]),math.floor(pos[1]),math.floor(pos[2]-h)]*dist)\n        detector[i][j] = L;\n    return detector\n```\nI am getting the error:\nTypingError: Failed at nopython (nopython frontend)\nInvalid usage of Function(<built-in function array>) with parameters (list(float64), dtype=const('np.float32'))\n * parameterized\nIn definition 0:\n    rejected\n[1] During: resolving callee type: Function(<built-in function array>)\n[2] During: typing of call at <ipython-input-3-9b814b9cb770> (6)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "anthonytec2: the dtype you have expressed in the array constructor on line 6 is a string const which is not supported, try using just the raw dtype",
  "id": "5a94213e458cbde557cd1bbb",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-02-26T15:01:18.115Z",
  "text": "anthonytec2: the dtype you have expressed in the array constructor on line 6 is a string const which is not supported, try using just the raw dtype",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"anthonytec2\" class=\"mention\">@anthonytec2</span> ^",
  "id": "5a94214f8f1c77ef3a590776",
  "issues": [],
  "mentions": [
   {
    "screenName": "anthonytec2",
    "userId": "5a9417fbd73408ce4f8ee399",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 12,
  "sent": "2018-02-26T15:01:35.338Z",
  "text": "@anthonytec2 ^",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/anthonytec2",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/11021542?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/11021542?v=4&s=60",
   "displayName": "Anthony Bisulco",
   "gv": "4",
   "id": "5a9417fbd73408ce4f8ee399",
   "url": "/anthonytec2",
   "username": "anthonytec2",
   "v": 1
  },
  "html": "Thanks so much, I will try that out",
  "id": "5a94215e35dd17022ef6d0af",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-02-26T15:01:50.711Z",
  "text": "Thanks so much, I will try that out",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "np",
  "id": "5a9421c46fba1a703aa2196b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-02-26T15:03:32.611Z",
  "text": "np",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/anthonytec2",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/11021542?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/11021542?v=4&s=60",
   "displayName": "Anthony Bisulco",
   "gv": "4",
   "id": "5a9417fbd73408ce4f8ee399",
   "url": "/anthonytec2",
   "username": "anthonytec2",
   "v": 1
  },
  "html": "Tried that worked for that error, Failed at nopython (nopython frontend)<br>Invalid usage of Function(&lt;built-in function array&gt;) with parameters (array(float32, 1d, C), dtype=class(float32))<ul>\n<li>parameterized<br>In definition 0:<br> TypingError: array(float32, 1d, C) not allowed in a homogenous sequence<br> raised from /usr/local/lib/python3.5/dist-packages/numba/typing/npydecl.py:434<br>[1] During: resolving callee type: Function(&lt;built-in function array&gt;)<br>[2] During: typing of call at &lt;ipython-input-3-dee8cfca3828&gt; (7)</li>\n</ul>\n",
  "id": "5a94225e53c1dbb7437b9431",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-02-26T15:06:06.604Z",
  "text": "Tried that worked for that error, Failed at nopython (nopython frontend)\nInvalid usage of Function(<built-in function array>) with parameters (array(float32, 1d, C), dtype=class(float32))\n * parameterized\nIn definition 0:\n    TypingError: array(float32, 1d, C) not allowed in a homogenous sequence\n    raised from /usr/local/lib/python3.5/dist-packages/numba/typing/npydecl.py:434\n[1] During: resolving callee type: Function(<built-in function array>)\n[2] During: typing of call at <ipython-input-3-dee8cfca3828> (7)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "same line ? For a raw dtype I mean to literally use the dtype from NumPy, like:",
  "id": "5a9423218f1c77ef3a59163a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-02-26T15:09:21.920Z",
  "text": "same line ? For a raw dtype I mean to literally use the dtype from NumPy, like:",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "<pre><code>    pos = np.<span class=\"built_in\">array</span>(</code></pre>",
  "id": "5a94233be4ff28713acb52b9",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-02-26T15:09:47.565Z",
  "text": "        pos = np.array(",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "<pre><code>        [<span class=\"atom\">originOffset</span>[<span class=\"number\">0</span>] + <span class=\"atom\">i</span> * <span class=\"name\">D</span>, <span class=\"atom\">originOffset</span>[<span class=\"number\">1</span>] + <span class=\"name\">D</span> * <span class=\"atom\">j</span>, <span class=\"number\">0</span>],</code></pre>",
  "id": "5a94233b888332ee3ad3cd3c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-02-26T15:09:47.671Z",
  "text": "            [originOffset[0] + i * D, originOffset[1] + D * j, 0],",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "<pre><code>        dtype=np.<span class=\"typename\">float32</span>)</code></pre>",
  "id": "5a94233be4ff28713acb52bb",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-02-26T15:09:47.779Z",
  "text": "            dtype=np.float32)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/anthonytec2",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/11021542?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/11021542?v=4&s=60",
   "displayName": "Anthony Bisulco",
   "gv": "4",
   "id": "5a9417fbd73408ce4f8ee399",
   "url": "/anthonytec2",
   "username": "anthonytec2",
   "v": 1
  },
  "html": "<pre><code>def main_loop(Mx,My,Nx,Ny,Nz,h,D,orginOffset,ep,mu,detector):\n    <span class=\"keyword\">for</span> z in range(<span class=\"number\">0</span>,Mx*My): \n        j=z<span class=\"variable\">%Mx</span>\n        i=<span class=\"keyword\">int</span>(z/Mx) \n        <span class=\"keyword\">pos</span>=np.array([orginOffset[<span class=\"number\">0</span>]+i*D,orginOffset[<span class=\"number\">1</span>]+D*j, <span class=\"number\">0</span>],dtype=np.float32)\n        dir=np.array((ep-<span class=\"keyword\">pos</span>)/np.linalg.norm(ep-<span class=\"keyword\">pos</span>),dtype=np.float32)\n        L=<span class=\"number\">1</span>\n        <span class=\"keyword\">while</span> <span class=\"keyword\">pos</span>[<span class=\"number\">2</span>]&lt; h+Nz:\n            <span class=\"keyword\">pos</span>,dist=onemove_in_cube_true_numba(<span class=\"keyword\">pos</span>,dir)\n            <span class=\"keyword\">if</span> <span class=\"number\">0</span> &lt;= <span class=\"keyword\">pos</span>[<span class=\"number\">0</span>] &lt; Nx <span class=\"keyword\">and</span> <span class=\"number\">0</span>&lt;=<span class=\"keyword\">pos</span>[<span class=\"number\">1</span>]&lt;Ny  <span class=\"keyword\">and</span> h&lt;=<span class=\"keyword\">pos</span>[<span class=\"number\">2</span>] &lt; h+Nz:\n                L=L*np.<span class=\"keyword\">exp</span>(-<span class=\"number\">1</span>*mu[math.floor(<span class=\"keyword\">pos</span>[<span class=\"number\">0</span>]),math.floor(<span class=\"keyword\">pos</span>[<span class=\"number\">1</span>]),math.floor(<span class=\"keyword\">pos</span>[<span class=\"number\">2</span>]-h)]*dist)\n        detector[i][j] = L;\n    <span class=\"keyword\">return</span> detector</code></pre>Yup",
  "id": "5a9423860202dc012e88385c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-02-26T15:11:02.156Z",
  "text": "```\ndef main_loop(Mx,My,Nx,Ny,Nz,h,D,orginOffset,ep,mu,detector):\n    for z in range(0,Mx*My): \n        j=z%Mx\n        i=int(z/Mx) \n        pos=np.array([orginOffset[0]+i*D,orginOffset[1]+D*j, 0],dtype=np.float32)\n        dir=np.array((ep-pos)/np.linalg.norm(ep-pos),dtype=np.float32)\n        L=1\n        while pos[2]< h+Nz:\n            pos,dist=onemove_in_cube_true_numba(pos,dir)\n            if 0 <= pos[0] < Nx and 0<=pos[1]<Ny  and h<=pos[2] < h+Nz:\n                L=L*np.exp(-1*mu[math.floor(pos[0]),math.floor(pos[1]),math.floor(pos[2]-h)]*dist)\n        detector[i][j] = L;\n    return detector\n```\nYup\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "what dimension does <code>originOffset</code> have ?",
  "id": "5a9423ad8f1c77ef3a59192c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-02-26T15:11:41.723Z",
  "text": "what dimension does `originOffset` have ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "and what is D ?",
  "id": "5a942447c3c5f8b90d0986f6",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-02-26T15:14:15.012Z",
  "text": "and what is D ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-02-26T15:15:52.943Z",
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/anthonytec2",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/11021542?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/11021542?v=4&s=60",
   "displayName": "Anthony Bisulco",
   "gv": "4",
   "id": "5a9417fbd73408ce4f8ee399",
   "url": "/anthonytec2",
   "username": "anthonytec2",
   "v": 1
  },
  "html": "<pre><code><span class=\"constant\">Nx</span> = 208\n<span class=\"constant\">Ny</span> = 256 \n<span class=\"constant\">Nz</span> = 225\n<span class=\"constant\">Mx</span> = 200\n<span class=\"constant\">My</span> = 200\n<span class=\"constant\">D</span> = 2\n<span class=\"constant\">h</span> = 50\n<span class=\"constant\">H</span> = h + Nz + 200\n<span class=\"constant\">orginOffset</span> = np.array(\n        [(-Mx * D) / 2 + (Nx / 2), (-My * D) / 2 + (Ny / 2), 0], dtype=np.float32)\n<span class=\"constant\">ep</span> = np.array([Nx / 2, Ny / 2, H], dtype = np.float32)\n<span class=\"constant\">muBone</span> = 0.573\n<span class=\"constant\">muFat</span> = 0.193\n<span class=\"constant\">orginOffset</span> = np.array([(-Mx * D) / 2 + (Nx / 2), (-My * D) / 2 +(Ny / 2), 0],dtype=np.float32) \n<span class=\"constant\">ep</span> = np.array([Nx / 2, Ny / 2, H],dtype=np.float32)                                         \n<span class=\"constant\">mu</span>=np.zeros((Nx,Ny,Nz),dtype=np.float32)\n<span class=\"constant\">detector</span>=np.zeros((Mx,My),dtype=np.float32)</code></pre>",
  "id": "5a942461e4ff28713acb5b3e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-02-26T15:14:41.600Z",
  "text": "```\nNx = 208\nNy = 256 \nNz = 225\nMx = 200\nMy = 200\nD = 2\nh = 50\nH = h + Nz + 200\norginOffset = np.array(\n        [(-Mx * D) / 2 + (Nx / 2), (-My * D) / 2 + (Ny / 2), 0], dtype=np.float32)\nep = np.array([Nx / 2, Ny / 2, H], dtype = np.float32)\nmuBone = 0.573\nmuFat = 0.193\norginOffset = np.array([(-Mx * D) / 2 + (Nx / 2), (-My * D) / 2 +(Ny / 2), 0],dtype=np.float32) \nep = np.array([Nx / 2, Ny / 2, H],dtype=np.float32)                                         \nmu=np.zeros((Nx,Ny,Nz),dtype=np.float32)\ndetector=np.zeros((Mx,My),dtype=np.float32)\n```",
  "unread": false,
  "urls": [],
  "v": 3
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "think you are trying to construct an array from an array",
  "id": "5a94254ee4ff28713acb6319",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-02-26T15:18:38.221Z",
  "text": "think you are trying to construct an array from an array",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "try",
  "id": "5a94257953c1dbb7437ba814",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-02-26T15:19:21.550Z",
  "text": "try",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "dir=((ep-pos)/np.linalg.norm(ep-pos)).astype(np.float32)",
  "id": "5a94257a6f8b4b9946c3e9fc",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-02-26T15:19:22.500Z",
  "text": "dir=((ep-pos)/np.linalg.norm(ep-pos)).astype(np.float32)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/anthonytec2",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/11021542?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/11021542?v=4&s=60",
   "displayName": "Anthony Bisulco",
   "gv": "4",
   "id": "5a9417fbd73408ce4f8ee399",
   "url": "/anthonytec2",
   "username": "anthonytec2",
   "v": 1
  },
  "html": "Awesome, that worked! Thanks so much again!",
  "id": "5a9426166f8b4b9946c3ed0b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-02-26T15:21:58.662Z",
  "text": "Awesome, that worked! Thanks so much again!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "np",
  "id": "5a9426c28f1c77ef3a592f9e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-02-26T15:24:50.423Z",
  "text": "np",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "<p><span data-link-type=\"mention\" data-screen-name=\"anthonytec2\" class=\"mention\">@anthonytec2</span>  thinking about how to improve this, if you have a couple of minutes for feedback please... had the original error message reported:</p><pre><code><span class=\"attribute\">TypingError</span>: <span class=\"string\">Failed at nopython (nopython frontend)</span>\n\n<span class=\"stylus\">For information about what typing errors are see: &lt;some web page&gt;\n\nReported Error Message: Invalid usage of <span class=\"function\"><span class=\"title\">Function</span><span class=\"params\">(&lt;built-in function array&gt;)</span></span> with parameters (<span class=\"function\"><span class=\"title\">list</span><span class=\"params\">(float64)</span></span>, dtype=<span class=\"function\"><span class=\"title\">const</span><span class=\"params\">(<span class=\"string\">'np.float32'</span>)</span></span>)\nat &lt;ipython-input-<span class=\"number\">3</span>-<span class=\"number\">9</span>b814b9cb770&gt; (<span class=\"number\">6</span>). \n\n    pos=np.<span class=\"function\"><span class=\"title\">array</span><span class=\"params\">([orginOffset[<span class=\"number\">0</span>]+i*D,orginOffset[<span class=\"number\">1</span>]+D*j, <span class=\"number\">0</span>],dtype=<span class=\"string\">'np.float32'</span>)</span></span>\n\nSupported argument types are:\n\n<span class=\"function\"><span class=\"title\">list</span><span class=\"params\">(float64)</span></span>, dtype=type\n<span class=\"function\"><span class=\"title\">list</span><span class=\"params\">(float32)</span></span>, dtype=type\n...</span></code></pre><p>Do you think that would have been enough info to figure out what the issue was, if not is there something else that you&#39;d find useful? Thanks.</p>",
  "id": "5a942a5b53c1dbb7437bc80b",
  "issues": [],
  "mentions": [
   {
    "screenName": "anthonytec2",
    "userId": "5a9417fbd73408ce4f8ee399",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 15,
  "sent": "2018-02-26T15:40:11.750Z",
  "text": "@anthonytec2  thinking about how to improve this, if you have a couple of minutes for feedback please... had the original error message reported:\n```\nTypingError: Failed at nopython (nopython frontend)\n\nFor information about what typing errors are see: <some web page>\n\nReported Error Message: Invalid usage of Function(<built-in function array>) with parameters (list(float64), dtype=const('np.float32'))\nat <ipython-input-3-9b814b9cb770> (6). \n\n    pos=np.array([orginOffset[0]+i*D,orginOffset[1]+D*j, 0],dtype='np.float32')\n\nSupported argument types are:\n\nlist(float64), dtype=type\nlist(float32), dtype=type\n...\n```\n\nDo you think that would have been enough info to figure out what the issue was, if not is there something else that you'd find useful? Thanks.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Question: is there any way to make Numba play nice with CPUdispatcher arguments?",
  "id": "5a94552ac3c5f8b90d0aed9c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-02-26T18:42:50.586Z",
  "text": "Question: is there any way to make Numba play nice with CPUdispatcher arguments?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Example code:<pre><code class=\"python\"><span class=\"decorator\">@njit()</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo4</span><span class=\"params\">()</span>:</span>\n    bar = list([<span class=\"number\">1</span>, <span class=\"number\">2</span>])\n    <span class=\"keyword\">return</span>\n\n\n<span class=\"decorator\">@njit()</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dis</span><span class=\"params\">(patch)</span>:</span>\n    <span class=\"keyword\">return</span> path()\n\n\n<span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:\n    print(foo4())\n    print(dis(foo4))</code></pre>",
  "id": "5a9455466fba1a703aa399c6",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-02-26T18:43:18.425Z",
  "text": "Example code:\n````python\n@njit()\ndef foo4():\n    bar = list([1, 2])\n    return\n\n\n@njit()\ndef dis(patch):\n    return path()\n\n\nif __name__ == \"__main__\":\n    print(foo4())\n    print(dis(foo4))\n````",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Throws the following error",
  "id": "5a94554fc3c5f8b90d0aef62",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-02-26T18:43:27.743Z",
  "text": "Throws the following error",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "<pre><code class=\"python\">Traceback (most recent call last):\n  File \"C:/Users/PGGM/Documents/numba_playground/weeeeee.py\", line 39, in &lt;module&gt;\n    print(dis(foo4))\n  File \"C:\\Users\\PGGM\\Anaconda3\\lib\\site-packages\\numba\\dispatcher.py\", line 330, in _compile_for_args\n    raise e\n  File \"C:\\Users\\PGGM\\Anaconda3\\lib\\site-packages\\numba\\dispatcher.py\", line 307, in _compile_for_args\n    return self.compile(tuple(argtypes))\n  File \"C:\\Users\\PGGM\\Anaconda3\\lib\\site-packages\\numba\\dispatcher.py\", line 579, in compile\n    cres = self._compiler.compile(args, return_type)\n  File \"C:\\Users\\PGGM\\Anaconda3\\lib\\site-packages\\numba\\dispatcher.py\", line 80, in compile\n    flags=flags, locals=self.locals)\n  File \"C:\\Users\\PGGM\\Anaconda3\\lib\\site-packages\\numba\\compiler.py\", line 766, in compile_extra\n    return pipeline.compile_extra(func)\n  File \"C:\\Users\\PGGM\\Anaconda3\\lib\\site-packages\\numba\\compiler.py\", line 362, in compile_extra\n    return self._compile_bytecode()\n  File \"C:\\Users\\PGGM\\Anaconda3\\lib\\site-packages\\numba\\compiler.py\", line 725, in _compile_bytecode\n    return self._compile_core()\n  File \"C:\\Users\\PGGM\\Anaconda3\\lib\\site-packages\\numba\\compiler.py\", line 712, in _compile_core\n    res = pm.run(self.status)\n  File \"C:\\Users\\PGGM\\Anaconda3\\lib\\site-packages\\numba\\compiler.py\", line 248, in run\n    raise patched_exception\n  File \"C:\\Users\\PGGM\\Anaconda3\\lib\\site-packages\\numba\\compiler.py\", line 240, in run\n    stage()\n  File \"C:\\Users\\PGGM\\Anaconda3\\lib\\site-packages\\numba\\compiler.py\", line 454, in stage_nopython_frontend\n    self.locals)\n  File \"C:\\Users\\PGGM\\Anaconda3\\lib\\site-packages\\numba\\compiler.py\", line 867, in type_inference_stage\n    infer.build_constraint()\n  File \"C:\\Users\\PGGM\\Anaconda3\\lib\\site-packages\\numba\\typeinfer.py\", line 800, in build_constraint\n    self.constrain_statement(inst)\n  File \"C:\\Users\\PGGM\\Anaconda3\\lib\\site-packages\\numba\\typeinfer.py\", line 959, in constrain_statement\n    self.typeof_assign(inst)\n  File \"C:\\Users\\PGGM\\Anaconda3\\lib\\site-packages\\numba\\typeinfer.py\", line 1021, in typeof_assign\n    self.typeof_global(inst, inst.target, value)\n  File \"C:\\Users\\PGGM\\Anaconda3\\lib\\site-packages\\numba\\typeinfer.py\", line 1117, in typeof_global\n    typ = self.resolve_value_type(inst, gvar.value)\n  File \"C:\\Users\\PGGM\\Anaconda3\\lib\\site-packages\\numba\\typeinfer.py\", line 1040, in resolve_value_type\n    raise TypingError(msg, loc=inst.loc)\nnumba.errors.TypingError: Failed at nopython (nopython frontend)\nUntyped global name 'path': cannot determine Numba type of &lt;class 'object'&gt;\nFile \"weeeeee.py\", line 34\n\nThis error may have been caused by the following argument(s):\n- argument 0: cannot determine Numba type of &lt;class 'numba.targets.registry.CPUDispatcher'&gt;</code></pre>",
  "id": "5a945566458cbde557ceac8c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-02-26T18:43:50.314Z",
  "text": "````python\nTraceback (most recent call last):\n  File \"C:/Users/PGGM/Documents/numba_playground/weeeeee.py\", line 39, in <module>\n    print(dis(foo4))\n  File \"C:\\Users\\PGGM\\Anaconda3\\lib\\site-packages\\numba\\dispatcher.py\", line 330, in _compile_for_args\n    raise e\n  File \"C:\\Users\\PGGM\\Anaconda3\\lib\\site-packages\\numba\\dispatcher.py\", line 307, in _compile_for_args\n    return self.compile(tuple(argtypes))\n  File \"C:\\Users\\PGGM\\Anaconda3\\lib\\site-packages\\numba\\dispatcher.py\", line 579, in compile\n    cres = self._compiler.compile(args, return_type)\n  File \"C:\\Users\\PGGM\\Anaconda3\\lib\\site-packages\\numba\\dispatcher.py\", line 80, in compile\n    flags=flags, locals=self.locals)\n  File \"C:\\Users\\PGGM\\Anaconda3\\lib\\site-packages\\numba\\compiler.py\", line 766, in compile_extra\n    return pipeline.compile_extra(func)\n  File \"C:\\Users\\PGGM\\Anaconda3\\lib\\site-packages\\numba\\compiler.py\", line 362, in compile_extra\n    return self._compile_bytecode()\n  File \"C:\\Users\\PGGM\\Anaconda3\\lib\\site-packages\\numba\\compiler.py\", line 725, in _compile_bytecode\n    return self._compile_core()\n  File \"C:\\Users\\PGGM\\Anaconda3\\lib\\site-packages\\numba\\compiler.py\", line 712, in _compile_core\n    res = pm.run(self.status)\n  File \"C:\\Users\\PGGM\\Anaconda3\\lib\\site-packages\\numba\\compiler.py\", line 248, in run\n    raise patched_exception\n  File \"C:\\Users\\PGGM\\Anaconda3\\lib\\site-packages\\numba\\compiler.py\", line 240, in run\n    stage()\n  File \"C:\\Users\\PGGM\\Anaconda3\\lib\\site-packages\\numba\\compiler.py\", line 454, in stage_nopython_frontend\n    self.locals)\n  File \"C:\\Users\\PGGM\\Anaconda3\\lib\\site-packages\\numba\\compiler.py\", line 867, in type_inference_stage\n    infer.build_constraint()\n  File \"C:\\Users\\PGGM\\Anaconda3\\lib\\site-packages\\numba\\typeinfer.py\", line 800, in build_constraint\n    self.constrain_statement(inst)\n  File \"C:\\Users\\PGGM\\Anaconda3\\lib\\site-packages\\numba\\typeinfer.py\", line 959, in constrain_statement\n    self.typeof_assign(inst)\n  File \"C:\\Users\\PGGM\\Anaconda3\\lib\\site-packages\\numba\\typeinfer.py\", line 1021, in typeof_assign\n    self.typeof_global(inst, inst.target, value)\n  File \"C:\\Users\\PGGM\\Anaconda3\\lib\\site-packages\\numba\\typeinfer.py\", line 1117, in typeof_global\n    typ = self.resolve_value_type(inst, gvar.value)\n  File \"C:\\Users\\PGGM\\Anaconda3\\lib\\site-packages\\numba\\typeinfer.py\", line 1040, in resolve_value_type\n    raise TypingError(msg, loc=inst.loc)\nnumba.errors.TypingError: Failed at nopython (nopython frontend)\nUntyped global name 'path': cannot determine Numba type of <class 'object'>\nFile \"weeeeee.py\", line 34\n\nThis error may have been caused by the following argument(s):\n- argument 0: cannot determine Numba type of <class 'numba.targets.registry.CPUDispatcher'>\n````",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Oh hold up that&#39;s the wrong error message because I wrote path instead of patch",
  "id": "5a9456650202dc012e89bbb2",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-02-26T18:48:05.166Z",
  "text": "Oh hold up that's the wrong error message because I wrote path instead of patch",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "<pre><code class=\"python\">Traceback (most recent call last):\n  File <span class=\"string\">\"C:/Users/PGGM/Documents/numba_playground/weeeeee.py\"</span>, line <span class=\"number\">40</span>, <span class=\"keyword\">in</span> &lt;module&gt;\n    print(dis(foo4))\n  File <span class=\"string\">\"C:\\Users\\PGGM\\Anaconda3\\lib\\site-packages\\numba\\dispatcher.py\"</span>, line <span class=\"number\">330</span>, <span class=\"keyword\">in</span> _compile_for_args\n    <span class=\"keyword\">raise</span> e\n  File <span class=\"string\">\"C:\\Users\\PGGM\\Anaconda3\\lib\\site-packages\\numba\\dispatcher.py\"</span>, line <span class=\"number\">307</span>, <span class=\"keyword\">in</span> _compile_for_args\n    <span class=\"keyword\">return</span> self.compile(tuple(argtypes))\n  File <span class=\"string\">\"C:\\Users\\PGGM\\Anaconda3\\lib\\site-packages\\numba\\dispatcher.py\"</span>, line <span class=\"number\">579</span>, <span class=\"keyword\">in</span> compile\n    cres = self._compiler.compile(args, return_type)\n  File <span class=\"string\">\"C:\\Users\\PGGM\\Anaconda3\\lib\\site-packages\\numba\\dispatcher.py\"</span>, line <span class=\"number\">80</span>, <span class=\"keyword\">in</span> compile\n    flags=flags, locals=self.locals)\n  File <span class=\"string\">\"C:\\Users\\PGGM\\Anaconda3\\lib\\site-packages\\numba\\compiler.py\"</span>, line <span class=\"number\">766</span>, <span class=\"keyword\">in</span> compile_extra\n    <span class=\"keyword\">return</span> pipeline.compile_extra(func)\n  File <span class=\"string\">\"C:\\Users\\PGGM\\Anaconda3\\lib\\site-packages\\numba\\compiler.py\"</span>, line <span class=\"number\">362</span>, <span class=\"keyword\">in</span> compile_extra\n    <span class=\"keyword\">return</span> self._compile_bytecode()\n  File <span class=\"string\">\"C:\\Users\\PGGM\\Anaconda3\\lib\\site-packages\\numba\\compiler.py\"</span>, line <span class=\"number\">725</span>, <span class=\"keyword\">in</span> _compile_bytecode\n    <span class=\"keyword\">return</span> self._compile_core()\n  File <span class=\"string\">\"C:\\Users\\PGGM\\Anaconda3\\lib\\site-packages\\numba\\compiler.py\"</span>, line <span class=\"number\">712</span>, <span class=\"keyword\">in</span> _compile_core\n    res = pm.run(self.status)\n  File <span class=\"string\">\"C:\\Users\\PGGM\\Anaconda3\\lib\\site-packages\\numba\\compiler.py\"</span>, line <span class=\"number\">248</span>, <span class=\"keyword\">in</span> run\n    <span class=\"keyword\">raise</span> patched_exception\n  File <span class=\"string\">\"C:\\Users\\PGGM\\Anaconda3\\lib\\site-packages\\numba\\compiler.py\"</span>, line <span class=\"number\">240</span>, <span class=\"keyword\">in</span> run\n    stage()\n  File <span class=\"string\">\"C:\\Users\\PGGM\\Anaconda3\\lib\\site-packages\\numba\\compiler.py\"</span>, line <span class=\"number\">454</span>, <span class=\"keyword\">in</span> stage_nopython_frontend\n    self.locals)\n  File <span class=\"string\">\"C:\\Users\\PGGM\\Anaconda3\\lib\\site-packages\\numba\\compiler.py\"</span>, line <span class=\"number\">868</span>, <span class=\"keyword\">in</span> type_inference_stage\n    infer.propagate()\n  File <span class=\"string\">\"C:\\Users\\PGGM\\Anaconda3\\lib\\site-packages\\numba\\typeinfer.py\"</span>, line <span class=\"number\">844</span>, <span class=\"keyword\">in</span> propagate\n    <span class=\"keyword\">raise</span> errors[<span class=\"number\">0</span>]\nnumba.errors.TypingError: Failed at nopython (nopython frontend)\nInternal error at &lt;numba.typeinfer.ArgConstraint object at <span class=\"number\">0x00000198EF7EDC88</span>&gt;:\n--%&lt;-----------------------------------------------------------------\nTraceback (most recent call last):\n  File <span class=\"string\">\"C:\\Users\\PGGM\\Anaconda3\\lib\\site-packages\\numba\\errors.py\"</span>, line <span class=\"number\">259</span>, <span class=\"keyword\">in</span> new_error_context\n    <span class=\"keyword\">yield</span>\n  File <span class=\"string\">\"C:\\Users\\PGGM\\Anaconda3\\lib\\site-packages\\numba\\typeinfer.py\"</span>, line <span class=\"number\">189</span>, <span class=\"keyword\">in</span> __call__\n    <span class=\"keyword\">assert</span> ty.is_precise()\nAssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File <span class=\"string\">\"C:\\Users\\PGGM\\Anaconda3\\lib\\site-packages\\numba\\typeinfer.py\"</span>, line <span class=\"number\">137</span>, <span class=\"keyword\">in</span> propagate\n    constraint(typeinfer)\n  File <span class=\"string\">\"C:\\Users\\PGGM\\Anaconda3\\lib\\site-packages\\numba\\typeinfer.py\"</span>, line <span class=\"number\">190</span>, <span class=\"keyword\">in</span> __call__\n    typeinfer.add_type(self.dst, ty, loc=self.loc)\n  File <span class=\"string\">\"C:\\Users\\PGGM\\Anaconda3\\lib\\contextlib.py\"</span>, line <span class=\"number\">99</span>, <span class=\"keyword\">in</span> __exit__\n    self.gen.throw(type, value, traceback)\n  File <span class=\"string\">\"C:\\Users\\PGGM\\Anaconda3\\lib\\site-packages\\numba\\errors.py\"</span>, line <span class=\"number\">265</span>, <span class=\"keyword\">in</span> new_error_context\n    six.reraise(type(newerr), newerr, sys.exc_info()[<span class=\"number\">2</span>])\n  File <span class=\"string\">\"C:\\Users\\PGGM\\Anaconda3\\lib\\site-packages\\numba\\six.py\"</span>, line <span class=\"number\">658</span>, <span class=\"keyword\">in</span> reraise\n    <span class=\"keyword\">raise</span> value.with_traceback(tb)\n  File <span class=\"string\">\"C:\\Users\\PGGM\\Anaconda3\\lib\\site-packages\\numba\\errors.py\"</span>, line <span class=\"number\">259</span>, <span class=\"keyword\">in</span> new_error_context\n    <span class=\"keyword\">yield</span>\n  File <span class=\"string\">\"C:\\Users\\PGGM\\Anaconda3\\lib\\site-packages\\numba\\typeinfer.py\"</span>, line <span class=\"number\">189</span>, <span class=\"keyword\">in</span> __call__\n    <span class=\"keyword\">assert</span> ty.is_precise()\nnumba.errors.InternalError: \n[<span class=\"number\">1</span>] During: typing of argument at C:/Users/PGGM/Documents/numba_playground/weeeeee.py (<span class=\"number\">35</span>)\n--%&lt;-----------------------------------------------------------------\n\nFile <span class=\"string\">\"weeeeee.py\"</span>, line <span class=\"number\">35</span>\n\nThis error may have been caused by the following argument(s):\n- argument <span class=\"number\">0</span>: cannot determine Numba type of &lt;<span class=\"class\"><span class=\"keyword\">class</span> '<span class=\"title\">numba</span>.<span class=\"title\">targets</span>.<span class=\"title\">registry</span>.<span class=\"title\">CPUDispatcher</span>'&gt;</span></code></pre>",
  "id": "5a945688c3c5f8b90d0b0448",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-02-26T18:48:40.606Z",
  "text": "````python\nTraceback (most recent call last):\n  File \"C:/Users/PGGM/Documents/numba_playground/weeeeee.py\", line 40, in <module>\n    print(dis(foo4))\n  File \"C:\\Users\\PGGM\\Anaconda3\\lib\\site-packages\\numba\\dispatcher.py\", line 330, in _compile_for_args\n    raise e\n  File \"C:\\Users\\PGGM\\Anaconda3\\lib\\site-packages\\numba\\dispatcher.py\", line 307, in _compile_for_args\n    return self.compile(tuple(argtypes))\n  File \"C:\\Users\\PGGM\\Anaconda3\\lib\\site-packages\\numba\\dispatcher.py\", line 579, in compile\n    cres = self._compiler.compile(args, return_type)\n  File \"C:\\Users\\PGGM\\Anaconda3\\lib\\site-packages\\numba\\dispatcher.py\", line 80, in compile\n    flags=flags, locals=self.locals)\n  File \"C:\\Users\\PGGM\\Anaconda3\\lib\\site-packages\\numba\\compiler.py\", line 766, in compile_extra\n    return pipeline.compile_extra(func)\n  File \"C:\\Users\\PGGM\\Anaconda3\\lib\\site-packages\\numba\\compiler.py\", line 362, in compile_extra\n    return self._compile_bytecode()\n  File \"C:\\Users\\PGGM\\Anaconda3\\lib\\site-packages\\numba\\compiler.py\", line 725, in _compile_bytecode\n    return self._compile_core()\n  File \"C:\\Users\\PGGM\\Anaconda3\\lib\\site-packages\\numba\\compiler.py\", line 712, in _compile_core\n    res = pm.run(self.status)\n  File \"C:\\Users\\PGGM\\Anaconda3\\lib\\site-packages\\numba\\compiler.py\", line 248, in run\n    raise patched_exception\n  File \"C:\\Users\\PGGM\\Anaconda3\\lib\\site-packages\\numba\\compiler.py\", line 240, in run\n    stage()\n  File \"C:\\Users\\PGGM\\Anaconda3\\lib\\site-packages\\numba\\compiler.py\", line 454, in stage_nopython_frontend\n    self.locals)\n  File \"C:\\Users\\PGGM\\Anaconda3\\lib\\site-packages\\numba\\compiler.py\", line 868, in type_inference_stage\n    infer.propagate()\n  File \"C:\\Users\\PGGM\\Anaconda3\\lib\\site-packages\\numba\\typeinfer.py\", line 844, in propagate\n    raise errors[0]\nnumba.errors.TypingError: Failed at nopython (nopython frontend)\nInternal error at <numba.typeinfer.ArgConstraint object at 0x00000198EF7EDC88>:\n--%<-----------------------------------------------------------------\nTraceback (most recent call last):\n  File \"C:\\Users\\PGGM\\Anaconda3\\lib\\site-packages\\numba\\errors.py\", line 259, in new_error_context\n    yield\n  File \"C:\\Users\\PGGM\\Anaconda3\\lib\\site-packages\\numba\\typeinfer.py\", line 189, in __call__\n    assert ty.is_precise()\nAssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\PGGM\\Anaconda3\\lib\\site-packages\\numba\\typeinfer.py\", line 137, in propagate\n    constraint(typeinfer)\n  File \"C:\\Users\\PGGM\\Anaconda3\\lib\\site-packages\\numba\\typeinfer.py\", line 190, in __call__\n    typeinfer.add_type(self.dst, ty, loc=self.loc)\n  File \"C:\\Users\\PGGM\\Anaconda3\\lib\\contextlib.py\", line 99, in __exit__\n    self.gen.throw(type, value, traceback)\n  File \"C:\\Users\\PGGM\\Anaconda3\\lib\\site-packages\\numba\\errors.py\", line 265, in new_error_context\n    six.reraise(type(newerr), newerr, sys.exc_info()[2])\n  File \"C:\\Users\\PGGM\\Anaconda3\\lib\\site-packages\\numba\\six.py\", line 658, in reraise\n    raise value.with_traceback(tb)\n  File \"C:\\Users\\PGGM\\Anaconda3\\lib\\site-packages\\numba\\errors.py\", line 259, in new_error_context\n    yield\n  File \"C:\\Users\\PGGM\\Anaconda3\\lib\\site-packages\\numba\\typeinfer.py\", line 189, in __call__\n    assert ty.is_precise()\nnumba.errors.InternalError: \n[1] During: typing of argument at C:/Users/PGGM/Documents/numba_playground/weeeeee.py (35)\n--%<-----------------------------------------------------------------\n\nFile \"weeeeee.py\", line 35\n\nThis error may have been caused by the following argument(s):\n- argument 0: cannot determine Numba type of <class 'numba.targets.registry.CPUDispatcher'>\n````",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "That&#39;s the right one :)",
  "id": "5a94568c35dd17022ef861d8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-02-26T18:48:44.446Z",
  "text": "That's the right one :)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "I tried specifying the type for foo4 as well, but same error.",
  "id": "5a9458cc6f8b4b9946c55186",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-02-26T18:58:20.704Z",
  "text": "I tried specifying the type for foo4 as well, but same error.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"Rik-de-Kort\" class=\"mention\">@Rik-de-Kort</span> don&#39;t think you can do that I&#39;m afraid.",
  "id": "5a945b2635dd17022ef87fbf",
  "issues": [],
  "mentions": [
   {
    "screenName": "Rik-de-Kort",
    "userId": "5a0ea31cd73408ce4f7f000d",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 17,
  "sent": "2018-02-26T19:08:22.352Z",
  "text": "@Rik-de-Kort don't think you can do that I'm afraid.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Damn that&#39;s a shame",
  "id": "5a945b31888332ee3ad55550",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-02-26T19:08:33.314Z",
  "text": "Damn that's a shame",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Would allow me to compile aot",
  "id": "5a945b40458cbde557ced69c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-02-26T19:08:48.010Z",
  "text": "Would allow me to compile aot",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "While you&#39;re here, do you know the answer to my previous question? Whether someone wrote down precisely the typing system for numba?",
  "id": "5a945b7f53c1dbb7437d3794",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-02-26T19:09:51.342Z",
  "text": "While you're here, do you know the answer to my previous question? Whether someone wrote down precisely the typing system for numba?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "I know there is a paper, but I can&#39;t access it",
  "id": "5a945bb00202dc012e89e066",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-02-26T19:10:40.552Z",
  "text": "I know there is a paper, but I can't access it",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "Would closures help?",
  "id": "5a9469858f1c77ef3a5b2da1",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-02-26T20:09:41.304Z",
  "text": "Would closures help?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "I don&#39;t think there is a formal declaration of the full typing system, also the system is under development and evolves. <span data-link-type=\"mention\" data-screen-name=\"sklam\" class=\"mention\">@sklam</span> is the person to ask about the papers from which the type inference is derived.",
  "id": "5a946a99888332ee3ad5bd98",
  "issues": [],
  "mentions": [
   {
    "screenName": "sklam",
    "userId": "55b689f50fc9f982beab2a24",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 17,
  "sent": "2018-02-26T20:14:17.606Z",
  "text": "I don't think there is a formal declaration of the full typing system, also the system is under development and evolves. @sklam is the person to ask about the papers from which the type inference is derived.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "Also, if you explain a little more about what you want to do in AOT there may be a way to achieve the result you want.",
  "id": "5a946b20888332ee3ad5c174",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-02-26T20:16:32.877Z",
  "text": "Also, if you explain a little more about what you want to do in AOT there may be a way to achieve the result you want.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/anthonytec2",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/11021542?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/11021542?v=4&s=60",
   "displayName": "Anthony Bisulco",
   "gv": "4",
   "id": "5a9417fbd73408ce4f8ee399",
   "url": "/anthonytec2",
   "username": "anthonytec2",
   "v": 1
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span> definitely showing the offending line i find helpful in the parsing output. Although, I am not sure if I would have been able to figure out getting rid of the string dtype. Maybe not here, but under the numba dtype documentation you should say you need to use the np.[type]",
  "id": "5a9471c835dd17022ef91b6d",
  "issues": [],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 17,
  "sent": "2018-02-26T20:44:56.224Z",
  "text": "@stuartarchibald definitely showing the offending line i find helpful in the parsing output. Although, I am not sure if I would have been able to figure out getting rid of the string dtype. Maybe not here, but under the numba dtype documentation you should say you need to use the np.[type]",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-02-26T21:36:22.160Z",
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"anthonytec2\" class=\"mention\">@anthonytec2</span> thanks for the feedback, much appreciated.",
  "id": "5a947da435dd17022ef96868",
  "issues": [],
  "mentions": [
   {
    "screenName": "anthonytec2",
    "userId": "5a9417fbd73408ce4f8ee399",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 17,
  "sent": "2018-02-26T21:35:32.849Z",
  "text": "@anthonytec2 thanks for the feedback, much appreciated.",
  "unread": false,
  "urls": [],
  "v": 3
 },
 {
  "editedAt": "2018-02-26T21:36:02.834Z",
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "",
  "id": "5a947daae4ff28713acdf089",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-02-26T21:35:38.957Z",
  "text": "",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span> I have a fairly standard DP setup with a grid class. I wrote functions for lookup in the grid, and have an (essential) transition function. I use these to calculate an expected value, so there&#39;s a density function involved. The function calculating this expected value is what I&#39;m trying to compile AOT, so I don&#39;t recompile it for every time I calculate the expected value for a new state.",
  "id": "5a950e7b6fba1a703aa79035",
  "issues": [],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 17,
  "sent": "2018-02-27T07:53:31.704Z",
  "text": "@stuartarchibald I have a fairly standard DP setup with a grid class. I wrote functions for lookup in the grid, and have an (essential) transition function. I use these to calculate an expected value, so there's a density function involved. The function calculating this expected value is what I'm trying to compile AOT, so I don't recompile it for every time I calculate the expected value for a new state.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Closures might help, I&#39;ll give those a shot.",
  "id": "5a950e89458cbde557d2b1e1",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-02-27T07:53:45.668Z",
  "text": "Closures might help, I'll give those a shot.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "They don&#39;t. Program is slower than my gran crossing the street. And she&#39;s over 90",
  "id": "5a9513c2e4ff28713ad0f187",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-02-27T08:16:02.164Z",
  "text": "They don't. Program is slower than my gran crossing the street. And she's over 90",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ehsantn",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2333645?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2333645?v=4&s=60",
   "displayName": "Ehsan Totoni",
   "gv": "4",
   "id": "56537ea416b6c7089cbbe080",
   "url": "/ehsantn",
   "username": "ehsantn",
   "v": 7
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span> string dtypes are easy to replace. This is similar in some way to what <code>canonicalize_array_math</code> does.",
  "id": "5a9556bdc3c5f8b90d10bf2f",
  "issues": [],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 17,
  "sent": "2018-02-27T13:01:49.850Z",
  "text": "@stuartarchibald string dtypes are easy to replace. This is similar in some way to what `canonicalize_array_math` does.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"ehsantn\" class=\"mention\">@ehsantn</span>, agree, just NIY",
  "id": "5a9556f78f1c77ef3a606a3e",
  "issues": [],
  "mentions": [
   {
    "screenName": "ehsantn",
    "userId": "56537ea416b6c7089cbbe080",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 17,
  "sent": "2018-02-27T13:02:47.133Z",
  "text": "@ehsantn, agree, just NIY",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Python crashes when calling python -m cProfile foo.py with a njitted function in foo.py",
  "id": "5a955d37458cbde557d4a375",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-02-27T13:29:27.847Z",
  "text": "Python crashes when calling python -m cProfile foo.py with a njitted function in foo.py",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"Rik-de-Kort\" class=\"mention\">@Rik-de-Kort</span>, thanks, known issue <span data-link-type=\"issue\" data-issue=\"2717\" data-issue-repo=\"numba/numba\" class=\"issue\">numba/numba#2717</span>",
  "id": "5a955dbe758c233504c78740",
  "issues": [
   {
    "number": "2717",
    "repo": "numba/numba"
   }
  ],
  "mentions": [
   {
    "screenName": "Rik-de-Kort",
    "userId": "5a0ea31cd73408ce4f7f000d",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 17,
  "sent": "2018-02-27T13:31:42.891Z",
  "text": "@Rik-de-Kort, thanks, known issue https://github.com/numba/numba/issues/2717",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/mrocklin",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/306380?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/306380?v=4&s=60",
   "displayName": "Matthew Rocklin",
   "gv": "4",
   "id": "530c03e25e986b0712efafb8",
   "url": "/mrocklin",
   "username": "mrocklin",
   "v": 17
  },
  "html": "Some conversation on possibly using Numba for a sparse array library here (comparing against Cython)",
  "id": "5a9c0d6f6fba1a703ac87abb",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-03-04T15:14:55.420Z",
  "text": "Some conversation on possibly using Numba for a sparse array library here (comparing against Cython)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/mrocklin",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/306380?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/306380?v=4&s=60",
   "displayName": "Matthew Rocklin",
   "gv": "4",
   "id": "530c03e25e986b0712efafb8",
   "url": "/mrocklin",
   "username": "mrocklin",
   "v": 17
  },
  "html": "<span data-link-type=\"issue\" data-issue=\"126\" data-issue-repo=\"pydata/sparse\" class=\"issue\">pydata/sparse#126</span>",
  "id": "5a9c0d71e4d1c63604be6b5a",
  "issues": [
   {
    "number": "126",
    "repo": "pydata/sparse"
   }
  ],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-03-04T15:14:57.794Z",
  "text": "https://github.com/pydata/sparse/issues/126",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/mrocklin",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/306380?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/306380?v=4&s=60",
   "displayName": "Matthew Rocklin",
   "gv": "4",
   "id": "530c03e25e986b0712efafb8",
   "url": "/mrocklin",
   "username": "mrocklin",
   "v": 17
  },
  "html": "A question came up about appendable lists.  Presumably this would be doable in amortized linear time by re-allocating and copying to larger arrays, similar to <a href=\"https://github.com/attractivechaos/klib/blob/master/kvec.h\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">kvec</a>.  Any reason why this wouldn&#39;t be fast?  Are classes likely to get in the way here? ",
  "id": "5a9c0dbc53c1dbb743a180c9",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-03-04T15:16:12.043Z",
  "text": "A question came up about appendable lists.  Presumably this would be doable in amortized linear time by re-allocating and copying to larger arrays, similar to [kvec](https://github.com/attractivechaos/klib/blob/master/kvec.h).  Any reason why this wouldn't be fast?  Are classes likely to get in the way here? ",
  "unread": false,
  "urls": [
   {
    "url": "https://github.com/attractivechaos/klib/blob/master/kvec.h"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "List support in Numba is pretty rudimentary.  In nopython mode, they basically function like typed arrays that can be appended to.  In particular, there is no support for putting reference counted objects (this would include JIT classes and NumPy arrays) in lists.",
  "id": "5a9d59dd35dd17022e2345b7",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-03-05T14:53:17.945Z",
  "text": "List support in Numba is pretty rudimentary.  In nopython mode, they basically function like typed arrays that can be appended to.  In particular, there is no support for putting reference counted objects (this would include JIT classes and NumPy arrays) in lists.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-03-06T17:48:20.799Z",
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/DimitriosTheodorakis",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/29978265?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/29978265?v=4&s=60",
   "displayName": "DimitriosTheodorakis",
   "gv": "4",
   "id": "5a0b860ad73408ce4f7e9e8a",
   "url": "/DimitriosTheodorakis",
   "username": "DimitriosTheodorakis",
   "v": 1
  },
  "html": "<p>Question: I&#39;m trying to speed up some basic math in the function tno_like() below but in nopython mode I get an error:<br>SystemError: (Hash) key of dtype dict not a string ???</p><p>I&#39;m trying to pass two numpy record arrays to the function (I&#39;ve included a print out of one of them after the code).</p><pre><code><span class=\"decorator\">@numba.jit(nopython=True)</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">tno_like</span><span class=\"params\">(point1, point2)</span>:</span>\n    TNOlike = <span class=\"keyword\">False</span>\n    velRa1 = point1[<span class=\"string\">'velRa'</span>]\n    velRa2 = point2[<span class=\"string\">'velRa'</span>]\n    velDec1 = point1[<span class=\"string\">'velDec'</span>]\n    velDec2 = point2[<span class=\"string\">'velDec'</span>]\n    dist1 = point1[<span class=\"string\">'dist'</span>]\n    dist2 = point2[<span class=\"string\">'dist'</span>]\n    vRaErr = .<span class=\"number\">02</span>\n    vDecErr = .<span class=\"number\">02</span>\n    distErr = <span class=\"number\">15.</span>\n    <span class=\"keyword\">if</span> ((velRa1-vRaErr)&lt;=velRa2&lt;=(velRa1+vRaErr)) <span class=\"keyword\">and</span> ((velDec1-vDecErr)&lt;=velDec2&lt;=(velDec1+vDecErr)) <span class=\"keyword\">and</span> (dist1-dist2==<span class=\"number\">0</span> <span class=\"keyword\">or</span> distErr&gt;=abs(<span class=\"number\">1.</span>/(dist1-dist2))):\n        <span class=\"comment\">#Line check</span>\n        m = point1[<span class=\"string\">'m'</span>]\n        c = point1[<span class=\"string\">'c'</span>]\n        <span class=\"comment\">#these don't exist</span>\n        ra1 = point1[<span class=\"string\">'ra'</span>]\n        ra2 = point2[<span class=\"string\">'ra2'</span>]\n        dec1 = point1[<span class=\"string\">'dec'</span>]\n        dec2 = point2[<span class=\"string\">'dec2'</span>]\n        yerr = <span class=\"number\">2.</span>\n        line_ra1 = m*ra1+c\n        line_ra2 = m*ra2+c\n        TNOlike = <span class=\"keyword\">True</span> <span class=\"keyword\">if</span> (yerr&gt;=abs(dec1-line_ra1)) <span class=\"keyword\">and</span> (yerr&gt;=abs(dec2-line_ra2)) <span class=\"keyword\">else</span> <span class=\"keyword\">False</span>\n    <span class=\"keyword\">return</span> TNOlike\n\n(<span class=\"number\">0</span>, <span class=\"number\">5.74281644821</span>, <span class=\"number\">0.0365640968084</span>, <span class=\"number\">1839.22998047</span>, <span class=\"number\">0.666001081467</span>, -<span class=\"number\">3.78815770149</span>, -<span class=\"number\">0.0003999078762719999</span>, -<span class=\"number\">0.000266339076916</span>, <span class=\"number\">204973654</span>, <span class=\"number\">5.74307219653</span>, <span class=\"number\">0.0369081914579</span>, <span class=\"number\">90</span>, <span class=\"number\">230100</span>, <span class=\"number\">20130902</span>, <span class=\"string\">'g'</span>, <span class=\"number\">56538.1802979</span>, <span class=\"number\">23.499000000000002</span>, <span class=\"number\">17</span>, <span class=\"number\">200</span>, <span class=\"number\">0.6409999999999999</span>, <span class=\"number\">0</span>, <span class=\"number\">4.998</span>, <span class=\"number\">0.8909999999999999</span>, <span class=\"number\">41518.6803009</span>, <span class=\"number\">1190</span>, <span class=\"number\">4763</span>, <span class=\"number\">19055</span>, <span class=\"number\">76223</span>, <span class=\"number\">304895</span>, <span class=\"number\">1219580</span>, <span class=\"number\">4878320</span>, <span class=\"number\">171.29217193899999</span>, <span class=\"number\">205023472</span>, <span class=\"number\">5.742299963380001</span>, <span class=\"number\">0.0363977018503</span>, <span class=\"number\">90</span>, <span class=\"number\">230837</span>, <span class=\"number\">20130904</span>, <span class=\"string\">'g'</span>, <span class=\"number\">56540.0705714</span>, <span class=\"number\">23.855999999999998</span>, <span class=\"number\">20</span>, <span class=\"number\">200</span>, <span class=\"number\">0.643</span>, <span class=\"number\">0</span>, <span class=\"number\">4.125</span>, <span class=\"number\">0.41700000000000004</span>, <span class=\"number\">41520.5705671</span>, <span class=\"number\">1190</span>, <span class=\"number\">4763</span>, <span class=\"number\">19055</span>, <span class=\"number\">76223</span>, <span class=\"number\">304894</span>, <span class=\"number\">1219577</span>, <span class=\"number\">4878309</span>, <span class=\"number\">169.406702577</span>)\n(numpy.record, [(<span class=\"string\">u'index'</span>, <span class=\"string\">'&lt;i8'</span>), (<span class=\"string\">u'raPair'</span>, <span class=\"string\">'&lt;f8'</span>), (<span class=\"string\">u'decPair'</span>, <span class=\"string\">'&lt;f8'</span>), (<span class=\"string\">u'dist'</span>, <span class=\"string\">'&lt;f8'</span>), (<span class=\"string\">u'm'</span>, <span class=\"string\">'&lt;f8'</span>), (<span class=\"string\">u'c'</span>, <span class=\"string\">'&lt;f8'</span>), (<span class=\"string\">u'velRa'</span>, <span class=\"string\">'&lt;f8'</span>), (<span class=\"string\">u'velDec'</span>, <span class=\"string\">'&lt;f8'</span>), (<span class=\"string\">u'objid'</span>, <span class=\"string\">'&lt;i8'</span>), (<span class=\"string\">u'ra'</span>, <span class=\"string\">'&lt;f8'</span>), (<span class=\"string\">u'dec'</span>, <span class=\"string\">'&lt;f8'</span>), (<span class=\"string\">u'exptime'</span>, <span class=\"string\">'&lt;i8'</span>), (<span class=\"string\">u'expnum'</span>, <span class=\"string\">'&lt;i8'</span>), (<span class=\"string\">u'nite'</span>, <span class=\"string\">'&lt;i8'</span>), (<span class=\"string\">u'band'</span>, <span class=\"string\">'O'</span>), (<span class=\"string\">u'mjd'</span>, <span class=\"string\">'&lt;f8'</span>), (<span class=\"string\">u'mag'</span>, <span class=\"string\">'&lt;f8'</span>), (<span class=\"string\">u'ccd'</span>, <span class=\"string\">'&lt;i8'</span>), (<span class=\"string\">u'season'</span>, <span class=\"string\">'&lt;i8'</span>), (<span class=\"string\">u'ml_score'</span>, <span class=\"string\">'&lt;f8'</span>), (<span class=\"string\">u'fakeid'</span>, <span class=\"string\">'&lt;i8'</span>), (<span class=\"string\">u'snr'</span>, <span class=\"string\">'&lt;f8'</span>), (<span class=\"string\">u'mag_from_limit'</span>, <span class=\"string\">'&lt;f8'</span>), (<span class=\"string\">u'date'</span>, <span class=\"string\">'&lt;f8'</span>), (<span class=\"string\">u'HPIX_16'</span>, <span class=\"string\">'&lt;i8'</span>), (<span class=\"string\">u'HPIX_32'</span>, <span class=\"string\">'&lt;i8'</span>), (<span class=\"string\">u'HPIX_64'</span>, <span class=\"string\">'&lt;i8'</span>), (<span class=\"string\">u'HPIX_128'</span>, <span class=\"string\">'&lt;i8'</span>), (<span class=\"string\">u'HPIX_256'</span>, <span class=\"string\">'&lt;i8'</span>), (<span class=\"string\">u'HPIX_512'</span>, <span class=\"string\">'&lt;i8'</span>), (<span class=\"string\">u'HPIX_1024'</span>, <span class=\"string\">'&lt;i8'</span>), (<span class=\"string\">u'opp_angle'</span>, <span class=\"string\">'&lt;f8'</span>), (<span class=\"string\">u'objid2'</span>, <span class=\"string\">'&lt;i8'</span>), (<span class=\"string\">u'ra2'</span>, <span class=\"string\">'&lt;f8'</span>), (<span class=\"string\">u'dec2'</span>, <span class=\"string\">'&lt;f8'</span>), (<span class=\"string\">u'exptime2'</span>, <span class=\"string\">'&lt;i8'</span>), (<span class=\"string\">u'expnum2'</span>, <span class=\"string\">'&lt;i8'</span>), (<span class=\"string\">u'nite2'</span>, <span class=\"string\">'&lt;i8'</span>), (<span class=\"string\">u'band2'</span>, <span class=\"string\">'O'</span>), (<span class=\"string\">u'mjd2'</span>, <span class=\"string\">'&lt;f8'</span>), (<span class=\"string\">u'mag2'</span>, <span class=\"string\">'&lt;f8'</span>), (<span class=\"string\">u'ccd2'</span>, <span class=\"string\">'&lt;i8'</span>), (<span class=\"string\">u'season2'</span>, <span class=\"string\">'&lt;i8'</span>), (<span class=\"string\">u'ml_score2'</span>, <span class=\"string\">'&lt;f8'</span>), (<span class=\"string\">u'fakeid2'</span>, <span class=\"string\">'&lt;i8'</span>), (<span class=\"string\">u'snr2'</span>, <span class=\"string\">'&lt;f8'</span>), (<span class=\"string\">u'mag_from_limit2'</span>, <span class=\"string\">'&lt;f8'</span>), (<span class=\"string\">u'date2'</span>, <span class=\"string\">'&lt;f8'</span>), (<span class=\"string\">u'HPIX_162'</span>, <span class=\"string\">'&lt;i8'</span>), (<span class=\"string\">u'HPIX_322'</span>, <span class=\"string\">'&lt;i8'</span>), (<span class=\"string\">u'HPIX_642'</span>, <span class=\"string\">'&lt;i8'</span>), (<span class=\"string\">u'HPIX_1282'</span>, <span class=\"string\">'&lt;i8'</span>), (<span class=\"string\">u'HPIX_2562'</span>, <span class=\"string\">'&lt;i8'</span>), (<span class=\"string\">u'HPIX_5122'</span>, <span class=\"string\">'&lt;i8'</span>), (<span class=\"string\">u'HPIX_10242'</span>, <span class=\"string\">'&lt;i8'</span>), (<span class=\"string\">u'opp_angle2'</span>, <span class=\"string\">'&lt;f8'</span>)])</code></pre><p>Does numba not support numpy record arrays? </p>",
  "id": "5a9ed4056f8b4b9946f72c1a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-03-06T17:46:45.090Z",
  "text": "Question: I'm trying to speed up some basic math in the function tno_like() below but in nopython mode I get an error:\nSystemError: (Hash) key of dtype dict not a string ???\n\nI'm trying to pass two numpy record arrays to the function (I've included a print out of one of them after the code).\n\n```\n@numba.jit(nopython=True)\ndef tno_like(point1, point2):\n    TNOlike = False\n    velRa1 = point1['velRa']\n    velRa2 = point2['velRa']\n    velDec1 = point1['velDec']\n    velDec2 = point2['velDec']\n    dist1 = point1['dist']\n    dist2 = point2['dist']\n    vRaErr = .02\n    vDecErr = .02\n    distErr = 15.\n    if ((velRa1-vRaErr)<=velRa2<=(velRa1+vRaErr)) and ((velDec1-vDecErr)<=velDec2<=(velDec1+vDecErr)) and (dist1-dist2==0 or distErr>=abs(1./(dist1-dist2))):\n        #Line check\n        m = point1['m']\n        c = point1['c']\n        #these don't exist\n        ra1 = point1['ra']\n        ra2 = point2['ra2']\n        dec1 = point1['dec']\n        dec2 = point2['dec2']\n        yerr = 2.\n        line_ra1 = m*ra1+c\n        line_ra2 = m*ra2+c\n        TNOlike = True if (yerr>=abs(dec1-line_ra1)) and (yerr>=abs(dec2-line_ra2)) else False\n    return TNOlike\n\n(0, 5.74281644821, 0.0365640968084, 1839.22998047, 0.666001081467, -3.78815770149, -0.0003999078762719999, -0.000266339076916, 204973654, 5.74307219653, 0.0369081914579, 90, 230100, 20130902, 'g', 56538.1802979, 23.499000000000002, 17, 200, 0.6409999999999999, 0, 4.998, 0.8909999999999999, 41518.6803009, 1190, 4763, 19055, 76223, 304895, 1219580, 4878320, 171.29217193899999, 205023472, 5.742299963380001, 0.0363977018503, 90, 230837, 20130904, 'g', 56540.0705714, 23.855999999999998, 20, 200, 0.643, 0, 4.125, 0.41700000000000004, 41520.5705671, 1190, 4763, 19055, 76223, 304894, 1219577, 4878309, 169.406702577)\n(numpy.record, [(u'index', '<i8'), (u'raPair', '<f8'), (u'decPair', '<f8'), (u'dist', '<f8'), (u'm', '<f8'), (u'c', '<f8'), (u'velRa', '<f8'), (u'velDec', '<f8'), (u'objid', '<i8'), (u'ra', '<f8'), (u'dec', '<f8'), (u'exptime', '<i8'), (u'expnum', '<i8'), (u'nite', '<i8'), (u'band', 'O'), (u'mjd', '<f8'), (u'mag', '<f8'), (u'ccd', '<i8'), (u'season', '<i8'), (u'ml_score', '<f8'), (u'fakeid', '<i8'), (u'snr', '<f8'), (u'mag_from_limit', '<f8'), (u'date', '<f8'), (u'HPIX_16', '<i8'), (u'HPIX_32', '<i8'), (u'HPIX_64', '<i8'), (u'HPIX_128', '<i8'), (u'HPIX_256', '<i8'), (u'HPIX_512', '<i8'), (u'HPIX_1024', '<i8'), (u'opp_angle', '<f8'), (u'objid2', '<i8'), (u'ra2', '<f8'), (u'dec2', '<f8'), (u'exptime2', '<i8'), (u'expnum2', '<i8'), (u'nite2', '<i8'), (u'band2', 'O'), (u'mjd2', '<f8'), (u'mag2', '<f8'), (u'ccd2', '<i8'), (u'season2', '<i8'), (u'ml_score2', '<f8'), (u'fakeid2', '<i8'), (u'snr2', '<f8'), (u'mag_from_limit2', '<f8'), (u'date2', '<f8'), (u'HPIX_162', '<i8'), (u'HPIX_322', '<i8'), (u'HPIX_642', '<i8'), (u'HPIX_1282', '<i8'), (u'HPIX_2562', '<i8'), (u'HPIX_5122', '<i8'), (u'HPIX_10242', '<i8'), (u'opp_angle2', '<f8')])\n```\nDoes numba not support numpy record arrays? ",
  "unread": false,
  "urls": [],
  "v": 3
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/RemiLehe",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/6685781?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/6685781?v=4&s=60",
   "displayName": "Remi Lehe",
   "gv": "4",
   "id": "5a7dc851d73408ce4f8c7098",
   "url": "/RemiLehe",
   "username": "RemiLehe",
   "v": 1
  },
  "html": "Hi,<br>I was wondering if there are any plans to support CUDA Managed memory (a.k.a. Unified Memory) with Numba in the future?",
  "id": "5a9f64496fba1a703ad8e312",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-03-07T04:02:17.148Z",
  "text": "Hi,\nI was wondering if there are any plans to support CUDA Managed memory (a.k.a. Unified Memory) with Numba in the future?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"DimitriosTheodorakis\" class=\"mention\">@DimitriosTheodorakis</span> Numba does not support dictionaries, probably has something to do with it. <span data-link-type=\"issue\" data-issue=\"2096\" data-issue-repo=\"numba/numba\" class=\"issue\">numba/numba#2096</span>",
  "id": "5a9f9e98c3c5f8b90d4209a5",
  "issues": [
   {
    "number": "2096",
    "repo": "numba/numba"
   }
  ],
  "mentions": [
   {
    "screenName": "DimitriosTheodorakis",
    "userId": "5a0b860ad73408ce4f7e9e8a",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 11,
  "sent": "2018-03-07T08:11:04.694Z",
  "text": "@DimitriosTheodorakis Numba does not support dictionaries, probably has something to do with it. https://github.com/numba/numba/issues/2096",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "<p>Functions in functions are supported as closures but not as arguments, am I getting that right?<br>I have an in-loop function which relies on several other (njitted) functions to do it&#39;s work. The other functions change every loop, whereas the inner function does not. I&#39;d like to put it outside of the loop and have it only compile once (since I iterate 125000 times). However, numba can&#39;t infer the type of the dispatcher arguments.<br>Any ideas I could try here?</p><p>Related question: how do I annotate a function which outputs multiple variables?</p>",
  "id": "5a9fcf5c6f8b4b9946fbc649",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-03-07T11:39:08.921Z",
  "text": "Functions in functions are supported as closures but not as arguments, am I getting that right?\nI have an in-loop function which relies on several other (njitted) functions to do it's work. The other functions change every loop, whereas the inner function does not. I'd like to put it outside of the loop and have it only compile once (since I iterate 125000 times). However, numba can't infer the type of the dispatcher arguments.\nAny ideas I could try here?\n\nRelated question: how do I annotate a function which outputs multiple variables?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"Rik-de-Kort\" class=\"mention\">@Rik-de-Kort</span>, don&#39;t think you can do that I&#39;m afraid as the function-in-function/closure behaviour is implemented through inlining at compile time.",
  "id": "5a9fd04a8f1c77ef3a91e02f",
  "issues": [],
  "mentions": [
   {
    "screenName": "Rik-de-Kort",
    "userId": "5a0ea31cd73408ce4f7f000d",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 11,
  "sent": "2018-03-07T11:43:06.688Z",
  "text": "@Rik-de-Kort, don't think you can do that I'm afraid as the function-in-function/closure behaviour is implemented through inlining at compile time.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Shame",
  "id": "5a9fd08a458cbde55706d1cd",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-03-07T11:44:10.444Z",
  "text": "Shame",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Thanks for the quick response though",
  "id": "5a9fd090458cbde55706d1f0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-03-07T11:44:16.706Z",
  "text": "Thanks for the quick response though",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"Rik-de-Kort\" class=\"mention\">@Rik-de-Kort</span>  does this help:<pre><code><span class=\"keyword\">from</span> numba <span class=\"keyword\">import</span> njit\n<span class=\"keyword\">from</span> numba <span class=\"keyword\">import</span> cfunc\n\n<span class=\"decorator\">@cfunc(\"float64(float64, float64)\")</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(x, y)</span>:</span>\n    <span class=\"keyword\">return</span> x + y\n\n<span class=\"decorator\">@cfunc(\"float64(float64, float64)\")</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sub</span><span class=\"params\">(x, y)</span>:</span>\n    <span class=\"keyword\">return</span> x - y\n\n\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">check</span><span class=\"params\">(arg1, arg2)</span>:</span>\n    acc = <span class=\"number\">0</span>\n    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">100</span>):\n        <span class=\"keyword\">if</span> i % <span class=\"number\">2</span>:\n            acc = acc + (<span class=\"number\">1.</span> + arg1)\n        <span class=\"keyword\">else</span>:\n            acc = acc + (<span class=\"number\">1.</span> - arg2)\n    <span class=\"keyword\">return</span> acc\n\n\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mangle</span><span class=\"params\">(funcs, arg1, arg2)</span>:</span>\n    <span class=\"decorator\">@njit</span>\n    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bar</span><span class=\"params\">(funcs)</span>:</span>\n        acc = <span class=\"number\">0</span>\n        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">100</span>):\n            <span class=\"keyword\">if</span> i % <span class=\"number\">2</span>:\n                acc = acc + funcs[<span class=\"number\">0</span>](<span class=\"number\">1.</span>, arg1)\n            <span class=\"keyword\">else</span>:\n                acc = acc + funcs[<span class=\"number\">1</span>](<span class=\"number\">1.</span>, arg2)\n        <span class=\"keyword\">return</span> acc\n\n    <span class=\"keyword\">return</span> bar(funcs)\n\n\nfuncs = tuple([x.ctypes <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> (add, sub)])\n\nprint(mangle(funcs, <span class=\"number\">10</span>, <span class=\"number\">20</span>))\nprint(check(<span class=\"number\">10</span>, <span class=\"number\">20</span>))</code></pre>",
  "id": "5a9fda156f8b4b9946fbfe8a",
  "issues": [],
  "mentions": [
   {
    "screenName": "Rik-de-Kort",
    "userId": "5a0ea31cd73408ce4f7f000d",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 11,
  "sent": "2018-03-07T12:24:53.169Z",
  "text": "@Rik-de-Kort  does this help:\n```\nfrom numba import njit\nfrom numba import cfunc\n\n@cfunc(\"float64(float64, float64)\")\ndef add(x, y):\n    return x + y\n\n@cfunc(\"float64(float64, float64)\")\ndef sub(x, y):\n    return x - y\n\n\ndef check(arg1, arg2):\n    acc = 0\n    for i in range(100):\n        if i % 2:\n            acc = acc + (1. + arg1)\n        else:\n            acc = acc + (1. - arg2)\n    return acc\n\n\ndef mangle(funcs, arg1, arg2):\n    @njit\n    def bar(funcs):\n        acc = 0\n        for i in range(100):\n            if i % 2:\n                acc = acc + funcs[0](1., arg1)\n            else:\n                acc = acc + funcs[1](1., arg2)\n        return acc\n\n    return bar(funcs)\n\n\nfuncs = tuple([x.ctypes for x in (add, sub)])\n\nprint(mangle(funcs, 10, 20))\nprint(check(10, 20))\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Yes, that does help. It also gives me another idea.",
  "id": "5a9fdaf6458cbde557070b1f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-03-07T12:28:38.057Z",
  "text": "Yes, that does help. It also gives me another idea.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "I&#39;ll have to try implementing tomorrow though",
  "id": "5a9fdb0c6fba1a703adb163e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-03-07T12:29:00.608Z",
  "text": "I'll have to try implementing tomorrow though",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Thanks!",
  "id": "5a9fdb158f1c77ef3a9216ee",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-03-07T12:29:09.664Z",
  "text": "Thanks!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "I did not know about the cfunc decorator. One of the functions I&#39;m using returns multiple arguments, but I figure I&#39;ll have to rewrite that to be cfunc compatible?",
  "id": "5a9fdb54888332ee3a0c9890",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-03-07T12:30:12.501Z",
  "text": "I did not know about the cfunc decorator. One of the functions I'm using returns multiple arguments, but I figure I'll have to rewrite that to be cfunc compatible?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "As an extension of the above, this also seems to work:<pre><code>@<span class=\"function\"><span class=\"title\">njit</span><span class=\"params\">(<span class=\"string\">'f8(f8, f8)'</span>)</span></span>\ndef <span class=\"function\"><span class=\"title\">foo_add</span><span class=\"params\">(x, y)</span></span>:\n    return x + y\n\ndef <span class=\"function\"><span class=\"title\">use_njit</span><span class=\"params\">(func, sig_idx=<span class=\"number\">0</span>)</span></span>:\n    from numba<span class=\"class\">.typing</span><span class=\"class\">.ctypes_utils</span> import to_ctypes\n    import ctypes as ct\n    npysignature = func<span class=\"class\">.nopython_signatures</span>[sig_idx]\n    ctypes_args = [<span class=\"function\"><span class=\"title\">to_ctypes</span><span class=\"params\">(ty)</span></span> <span class=\"keyword\">for</span> ty <span class=\"keyword\">in</span> npysignature.args]\n    ctypes_restype = <span class=\"function\"><span class=\"title\">to_ctypes</span><span class=\"params\">(npysignature.return_type)</span></span>\n    cres = func<span class=\"class\">.overloads</span>[func<span class=\"class\">.signatures</span>[sig_idx]]\n    fname = [x<span class=\"class\">.name</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> cres<span class=\"class\">.library</span><span class=\"class\">.get_defined_functions</span>() <span class=\"keyword\">if</span> <span class=\"string\">'cpython'</span> not <span class=\"keyword\">in</span> x<span class=\"class\">.name</span> ]\n    assert <span class=\"function\"><span class=\"title\">len</span><span class=\"params\">(fname)</span></span> == <span class=\"number\">1</span>\n    fnptr = cres<span class=\"class\">.library</span><span class=\"class\">.get_pointer_to_function</span>(fname[<span class=\"number\">0</span>])\n    functype = ct.<span class=\"function\"><span class=\"title\">CFUNCTYPE</span><span class=\"params\">(ctypes_restype, *ctypes_args)</span></span>\n    return <span class=\"function\"><span class=\"title\">functype</span><span class=\"params\">(fnptr)</span></span>\n\nctype_foo = <span class=\"function\"><span class=\"title\">use_njit</span><span class=\"params\">(foo_add)</span></span>\n\nfuncs = <span class=\"function\"><span class=\"title\">tuple</span><span class=\"params\">([ctype_foo, sub.ctypes])</span></span>\n\n<span class=\"function\"><span class=\"title\">print</span><span class=\"params\">(mangle(funcs, <span class=\"number\">10</span>, <span class=\"number\">20</span>)</span></span>)\n<span class=\"function\"><span class=\"title\">print</span><span class=\"params\">(check(<span class=\"number\">10</span>, <span class=\"number\">20</span>)</span></span>)</code></pre>",
  "id": "5a9fe2b4e4d1c63604d12f4a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-03-07T13:01:40.687Z",
  "text": "As an extension of the above, this also seems to work:\n```\n@njit('f8(f8, f8)')\ndef foo_add(x, y):\n    return x + y\n\ndef use_njit(func, sig_idx=0):\n    from numba.typing.ctypes_utils import to_ctypes\n    import ctypes as ct\n    npysignature = func.nopython_signatures[sig_idx]\n    ctypes_args = [to_ctypes(ty) for ty in npysignature.args]\n    ctypes_restype = to_ctypes(npysignature.return_type)\n    cres = func.overloads[func.signatures[sig_idx]]\n    fname = [x.name for x in cres.library.get_defined_functions() if 'cpython' not in x.name ]\n    assert len(fname) == 1\n    fnptr = cres.library.get_pointer_to_function(fname[0])\n    functype = ct.CFUNCTYPE(ctypes_restype, *ctypes_args)\n    return functype(fnptr)\n\nctype_foo = use_njit(foo_add)\n\nfuncs = tuple([ctype_foo, sub.ctypes])\n\nprint(mangle(funcs, 10, 20))\nprint(check(10, 20))\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "As ctypes inherits its behavior from the C language you won&#39;t be able to return multiple items, however, nothing stopping arg mutation, <a href=\"http://numba.pydata.org/numba-doc/dev/user/cfunc.html#dealing-with-pointers-and-array-memory\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://numba.pydata.org/numba-doc/dev/user/cfunc.html#dealing-with-pointers-and-array-memory</a>",
  "id": "5a9fe33e53c1dbb743b42fec",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-03-07T13:03:58.508Z",
  "text": "As ctypes inherits its behavior from the C language you won't be able to return multiple items, however, nothing stopping arg mutation, http://numba.pydata.org/numba-doc/dev/user/cfunc.html#dealing-with-pointers-and-array-memory",
  "unread": false,
  "urls": [
   {
    "url": "http://numba.pydata.org/numba-doc/dev/user/cfunc.html#dealing-with-pointers-and-array-memory"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "I&#39;m not sure what the usage of use_njit here is? Is it so we don&#39;t have to use the cfunc decorator?",
  "id": "5aa0239753c1dbb743b5ab8e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-03-07T17:38:31.772Z",
  "text": "I'm not sure what the usage of use_njit here is? Is it so we don't have to use the cfunc decorator?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "It converts <code>@njit</code>compiled functions to something ctypes like, you could not bother specifying the types in the decorator and just run it with some real types you want to use.",
  "id": "5aa040be458cbde55709864d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2018-03-07T19:42:54.130Z",
  "text": "It converts `@njit`compiled functions to something ctypes like, you could not bother specifying the types in the decorator and just run it with some real types you want to use.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/anthonytec2",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/11021542?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/11021542?v=4&s=60",
   "displayName": "Anthony Bisulco",
   "gv": "4",
   "id": "5a9417fbd73408ce4f8ee399",
   "url": "/anthonytec2",
   "username": "anthonytec2",
   "v": 1
  },
  "html": "I have been playing around with the Numba parallel=True flag in my jitted function and my code runs around 4x slower. I am assuming this is due to parallelisms overhead? I have tried explicitly specifying my loop with prange also: ",
  "id": "5aa0617ee4ff28713a074b47",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 8,
  "sent": "2018-03-07T22:02:38.147Z",
  "text": "I have been playing around with the Numba parallel=True flag in my jitted function and my code runs around 4x slower. I am assuming this is due to parallelisms overhead? I have tried explicitly specifying my loop with prange also: ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/anthonytec2",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/11021542?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/11021542?v=4&s=60",
   "displayName": "Anthony Bisulco",
   "gv": "4",
   "id": "5a9417fbd73408ce4f8ee399",
   "url": "/anthonytec2",
   "username": "anthonytec2",
   "v": 1
  },
  "html": "<pre><code><span class=\"variable\">@numba</span>.jit(nopython=True, nogil=True, cache=True)\ndef main_loop(Nx,Ny,Nz,Mx,My,D,h,orginOffset,ep,mu):\n    detector=np.zeros((Mx,My),dtype=np.float32) <span class=\"comment\">#detector Mx x pixels and My y pixels</span>\n    <span class=\"keyword\">for</span> z in range(<span class=\"number\">0</span>,Mx*My): <span class=\"comment\">#loop for all pixels</span>\n        j=z<span class=\"variable\">%Mx</span> <span class=\"comment\">#y direction pixel</span>\n        i=<span class=\"keyword\">int</span>(z/Mx) <span class=\"comment\">#x direction pixel</span>\n        <span class=\"keyword\">pos</span>=np.array([orginOffset[<span class=\"number\">0</span>]+i*D,orginOffset[<span class=\"number\">1</span>]+D*j, <span class=\"number\">0</span>],dtype=np.float32) <span class=\"comment\">#pixel location</span>\n        dir=((ep-<span class=\"keyword\">pos</span>)/np.linalg.norm(ep-<span class=\"keyword\">pos</span>)).astype(np.float32) <span class=\"comment\">#noramlized direction vector to source</span>\n        dir[dir==<span class=\"number\">0</span>]=<span class=\"number\">1</span>e-<span class=\"number\">16</span> <span class=\"comment\">#need this for floating point division errors in Numba</span>\n        L=<span class=\"number\">0</span> <span class=\"comment\"># initial energy</span>\n        h_z=h+Nz\n        <span class=\"keyword\">while</span> <span class=\"keyword\">pos</span>[<span class=\"number\">2</span>]&lt; h_z: <span class=\"comment\">#loop until the end of imaging volume</span>\n            <span class=\"keyword\">pos</span>,dist=onemove_in_cube_true_numba(<span class=\"keyword\">pos</span>,dir) <span class=\"comment\">#move to next cube</span>\n            <span class=\"keyword\">if</span> <span class=\"number\">0</span> &lt;= <span class=\"keyword\">pos</span>[<span class=\"number\">0</span>] &lt; Nx <span class=\"keyword\">and</span> <span class=\"number\">0</span>&lt;=<span class=\"keyword\">pos</span>[<span class=\"number\">1</span>]&lt;Ny  <span class=\"keyword\">and</span> h&lt;=<span class=\"keyword\">pos</span>[<span class=\"number\">2</span>] &lt; h_z: <span class=\"comment\">#if in imaging volume</span>\n                L+=mu[math.floor(<span class=\"keyword\">pos</span>[<span class=\"number\">0</span>]),math.floor(<span class=\"keyword\">pos</span>[<span class=\"number\">1</span>]),math.floor(<span class=\"keyword\">pos</span>[<span class=\"number\">2</span>]-h)]*dist <span class=\"comment\">#calculate energy using mu</span>\n        detector[i][j] = L; <span class=\"comment\"># detector pixel locaiton equals lasting energy</span>\n    <span class=\"keyword\">return</span> detector</code></pre>",
  "id": "5aa061a935dd17022e3310cf",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-03-07T22:03:21.189Z",
  "text": "```\n@numba.jit(nopython=True, nogil=True, cache=True)\ndef main_loop(Nx,Ny,Nz,Mx,My,D,h,orginOffset,ep,mu):\n    detector=np.zeros((Mx,My),dtype=np.float32) #detector Mx x pixels and My y pixels\n    for z in range(0,Mx*My): #loop for all pixels\n        j=z%Mx #y direction pixel\n        i=int(z/Mx) #x direction pixel\n        pos=np.array([orginOffset[0]+i*D,orginOffset[1]+D*j, 0],dtype=np.float32) #pixel location\n        dir=((ep-pos)/np.linalg.norm(ep-pos)).astype(np.float32) #noramlized direction vector to source\n        dir[dir==0]=1e-16 #need this for floating point division errors in Numba\n        L=0 # initial energy\n        h_z=h+Nz\n        while pos[2]< h_z: #loop until the end of imaging volume\n            pos,dist=onemove_in_cube_true_numba(pos,dir) #move to next cube\n            if 0 <= pos[0] < Nx and 0<=pos[1]<Ny  and h<=pos[2] < h_z: #if in imaging volume\n                L+=mu[math.floor(pos[0]),math.floor(pos[1]),math.floor(pos[2]-h)]*dist #calculate energy using mu\n        detector[i][j] = L; # detector pixel locaiton equals lasting energy\n    return detector\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "perhaps switch on debug mode?",
  "id": "5aa061be53c1dbb743b728af",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-03-07T22:03:42.677Z",
  "text": "perhaps switch on debug mode?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "<code>export  NUMBA_DEBUG_ARRAY_OPT_STATS=1</code>",
  "id": "5aa061dd6f8b4b9946ff1704",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-03-07T22:04:13.505Z",
  "text": "`export  NUMBA_DEBUG_ARRAY_OPT_STATS=1`",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "it&#39;ll report on what it did/didn&#39;t manage to convert to parfors",
  "id": "5aa061f3e4d1c63604d433fe",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-03-07T22:04:35.303Z",
  "text": "it'll report on what it did/didn't manage to convert to parfors",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/anthonytec2",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/11021542?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/11021542?v=4&s=60",
   "displayName": "Anthony Bisulco",
   "gv": "4",
   "id": "5a9417fbd73408ce4f8ee399",
   "url": "/anthonytec2",
   "username": "anthonytec2",
   "v": 1
  },
  "html": "Okay, awesome I will look into that some more",
  "id": "5aa06215e4ff28713a074e68",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-03-07T22:05:09.316Z",
  "text": "Okay, awesome I will look into that some more",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "glancing at it, the linalg norm call will force the loop in <code>z</code> be rejected",
  "id": "5aa06217c3c5f8b90d468943",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-03-07T22:05:11.599Z",
  "text": "glancing at it, the linalg norm call will force the loop in `z` be rejected",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/anthonytec2",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/11021542?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/11021542?v=4&s=60",
   "displayName": "Anthony Bisulco",
   "gv": "4",
   "id": "5a9417fbd73408ce4f8ee399",
   "url": "/anthonytec2",
   "username": "anthonytec2",
   "v": 1
  },
  "html": "Is that just caused by limitations on a call that can be made during parfors? ",
  "id": "5aa06255c3c5f8b90d468a5a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-03-07T22:06:13.575Z",
  "text": "Is that just caused by limitations on a call that can be made during parfors? ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "Essentially, code has to be written to register operations that have parallel semantics as doing so, this means a operation has to have suitable behaviour and it also a) has to have been written in terms of parfors b) has to be worth doing the parallel transform. What is supported is noted here: <a href=\"http://numba.pydata.org/numba-doc/latest/user/parallel.html#supported-operations\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://numba.pydata.org/numba-doc/latest/user/parallel.html#supported-operations</a> but as it is an experimental feature things are being added all the time.",
  "id": "5aa0631e8f1c77ef3a955303",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-03-07T22:09:34.922Z",
  "text": "Essentially, code has to be written to register operations that have parallel semantics as doing so, this means a operation has to have suitable behaviour and it also a) has to have been written in terms of parfors b) has to be worth doing the parallel transform. What is supported is noted here: http://numba.pydata.org/numba-doc/latest/user/parallel.html#supported-operations but as it is an experimental feature things are being added all the time.",
  "unread": false,
  "urls": [
   {
    "url": "http://numba.pydata.org/numba-doc/latest/user/parallel.html#supported-operations"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Question: can I build a gufunc that takes a scalar argument and then returns a 1d array? I.e. signature () -&gt; (n). Or have I stumbled upon an issue? The error I get is:<br><code>NameError: undefined output symbols: n</code>",
  "id": "5aa0f3ef8f1c77ef3a979f1f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2018-03-08T08:27:27.584Z",
  "text": "Question: can I build a gufunc that takes a scalar argument and then returns a 1d array? I.e. signature () -> (n). Or have I stumbled upon an issue? The error I get is:\n````NameError: undefined output symbols: n````",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"Rik-de-Kort\" class=\"mention\">@Rik-de-Kort</span>, right now it does that but I&#39;m unconvinced it should, please could you open an issue?",
  "id": "5aa100d935dd17022e35b833",
  "issues": [],
  "mentions": [
   {
    "screenName": "Rik-de-Kort",
    "userId": "5a0ea31cd73408ce4f7f000d",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 10,
  "sent": "2018-03-08T09:22:33.680Z",
  "text": "@Rik-de-Kort, right now it does that but I'm unconvinced it should, please could you open an issue?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "Locally I managed to fix Numba internals so it will allow it, but I&#39;m not sure of the knock on effect without more digging into it.",
  "id": "5aa10104c3c5f8b90d493ec6",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-03-08T09:23:16.618Z",
  "text": "Locally I managed to fix Numba internals so it will allow it, but I'm not sure of the knock on effect without more digging into it.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Oh hold up\\",
  "id": "5aa1054be4d1c63604d6f5ea",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-03-08T09:41:31.611Z",
  "text": "Oh hold up\\",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "The issue is you don&#39;t know the value of n ahead of time, so you can&#39;t allocate the array. It ought to work with fixed-sizes though (which mine is).",
  "id": "5aa1062535dd17022e35d620",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-03-08T09:45:09.958Z",
  "text": "The issue is you don't know the value of n ahead of time, so you can't allocate the array. It ought to work with fixed-sizes though (which mine is).",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "the output is preallocated by the user, it&#39;s to do with loop nest generation",
  "id": "5aa1066ce4ff28713a0a100f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-03-08T09:46:20.378Z",
  "text": "the output is preallocated by the user, it's to do with loop nest generation",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "<span data-link-type=\"issue\" data-issue=\"2797\" class=\"issue\">#2797</span> is a thing now",
  "id": "5aa1070b458cbde5570d1a1a",
  "issues": [
   {
    "number": "2797"
   }
  ],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-03-08T09:48:59.391Z",
  "text": "#2797 is a thing now",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "thanks :)",
  "id": "5aa107128f1c77ef3a980204",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-03-08T09:49:06.270Z",
  "text": "thanks :)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "I also couldn&#39;t find an issue complaining about np.reshape not being supported whereas array.reshape is, even though they&#39;re equivalent",
  "id": "5aa10aa6f3f6d24c684ed1da",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-03-08T10:04:22.866Z",
  "text": "I also couldn't find an issue complaining about np.reshape not being supported whereas array.reshape is, even though they're equivalent",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Is it okay to make an issue for that, or would that be considered &quot;frivolous issuing&quot;",
  "id": "5aa10ab935dd17022e35eabf",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-03-08T10:04:41.761Z",
  "text": "Is it okay to make an issue for that, or would that be considered \"frivolous issuing\"",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "Go for it! There&#39;s other ndarray.X vs np.X, X=copy springs to mind, which IIRC is supported.",
  "id": "5aa10d63458cbde5570d3ddc",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-03-08T10:16:03.313Z",
  "text": "Go for it! There's other ndarray.X vs np.X, X=copy springs to mind, which IIRC is supported.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "How straightforward an issue would this be to fix?",
  "id": "5aa10d9435dd17022e35f733",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-03-08T10:16:52.926Z",
  "text": "How straightforward an issue would this be to fix?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "<span data-link-type=\"issue\" data-issue=\"2798\" class=\"issue\">#2798</span> I mean",
  "id": "5aa10da30a1614b712f6dfa1",
  "issues": [
   {
    "number": "2798"
   }
  ],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-03-08T10:17:06.998Z",
  "text": "#2798 I mean",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "<a href=\"https://github.com/numba/numba/blob/b78aaa85446443267206d4eb4a1b37902f218ac3/numba/targets/arrayobj.py#L1474-L1536\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://github.com/numba/numba/blob/b78aaa85446443267206d4eb4a1b37902f218ac3/numba/targets/arrayobj.py#L1474-L1536</a>",
  "id": "5aa10dfdf3f6d24c684ee1c2",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2018-03-08T10:18:37.434Z",
  "text": "https://github.com/numba/numba/blob/b78aaa85446443267206d4eb4a1b37902f218ac3/numba/targets/arrayobj.py#L1474-L1536",
  "unread": false,
  "urls": [
   {
    "url": "https://github.com/numba/numba/blob/b78aaa85446443267206d4eb4a1b37902f218ac3/numba/targets/arrayobj.py#L1474-L1536"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "can probably just overload a bit of that",
  "id": "5aa10e27e4d1c63604d71f1a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2018-03-08T10:19:19.100Z",
  "text": "can probably just overload a bit of that",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "so I&#39;d guess not too bad",
  "id": "5aa10e316fba1a703ae11b19",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2018-03-08T10:19:29.430Z",
  "text": "so I'd guess not too bad",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "I implemented a version of np.reshape similar to how np.ravel is implemented in arrayobj.py (including lower.builting decoration), but how do I get Numba to notice this and not throw an UntypedAttributeError? ",
  "id": "5aa124490a1614b712f756c0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2018-03-08T11:53:45.257Z",
  "text": "I implemented a version of np.reshape similar to how np.ravel is implemented in arrayobj.py (including lower.builting decoration), but how do I get Numba to notice this and not throw an UntypedAttributeError? ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "It was in npydecl.py, adding it to the list in _numpy_redirect",
  "id": "5aa125b9c3c5f8b90d49f8c6",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2018-03-08T11:59:53.449Z",
  "text": "It was in npydecl.py, adding it to the list in _numpy_redirect",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Ought to work now, should I also add some tests for it?",
  "id": "5aa125fa0a1614b712f75f49",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-03-08T12:00:58.276Z",
  "text": "Ought to work now, should I also add some tests for it?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "How functional are you guys?",
  "id": "5aa129bd53c1dbb743baa930",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-03-08T12:17:01.560Z",
  "text": "How functional are you guys?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "I saw some use of partial in the test suite",
  "id": "5aa129c4f3f6d24c684f6b95",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-03-08T12:17:08.891Z",
  "text": "I saw some use of partial in the test suite",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Could build some kickass tests that way",
  "id": "5aa12a596fba1a703ae1b525",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-03-08T12:19:37.596Z",
  "text": "Could build some kickass tests that way",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/lespaul",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/182689?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/182689?v=4&s=60",
   "displayName": "lespaul",
   "gv": "4",
   "id": "5a9a65dbd73408ce4f8fad42",
   "url": "/lespaul",
   "username": "lespaul"
  },
  "html": "hello, I&#39;d like to just get some clarification about numba&#39;s support for numpy&#39;s stack function.  It appears there is no support currently for the out keyword (I believe this also matches how I&#39;m interpreting arrayobj.py&#39;s _np_stack function).  I just wanted to check here before issuing a pull request",
  "id": "5aa156cbc3c5f8b90d4b1334",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2018-03-08T15:29:15.360Z",
  "text": "hello, I'd like to just get some clarification about numba's support for numpy's stack function.  It appears there is no support currently for the out keyword (I believe this also matches how I'm interpreting arrayobj.py's _np_stack function).  I just wanted to check here before issuing a pull request",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-03-08T15:34:59.967Z",
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/lespaul",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/182689?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/182689?v=4&s=60",
   "displayName": "lespaul",
   "gv": "4",
   "id": "5a9a65dbd73408ce4f8fad42",
   "url": "/lespaul",
   "username": "lespaul"
  },
  "html": "<pre><code>@<span class=\"function\"><span class=\"title\">jit</span><span class=\"params\">(nopython=True)</span></span>\ndef <span class=\"function\"><span class=\"title\">test_stack</span><span class=\"params\">(x, out)</span></span>:\n    return np.<span class=\"function\"><span class=\"title\">stack</span><span class=\"params\">((x,x)</span></span>, axis=<span class=\"number\">1</span>, out=out)\n\nimport numpy as np\nx = np.<span class=\"function\"><span class=\"title\">array</span><span class=\"params\">(range(<span class=\"number\">5</span>)</span></span>)\nout = np.<span class=\"function\"><span class=\"title\">empty</span><span class=\"params\">((<span class=\"number\">5</span>, <span class=\"number\">2</span>)</span></span>)\n<span class=\"function\"><span class=\"title\">test_stack</span><span class=\"params\">(x, out)</span></span></code></pre>",
  "id": "5aa15815c3c5f8b90d4b1bfe",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2018-03-08T15:34:44.980Z",
  "text": "```\n@jit(nopython=True)\ndef test_stack(x, out):\n    return np.stack((x,x), axis=1, out=out)\n\nimport numpy as np\nx = np.array(range(5))\nout = np.empty((5, 2))\ntest_stack(x, out)\n```",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"lespaul\" class=\"mention\">@lespaul</span> seems to be the case <a href=\"https://github.com/numba/numba/blob/b78aaa85446443267206d4eb4a1b37902f218ac3/numba/targets/arrayobj.py#L4374-L4383\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://github.com/numba/numba/blob/b78aaa85446443267206d4eb4a1b37902f218ac3/numba/targets/arrayobj.py#L4374-L4383</a>",
  "id": "5aa1589de4ff28713a0bc4d1",
  "issues": [],
  "mentions": [
   {
    "screenName": "lespaul",
    "userId": "5a9a65dbd73408ce4f8fad42",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 9,
  "sent": "2018-03-08T15:37:01.691Z",
  "text": "@lespaul seems to be the case https://github.com/numba/numba/blob/b78aaa85446443267206d4eb4a1b37902f218ac3/numba/targets/arrayobj.py#L4374-L4383",
  "unread": false,
  "urls": [
   {
    "url": "https://github.com/numba/numba/blob/b78aaa85446443267206d4eb4a1b37902f218ac3/numba/targets/arrayobj.py#L4374-L4383"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/lespaul",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/182689?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/182689?v=4&s=60",
   "displayName": "lespaul",
   "gv": "4",
   "id": "5a9a65dbd73408ce4f8fad42",
   "url": "/lespaul",
   "username": "lespaul"
  },
  "html": "okay thanks for follow up",
  "id": "5aa1592553c1dbb743bbabff",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2018-03-08T15:39:17.361Z",
  "text": "okay thanks for follow up",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/linzuzeng",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/3583410?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/3583410?v=4&s=60",
   "displayName": "Zuzeng Lin",
   "gv": "4",
   "id": "5aa16684d73408ce4f907771",
   "url": "/linzuzeng",
   "username": "linzuzeng",
   "v": 1
  },
  "html": "Does numba offer a way to inline an external LLVM IR, say, a function generated by llvmlite?<br>Or, can I make an inline call to a numba function with llvmlite?",
  "id": "5aa166e90a1614b712f8ca6f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-03-08T16:38:01.759Z",
  "text": "Does numba offer a way to inline an external LLVM IR, say, a function generated by llvmlite?\nOr, can I make an inline call to a numba function with llvmlite?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "I&#39;m getting a weird error when trying to run numba.runtests:<pre><code><span class=\"string\">C:</span>\\Users\\User\\Anaconda3\\envs\\numbaenv\\lib\\runpy.<span class=\"string\">py:</span><span class=\"number\">125</span>: <span class=\"string\">RuntimeWarning:</span> <span class=\"string\">'numba.runtests'</span> found <span class=\"keyword\">in</span> sys.modules after <span class=\"keyword\">import</span> of <span class=\"keyword\">package</span> <span class=\"string\">'numba'</span>, but prior to execution of <span class=\"string\">'numba.runtests'</span>; <span class=\"keyword\">this</span> may result <span class=\"keyword\">in</span> unpredictable behaviour\n  warn(RuntimeWarning(msg))\ntmph4uswlxy.c\n<span class=\"string\">c1:</span> fatal error <span class=\"string\">C1083:</span> Cannot open source <span class=\"string\">file:</span> <span class=\"string\">'C:\\Users\\User\\AppData\\Local\\Temp\\tmph4uswlxy.c'</span>: Permission denied\nunittest.loader._FailedTest.numba.tests\n<span class=\"number\">1</span> tests found</code></pre>",
  "id": "5aa24e95e4ff28713a103227",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 3,
  "sent": "2018-03-09T09:06:29.625Z",
  "text": "I'm getting a weird error when trying to run numba.runtests:\n````\nC:\\Users\\User\\Anaconda3\\envs\\numbaenv\\lib\\runpy.py:125: RuntimeWarning: 'numba.runtests' found in sys.modules after import of package 'numba', but prior to execution of 'numba.runtests'; this may result in unpredictable behaviour\n  warn(RuntimeWarning(msg))\ntmph4uswlxy.c\nc1: fatal error C1083: Cannot open source file: 'C:\\Users\\User\\AppData\\Local\\Temp\\tmph4uswlxy.c': Permission denied\nunittest.loader._FailedTest.numba.tests\n1 tests found\n````",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "It keeps doing this with different tmp c-file names",
  "id": "5aa24f886fba1a703ae74a38",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 3,
  "sent": "2018-03-09T09:10:32.309Z",
  "text": "It keeps doing this with different tmp c-file names",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "It appears to be an issue with Visual studio &gt;.&lt;",
  "id": "5aa250d7458cbde557135f8b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 3,
  "sent": "2018-03-09T09:16:07.882Z",
  "text": "It appears to be an issue with Visual studio >.<",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "I&#39;ve tried reinstalling VS Build Tools, I&#39;ve checked access rights for the folder, I&#39;ve done a fresh clone from the repo and followed the steps from before... Pretty much at a complete loss for solutions here, aside from resetting the computer. Any ideas?",
  "id": "5aa25fa635dd17022e3c4354",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 3,
  "sent": "2018-03-09T10:19:18.459Z",
  "text": "I've tried reinstalling VS Build Tools, I've checked access rights for the folder, I've done a fresh clone from the repo and followed the steps from before... Pretty much at a complete loss for solutions here, aside from resetting the computer. Any ideas?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"Rik-de-Kort\" class=\"mention\">@Rik-de-Kort</span> how are you running this ? From a python prompt?",
  "id": "5aa26270888332ee3a18fc61",
  "issues": [],
  "mentions": [
   {
    "screenName": "Rik-de-Kort",
    "userId": "5a0ea31cd73408ce4f7f000d",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 3,
  "sent": "2018-03-09T10:31:12.269Z",
  "text": "@Rik-de-Kort how are you running this ? From a python prompt?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "I&#39;ve seen that message before in the buildfarm, think it comes from <code>pycc</code>, which is deprecated.",
  "id": "5aa2629b458cbde55713c35e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 3,
  "sent": "2018-03-09T10:31:55.526Z",
  "text": "I've seen that message before in the buildfarm, think it comes from `pycc`, which is deprecated.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "does a simple <code>./runtests.py -l</code> work ?",
  "id": "5aa262e36f8b4b9946084aaa",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 3,
  "sent": "2018-03-09T10:33:07.941Z",
  "text": "does a simple `./runtests.py -l` work ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Gimme a sec",
  "id": "5aa262ed0a1614b712fd5f18",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 3,
  "sent": "2018-03-09T10:33:17.221Z",
  "text": "Gimme a sec",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Now it complains about not being able to find _typeconv",
  "id": "5aa26333458cbde55713c594",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2018-03-09T10:34:27.719Z",
  "text": "Now it complains about not being able to find _typeconv",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "And setup.py build_ext --inplace fails with 1257",
  "id": "5aa2633c6f8b4b9946084bfc",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2018-03-09T10:34:36.819Z",
  "text": "And setup.py build_ext --inplace fails with 1257",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "have you got numba installed",
  "id": "5aa26340c3c5f8b90d4fea9b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2018-03-09T10:34:40.195Z",
  "text": "have you got numba installed",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Oh wait that&#39;s numbaenv thing",
  "id": "5aa263466f8b4b9946084c2c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2018-03-09T10:34:46.455Z",
  "text": "Oh wait that's numbaenv thing",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "right, that&#39;s likely the problem",
  "id": "5aa2634a888332ee3a1900b8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2018-03-09T10:34:50.519Z",
  "text": "right, that's likely the problem",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "./runtests.py -l gives the same error message as above",
  "id": "5aa26363e4ff28713a10994e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2018-03-09T10:35:15.865Z",
  "text": "./runtests.py -l gives the same error message as above",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "yeah, I think the installation might well have failed",
  "id": "5aa2636e6fba1a703ae7b27f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2018-03-09T10:35:26.170Z",
  "text": "yeah, I think the installation might well have failed",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "Are you building from master on github?",
  "id": "5aa263b335dd17022e3c594a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2018-03-09T10:36:35.101Z",
  "text": "Are you building from master on github?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Yes",
  "id": "5aa263d8c3c5f8b90d4feea1",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2018-03-09T10:37:12.724Z",
  "text": "Yes",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "ok",
  "id": "5aa263ea53c1dbb743c06a03",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2018-03-09T10:37:30.799Z",
  "text": "ok",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "are you using conda ?",
  "id": "5aa263f5458cbde55713c9c9",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2018-03-09T10:37:41.795Z",
  "text": "are you using conda ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Yes",
  "id": "5aa264250a1614b712fd65cb",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2018-03-09T10:38:29.405Z",
  "text": "Yes",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Everything conform instructions in the docs",
  "id": "5aa264356f8b4b9946085151",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2018-03-09T10:38:45.243Z",
  "text": "Everything conform instructions in the docs",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "Right, and when you do a <code>build_ext</code> you get an error, does it say anything more than <code>1257</code>? ",
  "id": "5aa26475458cbde55713cca5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2018-03-09T10:39:49.819Z",
  "text": "Right, and when you do a `build_ext` you get an error, does it say anything more than `1257`? ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "No when I&#39;m on numbaenv it does not give an error",
  "id": "5aa26482e4ff28713a109dd6",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 3,
  "sent": "2018-03-09T10:40:02.697Z",
  "text": "No when I'm on numbaenv it does not give an error",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "You may have to enlighten me as to what numbanev is :) is that your conda environment containing numba+deps that you are building in?",
  "id": "5aa264b66f8b4b994608540b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 3,
  "sent": "2018-03-09T10:40:54.963Z",
  "text": "You may have to enlighten me as to what numbanev is :) is that your conda environment containing numba+deps that you are building in?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "<pre><code>running build_ext\nNo module named 'numpy.distutils._msvccompiler' in numpy.distutils; trying from distutils\nbuilding 'numba._helperlib' extension\nC:<span class=\"command\">\\Program</span> Files (x86)<span class=\"command\">\\Microsoft</span> Visual Studio\\2017<span class=\"command\">\\BuildTools</span><span class=\"command\">\\VC</span><span class=\"command\">\\Tools</span><span class=\"command\">\\MSVC</span>\\14.13.26128<span class=\"command\">\\bin</span><span class=\"command\">\\HostX</span>64<span class=\"command\">\\x</span>64<span class=\"command\">\\cl</span>.exe /c /nologo /Ox /W3 /GL /DNDEBUG /MT -IC:<span class=\"command\">\\\\</span>Users<span class=\"command\">\\\\</span>User<span class=\"command\">\\\\</span>Anaconda3<span class=\"command\">\\\\</span>envs<span class=\"command\">\\\\</span>numbaenv<span class=\"command\">\\\\</span>lib<span class=\"command\">\\\\</span>site-packages<span class=\"command\">\\\\</span>numpy<span class=\"command\">\\\\</span>core<span class=\"command\">\\\\</span>include -IC:<span class=\"command\">\\Users</span><span class=\"command\">\\User</span><span class=\"command\">\\Anaconda</span>3<span class=\"command\">\\envs</span><span class=\"command\">\\numbaenv</span><span class=\"command\">\\include</span> -IC:<span class=\"command\">\\Users</span><span class=\"command\">\\User</span><span class=\"command\">\\Anaconda</span>3<span class=\"command\">\\envs</span><span class=\"command\">\\numbaenv</span><span class=\"command\">\\include</span> -I\"C:<span class=\"command\">\\Program</span> Files (x86)<span class=\"command\">\\Microsoft</span> Visual Studio\\2017<span class=\"command\">\\BuildTools</span><span class=\"command\">\\VC</span><span class=\"command\">\\Tools</span><span class=\"command\">\\MSVC</span>\\14.13.26128<span class=\"command\">\\Include</span>\" -I\"C:<span class=\"command\">\\Program</span> Files (x86)<span class=\"command\">\\Windows</span> Kits\\10<span class=\"command\">\\include</span>\\10.0.16299.0<span class=\"command\">\\shared</span>\" -I\"C:<span class=\"command\">\\Program</span> Files (x86)<span class=\"command\">\\Windows</span> Kits\\10<span class=\"command\">\\include</span>\\10.0.16299.0<span class=\"command\">\\um</span>\" -I\"C:<span class=\"command\">\\Program</span> Files (x86)<span class=\"command\">\\Windows</span> Kits\\10<span class=\"command\">\\include</span>\\10.0.16299.0<span class=\"command\">\\winrt</span>\" -I\"C:<span class=\"command\">\\Program</span> Files (x86)<span class=\"command\">\\Windows</span> Kits\\10<span class=\"command\">\\include</span>\\10.0.16299.0<span class=\"command\">\\ucrt</span>\" /Tcnumba/_helpermod.c /Fobuild<span class=\"command\">\\temp</span>.win-amd64-3.5<span class=\"command\">\\Release</span><span class=\"command\">\\numba</span>/_helpermod.obj\nC:<span class=\"command\">\\Program</span> Files (x86)<span class=\"command\">\\Microsoft</span> Visual Studio\\2017<span class=\"command\">\\BuildTools</span><span class=\"command\">\\VC</span><span class=\"command\">\\Tools</span><span class=\"command\">\\MSVC</span>\\14.13.26128<span class=\"command\">\\bin</span><span class=\"command\">\\HostX</span>64<span class=\"command\">\\x</span>64<span class=\"command\">\\cl</span>.exe /c /nologo /Ox /W3 /GL /DNDEBUG /MT -IC:<span class=\"command\">\\\\</span>Users<span class=\"command\">\\\\</span>User<span class=\"command\">\\\\</span>Anaconda3<span class=\"command\">\\\\</span>envs<span class=\"command\">\\\\</span>numbaenv<span class=\"command\">\\\\</span>lib<span class=\"command\">\\\\</span>site-packages<span class=\"command\">\\\\</span>numpy<span class=\"command\">\\\\</span>core<span class=\"command\">\\\\</span>include -IC:<span class=\"command\">\\Users</span><span class=\"command\">\\User</span><span class=\"command\">\\Anaconda</span>3<span class=\"command\">\\envs</span><span class=\"command\">\\numbaenv</span><span class=\"command\">\\include</span> -IC:<span class=\"command\">\\Users</span><span class=\"command\">\\User</span><span class=\"command\">\\Anaconda</span>3<span class=\"command\">\\envs</span><span class=\"command\">\\numbaenv</span><span class=\"command\">\\include</span> -I\"C:<span class=\"command\">\\Program</span> Files (x86)<span class=\"command\">\\Microsoft</span> Visual Studio\\2017<span class=\"command\">\\BuildTools</span><span class=\"command\">\\VC</span><span class=\"command\">\\Tools</span><span class=\"command\">\\MSVC</span>\\14.13.26128<span class=\"command\">\\Include</span>\" -I\"C:<span class=\"command\">\\Program</span> Files (x86)<span class=\"command\">\\Windows</span> Kits\\10<span class=\"command\">\\include</span>\\10.0.16299.0<span class=\"command\">\\shared</span>\" -I\"C:<span class=\"command\">\\Program</span> Files (x86)<span class=\"command\">\\Windows</span> Kits\\10<span class=\"command\">\\include</span>\\10.0.16299.0<span class=\"command\">\\um</span>\" -I\"C:<span class=\"command\">\\Program</span> Files (x86)<span class=\"command\">\\Windows</span> Kits\\10<span class=\"command\">\\include</span>\\10.0.16299.0<span class=\"command\">\\winrt</span>\" -I\"C:<span class=\"command\">\\Program</span> Files (x86)<span class=\"command\">\\Windows</span> Kits\\10<span class=\"command\">\\include</span>\\10.0.16299.0<span class=\"command\">\\ucrt</span>\" /Tcnumba/_math_c99.c /Fobuild<span class=\"command\">\\temp</span>.win-amd64-3.5<span class=\"command\">\\Release</span><span class=\"command\">\\numba</span>/_math_c99.obj\nC:<span class=\"command\">\\Program</span> Files (x86)<span class=\"command\">\\Microsoft</span> Visual Studio\\2017<span class=\"command\">\\BuildTools</span><span class=\"command\">\\VC</span><span class=\"command\">\\Tools</span><span class=\"command\">\\MSVC</span>\\14.13.26128<span class=\"command\">\\bin</span><span class=\"command\">\\HostX</span>64<span class=\"command\">\\x</span>64<span class=\"command\">\\link</span>.exe /nologo /INCREMENTAL:NO /LTCG /nodefaultlib:libucrt.lib ucrt.lib /DLL /MANIFEST:EMBED,ID=2 /MANIFESTUAC:NO /LIBPATH:C:<span class=\"command\">\\\\</span>Users<span class=\"command\">\\\\</span>User<span class=\"command\">\\\\</span>Anaconda3<span class=\"command\">\\\\</span>envs<span class=\"command\">\\\\</span>numbaenv<span class=\"command\">\\\\</span>lib<span class=\"command\">\\\\</span>site-packages<span class=\"command\">\\\\</span>numpy<span class=\"command\">\\\\</span>core<span class=\"command\">\\\\</span>lib /LIBPATH:C:<span class=\"command\">\\Users</span><span class=\"command\">\\User</span><span class=\"command\">\\Anaconda</span>3<span class=\"command\">\\envs</span><span class=\"command\">\\numbaenv</span><span class=\"command\">\\libs</span> /LIBPATH:C:<span class=\"command\">\\Users</span><span class=\"command\">\\User</span><span class=\"command\">\\Anaconda</span>3<span class=\"command\">\\envs</span><span class=\"command\">\\numbaenv</span><span class=\"command\">\\PCbuild</span><span class=\"command\">\\amd</span>64 /LIBPATH:\"C:<span class=\"command\">\\Program</span> Files (x86)<span class=\"command\">\\Microsoft</span> Visual Studio\\2017<span class=\"command\">\\BuildTools</span><span class=\"command\">\\VC</span><span class=\"command\">\\Tools</span><span class=\"command\">\\MSVC</span>\\14.13.26128<span class=\"command\">\\Lib</span><span class=\"command\">\\x</span>64\" /LIBPATH:\"C:<span class=\"command\">\\Program</span> Files (x86)<span class=\"command\">\\Windows</span> Kits\\10<span class=\"command\">\\lib</span>\\10.0.16299.0<span class=\"command\">\\um</span><span class=\"command\">\\x</span>64\" /LIBPATH:C:<span class=\"command\">\\WINDOWS</span><span class=\"command\">\\Microsoft</span>.NET<span class=\"command\">\\Framework</span>64<span class=\"command\">\\v</span>4.0.30319 /LIBPATH:\"C:<span class=\"command\">\\Program</span> Files (x86)<span class=\"command\">\\Windows</span> Kits\\10<span class=\"command\">\\lib</span>\\10.0.16299.0<span class=\"command\">\\ucrt</span><span class=\"command\">\\x</span>64\" npymath.lib /EXPORT:PyInit__helperlib build<span class=\"command\">\\temp</span>.win-amd64-3.5<span class=\"command\">\\Release</span><span class=\"command\">\\numba</span>/_helpermod.obj build<span class=\"command\">\\temp</span>.win-amd64-3.5<span class=\"command\">\\Release</span><span class=\"command\">\\numba</span>/_math_c99.obj /OUT:build<span class=\"command\">\\lib</span>.win-amd64-3.5<span class=\"command\">\\numba</span><span class=\"command\">\\_</span>helperlib.cp35-win_amd64.pyd /IMPLIB:build<span class=\"command\">\\temp</span>.win-amd64-3.5<span class=\"command\">\\Release</span><span class=\"command\">\\numba</span><span class=\"command\">\\_</span>helperlib.cp35-win_amd64.lib\ncopying build<span class=\"command\">\\lib</span>.win-amd64-3.5<span class=\"command\">\\numba</span><span class=\"command\">\\_</span>dynfunc.cp35-win_amd64.pyd -&gt; numba\ncopying build<span class=\"command\">\\lib</span>.win-amd64-3.5<span class=\"command\">\\numba</span><span class=\"command\">\\_</span>dispatcher.cp35-win_amd64.pyd -&gt; numba\ncopying build<span class=\"command\">\\lib</span>.win-amd64-3.5<span class=\"command\">\\numba</span><span class=\"command\">\\_</span>helperlib.cp35-win_amd64.pyd -&gt; numba\ncopying build<span class=\"command\">\\lib</span>.win-amd64-3.5<span class=\"command\">\\numba</span><span class=\"command\">\\typeconv</span><span class=\"command\">\\_</span>typeconv.cp35-win_amd64.pyd -&gt; numba<span class=\"command\">\\typeconv</span>\ncopying build<span class=\"command\">\\lib</span>.win-amd64-3.5<span class=\"command\">\\numba</span><span class=\"command\">\\npyufunc</span><span class=\"command\">\\_</span>internal.cp35-win_amd64.pyd -&gt; numba<span class=\"command\">\\npyufunc</span>\ncopying build<span class=\"command\">\\lib</span>.win-amd64-3.5<span class=\"command\">\\numba</span><span class=\"command\">\\npyufunc</span><span class=\"command\">\\workqueue</span>.cp35-win_amd64.pyd -&gt; numba<span class=\"command\">\\npyufunc</span>\ncopying build<span class=\"command\">\\lib</span>.win-amd64-3.5<span class=\"command\">\\numba</span><span class=\"command\">\\mviewbuf</span>.cp35-win_amd64.pyd -&gt; numba\ncopying build<span class=\"command\">\\lib</span>.win-amd64-3.5<span class=\"command\">\\numba</span><span class=\"command\">\\runtime</span><span class=\"command\">\\_</span>nrt_python.cp35-win_amd64.pyd -&gt; numba<span class=\"command\">\\runtime</span>\ncopying build<span class=\"command\">\\lib</span>.win-amd64-3.5<span class=\"command\">\\numba</span><span class=\"command\">\\jitclass</span><span class=\"command\">\\_</span>box.cp35-win_amd64.pyd -&gt; numba<span class=\"command\">\\jitclass</span>\ncopying build<span class=\"command\">\\lib</span>.win-amd64-3.5<span class=\"command\">\\numba</span><span class=\"command\">\\cuda</span><span class=\"command\">\\cudadrv</span><span class=\"command\">\\_</span>extras.cp35-win_amd64.pyd -&gt; numba<span class=\"command\">\\cuda</span><span class=\"command\">\\cudadrv</span></code></pre>Is the message I get if I run build_ext",
  "id": "5aa264f56f8b4b9946085503",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 3,
  "sent": "2018-03-09T10:41:57.304Z",
  "text": "```\nrunning build_ext\nNo module named 'numpy.distutils._msvccompiler' in numpy.distutils; trying from distutils\nbuilding 'numba._helperlib' extension\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.13.26128\\bin\\HostX64\\x64\\cl.exe /c /nologo /Ox /W3 /GL /DNDEBUG /MT -IC:\\\\Users\\\\User\\\\Anaconda3\\\\envs\\\\numbaenv\\\\lib\\\\site-packages\\\\numpy\\\\core\\\\include -IC:\\Users\\User\\Anaconda3\\envs\\numbaenv\\include -IC:\\Users\\User\\Anaconda3\\envs\\numbaenv\\include -I\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.13.26128\\Include\" -I\"C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\shared\" -I\"C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\um\" -I\"C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\winrt\" -I\"C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\" /Tcnumba/_helpermod.c /Fobuild\\temp.win-amd64-3.5\\Release\\numba/_helpermod.obj\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.13.26128\\bin\\HostX64\\x64\\cl.exe /c /nologo /Ox /W3 /GL /DNDEBUG /MT -IC:\\\\Users\\\\User\\\\Anaconda3\\\\envs\\\\numbaenv\\\\lib\\\\site-packages\\\\numpy\\\\core\\\\include -IC:\\Users\\User\\Anaconda3\\envs\\numbaenv\\include -IC:\\Users\\User\\Anaconda3\\envs\\numbaenv\\include -I\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.13.26128\\Include\" -I\"C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\shared\" -I\"C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\um\" -I\"C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\winrt\" -I\"C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\" /Tcnumba/_math_c99.c /Fobuild\\temp.win-amd64-3.5\\Release\\numba/_math_c99.obj\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.13.26128\\bin\\HostX64\\x64\\link.exe /nologo /INCREMENTAL:NO /LTCG /nodefaultlib:libucrt.lib ucrt.lib /DLL /MANIFEST:EMBED,ID=2 /MANIFESTUAC:NO /LIBPATH:C:\\\\Users\\\\User\\\\Anaconda3\\\\envs\\\\numbaenv\\\\lib\\\\site-packages\\\\numpy\\\\core\\\\lib /LIBPATH:C:\\Users\\User\\Anaconda3\\envs\\numbaenv\\libs /LIBPATH:C:\\Users\\User\\Anaconda3\\envs\\numbaenv\\PCbuild\\amd64 /LIBPATH:\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.13.26128\\Lib\\x64\" /LIBPATH:\"C:\\Program Files (x86)\\Windows Kits\\10\\lib\\10.0.16299.0\\um\\x64\" /LIBPATH:C:\\WINDOWS\\Microsoft.NET\\Framework64\\v4.0.30319 /LIBPATH:\"C:\\Program Files (x86)\\Windows Kits\\10\\lib\\10.0.16299.0\\ucrt\\x64\" npymath.lib /EXPORT:PyInit__helperlib build\\temp.win-amd64-3.5\\Release\\numba/_helpermod.obj build\\temp.win-amd64-3.5\\Release\\numba/_math_c99.obj /OUT:build\\lib.win-amd64-3.5\\numba\\_helperlib.cp35-win_amd64.pyd /IMPLIB:build\\temp.win-amd64-3.5\\Release\\numba\\_helperlib.cp35-win_amd64.lib\ncopying build\\lib.win-amd64-3.5\\numba\\_dynfunc.cp35-win_amd64.pyd -> numba\ncopying build\\lib.win-amd64-3.5\\numba\\_dispatcher.cp35-win_amd64.pyd -> numba\ncopying build\\lib.win-amd64-3.5\\numba\\_helperlib.cp35-win_amd64.pyd -> numba\ncopying build\\lib.win-amd64-3.5\\numba\\typeconv\\_typeconv.cp35-win_amd64.pyd -> numba\\typeconv\ncopying build\\lib.win-amd64-3.5\\numba\\npyufunc\\_internal.cp35-win_amd64.pyd -> numba\\npyufunc\ncopying build\\lib.win-amd64-3.5\\numba\\npyufunc\\workqueue.cp35-win_amd64.pyd -> numba\\npyufunc\ncopying build\\lib.win-amd64-3.5\\numba\\mviewbuf.cp35-win_amd64.pyd -> numba\ncopying build\\lib.win-amd64-3.5\\numba\\runtime\\_nrt_python.cp35-win_amd64.pyd -> numba\\runtime\ncopying build\\lib.win-amd64-3.5\\numba\\jitclass\\_box.cp35-win_amd64.pyd -> numba\\jitclass\ncopying build\\lib.win-amd64-3.5\\numba\\cuda\\cudadrv\\_extras.cp35-win_amd64.pyd -> numba\\cuda\\cudadrv\n```\nIs the message I get if I run build_ext",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "<a href=\"http://numba.pydata.org/numba-doc/dev/developer/contributing.html#getting-set-up\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://numba.pydata.org/numba-doc/dev/developer/contributing.html#getting-set-up</a>",
  "id": "5aa264f98f1c77ef3a9e8ee9",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 3,
  "sent": "2018-03-09T10:42:01.149Z",
  "text": "http://numba.pydata.org/numba-doc/dev/developer/contributing.html#getting-set-up",
  "unread": false,
  "urls": [
   {
    "url": "http://numba.pydata.org/numba-doc/dev/developer/contributing.html#getting-set-up"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "The custom conda env for development",
  "id": "5aa26508e4ff28713a10a026",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 3,
  "sent": "2018-03-09T10:42:16.570Z",
  "text": "The custom conda env for development",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "right, so it looks like there&#39;s something wrong with the compilation chain",
  "id": "5aa26555c3c5f8b90d4ff646",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 3,
  "sent": "2018-03-09T10:43:33.399Z",
  "text": "right, so it looks like there's something wrong with the compilation chain",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "which means you don&#39;t have the libraries built",
  "id": "5aa2655e6f8b4b99460856f1",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 3,
  "sent": "2018-03-09T10:43:42.564Z",
  "text": "which means you don't have the libraries built",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "which is probably why you can&#39;t run the tests",
  "id": "5aa26569e4d1c63604dd8135",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 3,
  "sent": "2018-03-09T10:43:53.200Z",
  "text": "which is probably why you can't run the tests",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Alright",
  "id": "5aa2656f888332ee3a190a77",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 3,
  "sent": "2018-03-09T10:43:59.035Z",
  "text": "Alright",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "I&#39;ll try a fresh conda environment",
  "id": "5aa2657a53c1dbb743c070ac",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 3,
  "sent": "2018-03-09T10:44:10.654Z",
  "text": "I'll try a fresh conda environment",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "ok, worth a try",
  "id": "5aa265d435dd17022e3c65b0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 3,
  "sent": "2018-03-09T10:45:40.910Z",
  "text": "ok, worth a try",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "Numba borrows the compiler toolchain from what is baked into Numpy distutils",
  "id": "5aa265fa0a1614b712fd71b4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 3,
  "sent": "2018-03-09T10:46:18.058Z",
  "text": "Numba borrows the compiler toolchain from what is baked into Numpy distutils",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Yeah I see",
  "id": "5aa266360a1614b712fd7364",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 3,
  "sent": "2018-03-09T10:47:18.411Z",
  "text": "Yeah I see",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Same message as before, can&#39;t find numpy distutils",
  "id": "5aa26640c3c5f8b90d4ffa2e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 3,
  "sent": "2018-03-09T10:47:28.944Z",
  "text": "Same message as before, can't find numpy distutils",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "Can you <code>conda install scipy</code> ?",
  "id": "5aa2664cc3c5f8b90d4ffa54",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 3,
  "sent": "2018-03-09T10:47:40.799Z",
  "text": "Can you `conda install scipy` ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Trying",
  "id": "5aa2666b0a1614b712fd742f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 3,
  "sent": "2018-03-09T10:48:11.942Z",
  "text": "Trying",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "I wonder if that&#39;ll sort it out.",
  "id": "5aa2667335dd17022e3c69e7",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 3,
  "sent": "2018-03-09T10:48:19.632Z",
  "text": "I wonder if that'll sort it out.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Nope",
  "id": "5aa266aaf3f6d24c685554a5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 3,
  "sent": "2018-03-09T10:49:14.741Z",
  "text": "Nope",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "I&#39;m going to have lunch, back in a bit",
  "id": "5aa2670e888332ee3a1912f5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 3,
  "sent": "2018-03-09T10:50:54.980Z",
  "text": "I'm going to have lunch, back in a bit",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "hmm I think that error is possibly not the problem.",
  "id": "5aa269a4888332ee3a192555",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 3,
  "sent": "2018-03-09T11:01:56.774Z",
  "text": "hmm I think that error is possibly not the problem.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "It&#39;s still managing to compile.",
  "id": "5aa26a126fba1a703ae7d739",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 4,
  "sent": "2018-03-09T11:03:46.503Z",
  "text": "It's still managing to compile.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "I presume if you look in <code>build\\&lt;arch&gt;\\numba</code> you can see a bunch of <code>.pyd</code>?",
  "id": "5aa26a8e888332ee3a192a5f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 4,
  "sent": "2018-03-09T11:05:50.601Z",
  "text": "I presume if you look in `build\\<arch>\\numba` you can see a bunch of `.pyd`?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Yeah a couple",
  "id": "5aa27456458cbde557142dc9",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 4,
  "sent": "2018-03-09T11:47:34.473Z",
  "text": "Yeah a couple",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "just to check,  can you try a conda build with <code>conda build buildscripts/condarecipe.local/meta.yaml</code> ?",
  "id": "5aa2755b53c1dbb743c0cd95",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 4,
  "sent": "2018-03-09T11:51:55.817Z",
  "text": "just to check,  can you try a conda build with ` conda build buildscripts/condarecipe.local/meta.yaml ` ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "that might isolate the problem a bit",
  "id": "5aa275b46fba1a703ae81731",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 4,
  "sent": "2018-03-09T11:53:24.632Z",
  "text": "that might isolate the problem a bit",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "I can",
  "id": "5aa27b8b53c1dbb743c0eaf4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 4,
  "sent": "2018-03-09T12:18:19.488Z",
  "text": "I can",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "And we have failure",
  "id": "5aa27c07c3c5f8b90d50773d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 4,
  "sent": "2018-03-09T12:20:23.967Z",
  "text": "And we have failure",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "thanks, what&#39;s the fail ?",
  "id": "5aa27c4353c1dbb743c0ef5b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 4,
  "sent": "2018-03-09T12:21:23.274Z",
  "text": "thanks, what's the fail ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "<pre><code>opying numba<span class=\"command\">\\tests</span><span class=\"command\">\\pycc</span>_distutils_usecase<span class=\"command\">\\source</span>_module.py -&gt; build<span class=\"command\">\\lib</span>.win-amd64-3.6<span class=\"command\">\\numba</span><span class=\"command\">\\tests</span><span class=\"command\">\\pycc</span>_distutils_usecase\nrunning build_ext\nNo module named 'numpy.distutils._msvccompiler' in numpy.distutils; trying from distutils\nbuilding 'numba._helperlib' extension\ncl.exe /c /nologo /Ox /W3 /GL /DNDEBUG /MD -IC:<span class=\"command\">\\\\</span>Users<span class=\"command\">\\\\</span>User<span class=\"command\">\\\\</span>Anaconda3<span class=\"command\">\\\\</span>conda-bld<span class=\"command\">\\\\</span>numba_1520597919279<span class=\"command\">\\\\</span>_h_env<span class=\"command\">\\\\</span>lib<span class=\"command\">\\\\</span>site-packages<span class=\"command\">\\\\</span>numpy<span class=\"command\">\\\\</span>core<span class=\"command\">\\\\</span>include -IC:<span class=\"command\">\\Users</span><span class=\"command\">\\User</span><span class=\"command\">\\Anaconda</span>3<span class=\"command\">\\conda</span>-bld<span class=\"command\">\\numba</span>_1520597919279<span class=\"command\">\\_</span>h_env<span class=\"command\">\\include</span> -IC:<span class=\"command\">\\Users</span><span class=\"command\">\\User</span><span class=\"command\">\\Anaconda</span>3<span class=\"command\">\\conda</span>-bld<span class=\"command\">\\numba</span>_1520597919279<span class=\"command\">\\_</span>h_env<span class=\"command\">\\include</span> -IC:<span class=\"command\">\\Users</span><span class=\"command\">\\User</span><span class=\"command\">\\Anaconda</span>3<span class=\"command\">\\conda</span>-bld<span class=\"command\">\\numba</span>_1520597919279<span class=\"command\">\\_</span>h_env<span class=\"command\">\\Library</span><span class=\"command\">\\include</span> /Tcnumba/_helpermod.c /Fobuild<span class=\"command\">\\temp</span>.win-amd64-3.6<span class=\"command\">\\Release</span><span class=\"command\">\\numba</span>/_helpermod.obj\nCould not locate executable cl.exe\nExecutable cl.exe does not exist\n\nerror: Command \"cl.exe /c /nologo /Ox /W3 /GL /DNDEBUG /MD -IC:<span class=\"command\">\\\\</span>Users<span class=\"command\">\\\\</span>User<span class=\"command\">\\\\</span>Anaconda3<span class=\"command\">\\\\</span>conda-bld<span class=\"command\">\\\\</span>numba_1520597919279<span class=\"command\">\\\\</span>_h_env<span class=\"command\">\\\\</span>lib<span class=\"command\">\\\\</span>site-packages<span class=\"command\">\\\\</span>numpy<span class=\"command\">\\\\</span>core<span class=\"command\">\\\\</span>include -IC:<span class=\"command\">\\Users</span><span class=\"command\">\\User</span><span class=\"command\">\\Anaconda</span>3<span class=\"command\">\\conda</span>-bld<span class=\"command\">\\numba</span>_1520597919279<span class=\"command\">\\_</span>h_env<span class=\"command\">\\include</span> -IC:<span class=\"command\">\\Users</span><span class=\"command\">\\User</span><span class=\"command\">\\Anaconda</span>3<span class=\"command\">\\conda</span>-bld<span class=\"command\">\\numba</span>_1520597919279<span class=\"command\">\\_</span>h_env<span class=\"command\">\\include</span> -IC:<span class=\"command\">\\Users</span><span class=\"command\">\\User</span><span class=\"command\">\\Anaconda</span>3<span class=\"command\">\\conda</span>-bld<span class=\"command\">\\numba</span>_1520597919279<span class=\"command\">\\_</span>h_env<span class=\"command\">\\Library</span><span class=\"command\">\\include</span> /Tcnumba/_helpermod.c /Fobuild<span class=\"command\">\\temp</span>.win-amd64-3.6<span class=\"command\">\\Release</span><span class=\"command\">\\numba</span>/_helpermod.obj\" failed with exit status 1\n\n(C:<span class=\"command\">\\Users</span><span class=\"command\">\\User</span><span class=\"command\">\\Anaconda</span>3<span class=\"command\">\\conda</span>-bld<span class=\"command\">\\numba</span>_1520597919279<span class=\"command\">\\_</span>h_env) C:<span class=\"command\">\\Users</span><span class=\"command\">\\User</span><span class=\"command\">\\Anaconda</span>3<span class=\"command\">\\conda</span>-bld<span class=\"command\">\\numba</span>_1520597919279<span class=\"command\">\\work</span>&gt;exit /b 1\nTraceback (most recent call last):\n  File \"C:<span class=\"command\">\\Users</span><span class=\"command\">\\User</span><span class=\"command\">\\Anaconda</span>3<span class=\"command\">\\Scripts</span><span class=\"command\">\\conda</span>-build-script.py\", line 10, in &lt;module&gt;\n    sys.exit(main())\n  File \"C:<span class=\"command\">\\Users</span><span class=\"command\">\\User</span><span class=\"command\">\\Anaconda</span>3<span class=\"command\">\\lib</span><span class=\"command\">\\site</span>-packages<span class=\"command\">\\conda</span>_build<span class=\"command\">\\cli</span><span class=\"command\">\\main</span>_build.py\", line 388, in main\n    execute(sys.argv<span class=\"special\">[</span>1:<span class=\"special\">]</span>)\n  File \"C:<span class=\"command\">\\Users</span><span class=\"command\">\\User</span><span class=\"command\">\\Anaconda</span>3<span class=\"command\">\\lib</span><span class=\"command\">\\site</span>-packages<span class=\"command\">\\conda</span>_build<span class=\"command\">\\cli</span><span class=\"command\">\\main</span>_build.py\", line 379, in execute\n    verify=args.verify)\n  File \"C:<span class=\"command\">\\Users</span><span class=\"command\">\\User</span><span class=\"command\">\\Anaconda</span>3<span class=\"command\">\\lib</span><span class=\"command\">\\site</span>-packages<span class=\"command\">\\conda</span>_build<span class=\"command\">\\api</span>.py\", line 185, in build\n    need_source_download=need_source_download, config=config, variants=variants)\n  File \"C:<span class=\"command\">\\Users</span><span class=\"command\">\\User</span><span class=\"command\">\\Anaconda</span>3<span class=\"command\">\\lib</span><span class=\"command\">\\site</span>-packages<span class=\"command\">\\conda</span>_build<span class=\"command\">\\build</span>.py\", line 1776, in build_tree\n    notest=notest,\n  File \"C:<span class=\"command\">\\Users</span><span class=\"command\">\\User</span><span class=\"command\">\\Anaconda</span>3<span class=\"command\">\\lib</span><span class=\"command\">\\site</span>-packages<span class=\"command\">\\conda</span>_build<span class=\"command\">\\build</span>.py\", line 1056, in build\n    windows.build(m, build_file)\n  File \"C:<span class=\"command\">\\Users</span><span class=\"command\">\\User</span><span class=\"command\">\\Anaconda</span>3<span class=\"command\">\\lib</span><span class=\"command\">\\site</span>-packages<span class=\"command\">\\conda</span>_build<span class=\"command\">\\windows</span>.py\", line 269, in build\n    check_call_env(cmd, cwd=src_dir)\n  File \"C:<span class=\"command\">\\Users</span><span class=\"command\">\\User</span><span class=\"command\">\\Anaconda</span>3<span class=\"command\">\\lib</span><span class=\"command\">\\site</span>-packages<span class=\"command\">\\conda</span>_build<span class=\"command\">\\utils</span>.py\", line 676, in check_call_env\n    return _func_defaulting_env_to_os_environ(subprocess.check_call, *popenargs, **kwargs)\n  File \"C:<span class=\"command\">\\Users</span><span class=\"command\">\\User</span><span class=\"command\">\\Anaconda</span>3<span class=\"command\">\\lib</span><span class=\"command\">\\site</span>-packages<span class=\"command\">\\conda</span>_build<span class=\"command\">\\utils</span>.py\", line 672, in _func_defaulting_env_to_os_environ\n    return func(_args, **kwargs)\n  File \"C:<span class=\"command\">\\Users</span><span class=\"command\">\\User</span><span class=\"command\">\\Anaconda</span>3<span class=\"command\">\\lib</span><span class=\"command\">\\subprocess</span>.py\", line 291, in check_call\n    raise CalledProcessError(retcode, cmd)\nsubprocess.CalledProcessError: Command '<span class=\"special\">[</span>'cmd.exe', '/c', 'bld.bat'<span class=\"special\">]</span>' returned non-zero exit status 1.\n\n(numbaenv2) C:<span class=\"command\">\\Users</span><span class=\"command\">\\User</span><span class=\"command\">\\Documents</span><span class=\"command\">\\foo</span><span class=\"command\">\\numba</span>&gt;</code></pre>",
  "id": "5aa27c9f6f8b4b994608d68d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 4,
  "sent": "2018-03-09T12:22:55.057Z",
  "text": "````\nopying numba\\tests\\pycc_distutils_usecase\\source_module.py -> build\\lib.win-amd64-3.6\\numba\\tests\\pycc_distutils_usecase\nrunning build_ext\nNo module named 'numpy.distutils._msvccompiler' in numpy.distutils; trying from distutils\nbuilding 'numba._helperlib' extension\ncl.exe /c /nologo /Ox /W3 /GL /DNDEBUG /MD -IC:\\\\Users\\\\User\\\\Anaconda3\\\\conda-bld\\\\numba_1520597919279\\\\_h_env\\\\lib\\\\site-packages\\\\numpy\\\\core\\\\include -IC:\\Users\\User\\Anaconda3\\conda-bld\\numba_1520597919279\\_h_env\\include -IC:\\Users\\User\\Anaconda3\\conda-bld\\numba_1520597919279\\_h_env\\include -IC:\\Users\\User\\Anaconda3\\conda-bld\\numba_1520597919279\\_h_env\\Library\\include /Tcnumba/_helpermod.c /Fobuild\\temp.win-amd64-3.6\\Release\\numba/_helpermod.obj\nCould not locate executable cl.exe\nExecutable cl.exe does not exist\n\nerror: Command \"cl.exe /c /nologo /Ox /W3 /GL /DNDEBUG /MD -IC:\\\\Users\\\\User\\\\Anaconda3\\\\conda-bld\\\\numba_1520597919279\\\\_h_env\\\\lib\\\\site-packages\\\\numpy\\\\core\\\\include -IC:\\Users\\User\\Anaconda3\\conda-bld\\numba_1520597919279\\_h_env\\include -IC:\\Users\\User\\Anaconda3\\conda-bld\\numba_1520597919279\\_h_env\\include -IC:\\Users\\User\\Anaconda3\\conda-bld\\numba_1520597919279\\_h_env\\Library\\include /Tcnumba/_helpermod.c /Fobuild\\temp.win-amd64-3.6\\Release\\numba/_helpermod.obj\" failed with exit status 1\n\n(C:\\Users\\User\\Anaconda3\\conda-bld\\numba_1520597919279\\_h_env) C:\\Users\\User\\Anaconda3\\conda-bld\\numba_1520597919279\\work>exit /b 1\nTraceback (most recent call last):\n  File \"C:\\Users\\User\\Anaconda3\\Scripts\\conda-build-script.py\", line 10, in <module>\n    sys.exit(main())\n  File \"C:\\Users\\User\\Anaconda3\\lib\\site-packages\\conda_build\\cli\\main_build.py\", line 388, in main\n    execute(sys.argv[1:])\n  File \"C:\\Users\\User\\Anaconda3\\lib\\site-packages\\conda_build\\cli\\main_build.py\", line 379, in execute\n    verify=args.verify)\n  File \"C:\\Users\\User\\Anaconda3\\lib\\site-packages\\conda_build\\api.py\", line 185, in build\n    need_source_download=need_source_download, config=config, variants=variants)\n  File \"C:\\Users\\User\\Anaconda3\\lib\\site-packages\\conda_build\\build.py\", line 1776, in build_tree\n    notest=notest,\n  File \"C:\\Users\\User\\Anaconda3\\lib\\site-packages\\conda_build\\build.py\", line 1056, in build\n    windows.build(m, build_file)\n  File \"C:\\Users\\User\\Anaconda3\\lib\\site-packages\\conda_build\\windows.py\", line 269, in build\n    check_call_env(cmd, cwd=src_dir)\n  File \"C:\\Users\\User\\Anaconda3\\lib\\site-packages\\conda_build\\utils.py\", line 676, in check_call_env\n    return _func_defaulting_env_to_os_environ(subprocess.check_call, *popenargs, **kwargs)\n  File \"C:\\Users\\User\\Anaconda3\\lib\\site-packages\\conda_build\\utils.py\", line 672, in _func_defaulting_env_to_os_environ\n    return func(_args, **kwargs)\n  File \"C:\\Users\\User\\Anaconda3\\lib\\subprocess.py\", line 291, in check_call\n    raise CalledProcessError(retcode, cmd)\nsubprocess.CalledProcessError: Command '['cmd.exe', '/c', 'bld.bat']' returned non-zero exit status 1.\n\n(numbaenv2) C:\\Users\\User\\Documents\\foo\\numba>\n````",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Might reinstall anaconda?",
  "id": "5aa27cdf8f1c77ef3a9f12f0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 3,
  "sent": "2018-03-09T12:23:59.517Z",
  "text": "Might reinstall anaconda?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "hmm, so it&#39;s not finding <code>cl.exe</code>",
  "id": "5aa27d1b0a1614b712fdf96d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 3,
  "sent": "2018-03-09T12:24:59.989Z",
  "text": "hmm, so it's not finding `cl.exe`",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "and that&#39;s different to the problem you have locally",
  "id": "5aa27d2b35dd17022e3cebed",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 3,
  "sent": "2018-03-09T12:25:15.124Z",
  "text": "and that's different to the problem you have locally",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "What do you mean?",
  "id": "5aa27d396f8b4b994608dad9",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 3,
  "sent": "2018-03-09T12:25:29.295Z",
  "text": "What do you mean?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "The problem you reported when trying to set up the development environment is different to that reported by conda build.",
  "id": "5aa27d5b6fba1a703ae83f97",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 3,
  "sent": "2018-03-09T12:26:03.016Z",
  "text": "The problem you reported when trying to set up the development environment is different to that reported by conda build.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Ah",
  "id": "5aa27d61f3f6d24c6855d255",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 3,
  "sent": "2018-03-09T12:26:09.075Z",
  "text": "Ah",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "Have you run vcvars32.bat ?",
  "id": "5aa27e63e4ff28713a11295b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 3,
  "sent": "2018-03-09T12:30:27.198Z",
  "text": "Have you run vcvars32.bat ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Don&#39;t think I have",
  "id": "5aa27e6ec3c5f8b90d508377",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 3,
  "sent": "2018-03-09T12:30:38.605Z",
  "text": "Don't think I have",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Where is it?",
  "id": "5aa27e70e4d1c63604de0bdc",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 3,
  "sent": "2018-03-09T12:30:40.987Z",
  "text": "Where is it?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "(or whatever it is to set up the compiler)",
  "id": "5aa27e7c8f1c77ef3a9f1b5f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 3,
  "sent": "2018-03-09T12:30:52.705Z",
  "text": "(or whatever it is to set up the compiler)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "in visual studio VC\\bin",
  "id": "5aa27e94888332ee3a19938b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 4,
  "sent": "2018-03-09T12:31:16.821Z",
  "text": "in visual studio VC\\bin",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "I just downloaded the build tools installer and used that",
  "id": "5aa27e960a1614b712fdff5e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 4,
  "sent": "2018-03-09T12:31:18.805Z",
  "text": "I just downloaded the build tools installer and used that",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "I wonder if its that you need full visual studio",
  "id": "5aa27eae888332ee3a1994c4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 4,
  "sent": "2018-03-09T12:31:42.097Z",
  "text": "I wonder if its that you need full visual studio",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "I had tests running yesterday is the weird part",
  "id": "5aa27ebfe4ff28713a112b81",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 4,
  "sent": "2018-03-09T12:31:59.240Z",
  "text": "I had tests running yesterday is the weird part",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "from a conda install or building from source ?",
  "id": "5aa27ed6458cbde557146606",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 4,
  "sent": "2018-03-09T12:32:22.726Z",
  "text": "from a conda install or building from source ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Building from source",
  "id": "5aa27efb6f8b4b994608e47d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 4,
  "sent": "2018-03-09T12:32:59.914Z",
  "text": "Building from source",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Btw with running vcvars32, you meant from the conda prompt?",
  "id": "5aa27f40888332ee3a19976f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 4,
  "sent": "2018-03-09T12:34:08.483Z",
  "text": "Btw with running vcvars32, you meant from the conda prompt?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "i mean from a cmd prompt",
  "id": "5aa27f54458cbde5571467f8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 4,
  "sent": "2018-03-09T12:34:28.626Z",
  "text": "i mean from a cmd prompt",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "And then try conda build again?",
  "id": "5aa27f7de4ff28713a1130b5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 4,
  "sent": "2018-03-09T12:35:09.800Z",
  "text": "And then try conda build again?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "try doing the source install again",
  "id": "5aa27f8d6f8b4b994608e6da",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 4,
  "sent": "2018-03-09T12:35:25.912Z",
  "text": "try doing the source install again",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "conda build isolates itself from environmental changes",
  "id": "5aa27f9835dd17022e3cf5bc",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 4,
  "sent": "2018-03-09T12:35:36.800Z",
  "text": "conda build isolates itself from environmental changes",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "so it won&#39;t have any impact",
  "id": "5aa27f9e8f1c77ef3a9f21cf",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 4,
  "sent": "2018-03-09T12:35:42.398Z",
  "text": "so it won't have any impact",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "its a bit strange that it worked yesterday but doesn&#39;t work now",
  "id": "5aa27faa0a1614b712fe0318",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 4,
  "sent": "2018-03-09T12:35:54.556Z",
  "text": "its a bit strange that it worked yesterday but doesn't work now",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Yeah, something changed but I don&#39;t know what",
  "id": "5aa27fb20a1614b712fe0352",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 4,
  "sent": "2018-03-09T12:36:02.634Z",
  "text": "Yeah, something changed but I don't know what",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "I don&#39;t recall doing anything special yesterday",
  "id": "5aa27fbe458cbde5571469b0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 4,
  "sent": "2018-03-09T12:36:14.406Z",
  "text": "I don't recall doing anything special yesterday",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Still can&#39;t find numpy msvccompiler",
  "id": "5aa27fe56fba1a703ae84d1a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 4,
  "sent": "2018-03-09T12:36:53.598Z",
  "text": "Still can't find numpy msvccompiler",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Same fatal error",
  "id": "5aa27ff40a1614b712fe0429",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 4,
  "sent": "2018-03-09T12:37:08.966Z",
  "text": "Same fatal error",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "I&#39;m inclined to uninstall Anaconda and VS build tools and then retry",
  "id": "5aa280318f1c77ef3a9f252f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 4,
  "sent": "2018-03-09T12:38:09.358Z",
  "text": "I'm inclined to uninstall Anaconda and VS build tools and then retry",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "And if that doesn&#39;t work I&#39;ll just reset the system",
  "id": "5aa28040f3f6d24c6855e0fe",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 4,
  "sent": "2018-03-09T12:38:24.128Z",
  "text": "And if that doesn't work I'll just reset the system",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "I&#39;d clean the numba source directory and try again first",
  "id": "5aa2805de4d1c63604de144e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 4,
  "sent": "2018-03-09T12:38:53.388Z",
  "text": "I'd clean the numba source directory and try again first",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "in case there&#39;s bits of bad <code>build_ext</code> lying around",
  "id": "5aa2809135dd17022e3cfa0f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 4,
  "sent": "2018-03-09T12:39:45.455Z",
  "text": "in case there's bits of bad `build_ext` lying around",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "<pre><code>(numbaenv) C:<span class=\"command\">\\Users</span><span class=\"command\">\\User</span><span class=\"command\">\\Documents</span><span class=\"command\">\\foo</span><span class=\"command\">\\numba</span>&gt;python setup.py build_ext --inplace\nrunning build_ext\nNo module named 'numpy.distutils._msvccompiler' in numpy.distutils; trying from distutils\nbuilding 'numba._dynfunc' extension\ncreating build\ncreating build<span class=\"command\">\\temp</span>.win-amd64-3.5\ncreating build<span class=\"command\">\\temp</span>.win-amd64-3.5<span class=\"command\">\\Release</span>\ncreating build<span class=\"command\">\\temp</span>.win-amd64-3.5<span class=\"command\">\\Release</span><span class=\"command\">\\numba</span>\nC:<span class=\"command\">\\Program</span> Files (x86)<span class=\"command\">\\Microsoft</span> Visual Studio 14.0<span class=\"command\">\\VC</span><span class=\"command\">\\BIN</span><span class=\"command\">\\x</span>86_amd64<span class=\"command\">\\cl</span>.exe /c /nologo /Ox /W3 /GL /DNDEBUG /MD -IC:<span class=\"command\">\\Users</span><span class=\"command\">\\User</span><span class=\"command\">\\Anaconda</span>3<span class=\"command\">\\envs</span><span class=\"command\">\\numbaenv</span><span class=\"command\">\\include</span> -IC:<span class=\"command\">\\Users</span><span class=\"command\">\\User</span><span class=\"command\">\\Anaconda</span>3<span class=\"command\">\\envs</span><span class=\"command\">\\numbaenv</span><span class=\"command\">\\include</span> -I\"C:<span class=\"command\">\\Program</span> Files (x86)<span class=\"command\">\\Microsoft</span> Visual Studio 14.0<span class=\"command\">\\VC</span><span class=\"command\">\\INCLUDE</span>\" -I\"C:<span class=\"command\">\\Program</span> Files (x86)<span class=\"command\">\\Microsoft</span> Visual Studio 14.0<span class=\"command\">\\VC</span><span class=\"command\">\\ATLMFC</span><span class=\"command\">\\INCLUDE</span>\" -I\"C:<span class=\"command\">\\Program</span> Files (x86)<span class=\"command\">\\Windows</span> Kits\\10<span class=\"command\">\\include</span>\\10.0.16299.0<span class=\"command\">\\ucrt</span>\" -I\"C:<span class=\"command\">\\Program</span> Files (x86)<span class=\"command\">\\Windows</span> Kits\\10<span class=\"command\">\\include</span>\\10.0.16299.0<span class=\"command\">\\shared</span>\" -I\"C:<span class=\"command\">\\Program</span> Files (x86)<span class=\"command\">\\Windows</span> Kits\\10<span class=\"command\">\\include</span>\\10.0.16299.0<span class=\"command\">\\um</span>\" -I\"C:<span class=\"command\">\\Program</span> Files (x86)<span class=\"command\">\\Windows</span> Kits\\10<span class=\"command\">\\include</span>\\10.0.16299.0<span class=\"command\">\\winrt</span>\" /Tcnumba/_dynfuncmod.c /Fobuild<span class=\"command\">\\temp</span>.win-amd64-3.5<span class=\"command\">\\Release</span><span class=\"command\">\\numba</span>/_dynfuncmod.obj\ncreating C:<span class=\"command\">\\Users</span><span class=\"command\">\\User</span><span class=\"command\">\\Documents</span><span class=\"command\">\\foo</span><span class=\"command\">\\numba</span><span class=\"command\">\\build</span><span class=\"command\">\\lib</span>.win-amd64-3.5\ncreating C:<span class=\"command\">\\Users</span><span class=\"command\">\\User</span><span class=\"command\">\\Documents</span><span class=\"command\">\\foo</span><span class=\"command\">\\numba</span><span class=\"command\">\\build</span><span class=\"command\">\\lib</span>.win-amd64-3.5<span class=\"command\">\\numba</span>\nC:<span class=\"command\">\\Program</span> Files (x86)<span class=\"command\">\\Microsoft</span> Visual Studio 14.0<span class=\"command\">\\VC</span><span class=\"command\">\\BIN</span><span class=\"command\">\\x</span>86_amd64<span class=\"command\">\\link</span>.exe /nologo /INCREMENTAL:NO /LTCG /DLL /MANIFEST:EMBED,ID=2 /MANIFESTUAC:NO /LIBPATH:C:<span class=\"command\">\\Users</span><span class=\"command\">\\User</span><span class=\"command\">\\Anaconda</span>3<span class=\"command\">\\envs</span><span class=\"command\">\\numbaenv</span><span class=\"command\">\\libs</span> /LIBPATH:C:<span class=\"command\">\\Users</span><span class=\"command\">\\User</span><span class=\"command\">\\Anaconda</span>3<span class=\"command\">\\envs</span><span class=\"command\">\\numbaenv</span><span class=\"command\">\\PCbuild</span><span class=\"command\">\\amd</span>64 /LIBPATH:\"C:<span class=\"command\">\\Program</span> Files (x86)<span class=\"command\">\\Microsoft</span> Visual Studio 14.0<span class=\"command\">\\VC</span><span class=\"command\">\\LIB</span><span class=\"command\">\\amd</span>64\" /LIBPATH:\"C:<span class=\"command\">\\Program</span> Files (x86)<span class=\"command\">\\Microsoft</span> Visual Studio 14.0<span class=\"command\">\\VC</span><span class=\"command\">\\ATLMFC</span><span class=\"command\">\\LIB</span><span class=\"command\">\\amd</span>64\" /LIBPATH:\"C:<span class=\"command\">\\Program</span> Files (x86)<span class=\"command\">\\Windows</span> Kits\\10<span class=\"command\">\\lib</span>\\10.0.16299.0<span class=\"command\">\\ucrt</span><span class=\"command\">\\x</span>64\" /LIBPATH:\"C:<span class=\"command\">\\Program</span> Files (x86)<span class=\"command\">\\Windows</span> Kits\\10<span class=\"command\">\\lib</span>\\10.0.16299.0<span class=\"command\">\\um</span><span class=\"command\">\\x</span>64\" /EXPORT:PyInit__dynfunc build<span class=\"command\">\\temp</span>.win-amd64-3.5<span class=\"command\">\\Release</span><span class=\"command\">\\numba</span>/_dynfuncmod.obj /OUT:build<span class=\"command\">\\lib</span>.win-amd64-3.5<span class=\"command\">\\numba</span><span class=\"command\">\\_</span>dynfunc.cp35-win_amd64.pyd /IMPLIB:build<span class=\"command\">\\temp</span>.win-amd64-3.5<span class=\"command\">\\Release</span><span class=\"command\">\\numba</span><span class=\"command\">\\_</span>dynfunc.cp35-win_amd64.lib\n_dynfuncmod.obj : warning LNK4197: export 'PyInit__dynfunc' specified multiple times; using first specification\n   Creating library build<span class=\"command\">\\temp</span>.win-amd64-3.5<span class=\"command\">\\Release</span><span class=\"command\">\\numba</span><span class=\"command\">\\_</span>dynfunc.cp35-win_amd64.lib and object build<span class=\"command\">\\temp</span>.win-amd64-3.5<span class=\"command\">\\Release</span><span class=\"command\">\\numba</span><span class=\"command\">\\_</span>dynfunc.cp35-win_amd64.exp\nGenerating code\nFinished generating code\nLINK : fatal error LNK1158: cannot run 'rc.exe'\nerror: Command \"C:<span class=\"command\">\\Program</span> Files (x86)<span class=\"command\">\\Microsoft</span> Visual Studio 14.0<span class=\"command\">\\VC</span><span class=\"command\">\\BIN</span><span class=\"command\">\\x</span>86_amd64<span class=\"command\">\\link</span>.exe /nologo /INCREMENTAL:NO /LTCG /DLL /MANIFEST:EMBED,ID=2 /MANIFESTUAC:NO /LIBPATH:C:<span class=\"command\">\\Users</span><span class=\"command\">\\User</span><span class=\"command\">\\Anaconda</span>3<span class=\"command\">\\envs</span><span class=\"command\">\\numbaenv</span><span class=\"command\">\\libs</span> /LIBPATH:C:<span class=\"command\">\\Users</span><span class=\"command\">\\User</span><span class=\"command\">\\Anaconda</span>3<span class=\"command\">\\envs</span><span class=\"command\">\\numbaenv</span><span class=\"command\">\\PCbuild</span><span class=\"command\">\\amd</span>64 /LIBPATH:\"C:<span class=\"command\">\\Program</span> Files (x86)<span class=\"command\">\\Microsoft</span> Visual Studio 14.0<span class=\"command\">\\VC</span><span class=\"command\">\\LIB</span><span class=\"command\">\\amd</span>64\" /LIBPATH:\"C:<span class=\"command\">\\Program</span> Files (x86)<span class=\"command\">\\Microsoft</span> Visual Studio 14.0<span class=\"command\">\\VC</span><span class=\"command\">\\ATLMFC</span><span class=\"command\">\\LIB</span><span class=\"command\">\\amd</span>64\" /LIBPATH:\"C:<span class=\"command\">\\Program</span> Files (x86)<span class=\"command\">\\Windows</span> Kits\\10<span class=\"command\">\\lib</span>\\10.0.16299.0<span class=\"command\">\\ucrt</span><span class=\"command\">\\x</span>64\" /LIBPATH:\"C:<span class=\"command\">\\Program</span> Files (x86)<span class=\"command\">\\Windows</span> Kits\\10<span class=\"command\">\\lib</span>\\10.0.16299.0<span class=\"command\">\\um</span><span class=\"command\">\\x</span>64\" /EXPORT:PyInit__dynfunc build<span class=\"command\">\\temp</span>.win-amd64-3.5<span class=\"command\">\\Release</span><span class=\"command\">\\numba</span>/_dynfuncmod.obj /OUT:build<span class=\"command\">\\lib</span>.win-amd64-3.5<span class=\"command\">\\numba</span><span class=\"command\">\\_</span>dynfunc.cp35-win_amd64.pyd /IMPLIB:build<span class=\"command\">\\temp</span>.win-amd64-3.5<span class=\"command\">\\Release</span><span class=\"command\">\\numba</span><span class=\"command\">\\_</span>dynfunc.cp35-win_amd64.lib\" failed with exit status 1158</code></pre>",
  "id": "5aa287948f1c77ef3a9f4816",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 3,
  "sent": "2018-03-09T13:09:40.247Z",
  "text": "````\n(numbaenv) C:\\Users\\User\\Documents\\foo\\numba>python setup.py build_ext --inplace\nrunning build_ext\nNo module named 'numpy.distutils._msvccompiler' in numpy.distutils; trying from distutils\nbuilding 'numba._dynfunc' extension\ncreating build\ncreating build\\temp.win-amd64-3.5\ncreating build\\temp.win-amd64-3.5\\Release\ncreating build\\temp.win-amd64-3.5\\Release\\numba\nC:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\BIN\\x86_amd64\\cl.exe /c /nologo /Ox /W3 /GL /DNDEBUG /MD -IC:\\Users\\User\\Anaconda3\\envs\\numbaenv\\include -IC:\\Users\\User\\Anaconda3\\envs\\numbaenv\\include -I\"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\INCLUDE\" -I\"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\ATLMFC\\INCLUDE\" -I\"C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\" -I\"C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\shared\" -I\"C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\um\" -I\"C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\winrt\" /Tcnumba/_dynfuncmod.c /Fobuild\\temp.win-amd64-3.5\\Release\\numba/_dynfuncmod.obj\ncreating C:\\Users\\User\\Documents\\foo\\numba\\build\\lib.win-amd64-3.5\ncreating C:\\Users\\User\\Documents\\foo\\numba\\build\\lib.win-amd64-3.5\\numba\nC:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\BIN\\x86_amd64\\link.exe /nologo /INCREMENTAL:NO /LTCG /DLL /MANIFEST:EMBED,ID=2 /MANIFESTUAC:NO /LIBPATH:C:\\Users\\User\\Anaconda3\\envs\\numbaenv\\libs /LIBPATH:C:\\Users\\User\\Anaconda3\\envs\\numbaenv\\PCbuild\\amd64 /LIBPATH:\"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\LIB\\amd64\" /LIBPATH:\"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\ATLMFC\\LIB\\amd64\" /LIBPATH:\"C:\\Program Files (x86)\\Windows Kits\\10\\lib\\10.0.16299.0\\ucrt\\x64\" /LIBPATH:\"C:\\Program Files (x86)\\Windows Kits\\10\\lib\\10.0.16299.0\\um\\x64\" /EXPORT:PyInit__dynfunc build\\temp.win-amd64-3.5\\Release\\numba/_dynfuncmod.obj /OUT:build\\lib.win-amd64-3.5\\numba\\_dynfunc.cp35-win_amd64.pyd /IMPLIB:build\\temp.win-amd64-3.5\\Release\\numba\\_dynfunc.cp35-win_amd64.lib\n_dynfuncmod.obj : warning LNK4197: export 'PyInit__dynfunc' specified multiple times; using first specification\n   Creating library build\\temp.win-amd64-3.5\\Release\\numba\\_dynfunc.cp35-win_amd64.lib and object build\\temp.win-amd64-3.5\\Release\\numba\\_dynfunc.cp35-win_amd64.exp\nGenerating code\nFinished generating code\nLINK : fatal error LNK1158: cannot run 'rc.exe'\nerror: Command \"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\BIN\\x86_amd64\\link.exe /nologo /INCREMENTAL:NO /LTCG /DLL /MANIFEST:EMBED,ID=2 /MANIFESTUAC:NO /LIBPATH:C:\\Users\\User\\Anaconda3\\envs\\numbaenv\\libs /LIBPATH:C:\\Users\\User\\Anaconda3\\envs\\numbaenv\\PCbuild\\amd64 /LIBPATH:\"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\LIB\\amd64\" /LIBPATH:\"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\ATLMFC\\LIB\\amd64\" /LIBPATH:\"C:\\Program Files (x86)\\Windows Kits\\10\\lib\\10.0.16299.0\\ucrt\\x64\" /LIBPATH:\"C:\\Program Files (x86)\\Windows Kits\\10\\lib\\10.0.16299.0\\um\\x64\" /EXPORT:PyInit__dynfunc build\\temp.win-amd64-3.5\\Release\\numba/_dynfuncmod.obj /OUT:build\\lib.win-amd64-3.5\\numba\\_dynfunc.cp35-win_amd64.pyd /IMPLIB:build\\temp.win-amd64-3.5\\Release\\numba\\_dynfunc.cp35-win_amd64.lib\" failed with exit status 1158\n````",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "With fresh anaconda and fresh pull from master",
  "id": "5aa287a6f3f6d24c68560bf9",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 4,
  "sent": "2018-03-09T13:09:58.188Z",
  "text": "With fresh anaconda and fresh pull from master",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "hmmm, just a thought, which python is this for ?",
  "id": "5aa2881a888332ee3a19c5fc",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 4,
  "sent": "2018-03-09T13:11:54.032Z",
  "text": "hmmm, just a thought, which python is this for ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "I use 3.6 generally",
  "id": "5aa288276fba1a703ae87b8f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 4,
  "sent": "2018-03-09T13:12:07.419Z",
  "text": "I use 3.6 generally",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "But I was implementing np.reshape generally so would have hoped to have it working on all platforms",
  "id": "5aa2883d6f8b4b9946091c0e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 4,
  "sent": "2018-03-09T13:12:29.574Z",
  "text": "But I was implementing np.reshape generally so would have hoped to have it working on all platforms",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "What does:<pre><code>python -c \"from distutils import _msvccompiler; <span class=\"built_in\">print</span>(_msvccompiler._get_vc_env('x86_amd64')['<span class=\"built_in\">path</span>'])\"</code></pre>",
  "id": "5aa2891a8f1c77ef3a9f505f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 4,
  "sent": "2018-03-09T13:16:10.627Z",
  "text": "What does:\n```\npython -c \"from distutils import _msvccompiler; print(_msvccompiler._get_vc_env('x86_amd64')['path'])\"\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "give ?",
  "id": "5aa2891d0a1614b712fe35d2",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 4,
  "sent": "2018-03-09T13:16:13.690Z",
  "text": "give ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "I don&#39;t get why <code>rc..exe</code> won&#39;t run",
  "id": "5aa28942e4ff28713a1165c4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 4,
  "sent": "2018-03-09T13:16:50.497Z",
  "text": "I don't get why `rc..exe` won't run",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "<pre><code>(numbaenv) C:<span class=\"command\">\\Users</span><span class=\"command\">\\User</span><span class=\"command\">\\Documents</span><span class=\"command\">\\foo</span><span class=\"command\">\\numba</span>&gt;python -c \"from distutils import _msvccompiler; print(_msvccompiler._get_vc_env('x86_amd64')<span class=\"special\">[</span>'path'<span class=\"special\">]</span>)\"\nC:<span class=\"command\">\\Program</span> Files (x86)<span class=\"command\">\\Microsoft</span> Visual Studio 14.0<span class=\"command\">\\Common</span>7<span class=\"command\">\\IDE</span><span class=\"command\">\\;</span>C:<span class=\"command\">\\Program</span> Files (x86)<span class=\"command\">\\Microsoft</span> Visual Studio 14.0<span class=\"command\">\\VC</span><span class=\"command\">\\BIN</span><span class=\"command\">\\x</span>86_amd64;C:<span class=\"command\">\\Program</span> Files (x86)<span class=\"command\">\\Microsoft</span> Visual Studio 14.0<span class=\"command\">\\VC</span><span class=\"command\">\\BIN</span>;C:<span class=\"command\">\\Program</span> Files (x86)<span class=\"command\">\\Microsoft</span> Visual Studio 14.0<span class=\"command\">\\Common</span>7<span class=\"command\">\\Tools</span>;C:<span class=\"command\">\\WINDOWS</span><span class=\"command\">\\Microsoft</span>.NET<span class=\"command\">\\Framework</span><span class=\"command\">\\v</span>4.0.30319;C:<span class=\"command\">\\Program</span> Files (x86)<span class=\"command\">\\HTML</span> Help Workshop;C:<span class=\"command\">\\Program</span> Files (x86)<span class=\"command\">\\Windows</span> Kits\\10<span class=\"command\">\\bin</span><span class=\"command\">\\x</span>86;C:<span class=\"command\">\\Users</span><span class=\"command\">\\User</span><span class=\"command\">\\Anaconda</span>3<span class=\"command\">\\envs</span><span class=\"command\">\\numbaenv</span>;C:<span class=\"command\">\\Users</span><span class=\"command\">\\User</span><span class=\"command\">\\Anaconda</span>3<span class=\"command\">\\envs</span><span class=\"command\">\\numbaenv</span><span class=\"command\">\\Library</span><span class=\"command\">\\mingw</span>-w64<span class=\"command\">\\bin</span>;C:<span class=\"command\">\\Users</span><span class=\"command\">\\User</span><span class=\"command\">\\Anaconda</span>3<span class=\"command\">\\envs</span><span class=\"command\">\\numbaenv</span><span class=\"command\">\\Library</span><span class=\"command\">\\usr</span><span class=\"command\">\\bin</span>;C:<span class=\"command\">\\Users</span><span class=\"command\">\\User</span><span class=\"command\">\\Anaconda</span>3<span class=\"command\">\\envs</span><span class=\"command\">\\numbaenv</span><span class=\"command\">\\Library</span><span class=\"command\">\\bin</span>;C:<span class=\"command\">\\Users</span><span class=\"command\">\\User</span><span class=\"command\">\\Anaconda</span>3<span class=\"command\">\\envs</span><span class=\"command\">\\numbaenv</span><span class=\"command\">\\Scripts</span>;C:<span class=\"command\">\\Users</span><span class=\"command\">\\User</span><span class=\"command\">\\Anaconda</span>3<span class=\"command\">\\envs</span><span class=\"command\">\\numbaenv</span><span class=\"command\">\\bin</span>;C:<span class=\"command\">\\Users</span><span class=\"command\">\\User</span><span class=\"command\">\\Anaconda</span>3;C:<span class=\"command\">\\Users</span><span class=\"command\">\\User</span><span class=\"command\">\\Anaconda</span>3<span class=\"command\">\\Library</span><span class=\"command\">\\mingw</span>-w64<span class=\"command\">\\bin</span>;C:<span class=\"command\">\\Users</span><span class=\"command\">\\User</span><span class=\"command\">\\Anaconda</span>3<span class=\"command\">\\Library</span><span class=\"command\">\\usr</span><span class=\"command\">\\bin</span>;C:<span class=\"command\">\\Users</span><span class=\"command\">\\User</span><span class=\"command\">\\Anaconda</span>3<span class=\"command\">\\Library</span><span class=\"command\">\\bin</span>;C:<span class=\"command\">\\Users</span><span class=\"command\">\\User</span><span class=\"command\">\\Anaconda</span>3<span class=\"command\">\\Scripts</span>;C:<span class=\"command\">\\Users</span><span class=\"command\">\\User</span><span class=\"command\">\\Anaconda</span>3<span class=\"command\">\\bin</span>;C:<span class=\"command\">\\Program</span> Files<span class=\"command\">\\Docker</span><span class=\"command\">\\Docker</span><span class=\"command\">\\Resources</span><span class=\"command\">\\bin</span>;C:<span class=\"command\">\\Program</span> Files (x86)<span class=\"command\">\\Intel</span><span class=\"command\">\\iCLS</span> Client<span class=\"command\">\\;</span>C:<span class=\"command\">\\Program</span> Files<span class=\"command\">\\Microsoft</span> MPI<span class=\"command\">\\Bin</span><span class=\"command\">\\;</span>C:<span class=\"command\">\\ProgramData</span><span class=\"command\">\\Oracle</span><span class=\"command\">\\Java</span><span class=\"command\">\\javapath</span>;C:<span class=\"command\">\\Program</span> Files<span class=\"command\">\\Intel</span><span class=\"command\">\\iCLS</span> Client<span class=\"command\">\\;</span>C:<span class=\"command\">\\WINDOWS</span><span class=\"command\">\\system</span>32;C:<span class=\"command\">\\WINDOWS</span>;C:<span class=\"command\">\\WINDOWS</span><span class=\"command\">\\System</span>32<span class=\"command\">\\Wbem</span>;C:<span class=\"command\">\\WINDOWS</span><span class=\"command\">\\System</span>32<span class=\"command\">\\WindowsPowerShell</span><span class=\"command\">\\v</span>1.0<span class=\"command\">\\;</span>C:<span class=\"command\">\\Program</span> Files<span class=\"command\">\\MiKTeX</span> 2.9<span class=\"command\">\\miktex</span><span class=\"command\">\\bin</span><span class=\"command\">\\x</span>64<span class=\"command\">\\;</span>C:<span class=\"command\">\\Program</span> Files<span class=\"command\">\\Git</span><span class=\"command\">\\cmd</span>;C:<span class=\"command\">\\Program</span> Files<span class=\"command\">\\doxygen</span><span class=\"command\">\\bin</span>;C:<span class=\"command\">\\Program</span> Files (x86)<span class=\"command\">\\Intel</span><span class=\"command\">\\Intel</span>(R) Management Engine Components<span class=\"command\">\\DAL</span>;C:<span class=\"command\">\\Program</span> Files<span class=\"command\">\\Intel</span><span class=\"command\">\\Intel</span>(R) Management Engine Components<span class=\"command\">\\DAL</span>;C:<span class=\"command\">\\Program</span> Files (x86)<span class=\"command\">\\Intel</span><span class=\"command\">\\Intel</span>(R) Management Engine Components<span class=\"command\">\\IPT</span>;C:<span class=\"command\">\\Program</span> Files<span class=\"command\">\\Intel</span><span class=\"command\">\\Intel</span>(R) Management Engine Components<span class=\"command\">\\IPT</span>;C:<span class=\"command\">\\Program</span> Files<span class=\"command\">\\Intel</span><span class=\"command\">\\WiFi</span><span class=\"command\">\\bin</span><span class=\"command\">\\;</span>C:<span class=\"command\">\\Program</span> Files<span class=\"command\">\\Common</span> Files<span class=\"command\">\\Intel</span><span class=\"command\">\\WirelessCommon</span><span class=\"command\">\\;</span>C:<span class=\"command\">\\Users</span><span class=\"command\">\\User</span><span class=\"command\">\\AppData</span><span class=\"command\">\\Local</span><span class=\"command\">\\Microsoft</span><span class=\"command\">\\WindowsApps</span>;C:<span class=\"command\">\\Program</span> Files<span class=\"command\">\\Microsoft</span> MPI<span class=\"command\">\\Bin</span>;</code></pre>",
  "id": "5aa2895353c1dbb743c1368a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2018-03-09T13:17:07.296Z",
  "text": "````\n(numbaenv) C:\\Users\\User\\Documents\\foo\\numba>python -c \"from distutils import _msvccompiler; print(_msvccompiler._get_vc_env('x86_amd64')['path'])\"\nC:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\Common7\\IDE\\;C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\BIN\\x86_amd64;C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\BIN;C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\Common7\\Tools;C:\\WINDOWS\\Microsoft.NET\\Framework\\v4.0.30319;C:\\Program Files (x86)\\HTML Help Workshop;C:\\Program Files (x86)\\Windows Kits\\10\\bin\\x86;C:\\Users\\User\\Anaconda3\\envs\\numbaenv;C:\\Users\\User\\Anaconda3\\envs\\numbaenv\\Library\\mingw-w64\\bin;C:\\Users\\User\\Anaconda3\\envs\\numbaenv\\Library\\usr\\bin;C:\\Users\\User\\Anaconda3\\envs\\numbaenv\\Library\\bin;C:\\Users\\User\\Anaconda3\\envs\\numbaenv\\Scripts;C:\\Users\\User\\Anaconda3\\envs\\numbaenv\\bin;C:\\Users\\User\\Anaconda3;C:\\Users\\User\\Anaconda3\\Library\\mingw-w64\\bin;C:\\Users\\User\\Anaconda3\\Library\\usr\\bin;C:\\Users\\User\\Anaconda3\\Library\\bin;C:\\Users\\User\\Anaconda3\\Scripts;C:\\Users\\User\\Anaconda3\\bin;C:\\Program Files\\Docker\\Docker\\Resources\\bin;C:\\Program Files (x86)\\Intel\\iCLS Client\\;C:\\Program Files\\Microsoft MPI\\Bin\\;C:\\ProgramData\\Oracle\\Java\\javapath;C:\\Program Files\\Intel\\iCLS Client\\;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files\\MiKTeX 2.9\\miktex\\bin\\x64\\;C:\\Program Files\\Git\\cmd;C:\\Program Files\\doxygen\\bin;C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\DAL;C:\\Program Files\\Intel\\Intel(R) Management Engine Components\\DAL;C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\IPT;C:\\Program Files\\Intel\\Intel(R) Management Engine Components\\IPT;C:\\Program Files\\Intel\\WiFi\\bin\\;C:\\Program Files\\Common Files\\Intel\\WirelessCommon\\;C:\\Users\\User\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Program Files\\Microsoft MPI\\Bin;\n````",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Me neither man",
  "id": "5aa28957f3f6d24c68561516",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2018-03-09T13:17:11.296Z",
  "text": "Me neither man",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "hang on",
  "id": "5aa2896a0a1614b712fe3718",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2018-03-09T13:17:30.045Z",
  "text": "hang on",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Something something visual studio",
  "id": "5aa2896ae4ff28713a1166c0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-03-09T13:17:30.990Z",
  "text": "Something something visual studio",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "that&#39;s VX14",
  "id": "5aa2896ef3f6d24c685615a6",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-03-09T13:17:34.590Z",
  "text": "that's VX14",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Hnging on",
  "id": "5aa2896ef3f6d24c685615a9",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-03-09T13:17:34.933Z",
  "text": "Hnging on",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "VC14 even",
  "id": "5aa28976888332ee3a19cdc2",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-03-09T13:17:42.905Z",
  "text": "VC14 even",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "you had VC17?",
  "id": "5aa2897ec3c5f8b90d50c01c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-03-09T13:17:50.086Z",
  "text": "you had VC17?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "I ought to",
  "id": "5aa289856f8b4b9946092438",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-03-09T13:17:57.670Z",
  "text": "I ought to",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "I have both VC15 and VC17 in my programs",
  "id": "5aa289956fba1a703ae889fc",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-03-09T13:18:13.279Z",
  "text": "I have both VC15 and VC17 in my programs",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Installer tells me I have:<br>Visual C++ Build Tools core features<br>VC++ 2017 v141 toolset (x86, x64)<br>Visual C++ Redistributable Update<br>Windows 10 SDK (10.0.16299.0)<br>Visual C++ tools for CMake<br>VC++ 2015.3 v140 toolset for desktop (x86, x64)",
  "id": "5aa28a0d888332ee3a19d003",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-03-09T13:20:13.234Z",
  "text": "Installer tells me I have:\nVisual C++ Build Tools core features\nVC++ 2017 v141 toolset (x86, x64)\nVisual C++ Redistributable Update\nWindows 10 SDK (10.0.16299.0)\nVisual C++ tools for CMake\nVC++ 2015.3 v140 toolset for desktop (x86, x64)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Could the VC++ 2015 be causing conflicts?",
  "id": "5aa28a16458cbde55714a111",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-03-09T13:20:22.366Z",
  "text": "Could the VC++ 2015 be causing conflicts?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "When you installed build tools did you select the Windows 8 SDK or Windows 10 SDK ?",
  "id": "5aa28c34e4d1c63604de5964",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-03-09T13:29:24.756Z",
  "text": "When you installed build tools did you select the Windows 8 SDK or Windows 10 SDK ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "seems like windows 10 SDK doesn&#39;t put rc.exe on the path",
  "id": "5aa28c49c3c5f8b90d50cfec",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-03-09T13:29:45.070Z",
  "text": "seems like windows 10 SDK doesn't put rc.exe on the path",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Windows 10",
  "id": "5aa28c5553c1dbb743c144ec",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-03-09T13:29:57.315Z",
  "text": "Windows 10",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "ah, then that might be it",
  "id": "5aa28c5c53c1dbb743c144f5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-03-09T13:30:04.993Z",
  "text": "ah, then that might be it",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Well I&#39;m running windows 10",
  "id": "5aa28c6853c1dbb743c14510",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-03-09T13:30:16.468Z",
  "text": "Well I'm running windows 10",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "<a href=\"https://pypi.python.org/pypi/kelvin/2.0.3\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://pypi.python.org/pypi/kelvin/2.0.3</a> has a bit of info at the top",
  "id": "5aa28c88e4ff28713a117974",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-03-09T13:30:48.382Z",
  "text": "https://pypi.python.org/pypi/kelvin/2.0.3 has a bit of info at the top",
  "unread": false,
  "urls": [
   {
    "url": "https://pypi.python.org/pypi/kelvin/2.0.3"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "Under <code>Installing</code>",
  "id": "5aa28c91458cbde55714ae63",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-03-09T13:30:57.711Z",
  "text": "Under `Installing`",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "<a href=\"https://bugs.python.org/issue31967\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://bugs.python.org/issue31967</a> also seems to point to this problem",
  "id": "5aa28cb08f1c77ef3a9f6271",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-03-09T13:31:28.790Z",
  "text": "https://bugs.python.org/issue31967 also seems to point to this problem",
  "unread": false,
  "urls": [
   {
    "url": "https://bugs.python.org/issue31967"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "I&#39;ll install the windows 8.1 sdk",
  "id": "5aa28cb4458cbde55714af2d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-03-09T13:31:32.317Z",
  "text": "I'll install the windows 8.1 sdk",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "still no numpy msvccompiler but build_ext completes",
  "id": "5aa28d67c3c5f8b90d50d5ed",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-03-09T13:34:31.983Z",
  "text": "still no numpy msvccompiler but build_ext completes",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "But still the same fatal error with numba.runtests",
  "id": "5aa28d836fba1a703ae8a086",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-03-09T13:34:59.945Z",
  "text": "But still the same fatal error with numba.runtests",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Thanks for the help, by the way",
  "id": "5aa28ded888332ee3a19e48d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-03-09T13:36:45.312Z",
  "text": "Thanks for the help, by the way",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "You&#39;re a champ",
  "id": "5aa28deef3f6d24c68562d19",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-03-09T13:36:46.599Z",
  "text": "You're a champ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "np",
  "id": "5aa28fbee4ff28713a118df1",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-03-09T13:44:30.567Z",
  "text": "np",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "so that&#39;s an improvement",
  "id": "5aa28fc6888332ee3a19ee52",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-03-09T13:44:38.069Z",
  "text": "so that's an improvement",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "So... completely clean numba checkout, 8.1SDK, still the error.",
  "id": "5aa290426fba1a703ae8b20b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-03-09T13:46:42.432Z",
  "text": "So... completely clean numba checkout, 8.1SDK, still the error.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "Could you please post what the error is now? Is it identical?",
  "id": "5aa2905ac3c5f8b90d50e99c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-03-09T13:47:06.379Z",
  "text": "Could you please post what the error is now? Is it identical?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "<pre><code>\n(numbaenv) C:<span class=\"command\">\\Users</span><span class=\"command\">\\User</span><span class=\"command\">\\Documents</span><span class=\"command\">\\foo</span><span class=\"command\">\\numba</span>&gt;python -m numba.runtests -l\nC:<span class=\"command\">\\Users</span><span class=\"command\">\\User</span><span class=\"command\">\\Anaconda</span>3<span class=\"command\">\\envs</span><span class=\"command\">\\numbaenv</span><span class=\"command\">\\lib</span><span class=\"command\">\\runpy</span>.py:125: RuntimeWarning: 'numba.runtests' found in sys.modules after import of package 'numba', but prior to execution of 'numba.runtests'; this may result in unpredictable behaviour\n  warn(RuntimeWarning(msg))\ntmpqe66keid.c\nc1: fatal error C1083: Cannot open source file: 'C:<span class=\"command\">\\Users</span><span class=\"command\">\\User</span><span class=\"command\">\\AppData</span><span class=\"command\">\\Local</span><span class=\"command\">\\Temp</span><span class=\"command\">\\tmpqe</span>66keid.c': Permission denied\nunittest.loader._FailedTest.numba.tests\n1 tests found</code></pre>",
  "id": "5aa291d5458cbde55714d11d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-03-09T13:53:25.011Z",
  "text": "````\n\n(numbaenv) C:\\Users\\User\\Documents\\foo\\numba>python -m numba.runtests -l\nC:\\Users\\User\\Anaconda3\\envs\\numbaenv\\lib\\runpy.py:125: RuntimeWarning: 'numba.runtests' found in sys.modules after import of package 'numba', but prior to execution of 'numba.runtests'; this may result in unpredictable behaviour\n  warn(RuntimeWarning(msg))\ntmpqe66keid.c\nc1: fatal error C1083: Cannot open source file: 'C:\\Users\\User\\AppData\\Local\\Temp\\tmpqe66keid.c': Permission denied\nunittest.loader._FailedTest.numba.tests\n1 tests found\n````",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "so yes",
  "id": "5aa292e3f3f6d24c68564758",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-03-09T13:57:55.376Z",
  "text": "so yes",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "Can you try <code>python -m numba.tests.test_runtests</code> please?",
  "id": "5aa29406f3f6d24c68564d5f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-03-09T14:02:46.377Z",
  "text": "Can you try ` python -m numba.tests.test_runtests` please?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "<pre><code>(numbaenv) C:<span class=\"command\">\\Users</span><span class=\"command\">\\User</span><span class=\"command\">\\Documents</span><span class=\"command\">\\foo</span><span class=\"command\">\\numba</span>&gt;python -m numba.tests.test_runtests\nTraceback (most recent call last):\n  File \"C:<span class=\"command\">\\Users</span><span class=\"command\">\\User</span><span class=\"command\">\\Anaconda</span>3<span class=\"command\">\\envs</span><span class=\"command\">\\numbaenv</span><span class=\"command\">\\lib</span><span class=\"command\">\\runpy</span>.py\", line 193, in _run_module_as_main\n    \"__main__\", mod_spec)\n  File \"C:<span class=\"command\">\\Users</span><span class=\"command\">\\User</span><span class=\"command\">\\Anaconda</span>3<span class=\"command\">\\envs</span><span class=\"command\">\\numbaenv</span><span class=\"command\">\\lib</span><span class=\"command\">\\runpy</span>.py\", line 85, in _run_code\n    exec(code, run_globals)\n  File \"C:<span class=\"command\">\\Users</span><span class=\"command\">\\User</span><span class=\"command\">\\Documents</span><span class=\"command\">\\foo</span><span class=\"command\">\\numba</span><span class=\"command\">\\numba</span><span class=\"command\">\\tests</span><span class=\"command\">\\test</span>_runtests.py\", line 7, in &lt;module&gt;\n    from numba import cuda\n  File \"C:<span class=\"command\">\\Users</span><span class=\"command\">\\User</span><span class=\"command\">\\Documents</span><span class=\"command\">\\foo</span><span class=\"command\">\\numba</span><span class=\"command\">\\numba</span><span class=\"command\">\\cuda</span><span class=\"command\">\\_</span>_init__.py\", line 9, in &lt;module&gt;\n    from .device_init import *\n  File \"C:<span class=\"command\">\\Users</span><span class=\"command\">\\User</span><span class=\"command\">\\Documents</span><span class=\"command\">\\foo</span><span class=\"command\">\\numba</span><span class=\"command\">\\numba</span><span class=\"command\">\\cuda</span><span class=\"command\">\\device</span>_init.py\", line 13, in &lt;module&gt;\n    from .decorators import jit, autojit, declare_device\n  File \"C:<span class=\"command\">\\Users</span><span class=\"command\">\\User</span><span class=\"command\">\\Documents</span><span class=\"command\">\\foo</span><span class=\"command\">\\numba</span><span class=\"command\">\\numba</span><span class=\"command\">\\cuda</span><span class=\"command\">\\decorators</span>.py\", line 4, in &lt;module&gt;\n    from .compiler import (compile_kernel, compile_device, declare_device_function,\n  File \"C:<span class=\"command\">\\Users</span><span class=\"command\">\\User</span><span class=\"command\">\\Documents</span><span class=\"command\">\\foo</span><span class=\"command\">\\numba</span><span class=\"command\">\\numba</span><span class=\"command\">\\cuda</span><span class=\"command\">\\compiler</span>.py\", line 17, in &lt;module&gt;\n    from .cudadrv import nvvm, devicearray, driver\n  File \"C:<span class=\"command\">\\Users</span><span class=\"command\">\\User</span><span class=\"command\">\\Documents</span><span class=\"command\">\\foo</span><span class=\"command\">\\numba</span><span class=\"command\">\\numba</span><span class=\"command\">\\cuda</span><span class=\"command\">\\cudadrv</span><span class=\"command\">\\devicearray</span>.py\", line 12, in &lt;module&gt;\n    import six\nImportError: No module named 'six'</code></pre>",
  "id": "5aa29c17f3f6d24c68567cca",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-03-09T14:37:11.776Z",
  "text": "````\n(numbaenv) C:\\Users\\User\\Documents\\foo\\numba>python -m numba.tests.test_runtests\nTraceback (most recent call last):\n  File \"C:\\Users\\User\\Anaconda3\\envs\\numbaenv\\lib\\runpy.py\", line 193, in _run_module_as_main\n    \"__main__\", mod_spec)\n  File \"C:\\Users\\User\\Anaconda3\\envs\\numbaenv\\lib\\runpy.py\", line 85, in _run_code\n    exec(code, run_globals)\n  File \"C:\\Users\\User\\Documents\\foo\\numba\\numba\\tests\\test_runtests.py\", line 7, in <module>\n    from numba import cuda\n  File \"C:\\Users\\User\\Documents\\foo\\numba\\numba\\cuda\\__init__.py\", line 9, in <module>\n    from .device_init import *\n  File \"C:\\Users\\User\\Documents\\foo\\numba\\numba\\cuda\\device_init.py\", line 13, in <module>\n    from .decorators import jit, autojit, declare_device\n  File \"C:\\Users\\User\\Documents\\foo\\numba\\numba\\cuda\\decorators.py\", line 4, in <module>\n    from .compiler import (compile_kernel, compile_device, declare_device_function,\n  File \"C:\\Users\\User\\Documents\\foo\\numba\\numba\\cuda\\compiler.py\", line 17, in <module>\n    from .cudadrv import nvvm, devicearray, driver\n  File \"C:\\Users\\User\\Documents\\foo\\numba\\numba\\cuda\\cudadrv\\devicearray.py\", line 12, in <module>\n    import six\nImportError: No module named 'six'\n````",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "Thanks. Do you have <code>six</code> in <code>conda list</code> ?",
  "id": "5aa29d888f1c77ef3a9fc2d0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-03-09T14:43:20.557Z",
  "text": "Thanks. Do you have `six` in `conda list` ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Don&#39;t think so",
  "id": "5aa29d90c3c5f8b90d51382c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-03-09T14:43:28.840Z",
  "text": "Don't think so",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Nope",
  "id": "5aa29d976f8b4b994609a1bf",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-03-09T14:43:35.937Z",
  "text": "Nope",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Shall I install it?",
  "id": "5aa29d9fe4d1c63604deb541",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-03-09T14:43:43.513Z",
  "text": "Shall I install it?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "yes please",
  "id": "5aa29dc00a1614b712feae3b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-03-09T14:44:16.070Z",
  "text": "yes please",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "<pre><code>\n(numbaenv) <span class=\"string\">C:</span>\\Users\\User\\Documents\\foo\\numba&gt;python -m numba.tests.test_runtests\n<span class=\"string\">C:</span>\\Users\\User\\Anaconda3\\envs\\numbaenv\\lib\\runpy.<span class=\"string\">py:</span><span class=\"number\">125</span>: <span class=\"string\">RuntimeWarning:</span> <span class=\"string\">'numba.runtests'</span> found <span class=\"keyword\">in</span> sys.modules after <span class=\"keyword\">import</span> of <span class=\"keyword\">package</span> <span class=\"string\">'numba'</span>, but prior to execution of <span class=\"string\">'numba.runtests'</span>; <span class=\"keyword\">this</span> may result <span class=\"keyword\">in</span> unpredictable behaviour\n  warn(RuntimeWarning(msg))\n.<span class=\"string\">C:</span>\\Users\\User\\Anaconda3\\envs\\numbaenv\\lib\\runpy.<span class=\"string\">py:</span><span class=\"number\">125</span>: <span class=\"string\">RuntimeWarning:</span> <span class=\"string\">'numba.runtests'</span> found <span class=\"keyword\">in</span> sys.modules after <span class=\"keyword\">import</span> of <span class=\"keyword\">package</span> <span class=\"string\">'numba'</span>, but prior to execution of <span class=\"string\">'numba.runtests'</span>; <span class=\"keyword\">this</span> may result <span class=\"keyword\">in</span> unpredictable behaviour\n  warn(RuntimeWarning(msg))\n.<span class=\"string\">sC:</span>\\Users\\User\\Anaconda3\\envs\\numbaenv\\lib\\runpy.<span class=\"string\">py:</span><span class=\"number\">125</span>: <span class=\"string\">RuntimeWarning:</span> <span class=\"string\">'numba.runtests'</span> found <span class=\"keyword\">in</span> sys.modules after <span class=\"keyword\">import</span> of <span class=\"keyword\">package</span> <span class=\"string\">'numba'</span>, but prior to execution of <span class=\"string\">'numba.runtests'</span>; <span class=\"keyword\">this</span> may result <span class=\"keyword\">in</span> unpredictable behaviour\n  warn(RuntimeWarning(msg))\n.<span class=\"string\">C:</span>\\Users\\User\\Anaconda3\\envs\\numbaenv\\lib\\runpy.<span class=\"string\">py:</span><span class=\"number\">125</span>: <span class=\"string\">RuntimeWarning:</span> <span class=\"string\">'numba.runtests'</span> found <span class=\"keyword\">in</span> sys.modules after <span class=\"keyword\">import</span> of <span class=\"keyword\">package</span> <span class=\"string\">'numba'</span>, but prior to execution of <span class=\"string\">'numba.runtests'</span>; <span class=\"keyword\">this</span> may result <span class=\"keyword\">in</span> unpredictable behaviour\n  warn(RuntimeWarning(msg))\n<span class=\"string\">C:</span>\\Users\\User\\Anaconda3\\envs\\numbaenv\\lib\\runpy.<span class=\"string\">py:</span><span class=\"number\">125</span>: <span class=\"string\">RuntimeWarning:</span> <span class=\"string\">'numba.runtests'</span> found <span class=\"keyword\">in</span> sys.modules after <span class=\"keyword\">import</span> of <span class=\"keyword\">package</span> <span class=\"string\">'numba'</span>, but prior to execution of <span class=\"string\">'numba.runtests'</span>; <span class=\"keyword\">this</span> may result <span class=\"keyword\">in</span> unpredictable behaviour\n  warn(RuntimeWarning(msg))\n<span class=\"string\">C:</span>\\Users\\User\\Anaconda3\\envs\\numbaenv\\lib\\runpy.<span class=\"string\">py:</span><span class=\"number\">125</span>: <span class=\"string\">RuntimeWarning:</span> <span class=\"string\">'numba.runtests'</span> found <span class=\"keyword\">in</span> sys.modules after <span class=\"keyword\">import</span> of <span class=\"keyword\">package</span> <span class=\"string\">'numba'</span>, but prior to execution of <span class=\"string\">'numba.runtests'</span>; <span class=\"keyword\">this</span> may result <span class=\"keyword\">in</span> unpredictable behaviour\n  warn(RuntimeWarning(msg))\n.<span class=\"string\">C:</span>\\Users\\User\\Anaconda3\\envs\\numbaenv\\lib\\runpy.<span class=\"string\">py:</span><span class=\"number\">125</span>: <span class=\"string\">RuntimeWarning:</span> <span class=\"string\">'numba.runtests'</span> found <span class=\"keyword\">in</span> sys.modules after <span class=\"keyword\">import</span> of <span class=\"keyword\">package</span> <span class=\"string\">'numba'</span>, but prior to execution of <span class=\"string\">'numba.runtests'</span>; <span class=\"keyword\">this</span> may result <span class=\"keyword\">in</span> unpredictable behaviour\n  warn(RuntimeWarning(msg))\n.<span class=\"string\">C:</span>\\Users\\User\\Anaconda3\\envs\\numbaenv\\lib\\runpy.<span class=\"string\">py:</span><span class=\"number\">125</span>: <span class=\"string\">RuntimeWarning:</span> <span class=\"string\">'numba.runtests'</span> found <span class=\"keyword\">in</span> sys.modules after <span class=\"keyword\">import</span> of <span class=\"keyword\">package</span> <span class=\"string\">'numba'</span>, but prior to execution of <span class=\"string\">'numba.runtests'</span>; <span class=\"keyword\">this</span> may result <span class=\"keyword\">in</span> unpredictable behaviour\n  warn(RuntimeWarning(msg))\n.<span class=\"string\">C:</span>\\Users\\User\\Anaconda3\\envs\\numbaenv\\lib\\runpy.<span class=\"string\">py:</span><span class=\"number\">125</span>: <span class=\"string\">RuntimeWarning:</span> <span class=\"string\">'numba.runtests'</span> found <span class=\"keyword\">in</span> sys.modules after <span class=\"keyword\">import</span> of <span class=\"keyword\">package</span> <span class=\"string\">'numba'</span>, but prior to execution of <span class=\"string\">'numba.runtests'</span>; <span class=\"keyword\">this</span> may result <span class=\"keyword\">in</span> unpredictable behaviour\n  warn(RuntimeWarning(msg))\n.\n----------------------------------------------------------------------\nRan <span class=\"number\">8</span> tests <span class=\"keyword\">in</span> <span class=\"number\">6.847</span>s\n\nOK (skipped=<span class=\"number\">1</span>)\n\n(numbaenv) <span class=\"string\">C:</span>\\Users\\User\\Documents\\foo\\numba&gt;</code></pre>",
  "id": "5aa29e01458cbde5571514e4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-03-09T14:45:21.245Z",
  "text": "````\n\n(numbaenv) C:\\Users\\User\\Documents\\foo\\numba>python -m numba.tests.test_runtests\nC:\\Users\\User\\Anaconda3\\envs\\numbaenv\\lib\\runpy.py:125: RuntimeWarning: 'numba.runtests' found in sys.modules after import of package 'numba', but prior to execution of 'numba.runtests'; this may result in unpredictable behaviour\n  warn(RuntimeWarning(msg))\n.C:\\Users\\User\\Anaconda3\\envs\\numbaenv\\lib\\runpy.py:125: RuntimeWarning: 'numba.runtests' found in sys.modules after import of package 'numba', but prior to execution of 'numba.runtests'; this may result in unpredictable behaviour\n  warn(RuntimeWarning(msg))\n.sC:\\Users\\User\\Anaconda3\\envs\\numbaenv\\lib\\runpy.py:125: RuntimeWarning: 'numba.runtests' found in sys.modules after import of package 'numba', but prior to execution of 'numba.runtests'; this may result in unpredictable behaviour\n  warn(RuntimeWarning(msg))\n.C:\\Users\\User\\Anaconda3\\envs\\numbaenv\\lib\\runpy.py:125: RuntimeWarning: 'numba.runtests' found in sys.modules after import of package 'numba', but prior to execution of 'numba.runtests'; this may result in unpredictable behaviour\n  warn(RuntimeWarning(msg))\nC:\\Users\\User\\Anaconda3\\envs\\numbaenv\\lib\\runpy.py:125: RuntimeWarning: 'numba.runtests' found in sys.modules after import of package 'numba', but prior to execution of 'numba.runtests'; this may result in unpredictable behaviour\n  warn(RuntimeWarning(msg))\nC:\\Users\\User\\Anaconda3\\envs\\numbaenv\\lib\\runpy.py:125: RuntimeWarning: 'numba.runtests' found in sys.modules after import of package 'numba', but prior to execution of 'numba.runtests'; this may result in unpredictable behaviour\n  warn(RuntimeWarning(msg))\n.C:\\Users\\User\\Anaconda3\\envs\\numbaenv\\lib\\runpy.py:125: RuntimeWarning: 'numba.runtests' found in sys.modules after import of package 'numba', but prior to execution of 'numba.runtests'; this may result in unpredictable behaviour\n  warn(RuntimeWarning(msg))\n.C:\\Users\\User\\Anaconda3\\envs\\numbaenv\\lib\\runpy.py:125: RuntimeWarning: 'numba.runtests' found in sys.modules after import of package 'numba', but prior to execution of 'numba.runtests'; this may result in unpredictable behaviour\n  warn(RuntimeWarning(msg))\n.C:\\Users\\User\\Anaconda3\\envs\\numbaenv\\lib\\runpy.py:125: RuntimeWarning: 'numba.runtests' found in sys.modules after import of package 'numba', but prior to execution of 'numba.runtests'; this may result in unpredictable behaviour\n  warn(RuntimeWarning(msg))\n.\n----------------------------------------------------------------------\nRan 8 tests in 6.847s\n\nOK (skipped=1)\n\n(numbaenv) C:\\Users\\User\\Documents\\foo\\numba>\n````",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": ":)",
  "id": "5aa29e17e4ff28713a11dd1b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-03-09T14:45:43.259Z",
  "text": ":)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Does that mean it&#39;s working?",
  "id": "5aa29e29e4d1c63604deb8c6",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-03-09T14:46:01.862Z",
  "text": "Does that mean it's working?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Ah yes it does",
  "id": "5aa29e52e4ff28713a11deaa",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-03-09T14:46:42.262Z",
  "text": "Ah yes it does",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "indeed",
  "id": "5aa29e590a1614b712feb172",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-03-09T14:46:49.151Z",
  "text": "indeed",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "does <code>./runtests -l</code> now produce a list of 7k+ tests?",
  "id": "5aa29e726fba1a703ae90390",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-03-09T14:47:14.715Z",
  "text": "does `./runtests -l ` now produce a list of 7k+ tests?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Yes",
  "id": "5aa29e7ec3c5f8b90d513ea2",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-03-09T14:47:26.884Z",
  "text": "Yes",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Thanks :) :)",
  "id": "5aa29e8335dd17022e3daad7",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-03-09T14:47:31.567Z",
  "text": "Thanks :) :)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "then I think you may be in business",
  "id": "5aa29e888f1c77ef3a9fc734",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-03-09T14:47:36.378Z",
  "text": "then I think you may be in business",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "I&#39;d hoped to have written all the np array tests today :P",
  "id": "5aa29e9953c1dbb743c1ae39",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-03-09T14:47:53.394Z",
  "text": "I'd hoped to have written all the np array tests today :P",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "Please can you check that you can run the test suite.",
  "id": "5aa29e9d8f1c77ef3a9fc813",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-03-09T14:47:57.230Z",
  "text": "Please can you check that you can run the test suite.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "<pre><code>(numbaenv) C:<span class=\"command\">\\Users</span><span class=\"command\">\\User</span><span class=\"command\">\\Documents</span><span class=\"command\">\\foo</span><span class=\"command\">\\numba</span>&gt;python -m numba.runtests\nC:<span class=\"command\">\\Users</span><span class=\"command\">\\User</span><span class=\"command\">\\Anaconda</span>3<span class=\"command\">\\envs</span><span class=\"command\">\\numbaenv</span><span class=\"command\">\\lib</span><span class=\"command\">\\runpy</span>.py:125: RuntimeWarning: 'numba.runtests' found in sys.modules after import of package 'numba', but prior to execution of 'numba.runtests'; this may result in unpredictable behaviour\n  warn(RuntimeWarning(msg))\ntmp7q680_i_.c\nc1: fatal error C1083: Cannot open source file: 'C:<span class=\"command\">\\Users</span><span class=\"command\">\\User</span><span class=\"command\">\\AppData</span><span class=\"command\">\\Local</span><span class=\"command\">\\Temp</span><span class=\"command\">\\tmp</span>7q680_i_.c': Permission denied\nskipped CUDA tests\nskipped CUDA tests</code></pre>",
  "id": "5aa29ef26fba1a703ae905c5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-03-09T14:49:22.967Z",
  "text": "````\n(numbaenv) C:\\Users\\User\\Documents\\foo\\numba>python -m numba.runtests\nC:\\Users\\User\\Anaconda3\\envs\\numbaenv\\lib\\runpy.py:125: RuntimeWarning: 'numba.runtests' found in sys.modules after import of package 'numba', but prior to execution of 'numba.runtests'; this may result in unpredictable behaviour\n  warn(RuntimeWarning(msg))\ntmp7q680_i_.c\nc1: fatal error C1083: Cannot open source file: 'C:\\Users\\User\\AppData\\Local\\Temp\\tmp7q680_i_.c': Permission denied\nskipped CUDA tests\nskipped CUDA tests\n````",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "but with numba.tests.array_manipulation it works fine",
  "id": "5aa29f04c3c5f8b90d51411a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-03-09T14:49:40.263Z",
  "text": "but with numba.tests.array_manipulation it works fine",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Also it keeps running the suite",
  "id": "5aa29f29c3c5f8b90d5141a9",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-03-09T14:50:17.894Z",
  "text": "Also it keeps running the suite",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "right, so it is &quot;working&quot;, as in the tests are now running, but you are seeing that error message",
  "id": "5aa29f446f8b4b994609aa2d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-03-09T14:50:44.884Z",
  "text": "right, so it is \"working\", as in the tests are now running, but you are seeing that error message",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Yeah",
  "id": "5aa29f4ce4d1c63604dec0b4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-03-09T14:50:52.222Z",
  "text": "Yeah",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "ok, that matches up with the build farm",
  "id": "5aa29f6b53c1dbb743c1b2b6",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-03-09T14:51:23.065Z",
  "text": "ok, that matches up with the build farm",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Bueno",
  "id": "5aa29f75e4ff28713a11e3c2",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-03-09T14:51:33.555Z",
  "text": "Bueno",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "Right",
  "id": "5aa29fc56fba1a703ae90b8c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-03-09T14:52:53.844Z",
  "text": "Right",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "I think we have a dep on six that needs to be noted",
  "id": "5aa29fcfc3c5f8b90d5144f5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-03-09T14:53:03.319Z",
  "text": "I think we have a dep on six that needs to be noted",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Looks like it",
  "id": "5aa29fdc53c1dbb743c1b4bf",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-03-09T14:53:16.526Z",
  "text": "Looks like it",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "I&#39;ll start writing tests",
  "id": "5aa29fdf53c1dbb743c1b4ca",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-03-09T14:53:19.347Z",
  "text": "I'll start writing tests",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "I think that we need to note that VS2017 needs to be installed with the win8.1 installer regardless of the windows you have",
  "id": "5aa29fecc3c5f8b90d514601",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-03-09T14:53:32.125Z",
  "text": "I think that we need to note that VS2017 needs to be installed with the win8.1 installer regardless of the windows you have",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Yeah",
  "id": "5aa29ffde4d1c63604dec674",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-03-09T14:53:49.984Z",
  "text": "Yeah",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "If you need any testing done at a later stage let me know",
  "id": "5aa2a0066fba1a703ae90ca5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-03-09T14:53:58.400Z",
  "text": "If you need any testing done at a later stage let me know",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "I&#39;m going to write tests for the next 7 minutes",
  "id": "5aa2a00d6f8b4b994609ae26",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-03-09T14:54:05.591Z",
  "text": "I'm going to write tests for the next 7 minutes",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": ":) ok, thanks, and thanks for your patience in sorting this out",
  "id": "5aa2a03335dd17022e3db490",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-03-09T14:54:43.434Z",
  "text": ":) ok, thanks, and thanks for your patience in sorting this out",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Thank you for your patience in helping sorting it out",
  "id": "5aa2a0406fba1a703ae90e8b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-03-09T14:54:56.704Z",
  "text": "Thank you for your patience in helping sorting it out",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "np, just glad to get it working",
  "id": "5aa2a0628f1c77ef3a9fd1de",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-03-09T14:55:30.185Z",
  "text": "np, just glad to get it working",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Hmm, replacing array_reshape with numpy_array_reshape (defined like the ravel equivalent) makes one of the tests pop an error.<pre><code>numba.errors.LoweringError: Failed at nopython (nopython mode backend)\nNo definition for lowering &lt;function reshape at 0x000001A1994A8158&gt;(array(int32, 2d, C), int64) -&gt; array(int32, 1d, C)\nFile \"numba<span class=\"command\">\\tests</span><span class=\"command\">\\test</span>_array_manipulation.py\", line 23\n<span class=\"special\">[</span>1<span class=\"special\">]</span> During: lowering \"<span class=\"formula\">$0.5 = call $</span>0.2(arr, newshape, vararg=None, args=<span class=\"special\">[</span>Var(arr, C:<span class=\"command\">\\Users</span><span class=\"command\">\\User</span><span class=\"command\">\\Documents</span><span class=\"command\">\\numba</span><span class=\"command\">\\numba</span><span class=\"command\">\\tests</span><span class=\"command\">\\test</span>_array_manipulation.py (23)), Var(newshape, C:<span class=\"command\">\\Users</span><span class=\"command\">\\User</span><span class=\"command\">\\Documents</span><span class=\"command\">\\numba</span><span class=\"command\">\\numba</span><span class=\"command\">\\tests</span><span class=\"command\">\\test</span>_array_manipulation.py (23))<span class=\"special\">]</span>, kws=<span class=\"special\">[</span><span class=\"special\">]</span>, func=<span class=\"formula\">$0.2)\" at C:<span class=\"command\">\\Users</span><span class=\"command\">\\User</span><span class=\"command\">\\Documents</span><span class=\"command\">\\numba</span><span class=\"command\">\\numba</span><span class=\"command\">\\tests</span><span class=\"command\">\\test</span>_array_manipulation.py (23)</span></code></pre>",
  "id": "5aa2a0846fba1a703ae91044",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-03-09T14:56:04.609Z",
  "text": "Hmm, replacing array_reshape with numpy_array_reshape (defined like the ravel equivalent) makes one of the tests pop an error.\n````\nnumba.errors.LoweringError: Failed at nopython (nopython mode backend)\nNo definition for lowering <function reshape at 0x000001A1994A8158>(array(int32, 2d, C), int64) -> array(int32, 1d, C)\nFile \"numba\\tests\\test_array_manipulation.py\", line 23\n[1] During: lowering \"$0.5 = call $0.2(arr, newshape, vararg=None, args=[Var(arr, C:\\Users\\User\\Documents\\numba\\numba\\tests\\test_array_manipulation.py (23)), Var(newshape, C:\\Users\\User\\Documents\\numba\\numba\\tests\\test_array_manipulation.py (23))], kws=[], func=$0.2)\" at C:\\Users\\User\\Documents\\numba\\numba\\tests\\test_array_manipulation.py (23)\n````\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Is there any place I need to add the np reshape definition aside from putting the definition in arrayobj.py and adding it to the list in npydecl.py?",
  "id": "5aa2a09f8f1c77ef3a9fd2a6",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-03-09T14:56:31.234Z",
  "text": "Is there any place I need to add the np reshape definition aside from putting the definition in arrayobj.py and adding it to the list in npydecl.py?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "It&#39;s even easier than that I think",
  "id": "5aa2a255c3c5f8b90d5154f6",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-03-09T15:03:49.071Z",
  "text": "It's even easier than that I think",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "There&#39;s a new API that I&#39;d encourage the use of ahead of everything else.",
  "id": "5aa2a2680a1614b712fec80c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-03-09T15:04:08.167Z",
  "text": "There's a new API that I'd encourage the use of ahead of everything else.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "That was the minimum amount of steps I needed for it to be usable in the minimal example",
  "id": "5aa2a26bc3c5f8b90d51555a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-03-09T15:04:11.037Z",
  "text": "That was the minimum amount of steps I needed for it to be usable in the minimal example",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Regale me",
  "id": "5aa2a271458cbde557152f98",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-03-09T15:04:17.926Z",
  "text": "Regale me",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "<a href=\"http://numba.pydata.org/numba-doc/dev/extending/high-level.html\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://numba.pydata.org/numba-doc/dev/extending/high-level.html</a>",
  "id": "5aa2a27fc3c5f8b90d51563f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-03-09T15:04:31.732Z",
  "text": "http://numba.pydata.org/numba-doc/dev/extending/high-level.html",
  "unread": false,
  "urls": [
   {
    "url": "http://numba.pydata.org/numba-doc/dev/extending/high-level.html"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "<pre><code><span class=\"keyword\">from</span> numba.extending <span class=\"keyword\">import</span> overload\n<span class=\"decorator\">@overload(np.reshape)</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">np_reshape</span><span class=\"params\">(A, shape)</span>:</span>\n    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">impl</span><span class=\"params\">(A, shape)</span>:</span>\n        <span class=\"keyword\">return</span> A.reshape(shape)\n    <span class=\"keyword\">return</span> impl</code></pre>",
  "id": "5aa2a28a53c1dbb743c1c2c2",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-03-09T15:04:42.912Z",
  "text": "```\nfrom numba.extending import overload\n@overload(np.reshape)\ndef np_reshape(A, shape):\n    def impl(A, shape):\n        return A.reshape(shape)\n    return impl\n```\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "ought to be it",
  "id": "5aa2a292c3c5f8b90d515698",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-03-09T15:04:50.775Z",
  "text": "ought to be it",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "That&#39;s pretty cool",
  "id": "5aa2a297c3c5f8b90d51569d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-03-09T15:04:55.689Z",
  "text": "That's pretty cool",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "no message about with lowering builtins and infering, all automatic",
  "id": "5aa2a2af35dd17022e3dc1d2",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-03-09T15:05:19.742Z",
  "text": "no message about with lowering builtins and infering, all automatic",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Yeah",
  "id": "5aa2a2b653c1dbb743c1c37b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-03-09T15:05:26.022Z",
  "text": "Yeah",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "I&#39;d like to get to know Numba a bit better tho",
  "id": "5aa2a2be888332ee3a1a55f0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-03-09T15:05:34.748Z",
  "text": "I'd like to get to know Numba a bit better tho",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "There are some cases where this won&#39;t work, but if it does, code is tiny",
  "id": "5aa2a2c2888332ee3a1a55f6",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-03-09T15:05:38.074Z",
  "text": "There are some cases where this won't work, but if it does, code is tiny",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Yeah",
  "id": "5aa2a2ed6fba1a703ae91d57",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-03-09T15:06:21.364Z",
  "text": "Yeah",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "and tiny neat code means less maintenance burden",
  "id": "5aa2a2f16fba1a703ae91d6e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-03-09T15:06:25.357Z",
  "text": "and tiny neat code means less maintenance burden",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Tiny neat and dry is always better",
  "id": "5aa2a2fb6fba1a703ae91db7",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-03-09T15:06:35.114Z",
  "text": "Tiny neat and dry is always better",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "I feel you",
  "id": "5aa2a304c3c5f8b90d5159d0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-03-09T15:06:44.137Z",
  "text": "I feel you",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Though the reshape implementation I wrote now isn&#39;t many more lines",
  "id": "5aa2a3116f8b4b994609c021",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-03-09T15:06:57.254Z",
  "text": "Though the reshape implementation I wrote now isn't many more lines",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Anyways, I&#39;m going to head out",
  "id": "5aa2a3246fba1a703ae91ee7",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-03-09T15:07:16.222Z",
  "text": "Anyways, I'm going to head out",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "but its in 2 files and means something has to be kept in sync",
  "id": "5aa2a32535dd17022e3dc3a8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-03-09T15:07:17.351Z",
  "text": "but its in 2 files and means something has to be kept in sync",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Yeah",
  "id": "5aa2a32ae4ff28713a11f9b0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-03-09T15:07:22.747Z",
  "text": "Yeah",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "ok, well thanks for your work on this, I look forward to the PR",
  "id": "5aa2a33953c1dbb743c1c5d7",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-03-09T15:07:37.207Z",
  "text": "ok, well thanks for your work on this, I look forward to the PR",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Might it be worth it to move all the stuff currently in a hardcoded list in npydecl to overloads?",
  "id": "5aa2a34e888332ee3a1a58e4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-03-09T15:07:58.815Z",
  "text": "Might it be worth it to move all the stuff currently in a hardcoded list in npydecl to overloads?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "If possible",
  "id": "5aa2a35053c1dbb743c1c652",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-03-09T15:08:00.383Z",
  "text": "If possible",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "yup",
  "id": "5aa2a3b28f1c77ef3a9fe26a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-03-09T15:09:38.187Z",
  "text": "yup",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "there&#39;s a lot of scope for refactoring like that",
  "id": "5aa2a3c0f3f6d24c6856aa9e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-03-09T15:09:52.168Z",
  "text": "there's a lot of scope for refactoring like that",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Coolbeans",
  "id": "5aa2a3c0e4ff28713a11fc15",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-03-09T15:09:52.211Z",
  "text": "Coolbeans",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Well I&#39;ll be gone on a ski trip until tuesday",
  "id": "5aa2a3d1f3f6d24c6856aafa",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-03-09T15:10:09.213Z",
  "text": "Well I'll be gone on a ski trip until tuesday",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "But I expect I can get to work on that on wednesday",
  "id": "5aa2a3df6f8b4b994609c45d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-03-09T15:10:23.824Z",
  "text": "But I expect I can get to work on that on wednesday",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "So thanks for all your help, and have a nice weekend :)",
  "id": "5aa2a3f953c1dbb743c1ca4d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-03-09T15:10:49.387Z",
  "text": "So thanks for all your help, and have a nice weekend :)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "ok, thanks, this dev cycle is scheduled to feature freeze for a RC on April 4th, so plenty of time",
  "id": "5aa2a42f888332ee3a1a5e3c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-03-09T15:11:43.743Z",
  "text": "ok, thanks, this dev cycle is scheduled to feature freeze for a RC on April 4th, so plenty of time",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "you too",
  "id": "5aa2a4320a1614b712fed466",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-03-09T15:11:46.427Z",
  "text": "you too",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/datnamer",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/8646471?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/8646471?v=4&s=60",
   "displayName": "datnamer",
   "gv": "4",
   "id": "54602d6fdb8155e6700d316b",
   "url": "/datnamer",
   "username": "datnamer",
   "v": 10
  },
  "html": "<a href=\"https://groups.google.com/a/continuum.io/forum/#!topic/numba-users/VmPPLgZ-iSs\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://groups.google.com/a/continuum.io/forum/#!topic/numba-users/VmPPLgZ-iSs</a> Can the overload decorator be used for this? ",
  "id": "5aa69f6e27c509a7745403ad",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-03-12T15:40:30.254Z",
  "text": "https://groups.google.com/a/continuum.io/forum/#!topic/numba-users/VmPPLgZ-iSs Can the overload decorator be used for this? ",
  "unread": false,
  "urls": [
   {
    "url": "https://groups.google.com/a/continuum.io/forum/#!topic/numba-users/VmPPLgZ-iSs"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "yes:<pre><code class=\"python\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np\n<span class=\"keyword\">import</span> numba\n<span class=\"keyword\">from</span> numba.extending <span class=\"keyword\">import</span> overload\n\n<span class=\"decorator\">@numba.njit</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dconj</span><span class=\"params\">(x)</span>:</span>\n    <span class=\"keyword\">return</span> x\n\n\n<span class=\"decorator\">@numba.njit</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cconj</span><span class=\"params\">(x)</span>:</span>\n    <span class=\"keyword\">return</span> np.conj(x)\n\n\n<span class=\"decorator\">@numba.generated_jit(nopython=True)</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">genjit_conj</span><span class=\"params\">(a)</span>:</span>\n    <span class=\"keyword\">if</span> a == numba.types.float64:\n        <span class=\"keyword\">return</span> <span class=\"keyword\">lambda</span> a: dconj(a)\n    <span class=\"keyword\">elif</span> a == numba.types.complex128:\n        <span class=\"keyword\">return</span> <span class=\"keyword\">lambda</span> a: cconj(a)\n    <span class=\"keyword\">else</span>:\n        <span class=\"keyword\">raise</span> NotImplementedError\n\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">overload_conj</span><span class=\"params\">(a)</span>:</span>\n    <span class=\"keyword\">pass</span>\n\n<span class=\"decorator\">@overload(overload_conj)</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">conj_ol</span><span class=\"params\">(a)</span>:</span>\n    <span class=\"keyword\">if</span> a == numba.types.float64:\n        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">impl</span><span class=\"params\">(a)</span>:</span>\n            <span class=\"keyword\">return</span> a\n    <span class=\"keyword\">elif</span> a == numba.types.complex128:\n        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">impl</span><span class=\"params\">(a)</span>:</span>\n            <span class=\"keyword\">return</span> np.conj(a)\n    <span class=\"keyword\">else</span>:\n        impl = <span class=\"keyword\">None</span>\n    <span class=\"keyword\">return</span> impl\n\n<span class=\"decorator\">@numba.vectorize(nopython=True)</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">myconj_genjit</span><span class=\"params\">(a)</span>:</span>\n    <span class=\"keyword\">return</span> genjit_conj(a)\n\n<span class=\"decorator\">@numba.vectorize(nopython=True)</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">myconj_overload</span><span class=\"params\">(a)</span>:</span>\n    <span class=\"keyword\">return</span> overload_conj(a)\n\n\nnp.random.seed(<span class=\"number\">0</span>)\na = np.random.random(<span class=\"number\">10</span>)\nprint(myconj_genjit(a))\nprint(myconj_overload(a))\nprint(myconj_genjit(a * <span class=\"number\">1j</span>))\nprint(myconj_overload(a * <span class=\"number\">1j</span>))</code></pre>",
  "id": "5aa6a167f3f6d24c6867698c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-03-12T15:48:55.222Z",
  "text": "yes:\n```python\nimport numpy as np\nimport numba\nfrom numba.extending import overload\n\n@numba.njit\ndef dconj(x):\n    return x\n\n\n@numba.njit\ndef cconj(x):\n    return np.conj(x)\n\n\n@numba.generated_jit(nopython=True)\ndef genjit_conj(a):\n    if a == numba.types.float64:\n        return lambda a: dconj(a)\n    elif a == numba.types.complex128:\n        return lambda a: cconj(a)\n    else:\n        raise NotImplementedError\n\ndef overload_conj(a):\n    pass\n\n@overload(overload_conj)\ndef conj_ol(a):\n    if a == numba.types.float64:\n        def impl(a):\n            return a\n    elif a == numba.types.complex128:\n        def impl(a):\n            return np.conj(a)\n    else:\n        impl = None\n    return impl\n\n@numba.vectorize(nopython=True)\ndef myconj_genjit(a):\n    return genjit_conj(a)\n\n@numba.vectorize(nopython=True)\ndef myconj_overload(a):\n    return overload_conj(a)\n\n\nnp.random.seed(0)\na = np.random.random(10)\nprint(myconj_genjit(a))\nprint(myconj_overload(a))\nprint(myconj_genjit(a * 1j))\nprint(myconj_overload(a * 1j))\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/datnamer",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/8646471?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/8646471?v=4&s=60",
   "displayName": "datnamer",
   "gv": "4",
   "id": "54602d6fdb8155e6700d316b",
   "url": "/datnamer",
   "username": "datnamer",
   "v": 10
  },
  "html": "Cool thanks ",
  "id": "5aa6c78327c509a77454ecae",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-03-12T18:31:31.804Z",
  "text": "Cool thanks ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "np",
  "id": "5aa6c8c353c1dbb743d37fb5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-03-12T18:36:51.694Z",
  "text": "np",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/jllanfranchi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6414943?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6414943?v=4&s=60",
   "displayName": "J. L. Lanfranchi",
   "gv": "4",
   "id": "5aa7320ed73408ce4f9115a7",
   "url": "/jllanfranchi",
   "username": "jllanfranchi",
   "v": 14
  },
  "html": "Hi, I want to verify that numba whether numba can create an array using a &quot;structured&quot; dtype (e.g. an array whose elements are each <code>np.dtype([(&#39;x&#39;, np.float32), (&#39;y&#39;, np.uint8)], align=True)</code>). My reading of the docs and trying it out indicates it probably isn&#39;t possible, but I want to make sure, as it&#39;d be very useful for what I&#39;m working on.",
  "id": "5aa73896e4ff28713a25f0b7",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-03-13T02:33:58.937Z",
  "text": "Hi, I want to verify that numba whether numba can create an array using a \"structured\" dtype (e.g. an array whose elements are each `np.dtype([('x', np.float32), ('y', np.uint8)], align=True)`). My reading of the docs and trying it out indicates it probably isn't possible, but I want to make sure, as it'd be very useful for what I'm working on.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/jllanfranchi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6414943?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6414943?v=4&s=60",
   "displayName": "J. L. Lanfranchi",
   "gv": "4",
   "id": "5aa7320ed73408ce4f9115a7",
   "url": "/jllanfranchi",
   "username": "jllanfranchi",
   "v": 14
  },
  "html": "Nevermind, it seems possible to create such an array via <code>np.empty(..., dtype=MY_DTYPE)</code>, <code>np.zeros(..., dtype=MY_DTYPE)</code>, etc.",
  "id": "5aa7530be4d1c63604f2c7ff",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-03-13T04:26:51.763Z",
  "text": "Nevermind, it seems possible to create such an array via `np.empty(..., dtype=MY_DTYPE)`, `np.zeros(..., dtype=MY_DTYPE)`, etc.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/njwhite",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/912123?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/912123?v=4&s=60",
   "displayName": "njwhite",
   "gv": "4",
   "id": "5a4d0cb1d73408ce4f85e996",
   "url": "/njwhite",
   "username": "njwhite",
   "v": 11
  },
  "html": "uh, cuda tests on master fail on device for me: ",
  "id": "5aa84ba5c3c5f8b90d6b3af4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-03-13T22:07:33.992Z",
  "text": "uh, cuda tests on master fail on device for me: ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-03-13T22:07:48.205Z",
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/njwhite",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/912123?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/912123?v=4&s=60",
   "displayName": "njwhite",
   "gv": "4",
   "id": "5a4d0cb1d73408ce4f85e996",
   "url": "/njwhite",
   "username": "njwhite",
   "v": 11
  },
  "html": "<code>File &quot;/home/nicholas/numba.git/numba/lowering.py&quot;, line 233, in setup_function\n    self.function = self.context.declare_function(self.module, fndesc)\n  File &quot;/home/nicholas/numba.git/numba/targets/base.py&quot;, line 378, in declare_function\n    self.call_conv.decorate_function(fn, fndesc.args, fndesc.argtypes, noalias=fndesc.noalias)\nTypeError: Failed at nopython (nopython mode backend)\ndecorate_function() got an unexpected keyword argument &#39;noalias&#39;</code>",
  "id": "5aa84baee4d1c63604f7ff98",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-03-13T22:07:42.036Z",
  "text": "``` File \"/home/nicholas/numba.git/numba/lowering.py\", line 233, in setup_function\n    self.function = self.context.declare_function(self.module, fndesc)\n  File \"/home/nicholas/numba.git/numba/targets/base.py\", line 378, in declare_function\n    self.call_conv.decorate_function(fn, fndesc.args, fndesc.argtypes, noalias=fndesc.noalias)\nTypeError: Failed at nopython (nopython mode backend)\ndecorate_function() got an unexpected keyword argument 'noalias'\n```",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/njwhite",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/912123?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/912123?v=4&s=60",
   "displayName": "njwhite",
   "gv": "4",
   "id": "5a4d0cb1d73408ce4f85e996",
   "url": "/njwhite",
   "username": "njwhite",
   "v": 11
  },
  "html": "CUDACallConv#decorate_function indeed doesn&#39;t have that",
  "id": "5aa84bcbe4ff28713a2bc39e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-03-13T22:08:11.529Z",
  "text": "CUDACallConv#decorate_function indeed doesn't have that",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/njwhite",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/912123?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/912123?v=4&s=60",
   "displayName": "njwhite",
   "gv": "4",
   "id": "5a4d0cb1d73408ce4f85e996",
   "url": "/njwhite",
   "username": "njwhite",
   "v": 11
  },
  "html": "was running <code>python -m numba.runtests numba.cuda.tests.cudapy.test_intrinsics</code>",
  "id": "5aa84be0f3f6d24c6870315e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-03-13T22:08:32.895Z",
  "text": "was running `python -m numba.runtests numba.cuda.tests.cudapy.test_intrinsics`",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"njwhite\" class=\"mention\">@njwhite</span> thanks, builders started failing yesterday, I&#39;ve pushed <span data-link-type=\"issue\" data-issue=\"2814\" data-issue-repo=\"numba/numba\" class=\"issue\">numba/numba#2814</span> through the farm to make sure it fixes it, should be merged soon.",
  "id": "5aa85037458cbde5572f60f2",
  "issues": [
   {
    "number": "2814",
    "repo": "numba/numba"
   }
  ],
  "mentions": [
   {
    "screenName": "njwhite",
    "userId": "5a4d0cb1d73408ce4f85e996",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 12,
  "sent": "2018-03-13T22:27:03.839Z",
  "text": "@njwhite thanks, builders started failing yesterday, I've pushed https://github.com/numba/numba/pull/2814 through the farm to make sure it fixes it, should be merged soon.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/njwhite",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/912123?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/912123?v=4&s=60",
   "displayName": "njwhite",
   "gv": "4",
   "id": "5a4d0cb1d73408ce4f85e996",
   "url": "/njwhite",
   "username": "njwhite",
   "v": 11
  },
  "html": "thanks!",
  "id": "5aa8506e35dd17022e574c17",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-03-13T22:27:58.796Z",
  "text": "thanks!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/njwhite",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/912123?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/912123?v=4&s=60",
   "displayName": "njwhite",
   "gv": "4",
   "id": "5a4d0cb1d73408ce4f85e996",
   "url": "/njwhite",
   "username": "njwhite",
   "v": 11
  },
  "html": "I&#39;ve raised an llvmlite PR here: <a href=\"https://github.com/numba/llvmlite/pull/338/files\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://github.com/numba/llvmlite/pull/338/files</a> - how soon can I use it in a numba/numba PR?",
  "id": "5aa85abae4ff28713a2c101b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-03-13T23:11:54.979Z",
  "text": "I've raised an llvmlite PR here: https://github.com/numba/llvmlite/pull/338/files - how soon can I use it in a numba/numba PR?",
  "unread": false,
  "urls": [
   {
    "url": "https://github.com/numba/llvmlite/pull/338/files"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/njwhite",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/912123?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/912123?v=4&s=60",
   "displayName": "njwhite",
   "gv": "4",
   "id": "5a4d0cb1d73408ce4f85e996",
   "url": "/njwhite",
   "username": "njwhite",
   "v": 11
  },
  "html": "as soon as it&#39;s merged? or does it lag a bit (or a release)?",
  "id": "5aa85ac753c1dbb743db8029",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-03-13T23:12:07.562Z",
  "text": "as soon as it's merged? or does it lag a bit (or a release)?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "Once it is reviewed and merged a build will run on the buildfarm and it will be available on the numba channel soon after that. How fast that is depends on how busy the farm is.",
  "id": "5aa85c7de4ff28713a2c1c00",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-03-13T23:19:25.463Z",
  "text": "Once it is reviewed and merged a build will run on the buildfarm and it will be available on the numba channel soon after that. How fast that is depends on how busy the farm is.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/njwhite",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/912123?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/912123?v=4&s=60",
   "displayName": "njwhite",
   "gv": "4",
   "id": "5a4d0cb1d73408ce4f85e996",
   "url": "/njwhite",
   "username": "njwhite",
   "v": 11
  },
  "html": "ah, thanks",
  "id": "5aa85ca5e4d1c63604f853cc",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-03-13T23:20:05.026Z",
  "text": "ah, thanks",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span> I tried implementing the overload method with the code you used, but I get this error message:<pre><code class=\"python\">Traceback (most recent call last):\n  File <span class=\"string\">\"C:/Users/User/Documents/numba/reshape_test.py\"</span>, line <span class=\"number\">23</span>, <span class=\"keyword\">in</span> &lt;module&gt;\n    print(foo(bar))\n  File <span class=\"string\">\"C:\\Users\\User\\Documents\\numba\\numba\\dispatcher.py\"</span>, line <span class=\"number\">330</span>, <span class=\"keyword\">in</span> _compile_for_args\n    <span class=\"keyword\">raise</span> e\n  File <span class=\"string\">\"C:\\Users\\User\\Documents\\numba\\numba\\dispatcher.py\"</span>, line <span class=\"number\">307</span>, <span class=\"keyword\">in</span> _compile_for_args\n    <span class=\"keyword\">return</span> self.compile(tuple(argtypes))\n  File <span class=\"string\">\"C:\\Users\\User\\Documents\\numba\\numba\\dispatcher.py\"</span>, line <span class=\"number\">579</span>, <span class=\"keyword\">in</span> compile\n    cres = self._compiler.compile(args, return_type)\n  File <span class=\"string\">\"C:\\Users\\User\\Documents\\numba\\numba\\dispatcher.py\"</span>, line <span class=\"number\">80</span>, <span class=\"keyword\">in</span> compile\n    flags=flags, locals=self.locals)\n  File <span class=\"string\">\"C:\\Users\\User\\Documents\\numba\\numba\\compiler.py\"</span>, line <span class=\"number\">779</span>, <span class=\"keyword\">in</span> compile_extra\n    <span class=\"keyword\">return</span> pipeline.compile_extra(func)\n  File <span class=\"string\">\"C:\\Users\\User\\Documents\\numba\\numba\\compiler.py\"</span>, line <span class=\"number\">362</span>, <span class=\"keyword\">in</span> compile_extra\n    <span class=\"keyword\">return</span> self._compile_bytecode()\n  File <span class=\"string\">\"C:\\Users\\User\\Documents\\numba\\numba\\compiler.py\"</span>, line <span class=\"number\">738</span>, <span class=\"keyword\">in</span> _compile_bytecode\n    <span class=\"keyword\">return</span> self._compile_core()\n  File <span class=\"string\">\"C:\\Users\\User\\Documents\\numba\\numba\\compiler.py\"</span>, line <span class=\"number\">725</span>, <span class=\"keyword\">in</span> _compile_core\n    res = pm.run(self.status)\n  File <span class=\"string\">\"C:\\Users\\User\\Documents\\numba\\numba\\compiler.py\"</span>, line <span class=\"number\">248</span>, <span class=\"keyword\">in</span> run\n    <span class=\"keyword\">raise</span> patched_exception\n  File <span class=\"string\">\"C:\\Users\\User\\Documents\\numba\\numba\\compiler.py\"</span>, line <span class=\"number\">240</span>, <span class=\"keyword\">in</span> run\n    stage()\n  File <span class=\"string\">\"C:\\Users\\User\\Documents\\numba\\numba\\compiler.py\"</span>, line <span class=\"number\">454</span>, <span class=\"keyword\">in</span> stage_nopython_frontend\n    self.locals)\n  File <span class=\"string\">\"C:\\Users\\User\\Documents\\numba\\numba\\compiler.py\"</span>, line <span class=\"number\">881</span>, <span class=\"keyword\">in</span> type_inference_stage\n    infer.propagate()\n  File <span class=\"string\">\"C:\\Users\\User\\Documents\\numba\\numba\\typeinfer.py\"</span>, line <span class=\"number\">846</span>, <span class=\"keyword\">in</span> propagate\n    <span class=\"keyword\">raise</span> errors[<span class=\"number\">0</span>]\n  File <span class=\"string\">\"C:\\Users\\User\\Documents\\numba\\numba\\typeinfer.py\"</span>, line <span class=\"number\">137</span>, <span class=\"keyword\">in</span> propagate\n    constraint(typeinfer)\n  File <span class=\"string\">\"C:\\Users\\User\\Documents\\numba\\numba\\typeinfer.py\"</span>, line <span class=\"number\">415</span>, <span class=\"keyword\">in</span> __call__\n    self.resolve(typeinfer, typevars, fnty)\n  File <span class=\"string\">\"C:\\Users\\User\\Documents\\numba\\numba\\typeinfer.py\"</span>, line <span class=\"number\">441</span>, <span class=\"keyword\">in</span> resolve\n    sig = typeinfer.resolve_call(fnty, pos_args, kw_args, literals=literals)\n  File <span class=\"string\">\"C:\\Users\\User\\Documents\\numba\\numba\\typeinfer.py\"</span>, line <span class=\"number\">1123</span>, <span class=\"keyword\">in</span> resolve_call\n    literals=literals)\n  File <span class=\"string\">\"C:\\Users\\User\\Documents\\numba\\numba\\typing\\context.py\"</span>, line <span class=\"number\">204</span>, <span class=\"keyword\">in</span> resolve_function_type\n    <span class=\"keyword\">return</span> func.get_call_type_with_literals(self, args, kws, literals)\n  File <span class=\"string\">\"C:\\Users\\User\\Documents\\numba\\numba\\types\\functions.py\"</span>, line <span class=\"number\">137</span>, <span class=\"keyword\">in</span> get_call_type_with_literals\n    <span class=\"keyword\">raise</span> errors.TypingError(failures.format())\nnumba.errors.TypingError: Failed at nopython (nopython frontend)\nInvalid usage of Function(&lt;function reshape at <span class=\"number\">0x000001E0F520C158</span>&gt;) <span class=\"keyword\">with</span> parameters (array(float64, <span class=\"number\">1</span>d, C), (int64 x <span class=\"number\">2</span>))\n * parameterized\nIn definition <span class=\"number\">0</span>:\n    AttributeError: <span class=\"string\">'Array'</span> object has no attribute <span class=\"string\">'reshape'</span>\n    raised <span class=\"keyword\">from</span> C:/Users/User/Documents/numba/reshape_test.py:<span class=\"number\">9</span>\n[<span class=\"number\">1</span>] During: resolving callee type: Function(&lt;function reshape at <span class=\"number\">0x000001E0F520C158</span>&gt;)\n[<span class=\"number\">2</span>] During: typing of call at C:/Users/User/Documents/numba/reshape_test.py (<span class=\"number\">16</span>)</code></pre>",
  "id": "5aa9483b458cbde55733ff8d",
  "issues": [],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 11,
  "sent": "2018-03-14T16:05:15.367Z",
  "text": "@stuartarchibald I tried implementing the overload method with the code you used, but I get this error message:\n````python\nTraceback (most recent call last):\n  File \"C:/Users/User/Documents/numba/reshape_test.py\", line 23, in <module>\n    print(foo(bar))\n  File \"C:\\Users\\User\\Documents\\numba\\numba\\dispatcher.py\", line 330, in _compile_for_args\n    raise e\n  File \"C:\\Users\\User\\Documents\\numba\\numba\\dispatcher.py\", line 307, in _compile_for_args\n    return self.compile(tuple(argtypes))\n  File \"C:\\Users\\User\\Documents\\numba\\numba\\dispatcher.py\", line 579, in compile\n    cres = self._compiler.compile(args, return_type)\n  File \"C:\\Users\\User\\Documents\\numba\\numba\\dispatcher.py\", line 80, in compile\n    flags=flags, locals=self.locals)\n  File \"C:\\Users\\User\\Documents\\numba\\numba\\compiler.py\", line 779, in compile_extra\n    return pipeline.compile_extra(func)\n  File \"C:\\Users\\User\\Documents\\numba\\numba\\compiler.py\", line 362, in compile_extra\n    return self._compile_bytecode()\n  File \"C:\\Users\\User\\Documents\\numba\\numba\\compiler.py\", line 738, in _compile_bytecode\n    return self._compile_core()\n  File \"C:\\Users\\User\\Documents\\numba\\numba\\compiler.py\", line 725, in _compile_core\n    res = pm.run(self.status)\n  File \"C:\\Users\\User\\Documents\\numba\\numba\\compiler.py\", line 248, in run\n    raise patched_exception\n  File \"C:\\Users\\User\\Documents\\numba\\numba\\compiler.py\", line 240, in run\n    stage()\n  File \"C:\\Users\\User\\Documents\\numba\\numba\\compiler.py\", line 454, in stage_nopython_frontend\n    self.locals)\n  File \"C:\\Users\\User\\Documents\\numba\\numba\\compiler.py\", line 881, in type_inference_stage\n    infer.propagate()\n  File \"C:\\Users\\User\\Documents\\numba\\numba\\typeinfer.py\", line 846, in propagate\n    raise errors[0]\n  File \"C:\\Users\\User\\Documents\\numba\\numba\\typeinfer.py\", line 137, in propagate\n    constraint(typeinfer)\n  File \"C:\\Users\\User\\Documents\\numba\\numba\\typeinfer.py\", line 415, in __call__\n    self.resolve(typeinfer, typevars, fnty)\n  File \"C:\\Users\\User\\Documents\\numba\\numba\\typeinfer.py\", line 441, in resolve\n    sig = typeinfer.resolve_call(fnty, pos_args, kw_args, literals=literals)\n  File \"C:\\Users\\User\\Documents\\numba\\numba\\typeinfer.py\", line 1123, in resolve_call\n    literals=literals)\n  File \"C:\\Users\\User\\Documents\\numba\\numba\\typing\\context.py\", line 204, in resolve_function_type\n    return func.get_call_type_with_literals(self, args, kws, literals)\n  File \"C:\\Users\\User\\Documents\\numba\\numba\\types\\functions.py\", line 137, in get_call_type_with_literals\n    raise errors.TypingError(failures.format())\nnumba.errors.TypingError: Failed at nopython (nopython frontend)\nInvalid usage of Function(<function reshape at 0x000001E0F520C158>) with parameters (array(float64, 1d, C), (int64 x 2))\n * parameterized\nIn definition 0:\n    AttributeError: 'Array' object has no attribute 'reshape'\n    raised from C:/Users/User/Documents/numba/reshape_test.py:9\n[1] During: resolving callee type: Function(<function reshape at 0x000001E0F520C158>)\n[2] During: typing of call at C:/Users/User/Documents/numba/reshape_test.py (16)\n````",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "It runs fine when I call arg.reshape directly",
  "id": "5aa9485be4d1c63604fcacfb",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-03-14T16:05:47.653Z",
  "text": "It runs fine when I call arg.reshape directly",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Oh hold up I mocked up the overload lol",
  "id": "5aa94b53a60157d62fe85390",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-03-14T16:18:27.189Z",
  "text": "Oh hold up I mocked up the overload lol",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "mucked* up I mean",
  "id": "5aa94c1be4d1c63604fcc6fa",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-03-14T16:21:47.622Z",
  "text": "mucked* up I mean",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "<span data-link-type=\"commit\" data-commit-sha=\"363664fd6c42d7324b2546b67054a56ade7fd576\" data-commit-repo=\"stuartarchibald/numba\" class=\"commit\">stuartarchibald/numba@363664f</span>",
  "id": "5aa94cf86f8b4b99462823c0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-03-14T16:25:28.086Z",
  "text": "https://github.com/stuartarchibald/numba/commit/363664fd6c42d7324b2546b67054a56ade7fd576",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "^ that should be ok as a start",
  "id": "5aa94d040a1614b7121d0b51",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-03-14T16:25:40.077Z",
  "text": "^ that should be ok as a start",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Yeah I got it working",
  "id": "5aa94d13458cbde557341b91",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-03-14T16:25:55.254Z",
  "text": "Yeah I got it working",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "great :)",
  "id": "5aa94d21e4ff28713a30b0e4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-03-14T16:26:09.921Z",
  "text": "great :)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Now time for tests",
  "id": "5aa94d56f3f6d24c6874ecd3",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-03-14T16:27:02.279Z",
  "text": "Now time for tests",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "<span data-link-type=\"issue\" data-issue=\"2819\" class=\"issue\">#2819</span> is a thing :D",
  "id": "5aa95658458cbde557345258",
  "issues": [
   {
    "number": "2819"
   }
  ],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-03-14T17:05:28.963Z",
  "text": "#2819 is a thing :D",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-03-14T20:20:53.750Z",
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/jmg-duarte",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/15343819?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/15343819?v=4&s=60",
   "displayName": "Jos\u00e9 Duarte",
   "gv": "4",
   "id": "59026520d73408ce4f5b81c0",
   "url": "/jmg-duarte",
   "username": "jmg-duarte",
   "v": 2
  },
  "html": "Hello everyone, can someone tell me if I can enforce array size in the <code>@guvectorize</code> decorator?",
  "id": "5aa9841b53c1dbb743e1494c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-03-14T20:20:43.663Z",
  "text": "Hello everyone, can someone tell me if I can enforce array size in the `@guvectorize` decorator?",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "You mean the size of the array you&#39;re applying the vectorized function to, or the size of the arguments?",
  "id": "5aaa16f76f8b4b99462ba559",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-03-15T06:47:19.943Z",
  "text": "You mean the size of the array you're applying the vectorized function to, or the size of the arguments?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"jmg-duarte\" class=\"mention\">@jmg-duarte</span> IIRC not at present, the <code>@guvectorize</code> signatures supported are those which are supported by NumPy , here are the details and a definition of the grammar <a href=\"https://docs.scipy.org/doc/numpy-dev/neps/generalized-ufuncs.html#details-of-signature\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://docs.scipy.org/doc/numpy-dev/neps/generalized-ufuncs.html#details-of-signature</a>",
  "id": "5aaa3b0e27c509a77465928d",
  "issues": [],
  "mentions": [
   {
    "screenName": "jmg-duarte",
    "userId": "59026520d73408ce4f5b81c0",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 13,
  "sent": "2018-03-15T09:21:18.780Z",
  "text": "@jmg-duarte IIRC not at present, the `@guvectorize` signatures supported are those which are supported by NumPy , here are the details and a definition of the grammar https://docs.scipy.org/doc/numpy-dev/neps/generalized-ufuncs.html#details-of-signature",
  "unread": false,
  "urls": [
   {
    "url": "https://docs.scipy.org/doc/numpy-dev/neps/generalized-ufuncs.html#details-of-signature"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/looooo",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/5084704?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/5084704?v=4&s=60",
   "displayName": "lorenz",
   "gv": "4",
   "id": "577e4cfec2f0db084a21e347",
   "url": "/looooo",
   "username": "looooo",
   "v": 100
  },
  "html": "I would like to accelerate an algorithm which creates a triangulated flat face from boundary points. I guess numba should be the perfect tool to get this done. But <code>@numba.jit</code> alone doesn&#39;t do the job. There are also some function where the decoration leads to errors. <a href=\"https://github.com/booya-at/poly-tri/blob/master/poly_tri_numba.py\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://github.com/booya-at/poly-tri/blob/master/poly_tri_numba.py</a>",
  "id": "5aaa4eaa35dd17022e60aab9",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-03-15T10:44:58.202Z",
  "text": "I would like to accelerate an algorithm which creates a triangulated flat face from boundary points. I guess numba should be the perfect tool to get this done. But `@numba.jit` alone doesn't do the job. There are also some function where the decoration leads to errors. https://github.com/booya-at/poly-tri/blob/master/poly_tri_numba.py",
  "unread": false,
  "urls": [
   {
    "url": "https://github.com/booya-at/poly-tri/blob/master/poly_tri_numba.py"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"looooo\" class=\"mention\">@looooo</span> could you expand on the errors you are seeing please?",
  "id": "5aaa4f1ef3f6d24c68796d94",
  "issues": [],
  "mentions": [
   {
    "screenName": "looooo",
    "userId": "577e4cfec2f0db084a21e347",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 13,
  "sent": "2018-03-15T10:46:54.640Z",
  "text": "@looooo could you expand on the errors you are seeing please?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/looooo",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/5084704?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/5084704?v=4&s=60",
   "displayName": "lorenz",
   "gv": "4",
   "id": "577e4cfec2f0db084a21e347",
   "url": "/looooo",
   "username": "looooo",
   "v": 100
  },
  "html": "if I place an numba decorator on the top-level function I get this error:<pre><code>Traceback (most recent call last):\n  File <span class=\"string\">\"~/poly-tri/tests/test_numba.py\"</span>, line <span class=\"number\">25</span>, <span class=\"keyword\">in</span> test_triangulization\n    tri = <span class=\"function\"><span class=\"title\">poly_tri</span><span class=\"params\">(self.points, [self.inner_bound, self.outer_bound], delaunay=False)</span></span>\n  File <span class=\"string\">\"~/numba/dispatcher.py\"</span>, line <span class=\"number\">307</span>, <span class=\"keyword\">in</span> _compile_for_args\n    return self.<span class=\"function\"><span class=\"title\">compile</span><span class=\"params\">(tuple(argtypes)</span></span>)\n  File <span class=\"string\">\"~/numba/dispatcher.py\"</span>, line <span class=\"number\">579</span>, <span class=\"keyword\">in</span> compile\n    cres = self._compiler.<span class=\"function\"><span class=\"title\">compile</span><span class=\"params\">(args, return_type)</span></span>\n  File <span class=\"string\">\"~/numba/dispatcher.py\"</span>, line <span class=\"number\">80</span>, <span class=\"keyword\">in</span> compile\n    flags=flags, locals=self.locals)\n  File <span class=\"string\">\"~/numba/compiler.py\"</span>, line <span class=\"number\">779</span>, <span class=\"keyword\">in</span> compile_extra\n    return pipeline.<span class=\"function\"><span class=\"title\">compile_extra</span><span class=\"params\">(func)</span></span>\n  File <span class=\"string\">\"~/numba/compiler.py\"</span>, line <span class=\"number\">362</span>, <span class=\"keyword\">in</span> compile_extra\n    return self._compile_bytecode()\n  File <span class=\"string\">\"~/numba/compiler.py\"</span>, line <span class=\"number\">738</span>, <span class=\"keyword\">in</span> _compile_bytecode\n    return self._compile_core()\n  File <span class=\"string\">\"~/numba/compiler.py\"</span>, line <span class=\"number\">725</span>, <span class=\"keyword\">in</span> _compile_core\n    res = pm.<span class=\"function\"><span class=\"title\">run</span><span class=\"params\">(self.status)</span></span>\n  File <span class=\"string\">\"~/numba/compiler.py\"</span>, line <span class=\"number\">248</span>, <span class=\"keyword\">in</span> run\n    raise patched_exception\n  File <span class=\"string\">\"~/numba/compiler.py\"</span>, line <span class=\"number\">240</span>, <span class=\"keyword\">in</span> run\n    <span class=\"function\"><span class=\"title\">stage</span><span class=\"params\">()</span></span>\n  File <span class=\"string\">\"~/numba/compiler.py\"</span>, line <span class=\"number\">433</span>, <span class=\"keyword\">in</span> stage_objectmode_frontend\n    cres = self.<span class=\"function\"><span class=\"title\">frontend_looplift</span><span class=\"params\">()</span></span>\n  File <span class=\"string\">\"~/numba/compiler.py\"</span>, line <span class=\"number\">413</span>, <span class=\"keyword\">in</span> frontend_looplift\n    flags=loop_flags)\n  File <span class=\"string\">\"~/numba/transforms.py\"</span>, line <span class=\"number\">193</span>, <span class=\"keyword\">in</span> loop_lifting\n    cfg = <span class=\"function\"><span class=\"title\">compute_cfg_from_blocks</span><span class=\"params\">(blocks)</span></span>\n  File <span class=\"string\">\"~/numba/analysis.py\"</span>, line <span class=\"number\">213</span>, <span class=\"keyword\">in</span> compute_cfg_from_blocks\n    cfg.<span class=\"function\"><span class=\"title\">add_edge</span><span class=\"params\">(k, target)</span></span>\n  File <span class=\"string\">\"~/numba/controlflow.py\"</span>, line <span class=\"number\">83</span>, <span class=\"keyword\">in</span> add_edge\n    assert dest <span class=\"keyword\">in</span> self._nodes\nAssertionError: Failed at <span class=\"tag\">object</span> (<span class=\"tag\">object</span> mode frontend)</code></pre>",
  "id": "5aaa6865c3c5f8b90d75471b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-03-15T12:34:44.980Z",
  "text": "if I place an numba decorator on the top-level function I get this error:\n```\nTraceback (most recent call last):\n  File \"~/poly-tri/tests/test_numba.py\", line 25, in test_triangulization\n    tri = poly_tri(self.points, [self.inner_bound, self.outer_bound], delaunay=False)\n  File \"~/numba/dispatcher.py\", line 307, in _compile_for_args\n    return self.compile(tuple(argtypes))\n  File \"~/numba/dispatcher.py\", line 579, in compile\n    cres = self._compiler.compile(args, return_type)\n  File \"~/numba/dispatcher.py\", line 80, in compile\n    flags=flags, locals=self.locals)\n  File \"~/numba/compiler.py\", line 779, in compile_extra\n    return pipeline.compile_extra(func)\n  File \"~/numba/compiler.py\", line 362, in compile_extra\n    return self._compile_bytecode()\n  File \"~/numba/compiler.py\", line 738, in _compile_bytecode\n    return self._compile_core()\n  File \"~/numba/compiler.py\", line 725, in _compile_core\n    res = pm.run(self.status)\n  File \"~/numba/compiler.py\", line 248, in run\n    raise patched_exception\n  File \"~/numba/compiler.py\", line 240, in run\n    stage()\n  File \"~/numba/compiler.py\", line 433, in stage_objectmode_frontend\n    cres = self.frontend_looplift()\n  File \"~/numba/compiler.py\", line 413, in frontend_looplift\n    flags=loop_flags)\n  File \"~/numba/transforms.py\", line 193, in loop_lifting\n    cfg = compute_cfg_from_blocks(blocks)\n  File \"~/numba/analysis.py\", line 213, in compute_cfg_from_blocks\n    cfg.add_edge(k, target)\n  File \"~/numba/controlflow.py\", line 83, in add_edge\n    assert dest in self._nodes\nAssertionError: Failed at object (object mode frontend)\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "ok, thanks, please could you write an issue for this and include a minimal piece of code to reproduce it, it is clearly a CFG problem.",
  "id": "5aaa68e1458cbde557394b0b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-03-15T12:36:49.509Z",
  "text": "ok, thanks, please could you write an issue for this and include a minimal piece of code to reproduce it, it is clearly a CFG problem.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-03-15T12:39:37.787Z",
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/looooo",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/5084704?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/5084704?v=4&s=60",
   "displayName": "lorenz",
   "gv": "4",
   "id": "577e4cfec2f0db084a21e347",
   "url": "/looooo",
   "username": "looooo",
   "v": 100
  },
  "html": "",
  "id": "5aaa697f0a1614b7122236f0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-03-15T12:39:27.894Z",
  "text": "",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "also, just to make sure, are you using numba version 0.37 ?",
  "id": "5aaa69f80a1614b712223973",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-03-15T12:41:28.322Z",
  "text": "also, just to make sure, are you using numba version 0.37 ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/looooo",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/5084704?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/5084704?v=4&s=60",
   "displayName": "lorenz",
   "gv": "4",
   "id": "577e4cfec2f0db084a21e347",
   "url": "/looooo",
   "username": "looooo",
   "v": 100
  },
  "html": "0.37 from conda numba channel.",
  "id": "5aaa6a106f8b4b99462d42e1",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-03-15T12:41:52.319Z",
  "text": "0.37 from conda numba channel.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "great, thanks, so its a current problem, please mention that  in the issue :)",
  "id": "5aaa6a29458cbde557395296",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-03-15T12:42:17.090Z",
  "text": "great, thanks, so its a current problem, please mention that  in the issue :)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/looooo",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/5084704?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/5084704?v=4&s=60",
   "displayName": "lorenz",
   "gv": "4",
   "id": "577e4cfec2f0db084a21e347",
   "url": "/looooo",
   "username": "looooo",
   "v": 100
  },
  "html": "yes I will try to write an issue. But somehow I have the feeling numba is not ready for real problems...",
  "id": "5aaa6ab6e4ff28713a35f9ed",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-03-15T12:44:38.184Z",
  "text": "yes I will try to write an issue. But somehow I have the feeling numba is not ready for real problems...",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/looooo",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/5084704?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/5084704?v=4&s=60",
   "displayName": "lorenz",
   "gv": "4",
   "id": "577e4cfec2f0db084a21e347",
   "url": "/looooo",
   "username": "looooo",
   "v": 100
  },
  "html": "are there any projects which use numba successfully to accelerate there programs? I guess the examples on github are more academic problems.",
  "id": "5aaa6b350a1614b712223f37",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-03-15T12:46:45.980Z",
  "text": "are there any projects which use numba successfully to accelerate there programs? I guess the examples on github are more academic problems.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "Thank you, please do. I&#39;m sorry you hit a bug, this is unfortunate, Numba was trying to do looplifting in your code <a href=\"https://numba.pydata.org/numba-doc/0.17.0/glossary.html#term-loop-jitting\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://numba.pydata.org/numba-doc/0.17.0/glossary.html#term-loop-jitting</a> which is a challenging task!<br>Numba is used all over the place, try searching for <code>import numba</code> on github.",
  "id": "5aaa6dfda60157d62fedabf3",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-03-15T12:58:37.740Z",
  "text": "Thank you, please do. I'm sorry you hit a bug, this is unfortunate, Numba was trying to do looplifting in your code https://numba.pydata.org/numba-doc/0.17.0/glossary.html#term-loop-jitting which is a challenging task!\nNumba is used all over the place, try searching for `import numba` on github.",
  "unread": false,
  "urls": [
   {
    "url": "https://numba.pydata.org/numba-doc/0.17.0/glossary.html#term-loop-jitting"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "I expect your code can be made to work well with Numba, it may just need a small amount of adjustment.",
  "id": "5aaa6e10c3c5f8b90d756590",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-03-15T12:58:56.328Z",
  "text": "I expect your code can be made to work well with Numba, it may just need a small amount of adjustment.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/looooo",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/5084704?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/5084704?v=4&s=60",
   "displayName": "lorenz",
   "gv": "4",
   "id": "577e4cfec2f0db084a21e347",
   "url": "/looooo",
   "username": "looooo",
   "v": 100
  },
  "html": "ok I will give it a try. thanks",
  "id": "5aaa7134c3c5f8b90d7577b1",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-03-15T13:12:20.385Z",
  "text": "ok I will give it a try. thanks",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/looooo",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/5084704?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/5084704?v=4&s=60",
   "displayName": "lorenz",
   "gv": "4",
   "id": "577e4cfec2f0db084a21e347",
   "url": "/looooo",
   "username": "looooo",
   "v": 100
  },
  "html": "actually my previously reported problem was caused by a list-comprehension, which is not supported by numba. But anyway, there are other functions which are not working with the jit-decorator.<br>I will continue with rewriting the programm in c++ and make some bindings, which seems to me is the cleaner solution. Using numba would be great, but all this limitations make it really difficult...",
  "id": "5aaa7ac3c3c5f8b90d75ad2e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-03-15T13:53:07.456Z",
  "text": "actually my previously reported problem was caused by a list-comprehension, which is not supported by numba. But anyway, there are other functions which are not working with the jit-decorator.\nI will continue with rewriting the programm in c++ and make some bindings, which seems to me is the cleaner solution. Using numba would be great, but all this limitations make it really difficult...",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "That&#39;s why it&#39;s 0.37. It takes some time to get used to programming with Numba.",
  "id": "5aab8cf5e4ff28713a3b681b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-03-16T09:23:01.197Z",
  "text": "That's why it's 0.37. It takes some time to get used to programming with Numba.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"Rik-de-Kort\" class=\"mention\">@Rik-de-Kort</span> just wondering if you submitted a ticket for the things we discovered when doing the windows developer setup the other day? If not, I&#39;ll do one now.",
  "id": "5aab90abe4ff28713a3b7a46",
  "issues": [],
  "mentions": [
   {
    "screenName": "Rik-de-Kort",
    "userId": "5a0ea31cd73408ce4f7f000d",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 15,
  "sent": "2018-03-16T09:38:51.289Z",
  "text": "@Rik-de-Kort just wondering if you submitted a ticket for the things we discovered when doing the windows developer setup the other day? If not, I'll do one now.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "And yes, it&#39;s at 0.37, new features and support for more of python/NumPy are being added all the time. Python is incredibly flexible as a language and as a result supporting the level of expression possible takes a lot of time and thought, especially for the more complex concepts. If there are specific features that are missing that would be really valuable then please open tickets (checking that there isn&#39;t one already open first though please :)).",
  "id": "5aab9293bb1018b37aee575c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-03-16T09:46:59.339Z",
  "text": "And yes, it's at 0.37, new features and support for more of python/NumPy are being added all the time. Python is incredibly flexible as a language and as a result supporting the level of expression possible takes a lot of time and thought, especially for the more complex concepts. If there are specific features that are missing that would be really valuable then please open tickets (checking that there isn't one already open first though please :)).",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span> Nope",
  "id": "5aab9baf6f8b4b994632f344",
  "issues": [],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 15,
  "sent": "2018-03-16T10:25:51.592Z",
  "text": "@stuartarchibald Nope",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"Rik-de-Kort\" class=\"mention\">@Rik-de-Kort</span>, ok, thanks, done in, <span data-link-type=\"issue\" data-issue=\"2825\" data-issue-repo=\"numba/numba\" class=\"issue\">numba/numba#2825</span>",
  "id": "5aab9e5a35dd17022e66fbb7",
  "issues": [
   {
    "number": "2825",
    "repo": "numba/numba"
   }
  ],
  "mentions": [
   {
    "screenName": "Rik-de-Kort",
    "userId": "5a0ea31cd73408ce4f7f000d",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 15,
  "sent": "2018-03-16T10:37:14.027Z",
  "text": "@Rik-de-Kort, ok, thanks, done in, https://github.com/numba/numba/issues/2825",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Aight",
  "id": "5aab9e7227c509a7746c33e3",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-03-16T10:37:38.753Z",
  "text": "Aight",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "I&#39;ll check from fresh install",
  "id": "5aab9f6dbb1018b37aee9cf7",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-03-16T10:41:49.237Z",
  "text": "I'll check from fresh install",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "oh wow, that&#39;d be really helpful, thanks",
  "id": "5aaba013e4ff28713a3bd30d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-03-16T10:44:35.671Z",
  "text": "oh wow, that'd be really helpful, thanks",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "So I&#39;ll have one go with the visual studio build tools windows 10 sdk and six",
  "id": "5aaba0b6c3c5f8b90d7b2e19",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-03-16T10:47:18.511Z",
  "text": "So I'll have one go with the visual studio build tools windows 10 sdk and six",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "And then one with the windows 8.1 sdk",
  "id": "5aaba0babb1018b37aeea9b9",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-03-16T10:47:22.346Z",
  "text": "And then one with the windows 8.1 sdk",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "ah, I <em>think</em> the six problem is now gone on master <span data-link-type=\"issue\" data-issue=\"2805\" data-issue-repo=\"numba/numba\" class=\"issue\">numba/numba#2805</span>",
  "id": "5aaba0eca60157d62ff37105",
  "issues": [
   {
    "number": "2805",
    "repo": "numba/numba"
   }
  ],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-03-16T10:48:12.926Z",
  "text": "ah, I *think* the six problem is now gone on master https://github.com/numba/numba/pull/2805",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Ah",
  "id": "5aaba1180a1614b71227f17e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-03-16T10:48:56.207Z",
  "text": "Ah",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "or at least it should be, that was a small oversight, numba has enough of six built in to not need it as a dep",
  "id": "5aaba11ac3c5f8b90d7b312e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-03-16T10:48:58.047Z",
  "text": "or at least it should be, that was a small oversight, numba has enough of six built in to not need it as a dep",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Let&#39;s find out, shall we :)",
  "id": "5aaba11cf3f6d24c687faa90",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-03-16T10:49:00.834Z",
  "text": "Let's find out, shall we :)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "ok, thanks, TBH even anecdotal information will be helpful to others",
  "id": "5aaba159c3c5f8b90d7b3275",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-03-16T10:50:01.104Z",
  "text": "ok, thanks, TBH even anecdotal information will be helpful to others",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Nah I have some time for testing",
  "id": "5aaba1a4458cbde5573f3c8d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-03-16T10:51:16.241Z",
  "text": "Nah I have some time for testing",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Not very busy at work atm",
  "id": "5aaba1a9e4ff28713a3bdbee",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-03-16T10:51:21.086Z",
  "text": "Not very busy at work atm",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/jmg-duarte",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/15343819?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/15343819?v=4&s=60",
   "displayName": "Jos\u00e9 Duarte",
   "gv": "4",
   "id": "59026520d73408ce4f5b81c0",
   "url": "/jmg-duarte",
   "username": "jmg-duarte",
   "v": 2
  },
  "html": "Hey guys! Does anyone know how I can enforce numpy array types in function signatures?",
  "id": "5aaba63735dd17022e672595",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-03-16T11:10:47.014Z",
  "text": "Hey guys! Does anyone know how I can enforce numpy array types in function signatures?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-03-16T11:11:11.710Z",
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/jmg-duarte",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/15343819?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/15343819?v=4&s=60",
   "displayName": "Jos\u00e9 Duarte",
   "gv": "4",
   "id": "59026520d73408ce4f5b81c0",
   "url": "/jmg-duarte",
   "username": "jmg-duarte",
   "v": 2
  },
  "html": "as in <code>def func(array:np.ndarray(float32))</code>",
  "id": "5aaba648e4d1c6360407c4ef",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-03-16T11:11:04.857Z",
  "text": "as in `def func(array:np.ndarray(float32))`",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/jmg-duarte",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/15343819?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/15343819?v=4&s=60",
   "displayName": "Jos\u00e9 Duarte",
   "gv": "4",
   "id": "59026520d73408ce4f5b81c0",
   "url": "/jmg-duarte",
   "username": "jmg-duarte",
   "v": 2
  },
  "html": "ups wrong channel",
  "id": "5aaba65bc3c5f8b90d7b4cd8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-03-16T11:11:23.066Z",
  "text": "ups wrong channel",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/fschlimb",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1215821?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1215821?v=4&s=60",
   "displayName": "Frank Schlimbach",
   "gv": "4",
   "id": "5a8a99f7d73408ce4f8dbfb7",
   "url": "/fschlimb",
   "username": "fschlimb",
   "v": 2
  },
  "html": "HI. Trying to load a namedtuple from a c-pointer using load_from_data_pointer. I get the error message &quot;TupleModel does not have a field named &#39;load_from_data_pointer&#39;&quot; which confuses me because TupleModel is a child-class of StructModel which defines this method. Any idea?",
  "id": "5aabd211c3c5f8b90d7c3f37",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-03-16T14:17:53.947Z",
  "text": "HI. Trying to load a namedtuple from a c-pointer using load_from_data_pointer. I get the error message \"TupleModel does not have a field named 'load_from_data_pointer'\" which confuses me because TupleModel is a child-class of StructModel which defines this method. Any idea?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "\u2018load_from_data_pointer\u2019 is a method on the <code>TupleModel</code> object.  The &quot;does not have a field named\u201d indicates that you are getting \u2018load_from_data_pointer\u2019 as a field of the actual value as oppose to from the model.  (It\u2019s hard to explain but it\u2019s like a method on the type but you\u2019re getting it from the value.)",
  "id": "5aabef4ae4ff28713a3da099",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-03-16T16:22:34.555Z",
  "text": "\u2018load_from_data_pointer\u2019 is a method on the `TupleModel` object.  The \"does not have a field named\u201d indicates that you are getting \u2018load_from_data_pointer\u2019 as a field of the actual value as oppose to from the model.  (It\u2019s hard to explain but it\u2019s like a method on the type but you\u2019re getting it from the value.)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Who do I talk to about testing?  Specifically interested in the roles of self.memory_leak_setup and self.memory_leak_teardown, where it is done multiple times in numba.tests.test_array_manimpulation: once in class instancing, and then in every check function again",
  "id": "5aac1313a60157d62ff5fefe",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-03-16T18:55:15.271Z",
  "text": "Who do I talk to about testing?  Specifically interested in the roles of self.memory_leak_setup and self.memory_leak_teardown, where it is done multiple times in numba.tests.test_array_manimpulation: once in class instancing, and then in every check function again",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "So the pattern I&#39;d like to factor out if possible is:<pre><code class=\"python\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">check</span><span class=\"params\">(pyfunc, args)</span>:</span>\n    self.memory_leak_setup()\n    do_stuff\n    self.memory_leak_teardown()</code></pre>",
  "id": "5aac1384e4d1c636040a32bb",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-03-16T18:57:08.271Z",
  "text": "So the pattern I'd like to factor out if possible is:\n````python\ndef check(pyfunc, args):\n    self.memory_leak_setup()\n    do_stuff\n    self.memory_leak_teardown()\n````",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-03-16T18:59:51.476Z",
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"Rik-de-Kort\" class=\"mention\">@Rik-de-Kort</span> , it\u2019s a special case because there is a known issue with exception raising leaking memory.  The test is disabling the memoryleak check at tearDown with <code>self.disable_leak_check</code> and it is doing custom memoryleak checking per <code>check()</code>.",
  "id": "5aac1421e4d1c636040a3691",
  "issues": [],
  "mentions": [
   {
    "screenName": "Rik-de-Kort",
    "userId": "5a0ea31cd73408ce4f7f000d",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 13,
  "sent": "2018-03-16T18:59:45.018Z",
  "text": "@Rik-de-Kort , it\u2019s a special case because there is a known issue with exception raising leaking memory.  The test is disabling the memoryleak check at tearDown with `self.disable_leak_check` and it is doing custom memoryleak checking per `check()`.",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "In normal cases, just the setUp/tearDown would do.",
  "id": "5aac143b35dd17022e698f3d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-03-16T19:00:11.078Z",
  "text": "In normal cases, just the setUp/tearDown would do.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "<p>Alright. So I could add a method to MemoryLeakMixin or MemoryLeak like this:</p><pre><code class=\"python\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">with_memory_leak</span><span class=\"params\">(self, func)</span>:</span>\n    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">result</span><span class=\"params\">(*args, **kwargs)</span>:</span>\n        self.memory_leak_setup()\n        func(*args, **kwargs)\n        self.memory_leak_teardown()</code></pre><p>And then use <code>@self.with_memory_leak</code> as decorator</p>",
  "id": "5aac1b8ebb1018b37af171f3",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-03-16T19:31:26.917Z",
  "text": "Alright. So I could add a method to MemoryLeakMixin or MemoryLeak like this:\n````python\ndef with_memory_leak(self, func):\n    def result(*args, **kwargs):\n        self.memory_leak_setup()\n        func(*args, **kwargs)\n        self.memory_leak_teardown()\n````\nAnd then use ````@self.with_memory_leak```` as decorator",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Not sure if del got should be included. I get the sense it&#39;s essential to the teardown",
  "id": "5aac1c1bbb1018b37af1744c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-03-16T19:33:47.888Z",
  "text": "Not sure if del got should be included. I get the sense it's essential to the teardown",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "in which case I&#39;d probably use a context manager",
  "id": "5aac1d13458cbde55741f946",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-03-16T19:37:55.401Z",
  "text": "in which case I'd probably use a context manager",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "The setUp/tearDown is called automatically before and after each test method, so you don\u2019t need to add the contextmanager in the common case.  ",
  "id": "5aac1e21c3c5f8b90d7dfe52",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-03-16T19:42:25.788Z",
  "text": "The setUp/tearDown is called automatically before and after each test method, so you don\u2019t need to add the contextmanager in the common case.  ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Yeah, but there is a <em>lot</em> of the above pattern in test_array_manipulation",
  "id": "5aac1e3a8f1c77ef3acbbc3d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-03-16T19:42:50.336Z",
  "text": "Yeah, but there is a *lot* of the above pattern in test_array_manipulation",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "oh if you wanted to clean that up, contextmanager would be nice",
  "id": "5aac1e58e4d1c636040a69d2",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-03-16T19:43:20.255Z",
  "text": "oh if you wanted to clean that up, contextmanager would be nice",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "alright",
  "id": "5aac1e60a60157d62ff63cdf",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-03-16T19:43:28.223Z",
  "text": "alright",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "I also implemented np.transpose",
  "id": "5aac1e69e4d1c636040a6a0b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-03-16T19:43:37.899Z",
  "text": "I also implemented np.transpose",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Question: in testing, how important is it to have calculating the expected value outside of the memory_leak_setup() and memory_leak_teardown() statements?",
  "id": "5aacdc77bb1018b37af433ce",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-03-17T09:14:31.795Z",
  "text": "Question: in testing, how important is it to have calculating the expected value outside of the memory_leak_setup() and memory_leak_teardown() statements?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "<p>Because I now have code like this:</p><pre><code class=\"python\">        <span class=\"decorator\">@self.check_with_memleak(array_reshape, generic_run)</span>\n        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">check</span><span class=\"params\">(got, pyfunc, arr, shape)</span>:</span>\n            expected = pyfunc(arr, shape)\n            self.assertPreciseEqual(got, expected)</code></pre><p>Which is neato, but it does move the definition of expected between setup and teardown</p>",
  "id": "5aacdcb05f188ccc15c66b2e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-03-17T09:15:28.940Z",
  "text": "Because I now have code like this:\n````python \n        @self.check_with_memleak(array_reshape, generic_run)\n        def check(got, pyfunc, arr, shape):\n            expected = pyfunc(arr, shape)\n            self.assertPreciseEqual(got, expected)\n````\n\nWhich is neato, but it does move the definition of expected between setup and teardown",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Also, when compiling in a testing situation, do we want to compile in a non-isolated environment at all? It saves on some time when running multiple checks on the same function with the same signature because of caching. However, I see a lot of compile_isolated in the code. Does that have any specific reason other than &quot;oh compile_isolated is proper&quot;?",
  "id": "5aace0a50a1614b7122d809c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-03-17T09:32:21.356Z",
  "text": "Also, when compiling in a testing situation, do we want to compile in a non-isolated environment at all? It saves on some time when running multiple checks on the same function with the same signature because of caching. However, I see a lot of compile_isolated in the code. Does that have any specific reason other than \"oh compile_isolated is proper\"?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 10
  },
  "html": "Hi. Does numba support list[list[int]] yet? How hard would this be to add if it isn&#39;t already there (making Numba lists accept any Numba-recognized type instead of just value types)?",
  "id": "5aae6bb55f188ccc15cc1043",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-03-18T13:37:57.043Z",
  "text": "Hi. Does numba support list[list[int]] yet? How hard would this be to add if it isn't already there (making Numba lists accept any Numba-recognized type instead of just value types)?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 10
  },
  "html": "I ran into this trying to write a radix sort in Numba.",
  "id": "5aae6bc9e4d1c6360412c654",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-03-18T13:38:17.395Z",
  "text": "I ran into this trying to write a radix sort in Numba.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/A0130280",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/13945689?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/13945689?v=4&s=60",
   "displayName": "A0130280",
   "gv": "4",
   "id": "5aaf3901d73408ce4f92039d",
   "url": "/A0130280",
   "username": "A0130280"
  },
  "html": "Hi I have a function to which I want to implement GPU programming using Numba Cuda. The issue is I dont really know how to declare the signature of the function.",
  "id": "5aaf393c458cbde5574da189",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-03-19T04:14:52.704Z",
  "text": "Hi I have a function to which I want to implement GPU programming using Numba Cuda. The issue is I dont really know how to declare the signature of the function.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/A0130280",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/13945689?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/13945689?v=4&s=60",
   "displayName": "A0130280",
   "gv": "4",
   "id": "5aaf3901d73408ce4f92039d",
   "url": "/A0130280",
   "username": "A0130280"
  },
  "html": "The function signature contains a list of str, followed by a list with multiple types, datetime, datetime, list of str , str, database,  int",
  "id": "5aaf39e76f8b4b9946414e3b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-03-19T04:17:43.501Z",
  "text": "The function signature contains a list of str, followed by a list with multiple types, datetime, datetime, list of str , str, database,  int",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/fschlimb",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1215821?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1215821?v=4&s=60",
   "displayName": "Frank Schlimbach",
   "gv": "4",
   "id": "5a8a99f7d73408ce4f8dbfb7",
   "url": "/fschlimb",
   "username": "fschlimb",
   "v": 2
  },
  "html": "Thanks <span data-link-type=\"mention\" data-screen-name=\"sklam\" class=\"mention\">@sklam</span> , I came to the same conclusion. I finally resolved it (for now) using cgutils.raw_memcpy.",
  "id": "5aaf8b05bb1018b37afe6699",
  "issues": [],
  "mentions": [
   {
    "screenName": "sklam",
    "userId": "55b689f50fc9f982beab2a24",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 18,
  "sent": "2018-03-19T10:03:49.229Z",
  "text": "Thanks @sklam , I came to the same conclusion. I finally resolved it (for now) using cgutils.raw_memcpy.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/fschlimb",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1215821?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1215821?v=4&s=60",
   "displayName": "Frank Schlimbach",
   "gv": "4",
   "id": "5a8a99f7d73408ce4f8dbfb7",
   "url": "/fschlimb",
   "username": "fschlimb",
   "v": 2
  },
  "html": "How do I get to the model so I can use &#39;load_from_data_pointer\u2019 ?",
  "id": "5aaf8b455f188ccc15d09b24",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-03-19T10:04:53.734Z",
  "text": "How do I get to the model so I can use 'load_from_data_pointer\u2019 ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"A0130280\" class=\"mention\">@A0130280</span>: What you want to do is not going to be supported in Numba.  Lists, strings, datetimes, etc are not types that work on the GPU at the moment.  NumPy arrays, tuples and numeric scalars are going to be your best bet.",
  "id": "5aafab84c3c5f8b90d8bc40f",
  "issues": [],
  "mentions": [
   {
    "screenName": "A0130280",
    "userId": "5aaf3901d73408ce4f92039d",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 18,
  "sent": "2018-03-19T12:22:28.520Z",
  "text": "@A0130280: What you want to do is not going to be supported in Numba.  Lists, strings, datetimes, etc are not types that work on the GPU at the moment.  NumPy arrays, tuples and numeric scalars are going to be your best bet.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/A0130280",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/13945689?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/13945689?v=4&s=60",
   "displayName": "A0130280",
   "gv": "4",
   "id": "5aaf3901d73408ce4f92039d",
   "url": "/A0130280",
   "username": "A0130280"
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"seibert\" class=\"mention\">@seibert</span> is there any other way to make use of the GPU in such cases?",
  "id": "5aafad2227c509a7747cbc94",
  "issues": [],
  "mentions": [
   {
    "screenName": "seibert",
    "userId": "55b68af40fc9f982beab2a3c",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 19,
  "sent": "2018-03-19T12:29:22.956Z",
  "text": "@seibert is there any other way to make use of the GPU in such cases?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "If you can translate your data into numeric types first, that will both allow Numba to work and also make it easier to write an efficient algorithm.  For example, in some use cases, strings are actually being used as tokens, and can be converted to integers, one for each unique string.  (This is what Pandas does with a categorical column.)  Datetimes can be converted to integers or floats representing time since a &quot;time zero&quot;.",
  "id": "5aafaddbe4d1c6360418246d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-03-19T12:32:27.937Z",
  "text": "If you can translate your data into numeric types first, that will both allow Numba to work and also make it easier to write an efficient algorithm.  For example, in some use cases, strings are actually being used as tokens, and can be converted to integers, one for each unique string.  (This is what Pandas does with a categorical column.)  Datetimes can be converted to integers or floats representing time since a \"time zero\".",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ehsantn",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2333645?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2333645?v=4&s=60",
   "displayName": "Ehsan Totoni",
   "gv": "4",
   "id": "56537ea416b6c7089cbbe080",
   "url": "/ehsantn",
   "username": "ehsantn",
   "v": 7
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"sklam\" class=\"mention\">@sklam</span> you mentioned we can&#39;t return tuples from C functions and only scalars are allowed. Were is this limitation coming from? what can we do about it?",
  "id": "5aafc3ab458cbde557505b47",
  "issues": [],
  "mentions": [
   {
    "screenName": "sklam",
    "userId": "55b689f50fc9f982beab2a24",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 19,
  "sent": "2018-03-19T14:05:31.975Z",
  "text": "@sklam you mentioned we can't return tuples from C functions and only scalars are allowed. Were is this limitation coming from? what can we do about it?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"ehsantn\" class=\"mention\">@ehsantn</span> , scalars and pointers to aggregates are allowed.  This is coming from difficulty in dealing with the callconv ABI.  LLVM does not handle callconv ABI.  (The VM part is not true in this aspect).",
  "id": "5aafd47527c509a7747da014",
  "issues": [],
  "mentions": [
   {
    "screenName": "ehsantn",
    "userId": "56537ea416b6c7089cbbe080",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 18,
  "sent": "2018-03-19T15:17:09.685Z",
  "text": "@ehsantn , scalars and pointers to aggregates are allowed.  This is coming from difficulty in dealing with the callconv ABI.  LLVM does not handle callconv ABI.  (The VM part is not true in this aspect).",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "<p><span data-link-type=\"mention\" data-screen-name=\"fschlimb\" class=\"mention\">@fschlimb</span> </p><blockquote>\n<p>How do I get to the model so I can use &#39;load_from_data_pointer\u2019 ?</p></blockquote>\n<p>The target context (the \u201ccontext\u201d in lowering) has a <code>.data_model_manager</code>.  You can get the model for <code>type</code> by <code>context.data_model_manager[type]</code></p>",
  "id": "5aafd510fa066c5325497236",
  "issues": [],
  "mentions": [
   {
    "screenName": "fschlimb",
    "userId": "5a8a99f7d73408ce4f8dbfb7",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 18,
  "sent": "2018-03-19T15:19:44.505Z",
  "text": "@fschlimb \n> How do I get to the model so I can use 'load_from_data_pointer\u2019 ?\n\nThe target context (the \u201ccontext\u201d in lowering) has a `.data_model_manager`.  You can get the model for `type` by `context.data_model_manager[type]`",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "<p><span data-link-type=\"mention\" data-screen-name=\"Rik-de-Kort\" class=\"mention\">@Rik-de-Kort</span> </p><blockquote>\n<p>in testing, how important is it to have calculating the expected value outside of the memory_leak_setup() and memory_leak_teardown() statements?</p></blockquote>\n<p>Not important in most cases. You can just include the code being tested between the setup/teardown.  </p>",
  "id": "5aafd60ec3c5f8b90d8cc87b",
  "issues": [],
  "mentions": [
   {
    "screenName": "Rik-de-Kort",
    "userId": "5a0ea31cd73408ce4f7f000d",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 18,
  "sent": "2018-03-19T15:23:58.051Z",
  "text": "@Rik-de-Kort \n> in testing, how important is it to have calculating the expected value outside of the memory_leak_setup() and memory_leak_teardown() statements?\n\nNot important in most cases. You can just include the code being tested between the setup/teardown.  \n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "<p><span data-link-type=\"mention\" data-screen-name=\"Rik-de-Kort\" class=\"mention\">@Rik-de-Kort</span> </p><blockquote>\n<p>do we want to compile in a non-isolated environment at all?</p></blockquote>\n<p>Sometimes, that are many tests that just use <code>numba.jit</code> for convenience and also for features that are not enabled in <code>compile_isolated</code>.  The <code>compile_isolated</code> runs everything in isolation so that it won\u2019t pollute the global context. </p><p>There\u2019s also a <code>CompilationCache</code> in <code>numba/tests/support.py</code> if you need to cache the compiled functions but keep the entire cache in a single isolated context.</p>",
  "id": "5aafdeb3fa066c532549ad7b",
  "issues": [],
  "mentions": [
   {
    "screenName": "Rik-de-Kort",
    "userId": "5a0ea31cd73408ce4f7f000d",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 18,
  "sent": "2018-03-19T16:00:51.065Z",
  "text": "@Rik-de-Kort \n> do we want to compile in a non-isolated environment at all?\n\nSometimes, that are many tests that just use `numba.jit` for convenience and also for features that are not enabled in `compile_isolated`.  The `compile_isolated` runs everything in isolation so that it won\u2019t pollute the global context. \n\nThere\u2019s also a `CompilationCache` in `numba/tests/support.py` if you need to cache the compiled functions but keep the entire cache in a single isolated context.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/mrocklin",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/306380?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/306380?v=4&s=60",
   "displayName": "Matthew Rocklin",
   "gv": "4",
   "id": "530c03e25e986b0712efafb8",
   "url": "/mrocklin",
   "username": "mrocklin",
   "v": 17
  },
  "html": "<p>Hi Numba folks.  Just as an FYI it looks like the pydata/sparse project has decided to depend on Numba for low-level numeric code.  I suspect that we&#39;ll run into some growing pains and be bugging you from time to time.  Hope you don&#39;t mind!  </p><p>I&#39;m looking forward to using Numba more for work :)  <span data-link-type=\"issue\" data-issue=\"126\" data-issue-repo=\"pydata/sparse\" class=\"issue\">pydata/sparse#126</span></p>",
  "id": "5aafe58835dd17022e78b937",
  "issues": [
   {
    "number": "126",
    "repo": "pydata/sparse"
   }
  ],
  "mentions": [],
  "meta": [],
  "readBy": 20,
  "sent": "2018-03-19T16:30:00.451Z",
  "text": "Hi Numba folks.  Just as an FYI it looks like the pydata/sparse project has decided to depend on Numba for low-level numeric code.  I suspect that we'll run into some growing pains and be bugging you from time to time.  Hope you don't mind!  \n\nI'm looking forward to using Numba more for work :)  https://github.com/pydata/sparse/issues/126",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ehsantn",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2333645?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2333645?v=4&s=60",
   "displayName": "Ehsan Totoni",
   "gv": "4",
   "id": "56537ea416b6c7089cbbe080",
   "url": "/ehsantn",
   "username": "ehsantn",
   "v": 7
  },
  "html": "Thanks <span data-link-type=\"mention\" data-screen-name=\"sklam\" class=\"mention\">@sklam</span> we can work around this limitation for now but maybe we can think about potential solutions.",
  "id": "5aafe7366f8b4b994644f98b",
  "issues": [],
  "mentions": [
   {
    "screenName": "sklam",
    "userId": "55b689f50fc9f982beab2a24",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 20,
  "sent": "2018-03-19T16:37:10.517Z",
  "text": "Thanks @sklam we can work around this limitation for now but maybe we can think about potential solutions.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/jpivarski",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/1852447?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/1852447?v=4&s=60",
   "displayName": "Jim Pivarski",
   "gv": "4",
   "id": "5a4e9793d73408ce4f862a26",
   "url": "/jpivarski",
   "username": "jpivarski",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"teoliphant\" class=\"mention\">@teoliphant</span> (I missed your message because I was subscribed to too many things in Gitter.) The plures project looks great! I wonder if we might find some complementarity there: ndtypes describes data, xnd manages it, and oamap performs calculations on it\u2014 or oamap merges with the project you&#39;re working on to do code-generation with Numba. The two things I would be missing for our use-case in high energy physics are arbitrary depth ragged arrays (available in Arrow) the ability to express bounded pointers (not available in Arrow). I wonder if I could talk with you and/or Stefan Krah about the direction of plures/xnd? My e-mail is pivarski at princeton.edu.",
  "id": "5aaff6afe4d1c6360419db98",
  "issues": [],
  "mentions": [
   {
    "screenName": "teoliphant",
    "userId": "54185f0c163965c9bc204e58",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 21,
  "sent": "2018-03-19T17:43:11.634Z",
  "text": "@teoliphant (I missed your message because I was subscribed to too many things in Gitter.) The plures project looks great! I wonder if we might find some complementarity there: ndtypes describes data, xnd manages it, and oamap performs calculations on it\u2014 or oamap merges with the project you're working on to do code-generation with Numba. The two things I would be missing for our use-case in high energy physics are arbitrary depth ragged arrays (available in Arrow) the ability to express bounded pointers (not available in Arrow). I wonder if I could talk with you and/or Stefan Krah about the direction of plures/xnd? My e-mail is pivarski at princeton.edu.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"mrocklin\" class=\"mention\">@mrocklin</span>: Good to hear, and please do let us know what issues you run into.",
  "id": "5aaff7b06f8b4b9946455793",
  "issues": [],
  "mentions": [
   {
    "screenName": "mrocklin",
    "userId": "530c03e25e986b0712efafb8",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 22,
  "sent": "2018-03-19T17:47:28.233Z",
  "text": "@mrocklin: Good to hear, and please do let us know what issues you run into.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/mrocklin",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/306380?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/306380?v=4&s=60",
   "displayName": "Matthew Rocklin",
   "gv": "4",
   "id": "530c03e25e986b0712efafb8",
   "url": "/mrocklin",
   "username": "mrocklin",
   "v": 17
  },
  "html": "I think that <span data-link-type=\"mention\" data-screen-name=\"hameerabbasi\" class=\"mention\">@hameerabbasi</span> has already raised something on the numba mailing list (he seems to be the most active developer on that project at the moment)",
  "id": "5aaff7d35f188ccc15d316f7",
  "issues": [],
  "mentions": [
   {
    "screenName": "hameerabbasi",
    "userId": "55b089c90fc9f982beaaa526",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 23,
  "sent": "2018-03-19T17:48:03.713Z",
  "text": "I think that @hameerabbasi has already raised something on the numba mailing list (he seems to be the most active developer on that project at the moment)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/fschlimb",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1215821?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1215821?v=4&s=60",
   "displayName": "Frank Schlimbach",
   "gv": "4",
   "id": "5a8a99f7d73408ce4f8dbfb7",
   "url": "/fschlimb",
   "username": "fschlimb",
   "v": 2
  },
  "html": "I am writing a @<span data-link-type=\"mention\" data-screen-name=\"overload_method\" class=\"mention\">@overload_method</span> for one of my numba-types. It seems to require <span data-link-type=\"mention\" data-screen-name=\"unbox\" class=\"mention\">@unbox</span> and <span data-link-type=\"mention\" data-screen-name=\"box\" class=\"mention\">@box</span>? I would expect they are not needed as it&#39;s used only in nopython mode. Can anyone tell me why? ",
  "id": "5ab26d56a60157d62f11f1bc",
  "issues": [],
  "mentions": [
   {
    "screenName": "overload_method",
    "userIds": []
   },
   {
    "screenName": "unbox",
    "userIds": []
   },
   {
    "screenName": "box",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 21,
  "sent": "2018-03-21T14:33:58.512Z",
  "text": "I am writing a @@overload_method for one of my numba-types. It seems to require @unbox and @box? I would expect they are not needed as it's used only in nopython mode. Can anyone tell me why? ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"fschlimb\" class=\"mention\">@fschlimb</span>, can you pull master branch and retry?  Part of <span data-link-type=\"issue\" data-issue=\"2801\" data-issue-repo=\"numba/numba\" class=\"issue\">numba/numba#2801</span> is to make it unnecessary for nopython-only types to have <span data-link-type=\"mention\" data-screen-name=\"unbox\" class=\"mention\">@unbox</span> and <span data-link-type=\"mention\" data-screen-name=\"box\" class=\"mention\">@box</span>",
  "id": "5ab26e01e4ff28713a5a712b",
  "issues": [
   {
    "number": "2801",
    "repo": "numba/numba"
   }
  ],
  "mentions": [
   {
    "screenName": "fschlimb",
    "userId": "5a8a99f7d73408ce4f8dbfb7",
    "userIds": []
   },
   {
    "screenName": "unbox",
    "userIds": []
   },
   {
    "screenName": "box",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 23,
  "sent": "2018-03-21T14:36:49.546Z",
  "text": "@fschlimb, can you pull master branch and retry?  Part of https://github.com/numba/numba/pull/2801 is to make it unnecessary for nopython-only types to have @unbox and @box",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/fschlimb",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1215821?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1215821?v=4&s=60",
   "displayName": "Frank Schlimbach",
   "gv": "4",
   "id": "5a8a99f7d73408ce4f8dbfb7",
   "url": "/fschlimb",
   "username": "fschlimb",
   "v": 2
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"sklam\" class=\"mention\">@sklam</span> Thanks, I will try. <span data-link-type=\"mention\" data-screen-name=\"ehsantn\" class=\"mention\">@ehsantn</span>: Do you already have a fresh numba with your modifications?",
  "id": "5ab26f3ebb1018b37a0ce559",
  "issues": [],
  "mentions": [
   {
    "screenName": "sklam",
    "userId": "55b689f50fc9f982beab2a24",
    "userIds": []
   },
   {
    "screenName": "ehsantn",
    "userId": "56537ea416b6c7089cbbe080",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 23,
  "sent": "2018-03-21T14:42:06.850Z",
  "text": "@sklam Thanks, I will try. @ehsantn: Do you already have a fresh numba with your modifications?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ehsantn",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2333645?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2333645?v=4&s=60",
   "displayName": "Ehsan Totoni",
   "gv": "4",
   "id": "56537ea416b6c7089cbbe080",
   "url": "/ehsantn",
   "username": "ehsantn",
   "v": 7
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"fschlimb\" class=\"mention\">@fschlimb</span> no. I suggest merging this PR individually for now. My branch needs more work with the recent changes",
  "id": "5ab26fa3e4ff28713a5a7b17",
  "issues": [],
  "mentions": [
   {
    "screenName": "fschlimb",
    "userId": "5a8a99f7d73408ce4f8dbfb7",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 23,
  "sent": "2018-03-21T14:43:47.143Z",
  "text": "@fschlimb no. I suggest merging this PR individually for now. My branch needs more work with the recent changes",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/fschlimb",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1215821?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1215821?v=4&s=60",
   "displayName": "Frank Schlimbach",
   "gv": "4",
   "id": "5a8a99f7d73408ce4f8dbfb7",
   "url": "/fschlimb",
   "username": "fschlimb",
   "v": 2
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"sklam\" class=\"mention\">@sklam</span> Solved it! Thanks!",
  "id": "5ab38229f3f6d24c68a29e42",
  "issues": [],
  "mentions": [
   {
    "screenName": "sklam",
    "userId": "55b689f50fc9f982beab2a24",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 22,
  "sent": "2018-03-22T10:15:05.197Z",
  "text": "@sklam Solved it! Thanks!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Lomelgande",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/8880982?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/8880982?v=4&s=60",
   "displayName": "Lomelgande",
   "gv": "4",
   "id": "5ab3f0f2d73408ce4f92b317",
   "url": "/Lomelgande",
   "username": "Lomelgande",
   "v": 2
  },
  "html": "Does anyone have a working example of constant memory? I",
  "id": "5ab3f130fa066c53255dc91e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 24,
  "sent": "2018-03-22T18:08:48.809Z",
  "text": "Does anyone have a working example of constant memory? I",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Lomelgande",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/8880982?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/8880982?v=4&s=60",
   "displayName": "Lomelgande",
   "gv": "4",
   "id": "5ab3f0f2d73408ce4f92b317",
   "url": "/Lomelgande",
   "username": "Lomelgande",
   "v": 2
  },
  "html": "I&#39;ve tried using cuda.const.array_like() within the kernel but I am met with an numba.errors.ConstantInferenceError error",
  "id": "5ab3f156e3d0b1ff2c580cf8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 24,
  "sent": "2018-03-22T18:09:26.123Z",
  "text": "I've tried using cuda.const.array_like() within the kernel but I am met with an numba.errors.ConstantInferenceError error",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"Lomelgande\" class=\"mention\">@Lomelgande</span>, there are some examples in the test: <a href=\"https://github.com/numba/numba/blob/master/numba/cuda/tests/cudapy/test_constmem.py#L16-L19\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://github.com/numba/numba/blob/master/numba/cuda/tests/cudapy/test_constmem.py#L16-L19</a>",
  "id": "5ab3f1b5458cbde557653cbd",
  "issues": [],
  "mentions": [
   {
    "screenName": "Lomelgande",
    "userId": "5ab3f0f2d73408ce4f92b317",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 24,
  "sent": "2018-03-22T18:11:01.372Z",
  "text": "@Lomelgande, there are some examples in the test: https://github.com/numba/numba/blob/master/numba/cuda/tests/cudapy/test_constmem.py#L16-L19",
  "unread": false,
  "urls": [
   {
    "url": "https://github.com/numba/numba/blob/master/numba/cuda/tests/cudapy/test_constmem.py#L16-L19"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Lomelgande",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/8880982?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/8880982?v=4&s=60",
   "displayName": "Lomelgande",
   "gv": "4",
   "id": "5ab3f0f2d73408ce4f92b317",
   "url": "/Lomelgande",
   "username": "Lomelgande",
   "v": 2
  },
  "html": "Perfect, Thank you",
  "id": "5ab3f1c5c3c5f8b90da16cd5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 24,
  "sent": "2018-03-22T18:11:17.478Z",
  "text": "Perfect, Thank you",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Doesn&#39;t <span data-link-type=\"issue\" data-issue=\"2822\" class=\"issue\">#2822</span> close <span data-link-type=\"issue\" data-issue=\"2776\" class=\"issue\">#2776</span>?",
  "id": "5ab4dd94c3c5f8b90da556f2",
  "issues": [
   {
    "number": "2822"
   },
   {
    "number": "2776"
   }
  ],
  "mentions": [],
  "meta": [],
  "readBy": 21,
  "sent": "2018-03-23T10:57:24.607Z",
  "text": "Doesn't #2822 close #2776?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "yep, thanks, no magic comment in the commit message to autoclose, I&#39;ve closed it now.",
  "id": "5ab4e456c3c5f8b90da57a7d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 21,
  "sent": "2018-03-23T11:26:14.046Z",
  "text": "yep, thanks, no magic comment in the commit message to autoclose, I've closed it now.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-03-25T00:04:12.776Z",
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/jllanfranchi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6414943?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6414943?v=4&s=60",
   "displayName": "J. L. Lanfranchi",
   "gv": "4",
   "id": "5aa7320ed73408ce4f9115a7",
   "url": "/jllanfranchi",
   "username": "jllanfranchi",
   "v": 14
  },
  "html": "",
  "id": "5ab6e66e35dd17022e9877a7",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-03-24T23:59:42.457Z",
  "text": "",
  "unread": false,
  "urls": [],
  "v": 4
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/jllanfranchi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6414943?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6414943?v=4&s=60",
   "displayName": "J. L. Lanfranchi",
   "gv": "4",
   "id": "5aa7320ed73408ce4f9115a7",
   "url": "/jllanfranchi",
   "username": "jllanfranchi",
   "v": 14
  },
  "html": "<p>Hi, I want to use a bunch of numpy arrays of different lengths from within Numba. I was thinking one solution would be to pass to a nopython function a numpy array containing pointers to the arrays and an second numpy array containing the lengths pointed-to arrays.  Then within the nopython function, I could use carray to be able to use the pointed-to arrays from within that function. But it seems I cannot do this, at least without converting the int64 dtype to a &quot;pointer argument&quot;:</p><pre><code class=\"python\"><span class=\"decorator\">@numba.jit(nopython=True, nogil=True)</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span><span class=\"params\">(mloc, length)</span>:</span>\n    ha = numba.carray(mloc, shape=length, dtype=np.float32)\n\nary = np.array([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>], dtype=np.float32)\nmloc = np.uint64(ary.ctypes.data)\n\ntest(mloc, ary.size)</code></pre><pre><code>Failed at nopython (nopython frontend)\nInvalid usage <span class=\"keyword\">of</span> <span class=\"function\"><span class=\"keyword\">Function</span><span class=\"params\">(&lt;unbound method Template.carray&gt;)</span> <span class=\"title\">with</span> <span class=\"title\">parameters</span> <span class=\"params\">(int64, dtype=<span class=\"keyword\">class</span>(float32)</span>, <span class=\"title\">shape</span>=<span class=\"title\">int64</span>)\n * <span class=\"title\">parameterized</span>\n<span class=\"title\">In</span> <span class=\"title\">definition</span> 0:</span>\n    TypeError: carray(): pointer argument expected, got <span class=\"string\">'int64'</span>\n[<span class=\"number\">1</span>] During: resolving callee <span class=\"keyword\">type</span>: <span class=\"function\"><span class=\"keyword\">Function</span><span class=\"params\">(&lt;unbound method Template.carray&gt;)</span>\n[2] <span class=\"title\">During</span>:</span> typing <span class=\"keyword\">of</span> call at &lt;ipython-input-<span class=\"number\">76</span>-<span class=\"number\">22</span>d12b4f2f1b&gt; (<span class=\"number\">6</span>)</code></pre><p>So if there&#39;s a way to convert an int (or uint, or whatever) to a pointer type, that would solve my problem. Of course there might be a completely different way to achieve what I&#39;m after, too, which I&#39;d be happy to hear about...</p>",
  "id": "5ab6e7985f188ccc15f26adc",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-03-25T00:04:40.078Z",
  "text": "Hi, I want to use a bunch of numpy arrays of different lengths from within Numba. I was thinking one solution would be to pass to a nopython function a numpy array containing pointers to the arrays and an second numpy array containing the lengths pointed-to arrays.  Then within the nopython function, I could use carray to be able to use the pointed-to arrays from within that function. But it seems I cannot do this, at least without converting the int64 dtype to a \"pointer argument\":\n```python\n@numba.jit(nopython=True, nogil=True)\ndef test(mloc, length):\n    ha = numba.carray(mloc, shape=length, dtype=np.float32)\n\nary = np.array([0, 1, 2], dtype=np.float32)\nmloc = np.uint64(ary.ctypes.data)\n\ntest(mloc, ary.size)```\n```\nFailed at nopython (nopython frontend)\nInvalid usage of Function(<unbound method Template.carray>) with parameters (int64, dtype=class(float32), shape=int64)\n * parameterized\nIn definition 0:\n    TypeError: carray(): pointer argument expected, got 'int64'\n[1] During: resolving callee type: Function(<unbound method Template.carray>)\n[2] During: typing of call at <ipython-input-76-22d12b4f2f1b> (6)\n```\nSo if there's a way to convert an int (or uint, or whatever) to a pointer type, that would solve my problem. Of course there might be a completely different way to achieve what I'm after, too, which I'd be happy to hear about...",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 10
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"jllanfranchi\" class=\"mention\">@jllanfranchi</span> Numba can directly accelerate Python Lists, but the particular feature you&#39;re looking for currently has a milestone of Numba 0.38 (see issue <span data-link-type=\"issue\" data-issue=\"2560\" class=\"issue\">#2560</span>)",
  "id": "5ab7a656c3c5f8b90db0133d",
  "issues": [
   {
    "number": "2560"
   }
  ],
  "mentions": [
   {
    "screenName": "jllanfranchi",
    "userId": "5aa7320ed73408ce4f9115a7",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 21,
  "sent": "2018-03-25T13:38:30.840Z",
  "text": "@jllanfranchi Numba can directly accelerate Python Lists, but the particular feature you're looking for currently has a milestone of Numba 0.38 (see issue #2560)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/jllanfranchi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6414943?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6414943?v=4&s=60",
   "displayName": "J. L. Lanfranchi",
   "gv": "4",
   "id": "5aa7320ed73408ce4f9115a7",
   "url": "/jllanfranchi",
   "username": "jllanfranchi",
   "v": 14
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"hameerabbasi\" class=\"mention\">@hameerabbasi</span> I don&#39;t understand what you&#39;re saying when you say that numba can accelerate Python lists (or at least the relevance to my goal). Note that one alternative I tried that already is supported is a tuple containing Numpy arrays (I don&#39;t care if it&#39;s a list or a tuple of the arrays or pointers to them), but I&#39;m sending in thousands of arrays, and this is insanely slow (or outright breaks) the numba typing validation / dispatching mechanism. Is the typing / dispatching overhead going to be the same when lists of Numpy arrays are supported, where it has to go through and type every single item in the list? If so, this is worthless for my application. (Note that I want some of the arrays to have structured dtypes, so this might make the overhead slower than otherwise... but the overhead should be a constant whether I send in 10 or 1000 arrays, and whether or not they are struct dtypes.)",
  "id": "5ab7b700e3d0b1ff2c66bc64",
  "issues": [],
  "mentions": [
   {
    "screenName": "hameerabbasi",
    "userId": "55b089c90fc9f982beaaa526",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 21,
  "sent": "2018-03-25T14:49:36.301Z",
  "text": "@hameerabbasi I don't understand what you're saying when you say that numba can accelerate Python lists (or at least the relevance to my goal). Note that one alternative I tried that already is supported is a tuple containing Numpy arrays (I don't care if it's a list or a tuple of the arrays or pointers to them), but I'm sending in thousands of arrays, and this is insanely slow (or outright breaks) the numba typing validation / dispatching mechanism. Is the typing / dispatching overhead going to be the same when lists of Numpy arrays are supported, where it has to go through and type every single item in the list? If so, this is worthless for my application. (Note that I want some of the arrays to have structured dtypes, so this might make the overhead slower than otherwise... but the overhead should be a constant whether I send in 10 or 1000 arrays, and whether or not they are struct dtypes.)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-03-25T15:00:12.307Z",
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/jllanfranchi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6414943?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6414943?v=4&s=60",
   "displayName": "J. L. Lanfranchi",
   "gv": "4",
   "id": "5aa7320ed73408ce4f9115a7",
   "url": "/jllanfranchi",
   "username": "jllanfranchi",
   "v": 14
  },
  "html": "Ah, it appears tuples are passed by value, and also an open issue: <span data-link-type=\"issue\" data-issue=\"2195\" data-issue-repo=\"numba/numba\" class=\"issue\">numba/numba#2195</span> so presumably / hopefully (?) the list-of-arrays will in fact be fundamentally different (and hence much faster) than tuples.",
  "id": "5ab7b8fec574b1aa3e2ed306",
  "issues": [
   {
    "number": "2195",
    "repo": "numba/numba"
   }
  ],
  "mentions": [],
  "meta": [],
  "readBy": 21,
  "sent": "2018-03-25T14:58:06.422Z",
  "text": "Ah, it appears tuples are passed by value, and also an open issue: https://github.com/numba/numba/issues/2195 so presumably / hopefully (?) the list-of-arrays will in fact be fundamentally different (and hence much faster) than tuples.",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/jllanfranchi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6414943?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6414943?v=4&s=60",
   "displayName": "J. L. Lanfranchi",
   "gv": "4",
   "id": "5aa7320ed73408ce4f9115a7",
   "url": "/jllanfranchi",
   "username": "jllanfranchi",
   "v": 14
  },
  "html": "Another tack that might solve my problem is if there a way to avoid the type checking / dispatching call overhead. Does anyone know if this is possible? E.g. does using numba.pycc reduce the overhead? (Note that a colleague tried extracting the appropriate jit-compiled function and calling that, but this did not speed up the process. And pycc is throwing exceptions right now not finding the math library, so I&#39;d rather know in advance if it even matters before I go down this rabbit hole.)",
  "id": "5ab7be5bc3c5f8b90db07514",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 21,
  "sent": "2018-03-25T15:20:59.241Z",
  "text": "Another tack that might solve my problem is if there a way to avoid the type checking / dispatching call overhead. Does anyone know if this is possible? E.g. does using numba.pycc reduce the overhead? (Note that a colleague tried extracting the appropriate jit-compiled function and calling that, but this did not speed up the process. And pycc is throwing exceptions right now not finding the math library, so I'd rather know in advance if it even matters before I go down this rabbit hole.)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 10
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"jllanfranchi\" class=\"mention\">@jllanfranchi</span> I think the issue you&#39;re running into is that for every combination of types in a tuple, it&#39;s a &quot;different and new&quot; value type in Numba, triggering auto-compilation again.",
  "id": "5ab7cf47fa066c53256cd007",
  "issues": [],
  "mentions": [
   {
    "screenName": "jllanfranchi",
    "userId": "5aa7320ed73408ce4f9115a7",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 21,
  "sent": "2018-03-25T16:33:11.036Z",
  "text": "@jllanfranchi I think the issue you're running into is that for every combination of types in a tuple, it's a \"different and new\" value type in Numba, triggering auto-compilation again.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 10
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"jllanfranchi\" class=\"mention\">@jllanfranchi</span> Tuples of different lengths and types won&#39;t fit into that.",
  "id": "5ab7cf61e4ff28713a71146f",
  "issues": [],
  "mentions": [
   {
    "screenName": "jllanfranchi",
    "userId": "5aa7320ed73408ce4f9115a7",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 21,
  "sent": "2018-03-25T16:33:37.057Z",
  "text": "@jllanfranchi Tuples of different lengths and types won't fit into that.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 10
  },
  "html": "If they&#39;re not all the same length and type, it&#39;ll go into object mode that isn&#39;t much faster than raw Python. IMO the best way to do what you want right now is Cython + <code>std::vector</code> or a simple array.",
  "id": "5ab7cfb2458cbde557745994",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 21,
  "sent": "2018-03-25T16:34:58.614Z",
  "text": "If they're not all the same length and type, it'll go into object mode that isn't much faster than raw Python. IMO the best way to do what you want right now is Cython + `std::vector` or a simple array.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/jllanfranchi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6414943?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6414943?v=4&s=60",
   "displayName": "J. L. Lanfranchi",
   "gv": "4",
   "id": "5aa7320ed73408ce4f9115a7",
   "url": "/jllanfranchi",
   "username": "jllanfranchi",
   "v": 14
  },
  "html": "Thanks for the tip <span data-link-type=\"mention\" data-screen-name=\"hameerabbasi\" class=\"mention\">@hameerabbasi</span>, will look into implementing as such.",
  "id": "5ab7f48b27c509a774a15529",
  "issues": [],
  "mentions": [
   {
    "screenName": "hameerabbasi",
    "userId": "55b089c90fc9f982beaaa526",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 23,
  "sent": "2018-03-25T19:12:11.578Z",
  "text": "Thanks for the tip @hameerabbasi, will look into implementing as such.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "For <span data-link-type=\"issue\" data-issue=\"2839\" class=\"issue\">#2839</span>, Travis CI builds fail, even though I only added a single line to the documentation. Looks like it&#39;s looking for an implementation, but not finding it because I used the high level extending module?",
  "id": "5abde127458cbde5578fdad3",
  "issues": [
   {
    "number": "2839"
   }
  ],
  "mentions": [],
  "meta": [],
  "readBy": 21,
  "sent": "2018-03-30T07:03:03.177Z",
  "text": "For #2839, Travis CI builds fail, even though I only added a single line to the documentation. Looks like it's looking for an implementation, but not finding it because I used the high level extending module?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"Rik-de-Kort\" class=\"mention\">@Rik-de-Kort</span> it&#39;s not you or your PR, don&#39;t worry.",
  "id": "5abdf383e4ff28713a8caea0",
  "issues": [],
  "mentions": [
   {
    "screenName": "Rik-de-Kort",
    "userId": "5a0ea31cd73408ce4f7f000d",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 21,
  "sent": "2018-03-30T08:21:23.689Z",
  "text": "@Rik-de-Kort it's not you or your PR, don't worry.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "I never do :P",
  "id": "5abdf394bb1018b37a3eb934",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 21,
  "sent": "2018-03-30T08:21:40.306Z",
  "text": "I never do :P",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "Long story short, there are issues with the move to LLVM 6 and more engineers have had to jump in to look as it is compiler toolchain related. To save everyone having to compile their own LLVM stack (takes ages) we made the decision to push a llvmlite based on LLVM6 to the channel so that more people can debug. Unfortunately it means CI build will pick it up and complain about the alterations I made to the code model selection, but hopefully it&#39;s short lived pain as we hope to have a fix soon. Thanks for your (and everyone&#39;s) patience whilst we are working on this!",
  "id": "5abdf495c574b1aa3e4b1fed",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 21,
  "sent": "2018-03-30T08:25:57.210Z",
  "text": "Long story short, there are issues with the move to LLVM 6 and more engineers have had to jump in to look as it is compiler toolchain related. To save everyone having to compile their own LLVM stack (takes ages) we made the decision to push a llvmlite based on LLVM6 to the channel so that more people can debug. Unfortunately it means CI build will pick it up and complain about the alterations I made to the code model selection, but hopefully it's short lived pain as we hope to have a fix soon. Thanks for your (and everyone's) patience whilst we are working on this!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Np",
  "id": "5abdf4b12b9dfdbc3a39fa1f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 21,
  "sent": "2018-03-30T08:26:25.878Z",
  "text": "Np",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-04-03T03:44:07.370Z",
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/ethen8181",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/12273134?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/12273134?v=4&s=60",
   "displayName": "Ethen",
   "gv": "4",
   "id": "5abafee7d73408ce4f936b14",
   "url": "/ethen8181",
   "username": "ethen8181"
  },
  "html": "<p>Hi team, was looking through the documentation of numba and saw that it mentioned <strong>the generator is not thread-safe when releasing the GIL</strong>. Thus was wondering what&#39;s the best approach to use the generator when releasing the GIL. i.e. </p><pre><code class=\"python\"><span class=\"comment\"># it is possible to do this, or this is bad and this can result in strange behaviors?</span>\nnp.random.seed(random_state)\n<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> prange(<span class=\"number\">100</span>):\n    random_example = np.random.choice(<span class=\"number\">10</span>)</code></pre><p>Thanks</p>",
  "id": "5ac2f85ac4d0ae80072c4a31",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-04-03T03:43:22.504Z",
  "text": "Hi team, was looking through the documentation of numba and saw that it mentioned **the generator is not thread-safe when releasing the GIL**. Thus was wondering what's the best approach to use the generator when releasing the GIL. i.e. \n\n```python\n# it is possible to do this, or this is bad and this can result in strange behaviors?\nnp.random.seed(random_state)\nfor i in prange(100):\n    random_example = np.random.choice(10)\n```\nThanks",
  "unread": false,
  "urls": [],
  "v": 3
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"ethen8181\" class=\"mention\">@ethen8181</span> , that non-thread-safe comment is outdated.  <span data-link-type=\"issue\" data-issue=\"2048\" class=\"issue\">#2048</span> has made the RNG thread-safe and fork-safe.",
  "id": "5ac3d8687c3a01610da45be9",
  "issues": [
   {
    "number": "2048"
   }
  ],
  "mentions": [
   {
    "screenName": "ethen8181",
    "userId": "5abafee7d73408ce4f936b14",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 17,
  "sent": "2018-04-03T19:39:20.604Z",
  "text": "@ethen8181 , that non-thread-safe comment is outdated.  #2048 has made the RNG thread-safe and fork-safe.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/jllanfranchi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6414943?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6414943?v=4&s=60",
   "displayName": "J. L. Lanfranchi",
   "gv": "4",
   "id": "5aa7320ed73408ce4f9115a7",
   "url": "/jllanfranchi",
   "username": "jllanfranchi",
   "v": 14
  },
  "html": "What is the theoretical overhead for calling an njit function from within another njit function? Is there any dynamic dispatch / types computation performed each time the inner call occurs (new arguments but same argument types)? Is there extra overhead whenever the &quot;outer&quot; function is called (again, new arguments but same argument types)?",
  "id": "5ac3fdfe5f188ccc15294a90",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-04-03T22:19:42.157Z",
  "text": "What is the theoretical overhead for calling an njit function from within another njit function? Is there any dynamic dispatch / types computation performed each time the inner call occurs (new arguments but same argument types)? Is there extra overhead whenever the \"outer\" function is called (again, new arguments but same argument types)?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "IIRC everything is typed ahead of time and it&#39;s fairly common for functions to just be inlined by llvm",
  "id": "5ac3ff3fe4ff28713aa4e8a4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-04-03T22:25:03.124Z",
  "text": "IIRC everything is typed ahead of time and it's fairly common for functions to just be inlined by llvm",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"jllanfranchi\" class=\"mention\">@jllanfranchi</span> ^",
  "id": "5ac3ff5e7c3a01610da51324",
  "issues": [],
  "mentions": [
   {
    "screenName": "jllanfranchi",
    "userId": "5aa7320ed73408ce4f9115a7",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 18,
  "sent": "2018-04-03T22:25:34.602Z",
  "text": "@jllanfranchi ^",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/jllanfranchi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6414943?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6414943?v=4&s=60",
   "displayName": "J. L. Lanfranchi",
   "gv": "4",
   "id": "5aa7320ed73408ce4f9115a7",
   "url": "/jllanfranchi",
   "username": "jllanfranchi",
   "v": 14
  },
  "html": "Thanks for the info, <span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span>.",
  "id": "5ac3ff83c4d0ae800731831e",
  "issues": [],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 18,
  "sent": "2018-04-03T22:26:11.403Z",
  "text": "Thanks for the info, @stuartarchibald.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "<pre><code><span class=\"keyword\">from</span> numba <span class=\"keyword\">import</span> njit\n<span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np\n\n<span class=\"decorator\">@njit</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">(x)</span>:</span>\n    <span class=\"keyword\">return</span> x + <span class=\"number\">10</span>\n\n<span class=\"decorator\">@njit</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bar</span><span class=\"params\">(x)</span>:</span>\n    <span class=\"keyword\">return</span> np.cos(foo(x)), foo(int(x))\n\nt = bar(<span class=\"number\">10.</span>)\nprint(bar.inspect_asm(bar.signatures[<span class=\"number\">0</span>]))</code></pre>",
  "id": "5ac3ffbe27c509a774d46563",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-04-03T22:27:10.803Z",
  "text": "```\nfrom numba import njit\nimport numpy as np\n\n@njit\ndef foo(x):\n    return x + 10\n\n@njit\ndef bar(x):\n    return np.cos(foo(x)), foo(int(x))\n\nt = bar(10.)\nprint(bar.inspect_asm(bar.signatures[0]))\n```\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-04-03T22:28:10.174Z",
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "<pre><code>.LCPI0_<span class=\"number\">0</span>:\n        .quad   <span class=\"number\">4621819117588971520</span>\n        .text\n        .globl  _ZN8__main__7bar<span class=\"variable\">$2</span>41Ed\n        .p2align        <span class=\"number\">4</span>, <span class=\"number\">0x90</span>\n        .type   _ZN8__main__7bar<span class=\"variable\">$2</span>41Ed,<span class=\"variable\">@function</span>\n_ZN8__main__7bar<span class=\"variable\">$2</span>41Ed:\n        pushq   <span class=\"variable\">%rbx</span>\n        subq    <span class=\"variable\">$1</span>6, <span class=\"variable\">%rsp</span>\n        movapd  <span class=\"variable\">%xmm0</span>, <span class=\"variable\">%xmm1</span>\n        movsd   <span class=\"variable\">%xmm1</span>, <span class=\"number\">8</span>(<span class=\"variable\">%rsp</span>)\n        movq    <span class=\"variable\">%rdi</span>, <span class=\"variable\">%rbx</span>\n        movabsq <span class=\"variable\">$.</span>LCPI0_<span class=\"number\">0</span>, <span class=\"variable\">%rax</span>\n        movsd   (<span class=\"variable\">%rax</span>), <span class=\"variable\">%xmm0</span>\n        addsd   <span class=\"variable\">%xmm1</span>, <span class=\"variable\">%xmm0</span>\n        movabsq <span class=\"variable\">$cos</span>, <span class=\"variable\">%rax</span>\n        callq   *<span class=\"variable\">%rax</span>\n        cvttsd2si       <span class=\"number\">8</span>(<span class=\"variable\">%rsp</span>), <span class=\"variable\">%rax</span>\n        movsd   <span class=\"variable\">%xmm0</span>, (<span class=\"variable\">%rbx</span>)\n        addq    <span class=\"variable\">$1</span><span class=\"number\">0</span>, <span class=\"variable\">%rax</span>\n        movq    <span class=\"variable\">%rax</span>, <span class=\"number\">8</span>(<span class=\"variable\">%rbx</span>)\n        xorl    <span class=\"variable\">%eax</span>, <span class=\"variable\">%eax</span>\n        addq    <span class=\"variable\">$1</span>6, <span class=\"variable\">%rsp</span>\n        popq    <span class=\"variable\">%rbx</span>\n        retq</code></pre>",
  "id": "5ac3ffd1e4ff28713aa4ea90",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-04-03T22:27:29.083Z",
  "text": "```\n.LCPI0_0:\n        .quad   4621819117588971520\n        .text\n        .globl  _ZN8__main__7bar$241Ed\n        .p2align        4, 0x90\n        .type   _ZN8__main__7bar$241Ed,@function\n_ZN8__main__7bar$241Ed:\n        pushq   %rbx\n        subq    $16, %rsp\n        movapd  %xmm0, %xmm1\n        movsd   %xmm1, 8(%rsp)\n        movq    %rdi, %rbx\n        movabsq $.LCPI0_0, %rax\n        movsd   (%rax), %xmm0\n        addsd   %xmm1, %xmm0\n        movabsq $cos, %rax\n        callq   *%rax\n        cvttsd2si       8(%rsp), %rax\n        movsd   %xmm0, (%rbx)\n        addq    $10, %rax\n        movq    %rax, 8(%rbx)\n        xorl    %eax, %eax\n        addq    $16, %rsp\n        popq    %rbx\n        retq\n```",
  "unread": false,
  "urls": [],
  "v": 3
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/jllanfranchi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6414943?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6414943?v=4&s=60",
   "displayName": "J. L. Lanfranchi",
   "gv": "4",
   "id": "5aa7320ed73408ce4f9115a7",
   "url": "/jllanfranchi",
   "username": "jllanfranchi",
   "v": 14
  },
  "html": "I have a pretty large &quot;inner&quot; function being called thousands of times, I doubt it&#39;s being inlined. Nonetheless, I&#39;ll inspect the asm as above and see how it&#39;s being handled. The big thing, though, is that there is no typing / dispatching overhead; a &quot;c-speed&quot; function call should be sufficiently fast for my purposes here.",
  "id": "5ac40055bb1018b37a56f7af",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-04-03T22:29:41.643Z",
  "text": "I have a pretty large \"inner\" function being called thousands of times, I doubt it's being inlined. Nonetheless, I'll inspect the asm as above and see how it's being handled. The big thing, though, is that there is no typing / dispatching overhead; a \"c-speed\" function call should be sufficiently fast for my purposes here.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "yeah, everything is worked out up front ",
  "id": "5ac4006ee4ff28713aa4ece6",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-04-03T22:30:06.586Z",
  "text": "yeah, everything is worked out up front ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/jllanfranchi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6414943?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6414943?v=4&s=60",
   "displayName": "J. L. Lanfranchi",
   "gv": "4",
   "id": "5aa7320ed73408ce4f9115a7",
   "url": "/jllanfranchi",
   "username": "jllanfranchi",
   "v": 14
  },
  "html": "Awesome! Thanks again (and it must be said that numba is pretty awesome overall, so thanks for your work on it!)",
  "id": "5ac400afc4d0ae800731893a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-04-03T22:31:11.952Z",
  "text": "Awesome! Thanks again (and it must be said that numba is pretty awesome overall, so thanks for your work on it!)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "NP. Glad you find it useful :)",
  "id": "5ac400d9e3d0b1ff2c9b02be",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-04-03T22:31:53.240Z",
  "text": "NP. Glad you find it useful :)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/ethen8181",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/12273134?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/12273134?v=4&s=60",
   "displayName": "Ethen",
   "gv": "4",
   "id": "5abafee7d73408ce4f936b14",
   "url": "/ethen8181",
   "username": "ethen8181"
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"sklam\" class=\"mention\">@sklam</span> Awesome, thanks for the clarification!",
  "id": "5ac42850e3d0b1ff2c9b984b",
  "issues": [],
  "mentions": [
   {
    "screenName": "sklam",
    "userId": "55b689f50fc9f982beab2a24",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 18,
  "sent": "2018-04-04T01:20:16.416Z",
  "text": "@sklam Awesome, thanks for the clarification!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Lomelgande",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/8880982?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/8880982?v=4&s=60",
   "displayName": "Lomelgande",
   "gv": "4",
   "id": "5ab3f0f2d73408ce4f92b317",
   "url": "/Lomelgande",
   "username": "Lomelgande",
   "v": 2
  },
  "html": "Is it possible to generate a <strong>device</strong> <strong>host</strong> function with a signature? Below is some sample code that doesn&#39;t run. I am getting an &quot;Untyped global name &#39;function&#39;: using cpu function on device but its compilation is disabled&quot; error which seems to indicate that adding a signature prevents the function from compiling on the GPU. Maybe It&#39;s very possible I&#39;m just doing something wrong.<pre><code><span class=\"keyword\">from</span> numba <span class=\"keyword\">import</span> cuda, jit\n<span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np\n<span class=\"keyword\">import</span> math\n\n<span class=\"comment\"># @cuda.jit('f4(f4)', device = True)</span>\n<span class=\"decorator\">@jit('f4(f4)')</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">function</span><span class=\"params\">(x)</span>:</span>\n    <span class=\"keyword\">return</span> math.sin(x)\n\n<span class=\"decorator\">@cuda.jit('void(f4[:],f4[:])')</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">kernel</span><span class=\"params\">(x, y)</span>:</span>\n    i = cuda.grid(<span class=\"number\">1</span>)\n\n    y[i] = function(x[i])\n\nx = np.array([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>], dtype = np.float32)\ny = np.zeros(<span class=\"number\">6</span>, dtype = np.float32)\nd_x = cuda.to_device(x)\nd_y = cuda.to_device(y)\n\n<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(x)):\n    y[i] = function(x[i])\n\nkernel[<span class=\"number\">1</span>,<span class=\"number\">6</span>](d_x, d_y)\n\nprint(y)\nprint(d_y.copy_to_host())</code></pre>",
  "id": "5ac45c95bb1018b37a584762",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-04-04T05:03:17.352Z",
  "text": "Is it possible to generate a __device__ __host__ function with a signature? Below is some sample code that doesn't run. I am getting an \"Untyped global name 'function': using cpu function on device but its compilation is disabled\" error which seems to indicate that adding a signature prevents the function from compiling on the GPU. Maybe It's very possible I'm just doing something wrong.\n\n\n\tfrom numba import cuda, jit\n\timport numpy as np\n\timport math\n\n\t# @cuda.jit('f4(f4)', device = True)\n\t@jit('f4(f4)')\n\tdef function(x):\n\t\treturn math.sin(x)\n\n\t@cuda.jit('void(f4[:],f4[:])')\n\tdef kernel(x, y):\n\t\ti = cuda.grid(1)\n\n\t\ty[i] = function(x[i])\n\n\tx = np.array([1,2,3,4,5,6], dtype = np.float32)\n\ty = np.zeros(6, dtype = np.float32)\n\td_x = cuda.to_device(x)\n\td_y = cuda.to_device(y)\n\n\tfor i in range(len(x)):\n\t\ty[i] = function(x[i])\n\n\tkernel[1,6](d_x, d_y)\n\n\tprint(y)\n\tprint(d_y.copy_to_host())",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/klahaag",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/12041212?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/12041212?v=4&s=60",
   "displayName": "Klaus Haag",
   "gv": "4",
   "id": "5ac4d4efd73408ce4f945b0c",
   "url": "/klahaag",
   "username": "klahaag"
  },
  "html": "hi, I am new to numba and would have one question: Is it possible to call a stencil with a runtime-dynamic neighborhood?",
  "id": "5ac4d53a27c509a774d82750",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-04-04T13:38:02.882Z",
  "text": "hi, I am new to numba and would have one question: Is it possible to call a stencil with a runtime-dynamic neighborhood?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/klahaag",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/12041212?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/12041212?v=4&s=60",
   "displayName": "Klaus Haag",
   "gv": "4",
   "id": "5ac4d4efd73408ce4f945b0c",
   "url": "/klahaag",
   "username": "klahaag"
  },
  "html": "<pre><code>import numba as nb\nimport numpy as np\n\n@nb<span class=\"class\">.stencil</span>\ndef <span class=\"function\"><span class=\"title\">kernel</span><span class=\"params\">(a)</span></span>:\n    return <span class=\"tag\">a</span>[<span class=\"number\">0</span>] + <span class=\"tag\">a</span>[<span class=\"number\">1</span>]\n\ninput_arr = np.<span class=\"function\"><span class=\"title\">arange</span><span class=\"params\">(<span class=\"number\">100</span>)</span></span>\nstencil_func = nb.<span class=\"function\"><span class=\"title\">stencil</span><span class=\"params\">()</span><span class=\"params\">(kernel)</span></span>\n<span class=\"function\"><span class=\"title\">stencil_func</span><span class=\"params\">(input_arr)</span></span></code></pre>results in a <pre><code>ByteCodeSupportError: &lt;numba<span class=\"class\">.stencil</span><span class=\"class\">.StencilFunc</span> <span class=\"tag\">object</span> at <span class=\"number\">0</span>x0000026C51463828&gt; does not provide its bytecode</code></pre>",
  "id": "5ac4d5bd270d7d370890c9df",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-04-04T13:40:13.068Z",
  "text": "```\nimport numba as nb\nimport numpy as np\n\n@nb.stencil\ndef kernel(a):\n    return a[0] + a[1]\n\ninput_arr = np.arange(100)\nstencil_func = nb.stencil()(kernel)\nstencil_func(input_arr)\n```\nresults in a \n```\nByteCodeSupportError: <numba.stencil.StencilFunc object at 0x0000026C51463828> does not provide its bytecode\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/klahaag",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/12041212?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/12041212?v=4&s=60",
   "displayName": "Klaus Haag",
   "gv": "4",
   "id": "5ac4d4efd73408ce4f945b0c",
   "url": "/klahaag",
   "username": "klahaag"
  },
  "html": "=&gt; i am not sure how to pass the neighborhood argument to the decorator",
  "id": "5ac4d5d8270d7d370890ca4a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-04-04T13:40:40.235Z",
  "text": "=> i am not sure how to pass the neighborhood argument to the decorator",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/klahaag",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/12041212?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/12041212?v=4&s=60",
   "displayName": "Klaus Haag",
   "gv": "4",
   "id": "5ac4d4efd73408ce4f945b0c",
   "url": "/klahaag",
   "username": "klahaag"
  },
  "html": "<p>i would expect something like this to work:</p><pre><code>output_arr = nb.<span class=\"function\"><span class=\"title\">stencil</span><span class=\"params\">(neighborhood=((-<span class=\"number\">29</span>, <span class=\"number\">0</span>)</span></span>,))(kernel)(input_arr)\n`</code></pre><p>however it also outputs the above error</p>",
  "id": "5ac4d6607c3a01610da8b490",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-04-04T13:42:56.025Z",
  "text": "i would expect something like this to work:\n```\noutput_arr = nb.stencil(neighborhood=((-29, 0),))(kernel)(input_arr)\n````\nhowever it also outputs the above error",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "it&#39;s because you have decorated <code>kernel</code> with <code>nb.stencil</code> and then later decorate the <code>kernel</code> again in <code>stencil_func = nb.stencil()(kernel)</code> ?",
  "id": "5ac4d73f5f188ccc152d060d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-04-04T13:46:39.028Z",
  "text": "it's because you have decorated `kernel` with `nb.stencil` and then later decorate the `kernel` again in `stencil_func = nb.stencil()(kernel)` ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/klahaag",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/12041212?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/12041212?v=4&s=60",
   "displayName": "Klaus Haag",
   "gv": "4",
   "id": "5ac4d4efd73408ce4f945b0c",
   "url": "/klahaag",
   "username": "klahaag"
  },
  "html": "yes you are correct",
  "id": "5ac4d75d270d7d370890d349",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-04-04T13:47:09.482Z",
  "text": "yes you are correct",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/klahaag",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/12041212?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/12041212?v=4&s=60",
   "displayName": "Klaus Haag",
   "gv": "4",
   "id": "5ac4d4efd73408ce4f945b0c",
   "url": "/klahaag",
   "username": "klahaag"
  },
  "html": "thank you very much",
  "id": "5ac4d7602b9dfdbc3a55b23b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-04-04T13:47:12.637Z",
  "text": "thank you very much",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "np",
  "id": "5ac4d767270d7d370890d381",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-04-04T13:47:19.231Z",
  "text": "np",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "<p><span data-link-type=\"mention\" data-screen-name=\"Lomelgande\" class=\"mention\">@Lomelgande</span> , remove the signature from <code>@jit</code> will work.  Providing the signature also disable compilation, which is needed for codegen on the GPU.  </p><p>All you need is:</p><pre><code class=\"python\"><span class=\"decorator\">@jit #('f4(f4)')</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">function</span><span class=\"params\">(x)</span>:</span>\n    <span class=\"keyword\">return</span> math.sin(x)</code></pre>",
  "id": "5ac4da6ee3d0b1ff2c9ec644",
  "issues": [],
  "mentions": [
   {
    "screenName": "Lomelgande",
    "userId": "5ab3f0f2d73408ce4f92b317",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 18,
  "sent": "2018-04-04T14:00:14.491Z",
  "text": "@Lomelgande , remove the signature from `@jit` will work.  Providing the signature also disable compilation, which is needed for codegen on the GPU.  \n\nAll you need is:\n\n```python\n@jit #('f4(f4)')\ndef function(x):\n    return math.sin(x)\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-04-04T14:29:43.079Z",
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/klahaag",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/12041212?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/12041212?v=4&s=60",
   "displayName": "Klaus Haag",
   "gv": "4",
   "id": "5ac4d4efd73408ce4f945b0c",
   "url": "/klahaag",
   "username": "klahaag"
  },
  "html": "<p>somehow i still cannot get stencil to work the way i want it. When using the syntactic sugar decorator syntax a call from a nb.njit method works fine:</p><pre><code><span class=\"keyword\">import</span> numba <span class=\"keyword\">as</span> nb\n<span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np\n\n<span class=\"decorator\">@nb.stencil</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_stencil2</span><span class=\"params\">(img)</span>:</span>\n    <span class=\"keyword\">return</span> img[<span class=\"number\">0</span>,<span class=\"number\">0</span>] + img[<span class=\"number\">0</span>,<span class=\"number\">1</span>]\n\n<span class=\"decorator\">@nb.njit</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">exec</span><span class=\"params\">(img)</span>:</span>\n    <span class=\"keyword\">return</span> my_stencil2(img)\n\nimg = np.arange(<span class=\"number\">10000</span>).reshape(<span class=\"number\">100</span>,<span class=\"number\">100</span>) \nres = exec(img)</code></pre><p>but when I call the decorator without syntactic sugar, I get an error:</p><pre><code><span class=\"keyword\">import</span> numba <span class=\"keyword\">as</span> nb\n<span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np\n\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_stencil</span><span class=\"params\">(img)</span>:</span>\n    <span class=\"keyword\">return</span> img[<span class=\"number\">0</span>,<span class=\"number\">0</span>] + img[<span class=\"number\">0</span>,<span class=\"number\">1</span>]\n\n<span class=\"decorator\">@nb.njit</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">exec</span><span class=\"params\">(img)</span>:</span>\n    <span class=\"keyword\">return</span> nb.stencil()(my_stencil)(img)\n\nimg = np.arange(<span class=\"number\">10000</span>).reshape(<span class=\"number\">100</span>,<span class=\"number\">100</span>) \nres = exec(img)</code></pre><p>Error:</p><pre><code>ValueError: Failed at nopython (inline calls to locally defined closures)\nAs <span class=\"tag\">a</span> minimum Stencil requires <span class=\"tag\">a</span> kernel as an argument</code></pre><p>Aren&#39;t the above calls identical? Do I misunderstand the use of decorators?</p>",
  "id": "5ac4e144e4ff28713aa8d75b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-04-04T14:29:24.465Z",
  "text": "somehow i still cannot get stencil to work the way i want it. When using the syntactic sugar decorator syntax a call from a nb.njit method works fine:\n```\nimport numba as nb\nimport numpy as np\n\n@nb.stencil\ndef my_stencil2(img):\n    return img[0,0] + img[0,1]\n\n@nb.njit\ndef exec(img):\n    return my_stencil2(img)\n\nimg = np.arange(10000).reshape(100,100) \nres = exec(img)\n```\nbut when I call the decorator without syntactic sugar, I get an error:\n```\nimport numba as nb\nimport numpy as np\n\ndef my_stencil(img):\n    return img[0,0] + img[0,1]\n\n@nb.njit\ndef exec(img):\n    return nb.stencil()(my_stencil)(img)\n\nimg = np.arange(10000).reshape(100,100) \nres = exec(img)\n```\nError:\n```\nValueError: Failed at nopython (inline calls to locally defined closures)\nAs a minimum Stencil requires a kernel as an argument\n```\nAren't the above calls identical? Do I misunderstand the use of decorators?\n",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "By using the stencil decorator in the <code>njit</code> function are creating a closure of a type that is not understood",
  "id": "5ac4e8ae2b9dfdbc3a56287a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-04-04T15:01:02.730Z",
  "text": "By using the stencil decorator in the `njit` function are creating a closure of a type that is not understood",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/klahaag",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/12041212?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/12041212?v=4&s=60",
   "displayName": "Klaus Haag",
   "gv": "4",
   "id": "5ac4d4efd73408ce4f945b0c",
   "url": "/klahaag",
   "username": "klahaag"
  },
  "html": "does this mean it&#39;s not possible to pass the neighborhood param to stencil from a njit method?",
  "id": "5ac4e8d51130fe3d369fbb9c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-04-04T15:01:41.103Z",
  "text": "does this mean it's not possible to pass the neighborhood param to stencil from a njit method?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "Well, you can do this:<pre><code><span class=\"keyword\">import</span> numba\n<span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np\n\n<span class=\"decorator\">@numba.njit()</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_seq</span><span class=\"params\">(n, w)</span>:</span>\n    A = np.arange(n)\n\n    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">stencil2_kernel</span><span class=\"params\">(a, w)</span>:</span>\n        cum = a[-w]\n        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(-w + <span class=\"number\">1</span>, w + <span class=\"number\">1</span>):\n            cum += a[i]\n        <span class=\"keyword\">return</span> <span class=\"number\">0.3</span> * cum\n\n    B = numba.stencil(stencil2_kernel, neighborhood=((-w, w), ))(A, w)\n\n    <span class=\"keyword\">return</span> B\n\nprint(test_seq(<span class=\"number\">10</span>, <span class=\"number\">2</span>))</code></pre>",
  "id": "5ac4e9ee27c509a774d8adfa",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-04-04T15:06:22.209Z",
  "text": "Well, you can do this:\n```\nimport numba\nimport numpy as np\n\n@numba.njit()\ndef test_seq(n, w):\n    A = np.arange(n)\n\n    def stencil2_kernel(a, w):\n        cum = a[-w]\n        for i in range(-w + 1, w + 1):\n            cum += a[i]\n        return 0.3 * cum\n\n    B = numba.stencil(stencil2_kernel, neighborhood=((-w, w), ))(A, w)\n \n    return B\n\nprint(test_seq(10, 2))\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "I think basically the closure inlining pass gets tripped up by the decorator, so it has to be written that way.",
  "id": "5ac4eab97c3a01610da937aa",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-04-04T15:09:45.031Z",
  "text": "I think basically the closure inlining pass gets tripped up by the decorator, so it has to be written that way.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/klahaag",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/12041212?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/12041212?v=4&s=60",
   "displayName": "Klaus Haag",
   "gv": "4",
   "id": "5ac4d4efd73408ce4f945b0c",
   "url": "/klahaag",
   "username": "klahaag"
  },
  "html": "alright, thank you very much again",
  "id": "5ac4eafbc574b1aa3e67bd85",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-04-04T15:10:51.302Z",
  "text": "alright, thank you very much again",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/klahaag",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/12041212?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/12041212?v=4&s=60",
   "displayName": "Klaus Haag",
   "gv": "4",
   "id": "5ac4d4efd73408ce4f945b0c",
   "url": "/klahaag",
   "username": "klahaag"
  },
  "html": "that helped me a  lot",
  "id": "5ac4eaff270d7d3708914d9b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-04-04T15:10:55.649Z",
  "text": "that helped me a  lot",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "np",
  "id": "5ac4ec7b2b9dfdbc3a563ec7",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-04-04T15:17:15.013Z",
  "text": "np",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Lomelgande",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/8880982?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/8880982?v=4&s=60",
   "displayName": "Lomelgande",
   "gv": "4",
   "id": "5ab3f0f2d73408ce4f92b317",
   "url": "/Lomelgande",
   "username": "Lomelgande",
   "v": 2
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"sklam\" class=\"mention\">@sklam</span>  Is the compiler able to determine device function types based on the kernel signature?  I want the device function to be compiled AOT.",
  "id": "5ac4f22d270d7d3708917340",
  "issues": [],
  "mentions": [
   {
    "screenName": "sklam",
    "userId": "55b689f50fc9f982beab2a24",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 17,
  "sent": "2018-04-04T15:41:33.333Z",
  "text": "@sklam  Is the compiler able to determine device function types based on the kernel signature?  I want the device function to be compiled AOT.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"Lomelgande\" class=\"mention\">@Lomelgande</span>, yes, at the compilation of the kernel, the device function must be compiled.",
  "id": "5ac4f77be3d0b1ff2c9f8009",
  "issues": [],
  "mentions": [
   {
    "screenName": "Lomelgande",
    "userId": "5ab3f0f2d73408ce4f92b317",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 17,
  "sent": "2018-04-04T16:04:11.828Z",
  "text": "@Lomelgande, yes, at the compilation of the kernel, the device function must be compiled.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/lala168",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/38100009?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/38100009?v=4&s=60",
   "displayName": "lala168",
   "gv": "4",
   "id": "5ac5f004d73408ce4f947890",
   "url": "/lala168",
   "username": "lala168",
   "v": 5
  },
  "html": "hello everyone, I am using numba on GPU. I really need to create a numpy or whatever list in kernel or device function, but looks like numba doesn&#39;t support dynamic memory allocation. Is there any work-around or support in future release, since I see CUDA C++ support malloc? Thanks!",
  "id": "5ac5f0731130fe3d36a43ad3",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-04-05T09:46:27.689Z",
  "text": "hello everyone, I am using numba on GPU. I really need to create a numpy or whatever list in kernel or device function, but looks like numba doesn't support dynamic memory allocation. Is there any work-around or support in future release, since I see CUDA C++ support malloc? Thanks!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"lala168\" class=\"mention\">@lala168</span> do any of these help <a href=\"http://numba.pydata.org/numba-doc/dev/cuda/memory.html#shared-memory-and-thread-synchronization\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://numba.pydata.org/numba-doc/dev/cuda/memory.html#shared-memory-and-thread-synchronization</a> 3.3.4-&gt;3.3.6 ?",
  "id": "5ac5f1c3270d7d370895b038",
  "issues": [],
  "mentions": [
   {
    "screenName": "lala168",
    "userId": "5ac5f004d73408ce4f947890",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 18,
  "sent": "2018-04-05T09:52:03.112Z",
  "text": "@lala168 do any of these help http://numba.pydata.org/numba-doc/dev/cuda/memory.html#shared-memory-and-thread-synchronization 3.3.4->3.3.6 ?",
  "unread": false,
  "urls": [
   {
    "url": "http://numba.pydata.org/numba-doc/dev/cuda/memory.html#shared-memory-and-thread-synchronization"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/lala168",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/38100009?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/38100009?v=4&s=60",
   "displayName": "lala168",
   "gv": "4",
   "id": "5ac5f004d73408ce4f947890",
   "url": "/lala168",
   "username": "lala168",
   "v": 5
  },
  "html": "I considered shared memory but 64KB was way too small for me....",
  "id": "5ac5f4cbe3d0b1ff2ca3ad13",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-04-05T10:04:59.747Z",
  "text": "I considered shared memory but 64KB was way too small for me....",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"lala168\" class=\"mention\">@lala168</span> , the CUDA\u2019s dynamic memory allocation is not as useful as the CPU one. It is slow and limited.  The default heap size is 8MB, which is small considering the number of threads running.   I would suggest restructuring the algorithm to move the malloc outside of the CUDA kernel.",
  "id": "5ac63958e4ff28713aaedc47",
  "issues": [],
  "mentions": [
   {
    "screenName": "lala168",
    "userId": "5ac5f004d73408ce4f947890",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 18,
  "sent": "2018-04-05T14:57:28.083Z",
  "text": "@lala168 , the CUDA\u2019s dynamic memory allocation is not as useful as the CPU one. It is slow and limited.  The default heap size is 8MB, which is small considering the number of threads running.   I would suggest restructuring the algorithm to move the malloc outside of the CUDA kernel.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "And, because of its limitation, I don\u2019t see it as a useful feature to include in numba.",
  "id": "5ac63994e3d0b1ff2ca5106c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-04-05T14:58:28.225Z",
  "text": "And, because of its limitation, I don\u2019t see it as a useful feature to include in numba.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "This raises an interesting question: when will device-side malloc produce pointers that also can page to the CPU?",
  "id": "5ac639bae4ff28713aaedf9c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-04-05T14:59:06.790Z",
  "text": "This raises an interesting question: when will device-side malloc produce pointers that also can page to the CPU?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "that&#39;s the one direction of managed memory I had not considered before",
  "id": "5ac639c76d7e07082bc0fd1f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-04-05T14:59:19.421Z",
  "text": "that's the one direction of managed memory I had not considered before",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-04-05T14:59:38.140Z",
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "I have never heard of that mentioned by NV",
  "id": "5ac639ce92f5d62057989cd9",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-04-05T14:59:26.867Z",
  "text": "I have never heard of that mentioned by NV",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "BTW, for reference: <a href=\"http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#heap-memory-allocation\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#heap-memory-allocation</a>",
  "id": "5ac639f892f5d62057989d79",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-04-05T15:00:08.749Z",
  "text": "BTW, for reference: http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#heap-memory-allocation",
  "unread": false,
  "urls": [
   {
    "url": "http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#heap-memory-allocation"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "seems like the logical solution to the annoying heap limitations on the device.  Make it able to use the host process&#39;s heap.",
  "id": "5ac639fb270d7d3708971a8c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-04-05T15:00:11.744Z",
  "text": "seems like the logical solution to the annoying heap limitations on the device.  Make it able to use the host process's heap.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"lala168\" class=\"mention\">@lala168</span>: If you can bound the amount of memory that will be needed, preallocating a buffer and using atomic add on a counter (indicating the index of the next free element) is a common strategy",
  "id": "5ac63a6427c509a774de9bc0",
  "issues": [],
  "mentions": [
   {
    "screenName": "lala168",
    "userId": "5ac5f004d73408ce4f947890",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 18,
  "sent": "2018-04-05T15:01:56.962Z",
  "text": "@lala168: If you can bound the amount of memory that will be needed, preallocating a buffer and using atomic add on a counter (indicating the index of the next free element) is a common strategy",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/lala168",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/38100009?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/38100009?v=4&s=60",
   "displayName": "lala168",
   "gv": "4",
   "id": "5ac5f004d73408ce4f947890",
   "url": "/lala168",
   "username": "lala168",
   "v": 5
  },
  "html": "thanks everyone! Looks like I need to reconstruct my code to not use heap... although it will make the code harder to reuse and maintain. . . that&#39;s the penalty I have to pay then ....",
  "id": "5ac6a2f8080a385053005fa3",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-04-05T22:28:08.628Z",
  "text": "thanks everyone! Looks like I need to reconstruct my code to not use heap... although it will make the code harder to reuse and maintain. . . that's the penalty I have to pay then ....",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-04-06T06:48:29.894Z",
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/lala168",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/38100009?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/38100009?v=4&s=60",
   "displayName": "lala168",
   "gv": "4",
   "id": "5ac5f004d73408ce4f947890",
   "url": "/lala168",
   "username": "lala168",
   "v": 5
  },
  "html": "By the way, does anyone know how to properly use None or NaN in GPU kernel function, I do need it as part of calculation. For example for some function I need to return a None or NaN.",
  "id": "5ac7182c109bb0433292ef90",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-04-06T06:48:12.830Z",
  "text": "By the way, does anyone know how to properly use None or NaN in GPU kernel function, I do need it as part of calculation. For example for some function I need to return a None or NaN.",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"lala168\" class=\"mention\">@lala168</span>, you can store NaN into float dtype output arrays from a GPU kernel.  For example:<pre><code class=\"python\">\nIn [<span class=\"number\">1</span>]: <span class=\"keyword\">from</span> numba <span class=\"keyword\">import</span> cuda\n\nIn [<span class=\"number\">2</span>]: <span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np\n\nIn [<span class=\"number\">3</span>]: NaN = float(<span class=\"string\">'nan'</span>)\n\nIn [<span class=\"number\">4</span>]: <span class=\"decorator\">@cuda.jit</span>\n   ...: <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">(arr, out)</span>:</span>\n   ...:     i = cuda.grid(<span class=\"number\">1</span>)\n   ...:     <span class=\"keyword\">if</span> arr[i]:\n   ...:         out[i] = NaN\n   ...:\n\nIn [<span class=\"number\">5</span>]: arr = np.asarray([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>])\n\nIn [<span class=\"number\">6</span>]: out = np.arange(arr.size, dtype=np.float64)\n\nIn [<span class=\"number\">7</span>]: foo[<span class=\"number\">1</span>, arr.size](arr, out)\n\nIn [<span class=\"number\">8</span>]: out\nOut[<span class=\"number\">8</span>]: array([ <span class=\"number\">0.</span>, nan,  <span class=\"number\">2.</span>, nan, nan])</code></pre>",
  "id": "5ac77d8d27c509a774e41d20",
  "issues": [],
  "mentions": [
   {
    "screenName": "lala168",
    "userId": "5ac5f004d73408ce4f947890",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 18,
  "sent": "2018-04-06T14:00:45.263Z",
  "text": "@lala168, you can store NaN into float dtype output arrays from a GPU kernel.  For example:\n\n```python\n\nIn [1]: from numba import cuda\n\nIn [2]: import numpy as np\n\nIn [3]: NaN = float('nan')\n\nIn [4]: @cuda.jit\n   ...: def foo(arr, out):\n   ...:     i = cuda.grid(1)\n   ...:     if arr[i]:\n   ...:         out[i] = NaN\n   ...:\n\nIn [5]: arr = np.asarray([0, 1, 0, 1, 1])\n\nIn [6]: out = np.arange(arr.size, dtype=np.float64)\n\nIn [7]: foo[1, arr.size](arr, out)\n\nIn [8]: out\nOut[8]: array([ 0., nan,  2., nan, nan])\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "to test for NaN, use <code>math.isnan</code>",
  "id": "5ac77e1f5f188ccc1538db2d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-04-06T14:03:11.189Z",
  "text": "to test for NaN, use `math.isnan`",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/lala168",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/38100009?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/38100009?v=4&s=60",
   "displayName": "lala168",
   "gv": "4",
   "id": "5ac5f004d73408ce4f947890",
   "url": "/lala168",
   "username": "lala168",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"sklam\" class=\"mention\">@sklam</span> Thanks a lot. Interesting, I just need to define it out of the jitted function.",
  "id": "5ac7ed08109bb0433296f7f6",
  "issues": [],
  "mentions": [
   {
    "screenName": "sklam",
    "userId": "55b689f50fc9f982beab2a24",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 18,
  "sent": "2018-04-06T21:56:24.581Z",
  "text": "@sklam Thanks a lot. Interesting, I just need to define it out of the jitted function.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/AakashKumarNain",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/11736571?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/11736571?v=4&s=60",
   "displayName": "Aakash Kumar Nain",
   "gv": "4",
   "id": "57f274a9d73408ce4f2b60df",
   "url": "/AakashKumarNain",
   "username": "AakashKumarNain",
   "v": 1
  },
  "html": "Hello all, I was trying to use numba jit with nopython=True but it throws an error that numpy unique module isn&#39;t defined",
  "id": "5aca206a7c3a01610dbdefe9",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-04-08T14:00:10.273Z",
  "text": "Hello all, I was trying to use numba jit with nopython=True but it throws an error that numpy unique module isn't defined",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/AakashKumarNain",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/11736571?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/11736571?v=4&s=60",
   "displayName": "Aakash Kumar Nain",
   "gv": "4",
   "id": "57f274a9d73408ce4f2b60df",
   "url": "/AakashKumarNain",
   "username": "AakashKumarNain",
   "v": 1
  },
  "html": "Any guess?",
  "id": "5aca20766d7e07082bd00fbc",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-04-08T14:00:22.977Z",
  "text": "Any guess?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/jllanfranchi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6414943?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6414943?v=4&s=60",
   "displayName": "J. L. Lanfranchi",
   "gv": "4",
   "id": "5aa7320ed73408ce4f9115a7",
   "url": "/jllanfranchi",
   "username": "jllanfranchi",
   "v": 14
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"AakashKumarNain\" class=\"mention\">@AakashKumarNain</span> I don&#39;t see support for that function in the docs, so maybe it isn&#39;t supported (not everything in numpy is): <a href=\"https://numba.pydata.org/numba-doc/dev/reference/numpysupported.html\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://numba.pydata.org/numba-doc/dev/reference/numpysupported.html</a>",
  "id": "5aca662b109bb043329f164d",
  "issues": [],
  "mentions": [
   {
    "screenName": "AakashKumarNain",
    "userId": "57f274a9d73408ce4f2b60df",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 18,
  "sent": "2018-04-08T18:57:47.829Z",
  "text": "@AakashKumarNain I don't see support for that function in the docs, so maybe it isn't supported (not everything in numpy is): https://numba.pydata.org/numba-doc/dev/reference/numpysupported.html",
  "unread": false,
  "urls": [
   {
    "url": "https://numba.pydata.org/numba-doc/dev/reference/numpysupported.html"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/lala168",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/38100009?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/38100009?v=4&s=60",
   "displayName": "lala168",
   "gv": "4",
   "id": "5ac5f004d73408ce4f947890",
   "url": "/lala168",
   "username": "lala168",
   "v": 5
  },
  "html": "Hi all, I was trying to use str(int_number) in GPU kernel but it said class type wasn&#39;t supported. What&#39;s the proper way to do toString and string concatenation? Also round(float_number) function in kernel give me a segment fault..",
  "id": "5acab0bd5f188ccc15441e96",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-04-09T00:15:57.190Z",
  "text": "Hi all, I was trying to use str(int_number) in GPU kernel but it said class type wasn't supported. What's the proper way to do toString and string concatenation? Also round(float_number) function in kernel give me a segment fault..",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/lala168",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/38100009?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/38100009?v=4&s=60",
   "displayName": "lala168",
   "gv": "4",
   "id": "5ac5f004d73408ce4f947890",
   "url": "/lala168",
   "username": "lala168",
   "v": 5
  },
  "html": "Thanks!",
  "id": "5acab0c1df3e0fb547b7e789",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-04-09T00:16:01.319Z",
  "text": "Thanks!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/lala168",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/38100009?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/38100009?v=4&s=60",
   "displayName": "lala168",
   "gv": "4",
   "id": "5ac5f004d73408ce4f947890",
   "url": "/lala168",
   "username": "lala168",
   "v": 5
  },
  "html": "<pre><code>split =  <span class=\"function\"><span class=\"title\">round</span><span class=\"params\">(X.shape[<span class=\"number\">0</span>]/<span class=\"number\">600</span>)</span></span>\n<span class=\"function\"><span class=\"title\">print</span><span class=\"params\">(split)</span></span></code></pre>",
  "id": "5acacaf5df3e0fb547b83cfe",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-04-09T02:07:49.661Z",
  "text": "    split =  round(X.shape[0]/600)\n    print(split)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/lala168",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/38100009?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/38100009?v=4&s=60",
   "displayName": "lala168",
   "gv": "4",
   "id": "5ac5f004d73408ce4f947890",
   "url": "/lala168",
   "username": "lala168",
   "v": 5
  },
  "html": "bash: line 1: 23037 Segmentation fault ",
  "id": "5acacb0227c509a774efda05",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-04-09T02:08:02.089Z",
  "text": "bash: line 1: 23037 Segmentation fault ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-04-09T02:09:25.502Z",
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/lala168",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/38100009?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/38100009?v=4&s=60",
   "displayName": "lala168",
   "gv": "4",
   "id": "5ac5f004d73408ce4f947890",
   "url": "/lala168",
   "username": "lala168",
   "v": 5
  },
  "html": "<pre><code>split = <span class=\"string\">'split_'</span> + <span class=\"function\"><span class=\"title\">str</span><span class=\"params\">(<span class=\"number\">3</span>)</span></span>\n<span class=\"function\"><span class=\"title\">print</span><span class=\"params\">(split)</span></span></code></pre>",
  "id": "5acacb457c3a01610dc06293",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-04-09T02:09:09.582Z",
  "text": "    split = 'split_' + str(3)\n    print(split)",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/lala168",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/38100009?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/38100009?v=4&s=60",
   "displayName": "lala168",
   "gv": "4",
   "id": "5ac5f004d73408ce4f947890",
   "url": "/lala168",
   "username": "lala168",
   "v": 5
  },
  "html": "Untyped global name &#39;str&#39;: cannot determine Numba type of &lt;class &#39;type&#39;&gt;",
  "id": "5acacb5e270d7d3708a83809",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-04-09T02:09:34.784Z",
  "text": "Untyped global name 'str': cannot determine Numba type of <class 'type'>",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"lala168\" class=\"mention\">@lala168</span> Casting to string is not supported I&#39;m pretty sure.",
  "id": "5acc5f8a2b9dfdbc3a74260b",
  "issues": [],
  "mentions": [
   {
    "screenName": "lala168",
    "userId": "5ac5f004d73408ce4f947890",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 15,
  "sent": "2018-04-10T06:54:02.798Z",
  "text": "@lala168 Casting to string is not supported I'm pretty sure.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "NOt sure about the rounding thing",
  "id": "5acc5f97270d7d3708af1d18",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-04-10T06:54:15.897Z",
  "text": "NOt sure about the rounding thing",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"lala168\" class=\"mention\">@lala168</span> string manipulation, in general, is not supported/there&#39;s a few crude cases. For the segfault, please could you create a github issue <a href=\"https://github.com/numba/numba/issues/new\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://github.com/numba/numba/issues/new</a> with a minimal reproducer. Thanks.",
  "id": "5acc73be109bb04332a7f58f",
  "issues": [],
  "mentions": [
   {
    "screenName": "lala168",
    "userId": "5ac5f004d73408ce4f947890",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 15,
  "sent": "2018-04-10T08:20:14.644Z",
  "text": "@lala168 string manipulation, in general, is not supported/there's a few crude cases. For the segfault, please could you create a github issue https://github.com/numba/numba/issues/new with a minimal reproducer. Thanks.",
  "unread": false,
  "urls": [
   {
    "url": "https://github.com/numba/numba/issues/new"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "hmm I think the PTX generated when using CUDA <code>round()</code> may have issues, segfault is from <code>libnvvm::nvvmCompileProgram()</code>. <span data-link-type=\"issue\" data-issue=\"2435\" data-issue-repo=\"numba/numba\" class=\"issue\">numba/numba#2435</span>",
  "id": "5acce6c71130fe3d36c18239",
  "issues": [
   {
    "number": "2435",
    "repo": "numba/numba"
   }
  ],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-04-10T16:31:03.711Z",
  "text": "hmm I think the PTX generated when using CUDA `round()` may have issues, segfault is from `libnvvm::nvvmCompileProgram()`. https://github.com/numba/numba/issues/2435",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/TomAugspurger",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1312546?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1312546?v=4&s=60",
   "displayName": "Tom Augspurger",
   "gv": "4",
   "id": "54a2cde7db8155e6700e4190",
   "url": "/TomAugspurger",
   "username": "TomAugspurger",
   "v": 12
  },
  "html": "FYI: <a href=\"https://github.com/lmcinnes/pynndescent\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://github.com/lmcinnes/pynndescent</a> is an approximate nearest-neighbors library using numba. We\u2019re looking into adopting it for dask-ml (to support KNeighborsClassfier/Regressor and HDBSCAN).",
  "id": "5ace38eb1130fe3d36c7d7f0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-04-11T16:33:47.626Z",
  "text": "FYI: https://github.com/lmcinnes/pynndescent is an approximate nearest-neighbors library using numba. We\u2019re looking into adopting it for dask-ml (to support KNeighborsClassfier/Regressor and HDBSCAN).",
  "unread": false,
  "urls": [
   {
    "url": "https://github.com/lmcinnes/pynndescent"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Lomelgande",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/8880982?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/8880982?v=4&s=60",
   "displayName": "Lomelgande",
   "gv": "4",
   "id": "5ab3f0f2d73408ce4f92b317",
   "url": "/Lomelgande",
   "username": "Lomelgande",
   "v": 2
  },
  "html": "<p>I am playing around with GPU concurrency right now using simple memory transfers. I am trying to copy several things to the GPU at the same time like so</p><pre><code>d_SDF       = cuda.<span class=\"function\"><span class=\"title\">to_device</span><span class=\"params\">(SDF.SDF      , stream = cuda.stream()</span></span>)\nd_materialh = cuda.<span class=\"function\"><span class=\"title\">to_device</span><span class=\"params\">(SDF.materialh, stream = cuda.stream()</span></span>)\nd_materialc = cuda.<span class=\"function\"><span class=\"title\">to_device</span><span class=\"params\">(SDF.materialc, stream = cuda.stream()</span></span>)\nd_dim       = cuda.<span class=\"function\"><span class=\"title\">to_device</span><span class=\"params\">(SDF.dim      , stream = cuda.stream()</span></span>)</code></pre><p>If I profile this simple memory transfer, even though each is using a unique stream (which is also shown in the profiler) the memory is not being transferred concurrently. It states that each memory transfer is asynchronous but each transfer does not start until the previous transfer is complete. Is there something simple I am missing here?</p>",
  "id": "5ace53387c3a01610dd1017e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-04-11T18:26:00.587Z",
  "text": "I am playing around with GPU concurrency right now using simple memory transfers. I am trying to copy several things to the GPU at the same time like so\n\n\td_SDF       = cuda.to_device(SDF.SDF      , stream = cuda.stream())\n\td_materialh = cuda.to_device(SDF.materialh, stream = cuda.stream())\n\td_materialc = cuda.to_device(SDF.materialc, stream = cuda.stream())\n\td_dim       = cuda.to_device(SDF.dim      , stream = cuda.stream())\n\nIf I profile this simple memory transfer, even though each is using a unique stream (which is also shown in the profiler) the memory is not being transferred concurrently. It states that each memory transfer is asynchronous but each transfer does not start until the previous transfer is complete. Is there something simple I am missing here?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/bzm3r",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/4350451?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/4350451?v=4&s=60",
   "displayName": "Brian Merchant",
   "gv": "4",
   "id": "57bf5d9640f3a6eec0615b6e",
   "url": "/bzm3r",
   "username": "bzm3r",
   "v": 4
  },
  "html": "hi all --- in a no python function, is it possible for me to delete a numpy array, and set a new numpy array to it? if i have already have an old array, and do something like <code>old_array = new_array</code>,  a &quot;setitem&quot; operation occurs instead of a freeing and reassignment (which makes sense). but then <code>del old_array</code> doesn&#39;t work either, for me to delete whatever was stored in the old_array...",
  "id": "5ace73f4080a38505320d738",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-04-11T20:45:40.890Z",
  "text": "hi all --- in a no python function, is it possible for me to delete a numpy array, and set a new numpy array to it? if i have already have an old array, and do something like `old_array = new_array`,  a \"setitem\" operation occurs instead of a freeing and reassignment (which makes sense). but then `del old_array` doesn't work either, for me to delete whatever was stored in the old_array...",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/bzm3r",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/4350451?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/4350451?v=4&s=60",
   "displayName": "Brian Merchant",
   "gv": "4",
   "id": "57bf5d9640f3a6eec0615b6e",
   "url": "/bzm3r",
   "username": "bzm3r",
   "v": 4
  },
  "html": "any ideas?",
  "id": "5ace73fa5d7286b43a1c19b8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-04-11T20:45:46.092Z",
  "text": "any ideas?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/jllanfranchi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6414943?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6414943?v=4&s=60",
   "displayName": "J. L. Lanfranchi",
   "gv": "4",
   "id": "5aa7320ed73408ce4f9115a7",
   "url": "/jllanfranchi",
   "username": "jllanfranchi",
   "v": 14
  },
  "html": "That seems like the kind of thing you just can&#39;t do yet in nopython (but others can correct me if I&#39;m wrong). What are you trying to accomplish, maybe there&#39;s a different way to do it that is possible in nopython.",
  "id": "5ace748d109bb04332b1ccca",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-04-11T20:48:13.630Z",
  "text": "That seems like the kind of thing you just can't do yet in nopython (but others can correct me if I'm wrong). What are you trying to accomplish, maybe there's a different way to do it that is possible in nopython.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/bzm3r",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/4350451?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/4350451?v=4&s=60",
   "displayName": "Brian Merchant",
   "gv": "4",
   "id": "57bf5d9640f3a6eec0615b6e",
   "url": "/bzm3r",
   "username": "bzm3r",
   "v": 4
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"jllanfranchi\" class=\"mention\">@jllanfranchi</span> i posted a stackoverflow question with a minimal example",
  "id": "5ace75812b9dfdbc3a7e9149",
  "issues": [],
  "mentions": [
   {
    "screenName": "jllanfranchi",
    "userId": "5aa7320ed73408ce4f9115a7",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 13,
  "sent": "2018-04-11T20:52:17.992Z",
  "text": "@jllanfranchi i posted a stackoverflow question with a minimal example",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/bzm3r",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/4350451?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/4350451?v=4&s=60",
   "displayName": "Brian Merchant",
   "gv": "4",
   "id": "57bf5d9640f3a6eec0615b6e",
   "url": "/bzm3r",
   "username": "bzm3r",
   "v": 4
  },
  "html": "<a href=\"https://stackoverflow.com/questions/49784269/how-to-delete-an-existing-array-and-assigning-a-new-array-to-the-old-arrays-nam\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://stackoverflow.com/questions/49784269/how-to-delete-an-existing-array-and-assigning-a-new-array-to-the-old-arrays-nam</a>",
  "id": "5ace758327c509a77400e07a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-04-11T20:52:19.125Z",
  "text": "https://stackoverflow.com/questions/49784269/how-to-delete-an-existing-array-and-assigning-a-new-array-to-the-old-arrays-nam",
  "unread": false,
  "urls": [
   {
    "url": "https://stackoverflow.com/questions/49784269/how-to-delete-an-existing-array-and-assigning-a-new-array-to-the-old-arrays-nam"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/jllanfranchi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6414943?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6414943?v=4&s=60",
   "displayName": "J. L. Lanfranchi",
   "gv": "4",
   "id": "5aa7320ed73408ce4f9115a7",
   "url": "/jllanfranchi",
   "username": "jllanfranchi",
   "v": 14
  },
  "html": "Your error is coming from trying to assign a new value to the shape attribute of the existing np_array; presumably that&#39;s a fixed thing, you can&#39;t just reshape an array by redefining its shape attr (in numpy <em>or</em> in numba). shape is a tuple, and hence immutable. You also don&#39;t need to worry about deleting the existing array; python+numpy should handle if its all references to the original array go away, its memory will be cleaned up. So just create a new array of the desired new shape and assign values to the new array. (And use <code>np.full</code> to save a step, or probably faster still, use <code>np.empty</code> and fill only the values you know you need &quot;defaults&quot; in.)",
  "id": "5ace781c5d7286b43a1c2eaa",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-04-11T21:03:24.074Z",
  "text": "Your error is coming from trying to assign a new value to the shape attribute of the existing np_array; presumably that's a fixed thing, you can't just reshape an array by redefining its shape attr (in numpy _or_ in numba). shape is a tuple, and hence immutable. You also don't need to worry about deleting the existing array; python+numpy should handle if its all references to the original array go away, its memory will be cleaned up. So just create a new array of the desired new shape and assign values to the new array. (And use `np.full` to save a step, or probably faster still, use `np.empty` and fill only the values you know you need \"defaults\" in.)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/bzm3r",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/4350451?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/4350451?v=4&s=60",
   "displayName": "Brian Merchant",
   "gv": "4",
   "id": "57bf5d9640f3a6eec0615b6e",
   "url": "/bzm3r",
   "username": "bzm3r",
   "v": 4
  },
  "html": "ahhh",
  "id": "5ace7a10270d7d3708b9667e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-04-11T21:11:44.334Z",
  "text": "ahhh",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/bzm3r",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/4350451?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/4350451?v=4&s=60",
   "displayName": "Brian Merchant",
   "gv": "4",
   "id": "57bf5d9640f3a6eec0615b6e",
   "url": "/bzm3r",
   "username": "bzm3r",
   "v": 4
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"jllanfranchi\" class=\"mention\">@jllanfranchi</span> ty, let me try that!",
  "id": "5ace7a1627c509a77400f530",
  "issues": [],
  "mentions": [
   {
    "screenName": "jllanfranchi",
    "userId": "5aa7320ed73408ce4f9115a7",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 13,
  "sent": "2018-04-11T21:11:50.675Z",
  "text": "@jllanfranchi ty, let me try that!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/jllanfranchi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6414943?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6414943?v=4&s=60",
   "displayName": "J. L. Lanfranchi",
   "gv": "4",
   "id": "5aa7320ed73408ce4f9115a7",
   "url": "/jllanfranchi",
   "username": "jllanfranchi",
   "v": 14
  },
  "html": "Example code posted to your stackoverflow question",
  "id": "5ace7a3e270d7d3708b96727",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-04-11T21:12:30.205Z",
  "text": "Example code posted to your stackoverflow question",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/bzm3r",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/4350451?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/4350451?v=4&s=60",
   "displayName": "Brian Merchant",
   "gv": "4",
   "id": "57bf5d9640f3a6eec0615b6e",
   "url": "/bzm3r",
   "username": "bzm3r",
   "v": 4
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"jllanfranchi\" class=\"mention\">@jllanfranchi</span>  super sweet, it works!",
  "id": "5ace7a8b080a38505320f44e",
  "issues": [],
  "mentions": [
   {
    "screenName": "jllanfranchi",
    "userId": "5aa7320ed73408ce4f9115a7",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 13,
  "sent": "2018-04-11T21:13:47.625Z",
  "text": "@jllanfranchi  super sweet, it works!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/bzm3r",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/4350451?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/4350451?v=4&s=60",
   "displayName": "Brian Merchant",
   "gv": "4",
   "id": "57bf5d9640f3a6eec0615b6e",
   "url": "/bzm3r",
   "username": "bzm3r",
   "v": 4
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"jllanfranchi\" class=\"mention\">@jllanfranchi</span>  how did you figure out that the error was due to the test program trying to change the values of the shape attribute?",
  "id": "5ace7f5b080a385053210a9c",
  "issues": [],
  "mentions": [
   {
    "screenName": "jllanfranchi",
    "userId": "5aa7320ed73408ce4f9115a7",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 13,
  "sent": "2018-04-11T21:34:19.618Z",
  "text": "@jllanfranchi  how did you figure out that the error was due to the test program trying to change the values of the shape attribute?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/bzm3r",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/4350451?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/4350451?v=4&s=60",
   "displayName": "Brian Merchant",
   "gv": "4",
   "id": "57bf5d9640f3a6eec0615b6e",
   "url": "/bzm3r",
   "username": "bzm3r",
   "v": 4
  },
  "html": "also, would it at all be possible to create a new copy of the shape attribute of an array (which is thus, unconnected to the original shape attribute)",
  "id": "5ace7f78df3e0fb547c9812a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-04-11T21:34:48.702Z",
  "text": "also, would it at all be possible to create a new copy of the shape attribute of an array (which is thus, unconnected to the original shape attribute)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"bzm3r\" class=\"mention\">@bzm3r</span> out of interest, what could the error message have said to help point to what the problem was (I&#39;ve been rewriting Numba error message code lately and feedback is helpful)? You may also like to try setting the environment variable <code>NUMBA_DISABLE_JIT=1</code> which will turn off the JIT without having to remove the decorators, this lets youo check your code works ok as standard interpreted code.",
  "id": "5ace8c3d6bbe1d2739d8716a",
  "issues": [],
  "mentions": [
   {
    "screenName": "bzm3r",
    "userId": "57bf5d9640f3a6eec0615b6e",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 13,
  "sent": "2018-04-11T22:29:17.467Z",
  "text": "@bzm3r out of interest, what could the error message have said to help point to what the problem was (I've been rewriting Numba error message code lately and feedback is helpful)? You may also like to try setting the environment variable `NUMBA_DISABLE_JIT=1` which will turn off the JIT without having to remove the decorators, this lets youo check your code works ok as standard interpreted code.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/bzm3r",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/4350451?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/4350451?v=4&s=60",
   "displayName": "Brian Merchant",
   "gv": "4",
   "id": "57bf5d9640f3a6eec0615b6e",
   "url": "/bzm3r",
   "username": "bzm3r",
   "v": 4
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span> i think it might have been lack of knowledge on my part, i am not sure, but when i look at the error message now, it seems to make more &quot;sense&quot;: Cannot resolve setitem: (int64 x 1)[0] = int64",
  "id": "5ace8c88270d7d3708b9b2e7",
  "issues": [],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 13,
  "sent": "2018-04-11T22:30:32.497Z",
  "text": "@stuartarchibald i think it might have been lack of knowledge on my part, i am not sure, but when i look at the error message now, it seems to make more \"sense\": Cannot resolve setitem: (int64 x 1)[0] = int64",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/bzm3r",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/4350451?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/4350451?v=4&s=60",
   "displayName": "Brian Merchant",
   "gv": "4",
   "id": "57bf5d9640f3a6eec0615b6e",
   "url": "/bzm3r",
   "username": "bzm3r",
   "v": 4
  },
  "html": "i guess the (int64 x 1) is the type signature for a length 1 tuple!",
  "id": "5ace8c98109bb04332b233db",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-04-11T22:30:48.627Z",
  "text": "i guess the (int64 x 1) is the type signature for a length 1 tuple!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "Also, are you asking if you can reshape an array, or resize it. Both of which exist in NumPy.",
  "id": "5ace8c9c270d7d3708b9b307",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-04-11T22:30:52.329Z",
  "text": "Also, are you asking if you can reshape an array, or resize it. Both of which exist in NumPy.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/bzm3r",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/4350451?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/4350451?v=4&s=60",
   "displayName": "Brian Merchant",
   "gv": "4",
   "id": "57bf5d9640f3a6eec0615b6e",
   "url": "/bzm3r",
   "username": "bzm3r",
   "v": 4
  },
  "html": "in which case, dugh",
  "id": "5ace8c9e2b9dfdbc3a7eef42",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-04-11T22:30:54.050Z",
  "text": "in which case, dugh",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/bzm3r",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/4350451?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/4350451?v=4&s=60",
   "displayName": "Brian Merchant",
   "gv": "4",
   "id": "57bf5d9640f3a6eec0615b6e",
   "url": "/bzm3r",
   "username": "bzm3r",
   "v": 4
  },
  "html": "ah, i was asking if i could resize a  numpy array, but in nopython mode",
  "id": "5ace8cb66bbe1d2739d87350",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-04-11T22:31:18.126Z",
  "text": "ah, i was asking if i could resize a  numpy array, but in nopython mode",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/bzm3r",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/4350451?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/4350451?v=4&s=60",
   "displayName": "Brian Merchant",
   "gv": "4",
   "id": "57bf5d9640f3a6eec0615b6e",
   "url": "/bzm3r",
   "username": "bzm3r",
   "v": 4
  },
  "html": "i couldn&#39;t see resize on the supported feature list, so i thought i must have to create a new array with the right size, and then fill it up with the existing info",
  "id": "5ace8cd35d7286b43a1c8a08",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-04-11T22:31:47.869Z",
  "text": "i couldn't see resize on the supported feature list, so i thought i must have to create a new array with the right size, and then fill it up with the existing info",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "Yes, The new error message looks like:<pre><code class=\"python\">numba.errors.TypingError: Failed at nopython (nopython frontend)\nFailed at nopython (nopython frontend)\nCannot resolve setitem: tuple(int64 x <span class=\"number\">1</span>)[<span class=\"number\">0</span>] = int64\n\nFile <span class=\"string\">\"irc4.py\"</span>, line <span class=\"number\">10</span>:\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">resize_np_array</span><span class=\"params\">(np_array, new_size, fill_value)</span>:</span>\n    &lt;source elided&gt;\n        new_shape = np_array.shape\n        new_shape[<span class=\"number\">0</span>] = new_size\n        ^\n\n[<span class=\"number\">1</span>] During: typing of staticsetitem at irc4.py (<span class=\"number\">10</span>)\n\nFile <span class=\"string\">\"irc4.py\"</span>, line <span class=\"number\">10</span>:\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">resize_np_array</span><span class=\"params\">(np_array, new_size, fill_value)</span>:</span>\n    &lt;source elided&gt;\n        new_shape = np_array.shape\n        new_shape[<span class=\"number\">0</span>] = new_size\n        ^\n\n[<span class=\"number\">1</span>] During: resolving callee type: type(CPUDispatcher(&lt;function resize_np_array at <span class=\"number\">0x7f7eb0dbd620</span>&gt;))\n[<span class=\"number\">2</span>] During: typing of call at irc4.py (<span class=\"number\">22</span>)\n\n\nFile <span class=\"string\">\"irc4.py\"</span>, line <span class=\"number\">22</span>:\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_function</span><span class=\"params\">()</span>:</span>\n    &lt;source elided&gt;\n    x = np.zeros(<span class=\"number\">10</span>, dtype=np.int64)\n    x = resize_np_array(x, <span class=\"number\">20</span>, <span class=\"number\">0</span>)</code></pre>",
  "id": "5ace8ce35f188ccc155638ad",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-04-11T22:32:03.955Z",
  "text": "Yes, The new error message looks like:\n```python\nnumba.errors.TypingError: Failed at nopython (nopython frontend)\nFailed at nopython (nopython frontend)\nCannot resolve setitem: tuple(int64 x 1)[0] = int64\n\nFile \"irc4.py\", line 10:\ndef resize_np_array(np_array, new_size, fill_value):\n    <source elided>\n        new_shape = np_array.shape\n        new_shape[0] = new_size\n        ^\n\n[1] During: typing of staticsetitem at irc4.py (10)\n\nFile \"irc4.py\", line 10:\ndef resize_np_array(np_array, new_size, fill_value):\n    <source elided>\n        new_shape = np_array.shape\n        new_shape[0] = new_size\n        ^\n\n[1] During: resolving callee type: type(CPUDispatcher(<function resize_np_array at 0x7f7eb0dbd620>))\n[2] During: typing of call at irc4.py (22)\n\n\nFile \"irc4.py\", line 22:\ndef test_function():\n    <source elided>\n    x = np.zeros(10, dtype=np.int64)\n    x = resize_np_array(x, 20, 0)\n ```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/bzm3r",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/4350451?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/4350451?v=4&s=60",
   "displayName": "Brian Merchant",
   "gv": "4",
   "id": "57bf5d9640f3a6eec0615b6e",
   "url": "/bzm3r",
   "username": "bzm3r",
   "v": 4
  },
  "html": "nice!",
  "id": "5ace8cf15f188ccc155638da",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-04-11T22:32:17.954Z",
  "text": "nice!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "I&#39;m fairly sure resize is not supported. <a href=\"http://numba.pydata.org/numba-doc/dev/reference/numpysupported.html\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://numba.pydata.org/numba-doc/dev/reference/numpysupported.html</a>",
  "id": "5ace8d2d6d7e07082be48775",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-04-11T22:33:17.057Z",
  "text": "I'm fairly sure resize is not supported. http://numba.pydata.org/numba-doc/dev/reference/numpysupported.html",
  "unread": false,
  "urls": [
   {
    "url": "http://numba.pydata.org/numba-doc/dev/reference/numpysupported.html"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/bzm3r",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/4350451?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/4350451?v=4&s=60",
   "displayName": "Brian Merchant",
   "gv": "4",
   "id": "57bf5d9640f3a6eec0615b6e",
   "url": "/bzm3r",
   "username": "bzm3r",
   "v": 4
  },
  "html": "right",
  "id": "5ace8d36080a3850532147f1",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-04-11T22:33:26.080Z",
  "text": "right",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/bzm3r",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/4350451?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/4350451?v=4&s=60",
   "displayName": "Brian Merchant",
   "gv": "4",
   "id": "57bf5d9640f3a6eec0615b6e",
   "url": "/bzm3r",
   "username": "bzm3r",
   "v": 4
  },
  "html": "so best thing to do is create a new array of the needed size, and copy old information into it",
  "id": "5ace8d487c3a01610dd20562",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-04-11T22:33:44.345Z",
  "text": "so best thing to do is create a new array of the needed size, and copy old information into it",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "You can just slice the existing array if that helps?",
  "id": "5ace8d4927c509a7740144cc",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-04-11T22:33:45.882Z",
  "text": "You can just slice the existing array if that helps?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/bzm3r",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/4350451?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/4350451?v=4&s=60",
   "displayName": "Brian Merchant",
   "gv": "4",
   "id": "57bf5d9640f3a6eec0615b6e",
   "url": "/bzm3r",
   "username": "bzm3r",
   "v": 4
  },
  "html": "you mean, make the existing very large, and just slice out only the filled out bits?",
  "id": "5ace8d717c3a01610dd205a9",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-04-11T22:34:25.320Z",
  "text": "you mean, make the existing very large, and just slice out only the filled out bits?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/bzm3r",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/4350451?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/4350451?v=4&s=60",
   "displayName": "Brian Merchant",
   "gv": "4",
   "id": "57bf5d9640f3a6eec0615b6e",
   "url": "/bzm3r",
   "username": "bzm3r",
   "v": 4
  },
  "html": "that&#39;s essentially what i am doing in my application at the moment, but i wanted to handle, in a safer manner, the case when i underestimate the required size of the array (which shouldn&#39;t happen often)",
  "id": "5ace8d9f7c3a01610dd20625",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-04-11T22:35:11.182Z",
  "text": "that's essentially what i am doing in my application at the moment, but i wanted to handle, in a safer manner, the case when i underestimate the required size of the array (which shouldn't happen often)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "well, I don&#39;t know what your code is like :) but yes, slice it",
  "id": "5ace8dc66d7e07082be489b3",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-04-11T22:35:50.862Z",
  "text": "well, I don't know what your code is like :) but yes, slice it",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "or use a data structure amenable to sparsity, which it sounds like you might have ?",
  "id": "5ace8ddd5d7286b43a1c8d99",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-04-11T22:36:13.856Z",
  "text": "or use a data structure amenable to sparsity, which it sounds like you might have ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/bzm3r",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/4350451?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/4350451?v=4&s=60",
   "displayName": "Brian Merchant",
   "gv": "4",
   "id": "57bf5d9640f3a6eec0615b6e",
   "url": "/bzm3r",
   "username": "bzm3r",
   "v": 4
  },
  "html": "nah, i don&#39;t have have a sparse structure. really just an array that might possibly be very large in the worst case, but rarely, rarely ever gets that large --- in fact, the worst case calculation sometimes predicts an array size so large, that my RAM can&#39;t handle it :p",
  "id": "5ace8e60270d7d3708b9ba03",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-04-11T22:38:24.911Z",
  "text": "nah, i don't have have a sparse structure. really just an array that might possibly be very large in the worst case, but rarely, rarely ever gets that large --- in fact, the worst case calculation sometimes predicts an array size so large, that my RAM can't handle it :p",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/bzm3r",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/4350451?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/4350451?v=4&s=60",
   "displayName": "Brian Merchant",
   "gv": "4",
   "id": "57bf5d9640f3a6eec0615b6e",
   "url": "/bzm3r",
   "username": "bzm3r",
   "v": 4
  },
  "html": "so i want to predict a more reasonable size initially, and in worse cases, increase the size of the array, and thus the program would only crash in the absolutely worst cases",
  "id": "5ace8e9b270d7d3708b9baec",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-04-11T22:39:23.038Z",
  "text": "so i want to predict a more reasonable size initially, and in worse cases, increase the size of the array, and thus the program would only crash in the absolutely worst cases",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "ah ok, well I think you&#39;ll have to do the replacement +fill method",
  "id": "5ace8ea65f188ccc1556415a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-04-11T22:39:34.497Z",
  "text": "ah ok, well I think you'll have to do the replacement +fill method",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/bzm3r",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/4350451?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/4350451?v=4&s=60",
   "displayName": "Brian Merchant",
   "gv": "4",
   "id": "57bf5d9640f3a6eec0615b6e",
   "url": "/bzm3r",
   "username": "bzm3r",
   "v": 4
  },
  "html": "yup",
  "id": "5ace8eac109bb04332b23b56",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-04-11T22:39:40.344Z",
  "text": "yup",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "and perhaps look at using dask, which can deal with arrays larger than RAM",
  "id": "5ace8ebf5d7286b43a1c911d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-04-11T22:39:59.575Z",
  "text": "and perhaps look at using dask, which can deal with arrays larger than RAM",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "and works fine with numba",
  "id": "5ace8ec42b9dfdbc3a7ef59e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-04-11T22:40:04.337Z",
  "text": "and works fine with numba",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/bzm3r",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/4350451?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/4350451?v=4&s=60",
   "displayName": "Brian Merchant",
   "gv": "4",
   "id": "57bf5d9640f3a6eec0615b6e",
   "url": "/bzm3r",
   "username": "bzm3r",
   "v": 4
  },
  "html": "ahhh",
  "id": "5ace8ec9270d7d3708b9bb5e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-04-11T22:40:09.175Z",
  "text": "ahhh",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/bzm3r",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/4350451?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/4350451?v=4&s=60",
   "displayName": "Brian Merchant",
   "gv": "4",
   "id": "57bf5d9640f3a6eec0615b6e",
   "url": "/bzm3r",
   "username": "bzm3r",
   "v": 4
  },
  "html": "will do",
  "id": "5ace8eca27c509a774014ad2",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-04-11T22:40:10.725Z",
  "text": "will do",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "<a href=\"http://dask.pydata.org/en/latest/array.html\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://dask.pydata.org/en/latest/array.html</a> ",
  "id": "5ace8eed5f188ccc15564230",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-04-11T22:40:45.480Z",
  "text": "http://dask.pydata.org/en/latest/array.html ",
  "unread": false,
  "urls": [
   {
    "url": "http://dask.pydata.org/en/latest/array.html"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/bzm3r",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/4350451?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/4350451?v=4&s=60",
   "displayName": "Brian Merchant",
   "gv": "4",
   "id": "57bf5d9640f3a6eec0615b6e",
   "url": "/bzm3r",
   "username": "bzm3r",
   "v": 4
  },
  "html": "neat...",
  "id": "5ace8f5f6d7e07082be490b2",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-04-11T22:42:39.191Z",
  "text": "neat...",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ehsantn",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2333645?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2333645?v=4&s=60",
   "displayName": "Ehsan Totoni",
   "gv": "4",
   "id": "56537ea416b6c7089cbbe080",
   "url": "/ehsantn",
   "username": "ehsantn",
   "v": 7
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"bzm3r\" class=\"mention\">@bzm3r</span> You can use <a href=\"https://github.com/IntelLabs/hpat\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">HPAT</a> (based on Numba) for large array if you have cluster access.",
  "id": "5acf7256270d7d3708bd9f68",
  "issues": [],
  "mentions": [
   {
    "screenName": "bzm3r",
    "userId": "57bf5d9640f3a6eec0615b6e",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 9,
  "sent": "2018-04-12T14:51:02.322Z",
  "text": "@bzm3r You can use [HPAT](https://github.com/IntelLabs/hpat) (based on Numba) for large array if you have cluster access.",
  "unread": false,
  "urls": [
   {
    "url": "https://github.com/IntelLabs/hpat"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/sevagh",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/8574092?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/8574092?v=4&s=60",
   "displayName": "sevagh",
   "gv": "4",
   "id": "59331f4dd73408ce4f64764d",
   "url": "/sevagh",
   "username": "sevagh",
   "v": 4
  },
  "html": "hello. i&#39;m trying to use the <code>@numba.jit</code> annotation to speed up a function which uses numpy&#39;s correlate: <code>#@jit\n        def _nsdf(audio_buffer):\n            audio_buffer -= np.mean(audio_buffer)\n            autocorr_f = np.correlate(audio_buffer, audio_buffer, mode=&#39;full&#39;)\n            nsdf = np.true_divide(autocorr_f[int(autocorr_f.size/2):],\n                                  autocorr_f[int(autocorr_f.size/2)])\n            nsdf[nsdf == np.inf] = 0\n            nsdf = np.nan_to_num(nsdf)\n            return nsdf</code> my execution time goes from ~13 seconds to about 3 minutes with the jit annotation. am i misunderstanding how to use it?",
  "id": "5ad0b887080a3850532b062c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-04-13T14:02:47.848Z",
  "text": "hello. i'm trying to use the `@numba.jit` annotation to speed up a function which uses numpy's correlate: ```        #@jit\n        def _nsdf(audio_buffer):\n            audio_buffer -= np.mean(audio_buffer)\n            autocorr_f = np.correlate(audio_buffer, audio_buffer, mode='full')\n            nsdf = np.true_divide(autocorr_f[int(autocorr_f.size/2):],\n                                  autocorr_f[int(autocorr_f.size/2)])\n            nsdf[nsdf == np.inf] = 0\n            nsdf = np.nan_to_num(nsdf)\n            return nsdf\n``` my execution time goes from ~13 seconds to about 3 minutes with the jit annotation. am i misunderstanding how to use it?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/sevagh",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/8574092?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/8574092?v=4&s=60",
   "displayName": "sevagh",
   "gv": "4",
   "id": "59331f4dd73408ce4f64764d",
   "url": "/sevagh",
   "username": "sevagh",
   "v": 4
  },
  "html": "experimenting with <code>@jit(cache=True)</code>",
  "id": "5ad0baa0109bb04332bbed9c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-04-13T14:11:44.696Z",
  "text": "experimenting with `@jit(cache=True)`",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"sevagh\" class=\"mention\">@sevagh</span> NumPy correlate only just got supported (not made it into a release yet), which version of numba are you using?",
  "id": "5ad0bb0c270d7d3708c381c3",
  "issues": [],
  "mentions": [
   {
    "screenName": "sevagh",
    "userId": "59331f4dd73408ce4f64764d",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 10,
  "sent": "2018-04-13T14:13:32.846Z",
  "text": "@sevagh NumPy correlate only just got supported (not made it into a release yet), which version of numba are you using?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/sevagh",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/8574092?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/8574092?v=4&s=60",
   "displayName": "sevagh",
   "gv": "4",
   "id": "59331f4dd73408ce4f64764d",
   "url": "/sevagh",
   "username": "sevagh",
   "v": 4
  },
  "html": "0.36.2",
  "id": "5ad0bb6a270d7d3708c38429",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-04-13T14:15:06.224Z",
  "text": "0.36.2",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "Also, <code>numba.jit</code> will fall back to running in &quot;object&quot; mode if it can&#39;t compile your code to machine code, which is what I expect is happening given the timing difference",
  "id": "5ad0bb726d7e07082beeae51",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-04-13T14:15:14.926Z",
  "text": "Also, `numba.jit` will fall back to running in \"object\" mode if it can't compile your code to machine code, which is what I expect is happening given the timing difference",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "ok, if you use the numba dev build:<pre><code><span class=\"title\">conda</span> install -c numba numba</code></pre>",
  "id": "5ad0bb865d7286b43a2647b0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-04-13T14:15:34.015Z",
  "text": "ok, if you use the numba dev build:\n```\nconda install -c numba numba\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-04-13T14:15:50.411Z",
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "that&#39;ll get you a numba which <code>np.correlate</code> support",
  "id": "5ad0bb8f2b9dfdbc3a88c27e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-04-13T14:15:43.086Z",
  "text": "that'll get you a numba which `np.correlate` support",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/sevagh",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/8574092?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/8574092?v=4&s=60",
   "displayName": "sevagh",
   "gv": "4",
   "id": "59331f4dd73408ce4f64764d",
   "url": "/sevagh",
   "username": "sevagh",
   "v": 4
  },
  "html": "thanks - i&#39;ll try it",
  "id": "5ad0bba8270d7d3708c38534",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-04-13T14:16:08.751Z",
  "text": "thanks - i'll try it",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "and I&#39;d also read this section <a href=\"http://numba.pydata.org/numba-doc/dev/user/performance-tips.html#no-python-mode-vs-object-mode\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://numba.pydata.org/numba-doc/dev/user/performance-tips.html#no-python-mode-vs-object-mode</a> ",
  "id": "5ad0bbbb27c509a7740b2866",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-04-13T14:16:27.340Z",
  "text": "and I'd also read this section http://numba.pydata.org/numba-doc/dev/user/performance-tips.html#no-python-mode-vs-object-mode ",
  "unread": false,
  "urls": [
   {
    "url": "http://numba.pydata.org/numba-doc/dev/user/performance-tips.html#no-python-mode-vs-object-mode"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/sevagh",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/8574092?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/8574092?v=4&s=60",
   "displayName": "sevagh",
   "gv": "4",
   "id": "59331f4dd73408ce4f64764d",
   "url": "/sevagh",
   "username": "sevagh",
   "v": 4
  },
  "html": "i&#39;ll report back when i get it working. just needed to do some conda setup etc.",
  "id": "5ad0be04df3e0fb547d3b871",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-04-13T14:26:12.399Z",
  "text": "i'll report back when i get it working. just needed to do some conda setup etc.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "okeydokes :)",
  "id": "5ad0be0f5d7286b43a265884",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-04-13T14:26:23.244Z",
  "text": "okeydokes :)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/sevagh",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/8574092?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/8574092?v=4&s=60",
   "displayName": "sevagh",
   "gv": "4",
   "id": "59331f4dd73408ce4f64764d",
   "url": "/sevagh",
   "username": "sevagh",
   "v": 4
  },
  "html": "i found your commit though, impressive stuff: <span data-link-type=\"commit\" data-commit-sha=\"6ac35c00e2893c4612365439f0ffcaa282e85ea7\" data-commit-repo=\"stuartarchibald/numba\" class=\"commit\">stuartarchibald/numba@6ac35c0</span>",
  "id": "5ad0be142b9dfdbc3a88d51a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-04-13T14:26:28.492Z",
  "text": "i found your commit though, impressive stuff: https://github.com/stuartarchibald/numba/commit/6ac35c00e2893c4612365439f0ffcaa282e85ea7",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "thanks, I hope it is useful!",
  "id": "5ad0be932b9dfdbc3a88d7a8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-04-13T14:28:35.616Z",
  "text": "thanks, I hope it is useful!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/sevagh",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/8574092?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/8574092?v=4&s=60",
   "displayName": "sevagh",
   "gv": "4",
   "id": "59331f4dd73408ce4f64764d",
   "url": "/sevagh",
   "username": "sevagh",
   "v": 4
  },
  "html": "how mindblowing is this conda/conda-env/environment.yml stuff",
  "id": "5ad0c1892b9dfdbc3a88e86e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-04-13T14:41:13.931Z",
  "text": "how mindblowing is this conda/conda-env/environment.yml stuff",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/sevagh",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/8574092?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/8574092?v=4&s=60",
   "displayName": "sevagh",
   "gv": "4",
   "id": "59331f4dd73408ce4f64764d",
   "url": "/sevagh",
   "username": "sevagh",
   "v": 4
  },
  "html": "i feel like i was stuck in the dark ages, just using pip, regular virtual environments",
  "id": "5ad0c195270d7d3708c3a785",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-04-13T14:41:25.127Z",
  "text": "i feel like i was stuck in the dark ages, just using pip, regular virtual environments",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "hopefully should be getting better soon as well.  conda team is working on simplifying environments (we have a few too many ways to do some things) and also making interop with pip more clear",
  "id": "5ad0c1fe6d7e07082beed554",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-04-13T14:43:10.479Z",
  "text": "hopefully should be getting better soon as well.  conda team is working on simplifying environments (we have a few too many ways to do some things) and also making interop with pip more clear",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/sevagh",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/8574092?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/8574092?v=4&s=60",
   "displayName": "sevagh",
   "gv": "4",
   "id": "59331f4dd73408ce4f64764d",
   "url": "/sevagh",
   "username": "sevagh",
   "v": 4
  },
  "html": "<code>Invalid usage of Function(&lt;function mean at 0x7f7e87630c80&gt;) with parameters (pyarray(int16, 1d, C))</code> - is there documentation of which function arguments are supported? according to the docs, mean is supported (but possibly with a different permutation of args than how i use it)",
  "id": "5ad0c4d6080a3850532b4fee",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-04-13T14:55:18.236Z",
  "text": "`Invalid usage of Function(<function mean at 0x7f7e87630c80>) with parameters (pyarray(int16, 1d, C))` - is there documentation of which function arguments are supported? according to the docs, mean is supported (but possibly with a different permutation of args than how i use it)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/sevagh",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/8574092?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/8574092?v=4&s=60",
   "displayName": "sevagh",
   "gv": "4",
   "id": "59331f4dd73408ce4f64764d",
   "url": "/sevagh",
   "username": "sevagh",
   "v": 4
  },
  "html": "or is it about <code>pyarray</code> vs a proper numpy array type",
  "id": "5ad0c566df3e0fb547d3e0d1",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-04-13T14:57:42.274Z",
  "text": "or is it about `pyarray` vs a proper numpy array type",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "probably that",
  "id": "5ad0c5815f188ccc1560594a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-04-13T14:58:09.829Z",
  "text": "probably that",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/sevagh",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/8574092?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/8574092?v=4&s=60",
   "displayName": "sevagh",
   "gv": "4",
   "id": "59331f4dd73408ce4f64764d",
   "url": "/sevagh",
   "username": "sevagh",
   "v": 4
  },
  "html": "alright - thanks for all the help. i&#39;m finally at the point of getting all the rest of the code to cooperate with numba. <code>@jit</code> is working (benchmarking now, will report the results...). nojit gives me <code>numba.errors.UntypedAttributeError: Failed at nopython (nopython frontend)\nUnknown attribute &#39;correlate&#39; of type Module(&lt;module &#39;numpy&#39;</code>",
  "id": "5ad0cd35080a3850532b80f0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-04-13T15:31:01.737Z",
  "text": "alright - thanks for all the help. i'm finally at the point of getting all the rest of the code to cooperate with numba. `@jit` is working (benchmarking now, will report the results...). nojit gives me `numba.errors.UntypedAttributeError: Failed at nopython (nopython frontend)\nUnknown attribute 'correlate' of type Module(<module 'numpy'`",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/sevagh",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/8574092?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/8574092?v=4&s=60",
   "displayName": "sevagh",
   "gv": "4",
   "id": "59331f4dd73408ce4f64764d",
   "url": "/sevagh",
   "username": "sevagh",
   "v": 4
  },
  "html": "i suspect it&#39;s related to the nojit vs jit you linked me to read above, so i&#39;ll get to that now",
  "id": "5ad0cd42df3e0fb547d40bd9",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-04-13T15:31:14.375Z",
  "text": "i suspect it's related to the nojit vs jit you linked me to read above, so i'll get to that now",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "what&#39;s nojit ?",
  "id": "5ad0cddc270d7d3708c3ecd3",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-04-13T15:33:48.289Z",
  "text": "what's nojit ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "<code>@njit</code>? ",
  "id": "5ad0cddf5d7286b43a26b5b4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-04-13T15:33:51.213Z",
  "text": "`@njit`? ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "that&#39;s nopython mode jit, as in, do this in machine code or abort",
  "id": "5ad0cdf0270d7d3708c3ed1b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-04-13T15:34:08.666Z",
  "text": "that's nopython mode jit, as in, do this in machine code or abort",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/sevagh",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/8574092?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/8574092?v=4&s=60",
   "displayName": "sevagh",
   "gv": "4",
   "id": "59331f4dd73408ce4f64764d",
   "url": "/sevagh",
   "username": "sevagh",
   "v": 4
  },
  "html": "oh yes, that&#39;s what i meant",
  "id": "5ad0cdfd080a3850532b87e2",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-04-13T15:34:21.164Z",
  "text": "oh yes, that's what i meant",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "and if you have a numba channel build it ought to pick up <code>np.correlate</code>",
  "id": "5ad0ce2c2b9dfdbc3a892d55",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-04-13T15:35:08.829Z",
  "text": "and if you have a numba channel build it ought to pick up `np.correlate`",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/sevagh",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/8574092?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/8574092?v=4&s=60",
   "displayName": "sevagh",
   "gv": "4",
   "id": "59331f4dd73408ce4f64764d",
   "url": "/sevagh",
   "username": "sevagh",
   "v": 4
  },
  "html": "<code># Name                    Version                   Build  Channel\nnumba                     0.37.0          np114py36hf484d3e_653    numba</code>",
  "id": "5ad0ce315f188ccc15609007",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-04-13T15:35:13.061Z",
  "text": "`# Name                    Version                   Build  Channel\nnumba                     0.37.0          np114py36hf484d3e_653    numba`",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/sevagh",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/8574092?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/8574092?v=4&s=60",
   "displayName": "sevagh",
   "gv": "4",
   "id": "59331f4dd73408ce4f64764d",
   "url": "/sevagh",
   "username": "sevagh",
   "v": 4
  },
  "html": "i installed it with the conda command you proposed",
  "id": "5ad0ce38080a3850532b893f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-04-13T15:35:20.713Z",
  "text": "i installed it with the conda command you proposed",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/sevagh",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/8574092?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/8574092?v=4&s=60",
   "displayName": "sevagh",
   "gv": "4",
   "id": "59331f4dd73408ce4f64764d",
   "url": "/sevagh",
   "username": "sevagh",
   "v": 4
  },
  "html": "oh no - i think one of my pip dependencies is pulling numba separately and the conda and pip numbas are conflicting. does that sound crazy?",
  "id": "5ad0ce68080a3850532b89f9",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-04-13T15:36:08.177Z",
  "text": "oh no - i think one of my pip dependencies is pulling numba separately and the conda and pip numbas are conflicting. does that sound crazy?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "sounds likely",
  "id": "5ad0ce896d7e07082bef1dc0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-04-13T15:36:41.805Z",
  "text": "sounds likely",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "if you have conda, perhaps just create a new environment as it will be entirely clean",
  "id": "5ad0cf41080a3850532b8edf",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-04-13T15:39:45.595Z",
  "text": "if you have conda, perhaps just create a new environment as it will be entirely clean",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "<code>conda create -n my_new_env_name -c numba numba &lt;any other packages you want&gt;</code>",
  "id": "5ad0cf551130fe3d36d404aa",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-04-13T15:40:05.722Z",
  "text": "`conda create -n my_new_env_name -c numba numba <any other packages you want>`",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/sevagh",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/8574092?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/8574092?v=4&s=60",
   "displayName": "sevagh",
   "gv": "4",
   "id": "59331f4dd73408ce4f64764d",
   "url": "/sevagh",
   "username": "sevagh",
   "v": 4
  },
  "html": "yeah i did all of that. debugging why i can&#39;t <code>import numba</code> now even though <code>conda install numba</code> succeeded and conda list shows it",
  "id": "5ad0cf84080a3850532b8fda",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-04-13T15:40:52.271Z",
  "text": "yeah i did all of that. debugging why i can't `import numba` now even though `conda install numba` succeeded and conda list shows it",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/sevagh",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/8574092?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/8574092?v=4&s=60",
   "displayName": "sevagh",
   "gv": "4",
   "id": "59331f4dd73408ce4f64764d",
   "url": "/sevagh",
   "username": "sevagh",
   "v": 4
  },
  "html": "i won&#39;t waste your time with basic pythonpath stuff, i&#39;ll report back once i get it working",
  "id": "5ad0cf8d6bbe1d2739e2c53c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-04-13T15:41:01.310Z",
  "text": "i won't waste your time with basic pythonpath stuff, i'll report back once i get it working",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/sevagh",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/8574092?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/8574092?v=4&s=60",
   "displayName": "sevagh",
   "gv": "4",
   "id": "59331f4dd73408ce4f64764d",
   "url": "/sevagh",
   "username": "sevagh",
   "v": 4
  },
  "html": "thanks again for all the help. hopefully i get this working soon",
  "id": "5ad0d0236bbe1d2739e2c7f5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-04-13T15:43:31.226Z",
  "text": "thanks again for all the help. hopefully i get this working soon",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "you are welcome to ask questions!",
  "id": "5ad0d0abdf3e0fb547d41e1a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-04-13T15:45:47.281Z",
  "text": "you are welcome to ask questions!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "What&#39;s the import error?",
  "id": "5ad0d0b3270d7d3708c3fc16",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-04-13T15:45:55.923Z",
  "text": "What's the import error?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "If it&#39;s something about <code>CODE_MODEL</code> it&#39;s probably because you have got an old llvmlite build (or from pip).",
  "id": "5ad0d0ce7c3a01610ddc39d4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-04-13T15:46:22.244Z",
  "text": "If it's something about `CODE_MODEL` it's probably because you have got an old llvmlite build (or from pip).",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ehsantn",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2333645?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2333645?v=4&s=60",
   "displayName": "Ehsan Totoni",
   "gv": "4",
   "id": "56537ea416b6c7089cbbe080",
   "url": "/ehsantn",
   "username": "ehsantn",
   "v": 7
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span> how do we use constant argument in np.sum?",
  "id": "5ad0eb70270d7d3708c49114",
  "issues": [],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 16,
  "sent": "2018-04-13T17:40:00.653Z",
  "text": "@stuartarchibald how do we use constant argument in np.sum?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ehsantn",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2333645?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2333645?v=4&s=60",
   "displayName": "Ehsan Totoni",
   "gv": "4",
   "id": "56537ea416b6c7089cbbe080",
   "url": "/ehsantn",
   "username": "ehsantn",
   "v": 7
  },
  "html": "I&#39;m trying to use it for another function",
  "id": "5ad0eb841130fe3d36d4ab39",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-04-13T17:40:20.243Z",
  "text": "I'm trying to use it for another function",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ehsantn",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2333645?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2333645?v=4&s=60",
   "displayName": "Ehsan Totoni",
   "gv": "4",
   "id": "56537ea416b6c7089cbbe080",
   "url": "/ehsantn",
   "username": "ehsantn",
   "v": 7
  },
  "html": "nevermind, found it",
  "id": "5ad0ed1c27c509a7740c3be9",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-04-13T17:47:08.385Z",
  "text": "nevermind, found it",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ehsantn",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2333645?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2333645?v=4&s=60",
   "displayName": "Ehsan Totoni",
   "gv": "4",
   "id": "56537ea416b6c7089cbbe080",
   "url": "/ehsantn",
   "username": "ehsantn",
   "v": 7
  },
  "html": "support_literals = True",
  "id": "5ad0ed30109bb04332bd0ba5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-04-13T17:47:28.124Z",
  "text": "support_literals = True",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "ah was AFK, yes that should do it",
  "id": "5ad0f70a6d7e07082bf011ec",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-04-13T18:29:30.364Z",
  "text": "ah was AFK, yes that should do it",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/sevagh",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/8574092?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/8574092?v=4&s=60",
   "displayName": "sevagh",
   "gv": "4",
   "id": "59331f4dd73408ce4f64764d",
   "url": "/sevagh",
   "username": "sevagh",
   "v": 4
  },
  "html": "i&#39;m back. anyway i&#39;m not sure what this <code>numba                     0.37.0          np114py36hf484d3e_653    numba</code> build id represents",
  "id": "5ad13b445f188ccc1562ac7c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-04-13T23:20:36.326Z",
  "text": "i'm back. anyway i'm not sure what this `numba                     0.37.0          np114py36hf484d3e_653    numba` build id represents",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/sevagh",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/8574092?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/8574092?v=4&s=60",
   "displayName": "sevagh",
   "gv": "4",
   "id": "59331f4dd73408ce4f64764d",
   "url": "/sevagh",
   "username": "sevagh",
   "v": 4
  },
  "html": "but is it possible that this isn&#39;t the tip of the dev build which contains the support for <code>np.correlate</code>?",
  "id": "5ad13b4f270d7d3708c6056a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-04-13T23:20:47.828Z",
  "text": "but is it possible that this isn't the tip of the dev build which contains the support for `np.correlate`?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/sevagh",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/8574092?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/8574092?v=4&s=60",
   "displayName": "sevagh",
   "gv": "4",
   "id": "59331f4dd73408ce4f64764d",
   "url": "/sevagh",
   "username": "sevagh",
   "v": 4
  },
  "html": "my import error was just <code>import numba -&gt; NoModuleFoundError</code> which i fixed with: <code>(transcribe-venv) sevagh:transcribe $ conda install -c numba numba -f</code>",
  "id": "5ad13b627c3a01610dde4f3d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-04-13T23:21:06.695Z",
  "text": "my import error was just `import numba -> NoModuleFoundError` which i fixed with: `(transcribe-venv) sevagh:transcribe $ conda install -c numba numba -f`",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-04-13T23:23:10.640Z",
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/sevagh",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/8574092?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/8574092?v=4&s=60",
   "displayName": "sevagh",
   "gv": "4",
   "id": "59331f4dd73408ce4f64764d",
   "url": "/sevagh",
   "username": "sevagh",
   "v": 4
  },
  "html": "<blockquote>\n<blockquote>\n<blockquote>\nimport numba<br>numba.<strong>version</strong><br>&#39;0.37.0+653.g5168891b9&#39;</blockquote>\n</blockquote>\n</blockquote>\n",
  "id": "5ad13bd2df3e0fb547d6347f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-04-13T23:22:58.090Z",
  "text": ">>> import numba\n>>> numba.__version__\n'0.37.0+653.g5168891b9'",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/sevagh",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/8574092?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/8574092?v=4&s=60",
   "displayName": "sevagh",
   "gv": "4",
   "id": "59331f4dd73408ce4f64764d",
   "url": "/sevagh",
   "username": "sevagh",
   "v": 4
  },
  "html": "gonna try a conda install with <code>=0.38</code> explicitly",
  "id": "5ad13c7e6d7e07082bf161de",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-04-13T23:25:50.124Z",
  "text": "gonna try a conda install with `=0.38` explicitly",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/sevagh",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/8574092?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/8574092?v=4&s=60",
   "displayName": "sevagh",
   "gv": "4",
   "id": "59331f4dd73408ce4f64764d",
   "url": "/sevagh",
   "username": "sevagh",
   "v": 4
  },
  "html": "yes, that got me further. now it&#39;s complaining about the parameters passed to <code>np.correlate</code>",
  "id": "5ad13d78270d7d3708c60db2",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-04-13T23:30:00.125Z",
  "text": "yes, that got me further. now it's complaining about the parameters passed to `np.correlate`",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/sevagh",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/8574092?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/8574092?v=4&s=60",
   "displayName": "sevagh",
   "gv": "4",
   "id": "59331f4dd73408ce4f64764d",
   "url": "/sevagh",
   "username": "sevagh",
   "v": 4
  },
  "html": "clue found in your commit: &gt;+* :func:<code>numpy.correlate</code> (only the 2 first arguments)",
  "id": "5ad13daedf3e0fb547d63d1a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-04-13T23:30:54.293Z",
  "text": "clue found in your commit: >+* :func:`numpy.correlate` (only the 2 first arguments)\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/sevagh",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/8574092?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/8574092?v=4&s=60",
   "displayName": "sevagh",
   "gv": "4",
   "id": "59331f4dd73408ce4f64764d",
   "url": "/sevagh",
   "username": "sevagh",
   "v": 4
  },
  "html": "i use <code>mode=full</code> for correlate",
  "id": "5ad13dd46d7e07082bf1668e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-04-13T23:31:32.585Z",
  "text": "i use `mode=full` for correlate",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/sevagh",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/8574092?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/8574092?v=4&s=60",
   "displayName": "sevagh",
   "gv": "4",
   "id": "59331f4dd73408ce4f64764d",
   "url": "/sevagh",
   "username": "sevagh",
   "v": 4
  },
  "html": "i wonder if that&#39;ll affect my actual computations...",
  "id": "5ad13ddcdf3e0fb547d63d87",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-04-13T23:31:40.651Z",
  "text": "i wonder if that'll affect my actual computations...",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/sevagh",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/8574092?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/8574092?v=4&s=60",
   "displayName": "sevagh",
   "gv": "4",
   "id": "59331f4dd73408ce4f64764d",
   "url": "/sevagh",
   "username": "sevagh",
   "v": 4
  },
  "html": "aw yeah that&#39;s disappointing. my algorithm is the McLeod Pitch Method, which relies on a <code>mode=full</code> np.correlate",
  "id": "5ad1407a6bbe1d2739e4f3a5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-04-13T23:42:50.405Z",
  "text": "aw yeah that's disappointing. my algorithm is the McLeod Pitch Method, which relies on a `mode=full` np.correlate",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-04-13T23:43:20.782Z",
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/sevagh",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/8574092?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/8574092?v=4&s=60",
   "displayName": "sevagh",
   "gv": "4",
   "id": "59331f4dd73408ce4f64764d",
   "url": "/sevagh",
   "username": "sevagh",
   "v": 4
  },
  "html": "not yet supported. is there any way i can try to contribute that upstream to numba?",
  "id": "5ad140896d7e07082bf16f05",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-04-13T23:43:05.170Z",
  "text": "not yet supported. is there any way i can try to contribute that upstream to numba?",
  "unread": false,
  "urls": [],
  "v": 3
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/sevagh",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/8574092?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/8574092?v=4&s=60",
   "displayName": "sevagh",
   "gv": "4",
   "id": "59331f4dd73408ce4f64764d",
   "url": "/sevagh",
   "username": "sevagh",
   "v": 4
  },
  "html": "with the default <code>mode=valid</code> form of correlate (even though my program malfunctions), the performance goes from ~26s to ~8s when i switch from <code>jit</code> to <code>njit</code>",
  "id": "5ad14a5527c509a7740dd5e9",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-04-14T00:24:53.962Z",
  "text": "with the default `mode=valid` form of correlate (even though my program malfunctions), the performance goes from ~26s to ~8s when i switch from `jit` to `njit`",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/sevagh",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/8574092?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/8574092?v=4&s=60",
   "displayName": "sevagh",
   "gv": "4",
   "id": "59331f4dd73408ce4f64764d",
   "url": "/sevagh",
   "username": "sevagh",
   "v": 4
  },
  "html": "so the <code>mode=full</code> ~15s execution time will be so much faster with <code>njit</code> support, it&#39;s exciting",
  "id": "5ad14a6f7c3a01610dde8057",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-04-14T00:25:19.621Z",
  "text": "so the `mode=full` ~15s execution time will be so much faster with `njit` support, it's exciting",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/sevagh",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/8574092?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/8574092?v=4&s=60",
   "displayName": "sevagh",
   "gv": "4",
   "id": "59331f4dd73408ce4f64764d",
   "url": "/sevagh",
   "username": "sevagh",
   "v": 4
  },
  "html": "i forked numba and in the correlate section replaced <code>Mode.VALID</code> with <code>Mode.FULL</code>, and things &quot;work&quot; but there&#39;s a big performance hit with <code>njit</code>. i assume that means i&#39;m in over my head :D",
  "id": "5ad153a6270d7d3708c652a2",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-04-14T01:04:38.185Z",
  "text": "i forked numba and in the correlate section replaced `Mode.VALID` with `Mode.FULL`, and things \"work\" but there's a big performance hit with `njit`. i assume that means i'm in over my head :D",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/sevagh",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/8574092?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/8574092?v=4&s=60",
   "displayName": "sevagh",
   "gv": "4",
   "id": "59331f4dd73408ce4f64764d",
   "url": "/sevagh",
   "username": "sevagh",
   "v": 4
  },
  "html": "(just to see what happens)",
  "id": "5ad153ad270d7d3708c652c5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-04-14T01:04:45.060Z",
  "text": "(just to see what happens)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ehsantn",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2333645?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2333645?v=4&s=60",
   "displayName": "Ehsan Totoni",
   "gv": "4",
   "id": "56537ea416b6c7089cbbe080",
   "url": "/ehsantn",
   "username": "ehsantn",
   "v": 7
  },
  "html": "Is it possible to create Numpy array of nopython objects which have a struct data model? <span data-link-type=\"mention\" data-screen-name=\"sklam\" class=\"mention\">@sklam</span> <span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span> ",
  "id": "5ad4cdf75d7286b43a3528f5",
  "issues": [],
  "mentions": [
   {
    "screenName": "sklam",
    "userId": "55b689f50fc9f982beab2a24",
    "userIds": []
   },
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 15,
  "sent": "2018-04-16T16:23:19.041Z",
  "text": "Is it possible to create Numpy array of nopython objects which have a struct data model? @sklam @stuartarchibald ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ehsantn",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2333645?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2333645?v=4&s=60",
   "displayName": "Ehsan Totoni",
   "gv": "4",
   "id": "56537ea416b6c7089cbbe080",
   "url": "/ehsantn",
   "username": "ehsantn",
   "v": 7
  },
  "html": "It&#39;s kind of like structured/rec arrays",
  "id": "5ad4ce112b9dfdbc3a97c5f2",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-04-16T16:23:45.872Z",
  "text": "It's kind of like structured/rec arrays",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "On the 0.38rc1 build, I&#39;m getting a typing error on trying to use np.sort with a np.array([[1, 2], [3, 4]])",
  "id": "5ad59e0b109bb04332cdf484",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-04-17T07:11:07.223Z",
  "text": "On the 0.38rc1 build, I'm getting a typing error on trying to use np.sort with a np.array([[1, 2], [3, 4]])",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Or rather, most recent pull from master with fresh build which I assume is 0.38rc1",
  "id": "5ad59e256d7e07082b0177e1",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-04-17T07:11:33.137Z",
  "text": "Or rather, most recent pull from master with fresh build which I assume is 0.38rc1",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "No issues with something like flatten",
  "id": "5ad59ea67c3a01610dede76f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-04-17T07:13:42.783Z",
  "text": "No issues with something like flatten",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Ah, got it. Array was not flattened when calling sort without an axis argument.",
  "id": "5ad59f1a15c9b03114053d49",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-04-17T07:15:38.762Z",
  "text": "Ah, got it. Array was not flattened when calling sort without an axis argument.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "<a href=\"https://docs.scipy.org/doc/numpy/reference/generated/numpy.sort.html\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://docs.scipy.org/doc/numpy/reference/generated/numpy.sort.html</a>",
  "id": "5ad59f29270d7d3708d5d169",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-04-17T07:15:53.861Z",
  "text": "https://docs.scipy.org/doc/numpy/reference/generated/numpy.sort.html",
  "unread": false,
  "urls": [
   {
    "url": "https://docs.scipy.org/doc/numpy/reference/generated/numpy.sort.html"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/jpivarski",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/1852447?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/1852447?v=4&s=60",
   "displayName": "Jim Pivarski",
   "gv": "4",
   "id": "5a4e9793d73408ce4f862a26",
   "url": "/jpivarski",
   "username": "jpivarski",
   "v": 5
  },
  "html": "Question about type inference with <code>numba.types.Optional(X)</code>: if <code>x</code> has optional type, it can either be <code>None</code> or a value of type <code>X</code>. In my code, I have an <code>if x is not None:</code> block; how can I ensure that <code>x</code> has type <code>X</code> (and not <code>Optional(X)</code>) inside the block?",
  "id": "5ad7477b6bbe1d2739fc9167",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-04-18T13:26:19.008Z",
  "text": "Question about type inference with `numba.types.Optional(X)`: if `x` has optional type, it can either be `None` or a value of type `X`. In my code, I have an `if x is not None:` block; how can I ensure that `x` has type `X` (and not `Optional(X)`) inside the block?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/jpivarski",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/1852447?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/1852447?v=4&s=60",
   "displayName": "Jim Pivarski",
   "gv": "4",
   "id": "5a4e9793d73408ce4f862a26",
   "url": "/jpivarski",
   "username": "jpivarski",
   "v": 5
  },
  "html": "This is what&#39;s failing:<pre><code><span class=\"keyword\">if</span> x <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:\n    do_something(x[<span class=\"number\">0</span>])</code></pre>",
  "id": "5ad747a22b9dfdbc3aa2e3fa",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-04-18T13:26:58.193Z",
  "text": "This is what's failing:\n```\nif x is not None:\n    do_something(x[0])\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/jpivarski",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/1852447?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/1852447?v=4&s=60",
   "displayName": "Jim Pivarski",
   "gv": "4",
   "id": "5a4e9793d73408ce4f862a26",
   "url": "/jpivarski",
   "username": "jpivarski",
   "v": 5
  },
  "html": "<p>Here&#39;s a more thorough bracketing of the problem:</p><p>Normal Python with a variable <code>tmp</code> that may be <code>None</code> or a 2-tuple:</p><pre><code class=\"python\"><span class=\"prompt\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> numpy\n<span class=\"prompt\">&gt;&gt;&gt; </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">callme</span><span class=\"params\">(value)</span>:</span>\n<span class=\"prompt\">... </span>    <span class=\"keyword\">if</span> value == <span class=\"number\">0</span>:\n<span class=\"prompt\">... </span>        <span class=\"keyword\">return</span> <span class=\"keyword\">None</span>\n<span class=\"prompt\">... </span>    <span class=\"keyword\">else</span>:\n<span class=\"prompt\">... </span>        <span class=\"keyword\">return</span> (value, value)\n...\n<span class=\"prompt\">&gt;&gt;&gt; </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span><span class=\"params\">(value, array)</span>:</span>\n<span class=\"prompt\">... </span>    tmp = callme(value)\n<span class=\"prompt\">... </span>    <span class=\"keyword\">if</span> tmp <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:\n<span class=\"prompt\">... </span>        array[<span class=\"number\">0</span>] = tmp[<span class=\"number\">0</span>]\n...\n<span class=\"prompt\">&gt;&gt;&gt; </span>array = numpy.array([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])\n<span class=\"prompt\">&gt;&gt;&gt; </span>f(<span class=\"number\">0</span>, array)\n<span class=\"prompt\">&gt;&gt;&gt; </span>array\narray([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])\n<span class=\"prompt\">&gt;&gt;&gt; </span>f(<span class=\"number\">999</span>, array)\n<span class=\"prompt\">&gt;&gt;&gt; </span>array\narray([<span class=\"number\">999</span>,   <span class=\"number\">2</span>,   <span class=\"number\">3</span>])</code></pre><p>Numba version with a <code>tmp</code> variable that is only ever a 2-tuple:</p><pre><code class=\"python\"><span class=\"prompt\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> numba\n<span class=\"prompt\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> numpy\n<span class=\"prompt\">&gt;&gt;&gt; </span><span class=\"decorator\">@numba.njit</span>\n<span class=\"prompt\">... </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">callme</span><span class=\"params\">(value)</span>:</span>\n<span class=\"prompt\">... </span>    <span class=\"keyword\">return</span> (value, value)\n...\n<span class=\"prompt\">&gt;&gt;&gt; </span><span class=\"decorator\">@numba.njit</span>\n<span class=\"prompt\">... </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span><span class=\"params\">(value, array)</span>:</span>\n<span class=\"prompt\">... </span>    tmp = callme(value)\n<span class=\"prompt\">... </span>    <span class=\"keyword\">if</span> tmp <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:\n<span class=\"prompt\">... </span>        array[<span class=\"number\">0</span>] = tmp[<span class=\"number\">0</span>]\n...\n<span class=\"prompt\">&gt;&gt;&gt; </span>array = numpy.array([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])\n<span class=\"prompt\">&gt;&gt;&gt; </span>f(<span class=\"number\">0</span>, array)\n<span class=\"prompt\">&gt;&gt;&gt; </span>array\narray([<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])\n<span class=\"prompt\">&gt;&gt;&gt; </span>f(<span class=\"number\">999</span>, array)\n<span class=\"prompt\">&gt;&gt;&gt; </span>array\narray([<span class=\"number\">999</span>,   <span class=\"number\">2</span>,   <span class=\"number\">3</span>])</code></pre><p>Numba version of the original, with <code>tmp</code> that is an Optional, either <code>None</code> or a 2-tuple:</p><pre><code class=\"python\"><span class=\"prompt\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> numba\n<span class=\"prompt\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> numpy\n<span class=\"prompt\">&gt;&gt;&gt; </span><span class=\"decorator\">@numba.njit</span>\n<span class=\"prompt\">... </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">callme</span><span class=\"params\">(value)</span>:</span>\n<span class=\"prompt\">... </span>    <span class=\"keyword\">if</span> value == <span class=\"number\">0</span>:\n<span class=\"prompt\">... </span>        <span class=\"keyword\">return</span> <span class=\"keyword\">None</span>\n<span class=\"prompt\">... </span>    <span class=\"keyword\">else</span>:\n<span class=\"prompt\">... </span>        <span class=\"keyword\">return</span> (value, value)\n...\n<span class=\"prompt\">&gt;&gt;&gt; </span><span class=\"decorator\">@numba.njit</span>\n<span class=\"prompt\">... </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span><span class=\"params\">(value, array)</span>:</span>\n<span class=\"prompt\">... </span>    tmp = callme(value)\n<span class=\"prompt\">... </span>    <span class=\"keyword\">if</span> tmp <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:\n<span class=\"prompt\">... </span>        array[<span class=\"number\">0</span>] = tmp[<span class=\"number\">0</span>]\n...\n<span class=\"prompt\">&gt;&gt;&gt; </span>array = numpy.array([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])\n<span class=\"prompt\">&gt;&gt;&gt; </span>f(<span class=\"number\">0</span>, array)\nTraceback (most recent call last):\n  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;\n  File <span class=\"string\">\"/home/pivarski/.local/lib/python2.7/site-packages/numba/dispatcher.py\"</span>, line <span class=\"number\">307</span>, <span class=\"keyword\">in</span> _compile_for_args\n    <span class=\"keyword\">return</span> self.compile(tuple(argtypes))\n...\n  File <span class=\"string\">\"/home/pivarski/.local/lib/python2.7/site-packages/numba/targets/base.py\"</span>, line <span class=\"number\">481</span>, <span class=\"keyword\">in</span> get_function\n    sig = sig.as_function()\nLoweringError: <span class=\"string\">'NoneType'</span> object has no attribute <span class=\"string\">'as_function'</span>\nFile <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">5</span>\n[<span class=\"number\">1</span>] During: lowering <span class=\"string\">\"$24.3 = static_getitem(index=0, value=tmp, index_var=$const24.2)\"</span> at &lt;stdin&gt; (<span class=\"number\">5</span>)\n\nFailed at nopython (nopython mode backend)\n<span class=\"string\">'NoneType'</span> object has no attribute <span class=\"string\">'as_function'</span>\nFile <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">5</span>\n[<span class=\"number\">1</span>] During: lowering <span class=\"string\">\"$24.3 = static_getitem(index=0, value=tmp, index_var=$const24.2)\"</span> at &lt;stdin&gt; (<span class=\"number\">5</span>)</code></pre><p>It seems to be necessary for the Optional to be produced in another function.</p>",
  "id": "5ad74b5e5f188ccc157a3a65",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-04-18T13:42:54.119Z",
  "text": "Here's a more thorough bracketing of the problem:\n\nNormal Python with a variable `tmp` that may be `None` or a 2-tuple:\n```python\n>>> import numpy\n>>> def callme(value):\n...     if value == 0:\n...         return None\n...     else:\n...         return (value, value)\n...\n>>> def f(value, array):\n...     tmp = callme(value)\n...     if tmp is not None:\n...         array[0] = tmp[0]\n...\n>>> array = numpy.array([1, 2, 3])\n>>> f(0, array)\n>>> array\narray([1, 2, 3])\n>>> f(999, array)\n>>> array\narray([999,   2,   3])\n```\n\nNumba version with a `tmp` variable that is only ever a 2-tuple:\n```python\n>>> import numba\n>>> import numpy\n>>> @numba.njit\n... def callme(value):\n...     return (value, value)\n...\n>>> @numba.njit\n... def f(value, array):\n...     tmp = callme(value)\n...     if tmp is not None:\n...         array[0] = tmp[0]\n...\n>>> array = numpy.array([1, 2, 3])\n>>> f(0, array)\n>>> array\narray([0, 2, 3])\n>>> f(999, array)\n>>> array\narray([999,   2,   3])\n```\n\nNumba version of the original, with `tmp` that is an Optional, either `None` or a 2-tuple:\n```python\n>>> import numba\n>>> import numpy\n>>> @numba.njit\n... def callme(value):\n...     if value == 0:\n...         return None\n...     else:\n...         return (value, value)\n...\n>>> @numba.njit\n... def f(value, array):\n...     tmp = callme(value)\n...     if tmp is not None:\n...         array[0] = tmp[0]\n...\n>>> array = numpy.array([1, 2, 3])\n>>> f(0, array)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/home/pivarski/.local/lib/python2.7/site-packages/numba/dispatcher.py\", line 307, in _compile_for_args\n    return self.compile(tuple(argtypes))\n...\n  File \"/home/pivarski/.local/lib/python2.7/site-packages/numba/targets/base.py\", line 481, in get_function\n    sig = sig.as_function()\nLoweringError: 'NoneType' object has no attribute 'as_function'\nFile \"<stdin>\", line 5\n[1] During: lowering \"$24.3 = static_getitem(index=0, value=tmp, index_var=$const24.2)\" at <stdin> (5)\n\nFailed at nopython (nopython mode backend)\n'NoneType' object has no attribute 'as_function'\nFile \"<stdin>\", line 5\n[1] During: lowering \"$24.3 = static_getitem(index=0, value=tmp, index_var=$const24.2)\" at <stdin> (5)\n```\n\nIt seems to be necessary for the Optional to be produced in another function.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/jpivarski",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/1852447?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/1852447?v=4&s=60",
   "displayName": "Jim Pivarski",
   "gv": "4",
   "id": "5a4e9793d73408ce4f862a26",
   "url": "/jpivarski",
   "username": "jpivarski",
   "v": 5
  },
  "html": "This is not necessarily a bug (Numba only supports a subset of Python, especially when the issue is static vs dynamic typing), but is there a language construct I can use inside Numba-compiled code that would assure the compiler that <code>tmp</code> is not Optional within the if-block?",
  "id": "5ad74bb16bbe1d2739fca946",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-04-18T13:44:17.391Z",
  "text": "This is not necessarily a bug (Numba only supports a subset of Python, especially when the issue is static vs dynamic typing), but is there a language construct I can use inside Numba-compiled code that would assure the compiler that `tmp` is not Optional within the if-block?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/jpivarski",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/1852447?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/1852447?v=4&s=60",
   "displayName": "Jim Pivarski",
   "gv": "4",
   "id": "5a4e9793d73408ce4f862a26",
   "url": "/jpivarski",
   "username": "jpivarski",
   "v": 5
  },
  "html": "Here&#39;s a new function that would do what I want (require an optional to not be <code>None</code>, or else it raises a <code>ValueError</code>). Am I reproducing something that already exists in Numba?<pre><code class=\"python\"><span class=\"prompt\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> numba\n<span class=\"prompt\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> numpy\n\n<span class=\"prompt\">&gt;&gt;&gt; </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">required</span><span class=\"params\">(x)</span>:</span>\n<span class=\"prompt\">... </span>    <span class=\"keyword\">if</span> x <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:\n<span class=\"prompt\">... </span>        <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">\"optional value is None\"</span>)\n<span class=\"prompt\">... </span>    <span class=\"keyword\">else</span>:\n<span class=\"prompt\">... </span>        <span class=\"keyword\">return</span> x\n\n<span class=\"prompt\">&gt;&gt;&gt; </span><span class=\"decorator\">@numba.extending.type_callable(required)</span>\n<span class=\"prompt\">... </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">required_type</span><span class=\"params\">(context)</span>:</span>\n<span class=\"prompt\">... </span>    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">typer</span><span class=\"params\">(x)</span>:</span>\n<span class=\"prompt\">... </span>        <span class=\"keyword\">if</span> isinstance(x, numba.types.Optional):\n<span class=\"prompt\">... </span>            <span class=\"keyword\">return</span> x.type\n<span class=\"prompt\">... </span>    <span class=\"keyword\">return</span> typer\n\n<span class=\"prompt\">&gt;&gt;&gt; </span><span class=\"decorator\">@numba.extending.lower_builtin(required, numba.types.Optional)</span>\n<span class=\"prompt\">... </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">required_impl</span><span class=\"params\">(context, builder, sig, args)</span>:</span>\n<span class=\"prompt\">... </span>    tpe, = sig.args\n<span class=\"prompt\">... </span>    val, = args\n<span class=\"prompt\">... </span>    helper = context.make_helper(builder, tpe, value=val)\n<span class=\"prompt\">... </span>    <span class=\"keyword\">with</span> builder.if_then(builder.not_(helper.valid), likely=<span class=\"keyword\">False</span>):\n<span class=\"prompt\">... </span>        context.call_conv.return_user_exc(builder, TypeError, (<span class=\"string\">\"optional value is None\"</span>,))\n<span class=\"prompt\">... </span>    <span class=\"keyword\">return</span> helper.data\n\n<span class=\"comment\"># now I can use the 'required' function to ensure that tmp is not optional</span>\n\n<span class=\"prompt\">&gt;&gt;&gt; </span><span class=\"decorator\">@numba.njit</span>\n<span class=\"prompt\">... </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">callme</span><span class=\"params\">(value)</span>:</span>\n<span class=\"prompt\">... </span>    <span class=\"keyword\">if</span> value == <span class=\"number\">0</span>:\n<span class=\"prompt\">... </span>        <span class=\"keyword\">return</span> <span class=\"keyword\">None</span>\n<span class=\"prompt\">... </span>    <span class=\"keyword\">else</span>:\n<span class=\"prompt\">... </span>        <span class=\"keyword\">return</span> (value, value)\n\n<span class=\"prompt\">&gt;&gt;&gt; </span><span class=\"decorator\">@numba.njit</span>\n<span class=\"prompt\">... </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span><span class=\"params\">(value, array)</span>:</span>\n<span class=\"prompt\">... </span>    tmp = callme(value)\n<span class=\"prompt\">... </span>    <span class=\"keyword\">if</span> tmp <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:\n<span class=\"prompt\">... </span>        tmp2 = required(tmp)\n<span class=\"prompt\">... </span>        array[<span class=\"number\">0</span>] = tmp2[<span class=\"number\">0</span>]\n\n<span class=\"prompt\">&gt;&gt;&gt; </span>array = numpy.array([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])\n<span class=\"prompt\">&gt;&gt;&gt; </span>f(<span class=\"number\">0</span>, array)\n<span class=\"prompt\">&gt;&gt;&gt; </span>array\narray([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])\n<span class=\"prompt\">&gt;&gt;&gt; </span>f(<span class=\"number\">999</span>, array)\n<span class=\"prompt\">&gt;&gt;&gt; </span>array\narray([<span class=\"number\">999</span>,   <span class=\"number\">2</span>,   <span class=\"number\">3</span>])</code></pre>",
  "id": "5ad7569f5d7286b43a40bc72",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-04-18T14:30:55.625Z",
  "text": "Here's a new function that would do what I want (require an optional to not be `None`, or else it raises a `ValueError`). Am I reproducing something that already exists in Numba?\n\n```python\n>>> import numba\n>>> import numpy\n\n>>> def required(x):\n...     if x is None:\n...         raise ValueError(\"optional value is None\")\n...     else:\n...         return x\n\n>>> @numba.extending.type_callable(required)\n... def required_type(context):\n...     def typer(x):\n...         if isinstance(x, numba.types.Optional):\n...             return x.type\n...     return typer\n\n>>> @numba.extending.lower_builtin(required, numba.types.Optional)\n... def required_impl(context, builder, sig, args):\n...     tpe, = sig.args\n...     val, = args\n...     helper = context.make_helper(builder, tpe, value=val)\n...     with builder.if_then(builder.not_(helper.valid), likely=False):\n...         context.call_conv.return_user_exc(builder, TypeError, (\"optional value is None\",))\n...     return helper.data\n\n# now I can use the 'required' function to ensure that tmp is not optional\n\n>>> @numba.njit\n... def callme(value):\n...     if value == 0:\n...         return None\n...     else:\n...         return (value, value)\n\n>>> @numba.njit\n... def f(value, array):\n...     tmp = callme(value)\n...     if tmp is not None:\n...         tmp2 = required(tmp)\n...         array[0] = tmp2[0]\n\n>>> array = numpy.array([1, 2, 3])\n>>> f(0, array)\n>>> array\narray([1, 2, 3])\n>>> f(999, array)\n>>> array\narray([999,   2,   3])\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/dscole",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/9452449?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/9452449?v=4&s=60",
   "displayName": "dscole",
   "gv": "4",
   "id": "57850d09c2f0db084a22a28d",
   "url": "/dscole",
   "username": "dscole",
   "v": 17
  },
  "html": "Hey,  does anyone know if there a way to get &#39;notified &#39; if an overload_method is used?",
  "id": "5ad81d542b9dfdbc3aa69dcb",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-04-19T04:38:44.694Z",
  "text": "Hey,  does anyone know if there a way to get 'notified ' if an overload_method is used?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/dscole",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/9452449?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/9452449?v=4&s=60",
   "displayName": "dscole",
   "gv": "4",
   "id": "57850d09c2f0db084a22a28d",
   "url": "/dscole",
   "username": "dscole",
   "v": 17
  },
  "html": "I want to know if a specifc method of a custom type is used/seen while compiling a nopython function",
  "id": "5ad81dc56d7e07082b0d2869",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-04-19T04:40:37.113Z",
  "text": "I want to know if a specifc method of a custom type is used/seen while compiling a nopython function",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Easiest way would probably to hack the overload_method decorator",
  "id": "5ad839de1130fe3d36f2229a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-04-19T06:40:30.356Z",
  "text": "Easiest way would probably to hack the overload_method decorator",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/dscole",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/9452449?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/9452449?v=4&s=60",
   "displayName": "dscole",
   "gv": "4",
   "id": "57850d09c2f0db084a22a28d",
   "url": "/dscole",
   "username": "dscole",
   "v": 17
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"Rik-de-Kort\" class=\"mention\">@Rik-de-Kort</span> thanks,  I&#39;ll give it a shot.  I noticed that the calling context has a class member called _impl_cache that keeps track of all the compiled versions of my method. Do you know how I can access it from outside numba? Presumably through the typing context or something like that?",
  "id": "5ad899cc5d7286b43a4667a4",
  "issues": [],
  "mentions": [
   {
    "screenName": "Rik-de-Kort",
    "userId": "5a0ea31cd73408ce4f7f000d",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 17,
  "sent": "2018-04-19T13:29:48.336Z",
  "text": "@Rik-de-Kort thanks,  I'll give it a shot.  I noticed that the calling context has a class member called _impl_cache that keeps track of all the compiled versions of my method. Do you know how I can access it from outside numba? Presumably through the typing context or something like that?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "The jitted function is a dispatcher which should have the cache onboard somewhere. You can access the list of signatures for which a version is compiled via dispatcher.signatures",
  "id": "5ad9a19615c9b031141778e7",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-04-20T08:15:18.499Z",
  "text": "The jitted function is a dispatcher which should have the cache onboard somewhere. You can access the list of signatures for which a version is compiled via dispatcher.signatures",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "The full compiled versions will be in dispatcher.overloads",
  "id": "5ad9a1d45f188ccc15849703",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-04-20T08:16:20.669Z",
  "text": "The full compiled versions will be in dispatcher.overloads",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "What do you want to achieve?",
  "id": "5ad9a4d515c9b03114178917",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-04-20T08:29:09.657Z",
  "text": "What do you want to achieve?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/dscole",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/9452449?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/9452449?v=4&s=60",
   "displayName": "dscole",
   "gv": "4",
   "id": "57850d09c2f0db084a22a28d",
   "url": "/dscole",
   "username": "dscole",
   "v": 17
  },
  "html": "I&#39;m writing a library that takes as input a user function and compiles it internally,  and I need to know if the user function uses some specific type methods",
  "id": "5ad9ecd2109bb04332e1accf",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-04-20T13:36:18.213Z",
  "text": "I'm writing a library that takes as input a user function and compiles it internally,  and I need to know if the user function uses some specific type methods",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/datnamer",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/8646471?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/8646471?v=4&s=60",
   "displayName": "datnamer",
   "gv": "4",
   "id": "54602d6fdb8155e6700d316b",
   "url": "/datnamer",
   "username": "datnamer",
   "v": 10
  },
  "html": " <span data-link-type=\"mention\" data-screen-name=\"dscole\" class=\"mention\">@dscole</span>  why don&#39;t you write an overload for those methods?",
  "id": "5ad9ff746d7e07082b1611dd",
  "issues": [],
  "mentions": [
   {
    "screenName": "dscole",
    "userId": "57850d09c2f0db084a22a28d",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 18,
  "sent": "2018-04-20T14:55:48.415Z",
  "text": " @dscole  why don't you write an overload for those methods?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/dscole",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/9452449?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/9452449?v=4&s=60",
   "displayName": "dscole",
   "gv": "4",
   "id": "57850d09c2f0db084a22a28d",
   "url": "/dscole",
   "username": "dscole",
   "v": 17
  },
  "html": "I did, now I want to know when they are actually being used",
  "id": "5ada2117270d7d3708ea8df8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-04-20T17:19:19.815Z",
  "text": "I did, now I want to know when they are actually being used",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "I think the dispatcher object will have everything you need then. :)",
  "id": "5adafba75f188ccc158a2b89",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-04-21T08:51:51.459Z",
  "text": "I think the dispatcher object will have everything you need then. :)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/lesshaste",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/4278485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/4278485?v=4&s=60",
   "displayName": "lesshaste",
   "gv": "4",
   "id": "564789be16b6c7089cbab8b7",
   "url": "/lesshaste",
   "username": "lesshaste",
   "v": 40
  },
  "html": "Hi.. I am using numba for the first time with this code <a href=\"https://bpaste.net/show/1b6b502ee4b3\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://bpaste.net/show/1b6b502ee4b3</a>  I get the following errors",
  "id": "5adc5337109bb04332ea21bd",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-04-22T09:17:43.974Z",
  "text": "Hi.. I am using numba for the first time with this code https://bpaste.net/show/1b6b502ee4b3  I get the following errors",
  "unread": false,
  "urls": [
   {
    "url": "https://bpaste.net/show/1b6b502ee4b3"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/lesshaste",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/4278485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/4278485?v=4&s=60",
   "displayName": "lesshaste",
   "gv": "4",
   "id": "564789be16b6c7089cbab8b7",
   "url": "/lesshaste",
   "username": "lesshaste",
   "v": 40
  },
  "html": "Failed at nopython (nopython mode backend)<br>list(list(int64)): unsupported nested memory-managed object<br>File &quot;hafnianspeedtest.py&quot;, line 15<br>[1] During: lowering &quot;b = arg(0, name=b)&quot; at ./hafnianspeedtest.py (15)<br>[2] During: resolving callee type: type(CPUDispatcher(&lt;function solve at 0x7fe4602d65f0&gt;))<br>[3] During: typing of call at ./hafnianspeedtest.py (11)",
  "id": "5adc53451130fe3d3602ad54",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-04-22T09:17:57.161Z",
  "text": "Failed at nopython (nopython mode backend)\nlist(list(int64)): unsupported nested memory-managed object\nFile \"hafnianspeedtest.py\", line 15\n[1] During: lowering \"b = arg(0, name=b)\" at ./hafnianspeedtest.py (15)\n[2] During: resolving callee type: type(CPUDispatcher(<function solve at 0x7fe4602d65f0>))\n[3] During: typing of call at ./hafnianspeedtest.py (11)\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 10
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"lesshaste\" class=\"mention\">@lesshaste</span> You&#39;re probably making something like a list in a list, which isn&#39;t supported by Numba at this point.",
  "id": "5adc80da5d7286b43a558f47",
  "issues": [],
  "mentions": [
   {
    "screenName": "lesshaste",
    "userId": "564789be16b6c7089cbab8b7",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 16,
  "sent": "2018-04-22T12:32:26.664Z",
  "text": "@lesshaste You're probably making something like a list in a list, which isn't supported by Numba at this point.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/lesshaste",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/4278485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/4278485?v=4&s=60",
   "displayName": "lesshaste",
   "gv": "4",
   "id": "564789be16b6c7089cbab8b7",
   "url": "/lesshaste",
   "username": "lesshaste",
   "v": 40
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"hameerabbasi\" class=\"mention\">@hameerabbasi</span>  that&#39;s exactly what it is. Would a 2d numpy array work instead?",
  "id": "5adc99cd5f188ccc158f951d",
  "issues": [],
  "mentions": [
   {
    "screenName": "hameerabbasi",
    "userId": "55b089c90fc9f982beaaa526",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 16,
  "sent": "2018-04-22T14:18:53.008Z",
  "text": "@hameerabbasi  that's exactly what it is. Would a 2d numpy array work instead?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 10
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"lesshaste\" class=\"mention\">@lesshaste</span> Yes, it will.",
  "id": "5adc99f72b9dfdbc3ab81d67",
  "issues": [],
  "mentions": [
   {
    "screenName": "lesshaste",
    "userId": "564789be16b6c7089cbab8b7",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 16,
  "sent": "2018-04-22T14:19:35.754Z",
  "text": "@lesshaste Yes, it will.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/lesshaste",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/4278485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/4278485?v=4&s=60",
   "displayName": "lesshaste",
   "gv": "4",
   "id": "564789be16b6c7089cbab8b7",
   "url": "/lesshaste",
   "username": "lesshaste",
   "v": 40
  },
  "html": "ok thanks... I think I read that lists of lists might be supported in 0.38",
  "id": "5adc9a1727c509a7743ae57b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-04-22T14:20:07.758Z",
  "text": "ok thanks... I think I read that lists of lists might be supported in 0.38",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/lesshaste",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/4278485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/4278485?v=4&s=60",
   "displayName": "lesshaste",
   "gv": "4",
   "id": "564789be16b6c7089cbab8b7",
   "url": "/lesshaste",
   "username": "lesshaste",
   "v": 40
  },
  "html": "which would be cool",
  "id": "5adc9a1a109bb04332eb1606",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-04-22T14:20:10.893Z",
  "text": "which would be cool",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 10
  },
  "html": "It was planned (I was hoping for it too)",
  "id": "5adc9a2d62316e0505e9185d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-04-22T14:20:29.201Z",
  "text": "It was planned (I was hoping for it too)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 10
  },
  "html": "But it got pushed to 0.39.",
  "id": "5adc9a357c3a01610d0af1df",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-04-22T14:20:37.526Z",
  "text": "But it got pushed to 0.39.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/lesshaste",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/4278485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/4278485?v=4&s=60",
   "displayName": "lesshaste",
   "gv": "4",
   "id": "564789be16b6c7089cbab8b7",
   "url": "/lesshaste",
   "username": "lesshaste",
   "v": 40
  },
  "html": "oh ok",
  "id": "5adc9a3d109bb04332eb1663",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-04-22T14:20:45.957Z",
  "text": "oh ok",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/lesshaste",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/4278485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/4278485?v=4&s=60",
   "displayName": "lesshaste",
   "gv": "4",
   "id": "564789be16b6c7089cbab8b7",
   "url": "/lesshaste",
   "username": "lesshaste",
   "v": 40
  },
  "html": "thanks",
  "id": "5adc9a3e27c509a7743ae64f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-04-22T14:20:46.751Z",
  "text": "thanks",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 10
  },
  "html": "<span data-link-type=\"issue\" data-issue=\"2560\" data-issue-repo=\"numba/numba\" class=\"issue\">numba/numba#2560</span>",
  "id": "5adc9a465f188ccc158f96a3",
  "issues": [
   {
    "number": "2560",
    "repo": "numba/numba"
   }
  ],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-04-22T14:20:54.219Z",
  "text": "https://github.com/numba/numba/issues/2560",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/lesshaste",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/4278485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/4278485?v=4&s=60",
   "displayName": "lesshaste",
   "gv": "4",
   "id": "564789be16b6c7089cbab8b7",
   "url": "/lesshaste",
   "username": "lesshaste",
   "v": 40
  },
  "html": "thanks",
  "id": "5adc9b17109bb04332eb1972",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-04-22T14:24:23.318Z",
  "text": "thanks",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "I want to start working on some test refactoring; however I&#39;m not sure whether I should set up a WIP pull request, or open an issue tracker with some milestones. Is there a preferred way of doing this?",
  "id": "5adee954109bb04332f519f8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-04-24T08:22:44.058Z",
  "text": "I want to start working on some test refactoring; however I'm not sure whether I should set up a WIP pull request, or open an issue tracker with some milestones. Is there a preferred way of doing this?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "Perhaps open an issue proposing what it is you want to do ?",
  "id": "5adef19527c509a774452840",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-04-24T08:57:57.451Z",
  "text": "Perhaps open an issue proposing what it is you want to do ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Aight",
  "id": "5adef2bf2d0e228d7ba70353",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-04-24T09:02:55.859Z",
  "text": "Aight",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/skrah",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/16530421?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/16530421?v=4&s=60",
   "displayName": "Stefan Krah",
   "gv": "4",
   "id": "5a9941aad73408ce4f8f9271",
   "url": "/skrah",
   "username": "skrah",
   "v": 9
  },
  "html": "<p>Related to previous non-public discussions, there&#39;s now an <code>@xndvectorize</code> decorator that translates Datashape to Numba types and accepts  xnd containers as arguments.</p><p>Internally, it uses Numba&#39;s <code>@guvectorize</code>.</p><p><a href=\"https://github.com/plures/gumath/blob/2b0d1c22f0f8b6665da70d9411355ed21602607f/python/test_gumath.py#L303\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://github.com/plures/gumath/blob/2b0d1c22f0f8b6665da70d9411355ed21602607f/python/test_gumath.py#L303</a></p>",
  "id": "5adf72151130fe3d3610d370",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-04-24T18:06:13.273Z",
  "text": "Related to previous non-public discussions, there's now an `@xndvectorize` decorator that translates Datashape to Numba types and accepts  xnd containers as arguments.\n\nInternally, it uses Numba's `@guvectorize`.\n\nhttps://github.com/plures/gumath/blob/2b0d1c22f0f8b6665da70d9411355ed21602607f/python/test_gumath.py#L303\n",
  "unread": false,
  "urls": [
   {
    "url": "https://github.com/plures/gumath/blob/2b0d1c22f0f8b6665da70d9411355ed21602607f/python/test_gumath.py#L303"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "Nice!",
  "id": "5adf722e1130fe3d3610d3f2",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-04-24T18:06:38.957Z",
  "text": "Nice!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "We&#39;re trying to get the 0.38 release out today, but we will definitely take a look at this.",
  "id": "5adf724a15c9b031142f9dd2",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-04-24T18:07:06.356Z",
  "text": "We're trying to get the 0.38 release out today, but we will definitely take a look at this.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/skrah",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/16530421?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/16530421?v=4&s=60",
   "displayName": "Stefan Krah",
   "gv": "4",
   "id": "5a9941aad73408ce4f8f9271",
   "url": "/skrah",
   "username": "skrah",
   "v": 9
  },
  "html": "<p>Great!  The decorator still uses a temporary numpy array for the <code>out</code> argument, but it appears to be very fast.</p><p>Is it correct that the <code>out</code> argument is currently restricted to NumPy arrays and does not (yet) accept buffer exporters?</p>",
  "id": "5adf7326109bb04332f834ae",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 20,
  "sent": "2018-04-24T18:10:46.612Z",
  "text": "Great!  The decorator still uses a temporary numpy array for the `out` argument, but it appears to be very fast.\n\nIs it correct that the `out` argument is currently restricted to NumPy arrays and does not (yet) accept buffer exporters?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/myro",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/989720?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/989720?v=4&s=60",
   "displayName": "myro",
   "gv": "4",
   "id": "5adf8992d73408ce4f96eec1",
   "url": "/myro",
   "username": "myro"
  },
  "html": "hi. short question: Is it possible to force loop indices to remain uint32 throughout a numba function?",
  "id": "5adf89dd5d7286b43a63742f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 20,
  "sent": "2018-04-24T19:47:41.171Z",
  "text": "hi. short question: Is it possible to force loop indices to remain uint32 throughout a numba function?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 10
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"myro\" class=\"mention\">@myro</span> I&#39;m not entirely sure this will work, but you can try i = np.uint32(0) and then <code>for</code> with <code>range</code>. If that doesn&#39;t work, try <code>while</code>.",
  "id": "5ae031e1b01085166cbb3f94",
  "issues": [],
  "mentions": [
   {
    "screenName": "myro",
    "userId": "5adf8992d73408ce4f96eec1",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 19,
  "sent": "2018-04-25T07:44:33.251Z",
  "text": "@myro I'm not entirely sure this will work, but you can try i = np.uint32(0) and then `for` with `range`. If that doesn't work, try `while`.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/innovate-invent",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=60",
   "displayName": "innovate-invent",
   "gv": "4",
   "id": "5ae7ccd1d73408ce4f97b27e",
   "url": "/innovate-invent",
   "username": "innovate-invent"
  },
  "html": "Hi guys!",
  "id": "5ae7ccf2dea1b95c10edad14",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-05-01T02:12:02.209Z",
  "text": "Hi guys!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/innovate-invent",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=60",
   "displayName": "innovate-invent",
   "gv": "4",
   "id": "5ae7ccd1d73408ce4f97b27e",
   "url": "/innovate-invent",
   "username": "innovate-invent"
  },
  "html": "anyone feel like helping a numba nub for a second? I have been pouring over the docs for two days and can&#39;t find a solution to a compile time error.",
  "id": "5ae7cd33dea1b95c10edb067",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-05-01T02:13:07.564Z",
  "text": "anyone feel like helping a numba nub for a second? I have been pouring over the docs for two days and can't find a solution to a compile time error.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/innovate-invent",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=60",
   "displayName": "innovate-invent",
   "gv": "4",
   "id": "5ae7ccd1d73408ce4f97b27e",
   "url": "/innovate-invent",
   "username": "innovate-invent"
  },
  "html": "So this works as I would expect: <a href=\"https://pastebin.com/qyuKh54H\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://pastebin.com/qyuKh54H</a>",
  "id": "5ae7cd88dea1b95c10edb79b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-05-01T02:14:32.578Z",
  "text": "So this works as I would expect: https://pastebin.com/qyuKh54H",
  "unread": false,
  "urls": [
   {
    "url": "https://pastebin.com/qyuKh54H"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/innovate-invent",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=60",
   "displayName": "innovate-invent",
   "gv": "4",
   "id": "5ae7ccd1d73408ce4f97b27e",
   "url": "/innovate-invent",
   "username": "innovate-invent"
  },
  "html": "but jitting this function throws a error: <a href=\"https://github.com/innovate-invent/bampy/blob/master/bampy/bgzf/zlib.py#L173\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://github.com/innovate-invent/bampy/blob/master/bampy/bgzf/zlib.py#L173</a>",
  "id": "5ae7cdc2dea1b95c10edba18",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-05-01T02:15:30.529Z",
  "text": "but jitting this function throws a error: https://github.com/innovate-invent/bampy/blob/master/bampy/bgzf/zlib.py#L173",
  "unread": false,
  "urls": [
   {
    "url": "https://github.com/innovate-invent/bampy/blob/master/bampy/bgzf/zlib.py#L173"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/innovate-invent",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=60",
   "displayName": "innovate-invent",
   "gv": "4",
   "id": "5ae7ccd1d73408ce4f97b27e",
   "url": "/innovate-invent",
   "username": "innovate-invent"
  },
  "html": "numba.errors.ConstantInferenceError: Failed at nopython (nopython rewrites)<br>no single definition for &#39;err&#39;",
  "id": "5ae7cddf727e915b103f0a01",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-05-01T02:15:59.102Z",
  "text": "numba.errors.ConstantInferenceError: Failed at nopython (nopython rewrites)\nno single definition for 'err'",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/innovate-invent",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=60",
   "displayName": "innovate-invent",
   "gv": "4",
   "id": "5ae7ccd1d73408ce4f97b27e",
   "url": "/innovate-invent",
   "username": "innovate-invent"
  },
  "html": "here is the full IR DUMP: <a href=\"https://pastebin.com/9nRywgPF\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://pastebin.com/9nRywgPF</a>",
  "id": "5ae7ce2a727e915b103f0e0e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-05-01T02:17:14.932Z",
  "text": "here is the full IR DUMP: https://pastebin.com/9nRywgPF",
  "unread": false,
  "urls": [
   {
    "url": "https://pastebin.com/9nRywgPF"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/innovate-invent",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=60",
   "displayName": "innovate-invent",
   "gv": "4",
   "id": "5ae7ccd1d73408ce4f97b27e",
   "url": "/innovate-invent",
   "username": "innovate-invent"
  },
  "html": "I am not sure how to read that dump",
  "id": "5ae7ce38dea1b95c10edbfba",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-05-01T02:17:28.632Z",
  "text": "I am not sure how to read that dump",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/innovate-invent",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=60",
   "displayName": "innovate-invent",
   "gv": "4",
   "id": "5ae7ccd1d73408ce4f97b27e",
   "url": "/innovate-invent",
   "username": "innovate-invent"
  },
  "html": "here is the jit commands I am using: <a href=\"https://github.com/innovate-invent/bampy/blob/master/bampy/mt/bgzf/zlib.py\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://github.com/innovate-invent/bampy/blob/master/bampy/mt/bgzf/zlib.py</a>",
  "id": "5ae7ceefdea1b95c10edcad9",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-05-01T02:20:30.998Z",
  "text": "here is the jit commands I am using: https://github.com/innovate-invent/bampy/blob/master/bampy/mt/bgzf/zlib.py",
  "unread": false,
  "urls": [
   {
    "url": "https://github.com/innovate-invent/bampy/blob/master/bampy/mt/bgzf/zlib.py"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/innovate-invent",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=60",
   "displayName": "innovate-invent",
   "gv": "4",
   "id": "5ae7ccd1d73408ce4f97b27e",
   "url": "/innovate-invent",
   "username": "innovate-invent"
  },
  "html": "I don&#39;t understand why it is trying to infer the type of err if I explicitly pass it in the locals parameter of jit",
  "id": "5ae7cf49dea1b95c10edd009",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-05-01T02:22:01.053Z",
  "text": "I don't understand why it is trying to infer the type of err if I explicitly pass it in the locals parameter of jit",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/innovate-invent",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=60",
   "displayName": "innovate-invent",
   "gv": "4",
   "id": "5ae7ccd1d73408ce4f97b27e",
   "url": "/innovate-invent",
   "username": "innovate-invent"
  },
  "html": "Just checked and I am running numba 0.35.0",
  "id": "5ae7d074727e915b103f2dac",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-05-01T02:27:00.410Z",
  "text": "Just checked and I am running numba 0.35.0",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/innovate-invent",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=60",
   "displayName": "innovate-invent",
   "gv": "4",
   "id": "5ae7ccd1d73408ce4f97b27e",
   "url": "/innovate-invent",
   "username": "innovate-invent"
  },
  "html": "Give me a sec to pull 0.38",
  "id": "5ae7d0b5727e915b103f3160",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-05-01T02:28:05.526Z",
  "text": "Give me a sec to pull 0.38",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/innovate-invent",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=60",
   "displayName": "innovate-invent",
   "gv": "4",
   "id": "5ae7ccd1d73408ce4f97b27e",
   "url": "/innovate-invent",
   "username": "innovate-invent"
  },
  "html": "same error :(",
  "id": "5ae7d1f5dea1b95c10edf87e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-05-01T02:33:25.711Z",
  "text": "same error :(",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/innovate-invent",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=60",
   "displayName": "innovate-invent",
   "gv": "4",
   "id": "5ae7ccd1d73408ce4f97b27e",
   "url": "/innovate-invent",
   "username": "innovate-invent"
  },
  "html": "I thought it might be something to do with the zlib function return types but commenting out those lines gives the same error",
  "id": "5ae7d361dea1b95c10ee1343",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-05-01T02:39:29.461Z",
  "text": "I thought it might be something to do with the zlib function return types but commenting out those lines gives the same error",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/innovate-invent",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=60",
   "displayName": "innovate-invent",
   "gv": "4",
   "id": "5ae7ccd1d73408ce4f97b27e",
   "url": "/innovate-invent",
   "username": "innovate-invent"
  },
  "html": ":fire:  Too bad there isn&#39;t a rubber ducky icon in this chat. I just took a wild shot in the dark and commented out the assert statement that uses err. Apparently assert was trying to type err as a string.",
  "id": "5ae7d55ddea1b95c10ee30d0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-05-01T02:47:57.356Z",
  "text": ":fire:  Too bad there isn't a rubber ducky icon in this chat. I just took a wild shot in the dark and commented out the assert statement that uses err. Apparently assert was trying to type err as a string.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/innovate-invent",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=60",
   "displayName": "innovate-invent",
   "gv": "4",
   "id": "5ae7ccd1d73408ce4f97b27e",
   "url": "/innovate-invent",
   "username": "innovate-invent"
  },
  "html": "ok, well on to a bigger problem. Why does numba.typing.ctypes_utils.from_ctypes() fail to convert a very straight forward ctypes struct: <a href=\"https://github.com/innovate-invent/bampy/blob/master/bampy/bgzf/zlib.py#L94\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://github.com/innovate-invent/bampy/blob/master/bampy/bgzf/zlib.py#L94</a>",
  "id": "5ae7dabedea1b95c10ee856a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-05-01T03:10:54.777Z",
  "text": "ok, well on to a bigger problem. Why does numba.typing.ctypes_utils.from_ctypes() fail to convert a very straight forward ctypes struct: https://github.com/innovate-invent/bampy/blob/master/bampy/bgzf/zlib.py#L94",
  "unread": false,
  "urls": [
   {
    "url": "https://github.com/innovate-invent/bampy/blob/master/bampy/bgzf/zlib.py#L94"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/innovate-invent",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=60",
   "displayName": "innovate-invent",
   "gv": "4",
   "id": "5ae7ccd1d73408ce4f97b27e",
   "url": "/innovate-invent",
   "username": "innovate-invent"
  },
  "html": "more importantly, why does jit not accept a ctypes struct?",
  "id": "5ae7db1b727e915b103fd891",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-05-01T03:12:27.278Z",
  "text": "more importantly, why does jit not accept a ctypes struct?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/innovate-invent",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=60",
   "displayName": "innovate-invent",
   "gv": "4",
   "id": "5ae7ccd1d73408ce4f97b27e",
   "url": "/innovate-invent",
   "username": "innovate-invent"
  },
  "html": "looks like it is because the class contains a c_char_p type",
  "id": "5ae7e477727e915b10406c61",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-05-01T03:52:23.670Z",
  "text": "looks like it is because the class contains a c_char_p type",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/innovate-invent",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=60",
   "displayName": "innovate-invent",
   "gv": "4",
   "id": "5ae7ccd1d73408ce4f97b27e",
   "url": "/innovate-invent",
   "username": "innovate-invent"
  },
  "html": "wait, are ctypes Structures supposed to be pushed through jitclass?",
  "id": "5ae7e4fc727e915b1040741a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-05-01T03:54:36.393Z",
  "text": "wait, are ctypes Structures supposed to be pushed through jitclass?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"innovate-invent\" class=\"mention\">@innovate-invent</span>, no numba just doesn\u2019t handle ctypes.Structure at the moment.",
  "id": "5ae888595cf0b830044a3ce9",
  "issues": [],
  "mentions": [
   {
    "screenName": "innovate-invent",
    "userId": "5ae7ccd1d73408ce4f97b27e",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 12,
  "sent": "2018-05-01T15:31:37.105Z",
  "text": "@innovate-invent, no numba just doesn\u2019t handle ctypes.Structure at the moment.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/innovate-invent",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=60",
   "displayName": "innovate-invent",
   "gv": "4",
   "id": "5ae7ccd1d73408ce4f97b27e",
   "url": "/innovate-invent",
   "username": "innovate-invent"
  },
  "html": "why was support dropped?",
  "id": "5ae8960cda323a7c04eb647b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-05-01T16:30:04.911Z",
  "text": "why was support dropped?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/innovate-invent",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=60",
   "displayName": "innovate-invent",
   "gv": "4",
   "id": "5ae7ccd1d73408ce4f97b27e",
   "url": "/innovate-invent",
   "username": "innovate-invent"
  },
  "html": "is there a way to represent a tightly packed struct in numba?",
  "id": "5ae8963640f24c430444b751",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-05-01T16:30:46.370Z",
  "text": "is there a way to represent a tightly packed struct in numba?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "Not yet, but we&#39;ve had several requests, so we&#39;re thinking about how to address it.",
  "id": "5ae8a6dbdb299d4004c2eda5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-05-01T17:41:47.263Z",
  "text": "Not yet, but we've had several requests, so we're thinking about how to address it.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/innovate-invent",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=60",
   "displayName": "innovate-invent",
   "gv": "4",
   "id": "5ae7ccd1d73408ce4f97b27e",
   "url": "/innovate-invent",
   "username": "innovate-invent"
  },
  "html": "is this something I can implement?",
  "id": "5ae8b301e2d30c2f0457e5f5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-05-01T18:33:37.974Z",
  "text": "is this something I can implement?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/innovate-invent",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=60",
   "displayName": "innovate-invent",
   "gv": "4",
   "id": "5ae7ccd1d73408ce4f97b27e",
   "url": "/innovate-invent",
   "username": "innovate-invent"
  },
  "html": "numba already implements classes as structs, can we not reuse that struct generation machinery?",
  "id": "5ae8b3491eddba3d04c4c33d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-05-01T18:34:49.233Z",
  "text": "numba already implements classes as structs, can we not reuse that struct generation machinery?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-05-01T19:47:29.788Z",
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "The struct generation is the easy part.  <code>ctypes.Structure</code> instances may own the memory and needs reference counting.  We have been avoiding its complexity so far since there was never a use-case/request.  ",
  "id": "5ae8c3e3e2d30c2f04582b65",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-05-01T19:45:39.995Z",
  "text": "The struct generation is the easy part.  `ctypes.Structure` instances may own the memory and needs reference counting.  We have been avoiding its complexity so far since there was never a use-case/request.  ",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "The current ctypes support is mostly for calling C functions with argtypes/restype of scalars and pointers.",
  "id": "5ae8c42c53ceca3604a3d255",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-05-01T19:46:52.827Z",
  "text": "The current ctypes support is mostly for calling C functions with argtypes/restype of scalars and pointers.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/innovate-invent",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=60",
   "displayName": "innovate-invent",
   "gv": "4",
   "id": "5ae7ccd1d73408ce4f97b27e",
   "url": "/innovate-invent",
   "username": "innovate-invent"
  },
  "html": "what about numba native structs?",
  "id": "5ae8c45553ceca3604a3d2a0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-05-01T19:47:33.401Z",
  "text": "what about numba native structs?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/innovate-invent",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=60",
   "displayName": "innovate-invent",
   "gv": "4",
   "id": "5ae7ccd1d73408ce4f97b27e",
   "url": "/innovate-invent",
   "username": "innovate-invent"
  },
  "html": "do they exist?",
  "id": "5ae8c4a597e5506e048c9f19",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-05-01T19:48:53.789Z",
  "text": "do they exist?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "The closest thing would be the support for numpy structured dtype",
  "id": "5ae8c57440f24c4304457407",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-05-01T19:52:20.512Z",
  "text": "The closest thing would be the support for numpy structured dtype",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "other people doing similiar things have taken the approach of extending numba at a deeper level",
  "id": "5ae8c62c6f9af87e04357def",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-05-01T19:55:24.649Z",
  "text": "other people doing similiar things have taken the approach of extending numba at a deeper level",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/innovate-invent",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=60",
   "displayName": "innovate-invent",
   "gv": "4",
   "id": "5ae7ccd1d73408ce4f97b27e",
   "url": "/innovate-invent",
   "username": "innovate-invent"
  },
  "html": "how do you mean?",
  "id": "5ae8c666e2d30c2f0458358e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-05-01T19:56:22.296Z",
  "text": "how do you mean?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "They extend numba using the <a href=\"http://numba.pydata.org/numba-doc/latest/extending/index.html\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">extension API</a>",
  "id": "5ae8c71e40f24c43044579e5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-05-01T19:59:26.665Z",
  "text": "They extend numba using the [extension API](http://numba.pydata.org/numba-doc/latest/extending/index.html)",
  "unread": false,
  "urls": [
   {
    "url": "http://numba.pydata.org/numba-doc/latest/extending/index.html"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/innovate-invent",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=60",
   "displayName": "innovate-invent",
   "gv": "4",
   "id": "5ae7ccd1d73408ce4f97b27e",
   "url": "/innovate-invent",
   "username": "innovate-invent"
  },
  "html": "are you aware of a public extension that does this?",
  "id": "5ae8c74c0a9c956f041abdaf",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-05-01T20:00:12.544Z",
  "text": "are you aware of a public extension that does this?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "There may be other ways to help you if I can understand your goal more.",
  "id": "5ae8c75a6d98e53e04449605",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-05-01T20:00:26.352Z",
  "text": "There may be other ways to help you if I can understand your goal more.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "I see that you are referring to bampy.  What do you want to achieve with numba in your project?",
  "id": "5ae8c7a26d98e53e044497b0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-05-01T20:01:38.071Z",
  "text": "I see that you are referring to bampy.  What do you want to achieve with numba in your project?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/innovate-invent",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=60",
   "displayName": "innovate-invent",
   "gv": "4",
   "id": "5ae7ccd1d73408ce4f97b27e",
   "url": "/innovate-invent",
   "username": "innovate-invent"
  },
  "html": "essentially I am sitting here stewing in a major mistake. Numbas documentation is sparse and google has <span data-link-type=\"issue\" data-issue=\"133\" data-issue-repo=\"numba/numba\" class=\"issue\">numba/numba#133</span> as the first hit searching for ctypes support. So I just spent a month implementing a native python library to read a certain file format for the purpose of allowing python scripts that work with that data to be compatible with Numba nopython mode. I had no idea support had been removed until after I entirely based my library off of ctypes structures.",
  "id": "5ae8c887f2d2d5370455f55f",
  "issues": [
   {
    "number": "133",
    "repo": "numba/numba"
   }
  ],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-05-01T20:05:27.344Z",
  "text": "essentially I am sitting here stewing in a major mistake. Numbas documentation is sparse and google has https://github.com/numba/numba/issues/133 as the first hit searching for ctypes support. So I just spent a month implementing a native python library to read a certain file format for the purpose of allowing python scripts that work with that data to be compatible with Numba nopython mode. I had no idea support had been removed until after I entirely based my library off of ctypes structures.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/innovate-invent",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=60",
   "displayName": "innovate-invent",
   "gv": "4",
   "id": "5ae7ccd1d73408ce4f97b27e",
   "url": "/innovate-invent",
   "username": "innovate-invent"
  },
  "html": "I could swear I tested this beforehand but its possible I forgot to set the nopython flag and it silently fell back",
  "id": "5ae8c8e2f2d2d5370455f773",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-05-01T20:06:58.735Z",
  "text": "I could swear I tested this beforehand but its possible I forgot to set the nopython flag and it silently fell back",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/innovate-invent",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=60",
   "displayName": "innovate-invent",
   "gv": "4",
   "id": "5ae7ccd1d73408ce4f97b27e",
   "url": "/innovate-invent",
   "username": "innovate-invent"
  },
  "html": "My main interests in Numba were for the speed improvements but more importantly it can release the GIL allowing for shared memory multithreading.",
  "id": "5ae8c9e91eddba3d04c51cf6",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-05-01T20:11:21.996Z",
  "text": "My main interests in Numba were for the speed improvements but more importantly it can release the GIL allowing for shared memory multithreading.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/innovate-invent",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=60",
   "displayName": "innovate-invent",
   "gv": "4",
   "id": "5ae7ccd1d73408ce4f97b27e",
   "url": "/innovate-invent",
   "username": "innovate-invent"
  },
  "html": "I also wanted to work towards GPU accelerated algorithms in python.",
  "id": "5ae8ca30f2d2d5370455facb",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-05-01T20:12:32.470Z",
  "text": "I also wanted to work towards GPU accelerated algorithms in python.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/innovate-invent",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=60",
   "displayName": "innovate-invent",
   "gv": "4",
   "id": "5ae7ccd1d73408ce4f97b27e",
   "url": "/innovate-invent",
   "username": "innovate-invent"
  },
  "html": "I guess I could create a class that manually unpacks the data into independent variables but that would be slow :/",
  "id": "5ae8cdbedb299d4004c37e08",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-05-01T20:27:42.213Z",
  "text": "I guess I could create a class that manually unpacks the data into independent variables but that would be slow :/",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/innovate-invent",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=60",
   "displayName": "innovate-invent",
   "gv": "4",
   "id": "5ae7ccd1d73408ce4f97b27e",
   "url": "/innovate-invent",
   "username": "innovate-invent"
  },
  "html": "and then jitclass it",
  "id": "5ae8cddd5cf0b830044b50c2",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-05-01T20:28:13.662Z",
  "text": "and then jitclass it",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/innovate-invent",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=60",
   "displayName": "innovate-invent",
   "gv": "4",
   "id": "5ae7ccd1d73408ce4f97b27e",
   "url": "/innovate-invent",
   "username": "innovate-invent"
  },
  "html": "or switch entirely to numpy dtypes",
  "id": "5ae8ce4797e5506e048cbe81",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-05-01T20:29:59.412Z",
  "text": "or switch entirely to numpy dtypes",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-05-01T20:30:58.188Z",
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "I have looked at the code.  If what you want is parallel code execution and GPU acceleration, you should focus on preparing the data into numpy.arrays",
  "id": "5ae8ce576d98e53e0444ad6e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-05-01T20:30:15.536Z",
  "text": "I have looked at the code.  If what you want is parallel code execution and GPU acceleration, you should focus on preparing the data into numpy.arrays",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "I doubt jitting the wrapper to zlib would help much.",
  "id": "5ae8ce725cf0b830044b523c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-05-01T20:30:42.648Z",
  "text": "I doubt jitting the wrapper to zlib would help much.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/innovate-invent",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=60",
   "displayName": "innovate-invent",
   "gv": "4",
   "id": "5ae7ccd1d73408ce4f97b27e",
   "url": "/innovate-invent",
   "username": "innovate-invent"
  },
  "html": "if the function isn&#39;t jitted wont jitted functions that call it lock the GIL?",
  "id": "5ae8ceb4f2d2d53704560c84",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-05-01T20:31:48.831Z",
  "text": "if the function isn't jitted wont jitted functions that call it lock the GIL?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/innovate-invent",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=60",
   "displayName": "innovate-invent",
   "gv": "4",
   "id": "5ae7ccd1d73408ce4f97b27e",
   "url": "/innovate-invent",
   "username": "innovate-invent"
  },
  "html": "I am under the impression that everything operating outside the GIL has to be jitted",
  "id": "5ae8cf0e0a9c956f041adb64",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-05-01T20:33:18.455Z",
  "text": "I am under the impression that everything operating outside the GIL has to be jitted",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/innovate-invent",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=60",
   "displayName": "innovate-invent",
   "gv": "4",
   "id": "5ae7ccd1d73408ce4f97b27e",
   "url": "/innovate-invent",
   "username": "innovate-invent"
  },
  "html": "except whatever unlocks the GIL on its own like file access",
  "id": "5ae8cf3053ceca3604a3fe3d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-05-01T20:33:52.898Z",
  "text": "except whatever unlocks the GIL on its own like file access",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "I am assuming that the computation routine is separate from the data intake routine.",
  "id": "5ae8cf5cf2d2d53704560f4a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-05-01T20:34:36.600Z",
  "text": "I am assuming that the computation routine is separate from the data intake routine.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/innovate-invent",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=60",
   "displayName": "innovate-invent",
   "gv": "4",
   "id": "5ae7ccd1d73408ce4f97b27e",
   "url": "/innovate-invent",
   "username": "innovate-invent"
  },
  "html": "the only real reason I went with ctypes and not numpy is ctypes is a lighter weight dependency",
  "id": "5ae8cf6d5cf0b830044b562f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-05-01T20:34:53.285Z",
  "text": "the only real reason I went with ctypes and not numpy is ctypes is a lighter weight dependency",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/innovate-invent",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=60",
   "displayName": "innovate-invent",
   "gv": "4",
   "id": "5ae7ccd1d73408ce4f97b27e",
   "url": "/innovate-invent",
   "username": "innovate-invent"
  },
  "html": "yes",
  "id": "5ae8cf706f9af87e04359e95",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-05-01T20:34:56.975Z",
  "text": "yes",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/innovate-invent",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=60",
   "displayName": "innovate-invent",
   "gv": "4",
   "id": "5ae7ccd1d73408ce4f97b27e",
   "url": "/innovate-invent",
   "username": "innovate-invent"
  },
  "html": "file IO is in the main thread while everything else gets tossed into subthreads",
  "id": "5ae8cf8af2d2d53704561024",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-05-01T20:35:22.406Z",
  "text": "file IO is in the main thread while everything else gets tossed into subthreads",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-05-01T20:36:16.253Z",
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "in that case, jit the compute so they are running nogil in worker threads.  The main thread can have the GIL to do file IO.",
  "id": "5ae8cfb7e2d30c2f045858a4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-05-01T20:36:07.193Z",
  "text": "in that case, jit the compute so they are running nogil in worker threads.  The main thread can have the GIL to do file IO.",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/innovate-invent",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=60",
   "displayName": "innovate-invent",
   "gv": "4",
   "id": "5ae7ccd1d73408ce4f97b27e",
   "url": "/innovate-invent",
   "username": "innovate-invent"
  },
  "html": "exactly",
  "id": "5ae8cfcbb37eab7d045cdea0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-05-01T20:36:27.734Z",
  "text": "exactly",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/innovate-invent",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=60",
   "displayName": "innovate-invent",
   "gv": "4",
   "id": "5ae7ccd1d73408ce4f97b27e",
   "url": "/innovate-invent",
   "username": "innovate-invent"
  },
  "html": "that was the plan",
  "id": "5ae8cfd25cf0b830044b578d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-05-01T20:36:34.715Z",
  "text": "that was the plan",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "the compute threads can consume numpy.array directly then",
  "id": "5ae8cfe4e2d30c2f04585915",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-05-01T20:36:52.941Z",
  "text": "the compute threads can consume numpy.array directly then",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/innovate-invent",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=60",
   "displayName": "innovate-invent",
   "gv": "4",
   "id": "5ae7ccd1d73408ce4f97b27e",
   "url": "/innovate-invent",
   "username": "innovate-invent"
  },
  "html": "I guess I am switching to numpy then...",
  "id": "5ae8d00497e5506e048cc3c6",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-05-01T20:37:24.817Z",
  "text": "I guess I am switching to numpy then...",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/innovate-invent",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=60",
   "displayName": "innovate-invent",
   "gv": "4",
   "id": "5ae7ccd1d73408ce4f97b27e",
   "url": "/innovate-invent",
   "username": "innovate-invent"
  },
  "html": "hopefully it has everything that ctypes does",
  "id": "5ae8d02097e5506e048cc410",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-05-01T20:37:52.931Z",
  "text": "hopefully it has everything that ctypes does",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "Since you are doing parallel code with python,  checkout dask as well: <a href=\"http://dask.pydata.org/en/latest/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://dask.pydata.org/en/latest/</a>",
  "id": "5ae8d13ab982f08504e6a9fd",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-05-01T20:42:34.484Z",
  "text": "Since you are doing parallel code with python,  checkout dask as well: http://dask.pydata.org/en/latest/",
  "unread": false,
  "urls": [
   {
    "url": "http://dask.pydata.org/en/latest/"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/innovate-invent",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=60",
   "displayName": "innovate-invent",
   "gv": "4",
   "id": "5ae7ccd1d73408ce4f97b27e",
   "url": "/innovate-invent",
   "username": "innovate-invent"
  },
  "html": "yea, that&#39;s down the road when I need analytics done. Right now I need threaded zlib compression and threaded data transforms.",
  "id": "5ae8d279da323a7c04ec4b0b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-05-01T20:47:53.012Z",
  "text": "yea, that's down the road when I need analytics done. Right now I need threaded zlib compression and threaded data transforms.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/innovate-invent",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=60",
   "displayName": "innovate-invent",
   "gv": "4",
   "id": "5ae7ccd1d73408ce4f97b27e",
   "url": "/innovate-invent",
   "username": "innovate-invent"
  },
  "html": "Thanks for the help, hopefully ctypes gets some love soon.",
  "id": "5ae8dd35b37eab7d045d0ada",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-05-01T21:33:41.447Z",
  "text": "Thanks for the help, hopefully ctypes gets some love soon.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/innovate-invent",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=60",
   "displayName": "innovate-invent",
   "gv": "4",
   "id": "5ae7ccd1d73408ce4f97b27e",
   "url": "/innovate-invent",
   "username": "innovate-invent"
  },
  "html": "it seems numpy dtypes are not what I thought. Each instance of a struct would have to be a single element structured array. There doesn&#39;t seem to be a way to instantiate one without wrapping it in an array.",
  "id": "5ae8e7e100dc488804898c59",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-05-01T22:19:13.869Z",
  "text": "it seems numpy dtypes are not what I thought. Each instance of a struct would have to be a single element structured array. There doesn't seem to be a way to instantiate one without wrapping it in an array.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/innovate-invent",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=60",
   "displayName": "innovate-invent",
   "gv": "4",
   "id": "5ae7ccd1d73408ce4f97b27e",
   "url": "/innovate-invent",
   "username": "innovate-invent"
  },
  "html": "back to implementing structs in numba, what is the complexity around reference counting? How is it any different than passing in a bytes object?",
  "id": "5ae8e92af2d2d537045667a2",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-05-01T22:24:42.409Z",
  "text": "back to implementing structs in numba, what is the complexity around reference counting? How is it any different than passing in a bytes object?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/innovate-invent",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=60",
   "displayName": "innovate-invent",
   "gv": "4",
   "id": "5ae7ccd1d73408ce4f97b27e",
   "url": "/innovate-invent",
   "username": "innovate-invent"
  },
  "html": "It seems the StructModel already has support for structs",
  "id": "5ae8f240da323a7c04ecb524",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-05-01T23:03:28.722Z",
  "text": "It seems the StructModel already has support for structs",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/innovate-invent",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=60",
   "displayName": "innovate-invent",
   "gv": "4",
   "id": "5ae7ccd1d73408ce4f97b27e",
   "url": "/innovate-invent",
   "username": "innovate-invent"
  },
  "html": "it just needs to be mapped to ctypes Structures?",
  "id": "5ae8f2530a9c956f041b50cd",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-05-01T23:03:47.196Z",
  "text": "it just needs to be mapped to ctypes Structures?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 10
  },
  "html": "Hello, in my code at pydata/sparse I&#39;ve written some code that accepts any element-wise function (not necessarily a <code>ufunc</code>, for example <code>np.where(condition, x, y)</code> isn&#39;t yet a ufunc), and does some operations on it. I need two critical features in order to be able to accelerate my code with Numba.",
  "id": "5aec461840f24c4304511c1f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-05-04T11:38:00.826Z",
  "text": "Hello, in my code at pydata/sparse I've written some code that accepts any element-wise function (not necessarily a `ufunc`, for example `np.where(condition, x, y)` isn't yet a ufunc), and does some operations on it. I need two critical features in order to be able to accelerate my code with Numba.\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-05-04T11:39:48.086Z",
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 10
  },
  "html": "<ul>\n<li>&quot;Freezing&quot; arguments into the ufunc.</li>\n<li>Working with arbitrary input ufuncs through <code>*args</code>/<code>**kwargs</code>.</li>\n</ul>\nIs there a way to achieve this with Numba?",
  "id": "5aec466a53ceca3604afd512",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-05-04T11:39:22.180Z",
  "text": "- \"Freezing\" arguments into the ufunc.\n- Working with arbitrary input ufuncs through `*args`/`**kwargs`.\n\nIs there a way to achieve this with Numba?",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 10
  },
  "html": "Just so I&#39;m being clear: The <code>ufunc</code> or other function will be fixed during execution, as will <code>**kwargs</code>. <code>len(args)</code> may change (I can do a few tricks to fix this during execution time), but they are only known at runtime but before the function is run.",
  "id": "5aec4895b37eab7d0468bcf9",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-05-04T11:48:37.061Z",
  "text": "Just so I'm being clear: The `ufunc` or other function will be fixed during execution, as will `**kwargs`. `len(args)` may change (I can do a few tricks to fix this during execution time), but they are only known at runtime but before the function is run.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"hameerabbasi\" class=\"mention\">@hameerabbasi</span> do you have some code to look at ?",
  "id": "5aec4d3003cafa797b27be15",
  "issues": [],
  "mentions": [
   {
    "screenName": "hameerabbasi",
    "userId": "55b089c90fc9f982beaaa526",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 12,
  "sent": "2018-05-04T12:08:16.065Z",
  "text": "@hameerabbasi do you have some code to look at ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 10
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span> The top-level <code>elemwise</code> function here, but it&#39;s fairly complex. <a href=\"https://github.com/pydata/sparse/blob/master/sparse/coo/umath.py\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://github.com/pydata/sparse/blob/master/sparse/coo/umath.py</a>",
  "id": "5aec4fa359a0578004a48669",
  "issues": [],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 12,
  "sent": "2018-05-04T12:18:43.251Z",
  "text": "@stuartarchibald The top-level `elemwise` function here, but it's fairly complex. https://github.com/pydata/sparse/blob/master/sparse/coo/umath.py",
  "unread": false,
  "urls": [
   {
    "url": "https://github.com/pydata/sparse/blob/master/sparse/coo/umath.py"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 10
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span> But the actual code I want to implement is similar to this: <a href=\"https://github.com/pydata/sparse/issues/1#issuecomment-363256434\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://github.com/pydata/sparse/issues/1#issuecomment-363256434</a>",
  "id": "5aec504ddb299d4004cf5057",
  "issues": [],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 12,
  "sent": "2018-05-04T12:21:33.472Z",
  "text": "@stuartarchibald But the actual code I want to implement is similar to this: https://github.com/pydata/sparse/issues/1#issuecomment-363256434",
  "unread": false,
  "urls": [
   {
    "url": "https://github.com/pydata/sparse/issues/1#issuecomment-363256434"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "I think you&#39;ll need to generate specialisations",
  "id": "5aec52a940f24c43045147f9",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-05-04T12:31:37.787Z",
  "text": "I think you'll need to generate specialisations",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "<code>*args</code> works",
  "id": "5aec52c040f24c4304514819",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-05-04T12:32:00.882Z",
  "text": "`*args` works",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "<code>**kwargs</code> can be made to work with effort",
  "id": "5aec52deff26986d0831497b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-05-04T12:32:30.305Z",
  "text": "`**kwargs` can be made to work with effort",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-05-04T12:33:23.461Z",
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 10
  },
  "html": "Does <code>**kwargs</code> work as a closure?",
  "id": "5aec530853ceca3604b00107",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-05-04T12:33:12.392Z",
  "text": "Does `**kwargs` work as a closure?",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "In <a href=\"https://github.com/pydata/sparse/issues/1#issuecomment-363256434\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://github.com/pydata/sparse/issues/1#issuecomment-363256434</a> is <code>func</code> going to be the njit function",
  "id": "5aec531953ceca3604b0011f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-05-04T12:33:29.400Z",
  "text": "In https://github.com/pydata/sparse/issues/1#issuecomment-363256434 is `func` going to be the njit function",
  "unread": false,
  "urls": [
   {
    "url": "https://github.com/pydata/sparse/issues/1#issuecomment-363256434"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 10
  },
  "html": "Essentially, or maybe a <code>ufunc</code>. Also, I need some sort of <code>functools.partial</code>.",
  "id": "5aec534c40f24c4304514bc3",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-05-04T12:34:20.512Z",
  "text": "Essentially, or maybe a `ufunc`. Also, I need some sort of `functools.partial`.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "explicit kwargs will not work",
  "id": "5aec53516f9af87e044183ef",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-05-04T12:34:25.383Z",
  "text": "explicit kwargs will not work",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "but you can do stuff with closures and/or <code>@overload</code>",
  "id": "5aec536a03cafa797b27d37b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-05-04T12:34:50.160Z",
  "text": "but you can do stuff with closures and/or `@overload`",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 10
  },
  "html": "So, initialize outside <code>njit</code> and pass into the function?",
  "id": "5aec5399da323a7c04f7f5e2",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-05-04T12:35:37.570Z",
  "text": "So, initialize outside `njit` and pass into the function?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 10
  },
  "html": "I can make that work. And about <code>functools.partial</code>?",
  "id": "5aec53bdda323a7c04f7f633",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-05-04T12:36:13.744Z",
  "text": "I can make that work. And about `functools.partial`?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "here&#39;s about the most involved demonstration of doing a kwarg I can think of <a href=\"https://github.com/numba/numba/blob/master/numba/targets/linalg.py#L2361-L2367\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://github.com/numba/numba/blob/master/numba/targets/linalg.py#L2361-L2367</a>",
  "id": "5aec53c340f24c4304514d35",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-05-04T12:36:19.990Z",
  "text": "here's about the most involved demonstration of doing a kwarg I can think of https://github.com/numba/numba/blob/master/numba/targets/linalg.py#L2361-L2367",
  "unread": false,
  "urls": [
   {
    "url": "https://github.com/numba/numba/blob/master/numba/targets/linalg.py#L2361-L2367"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "it&#39;s the<code>np.linalg.norm</code> implementation, the <code>ord</code> kwarg can be a load of different things.",
  "id": "5aec53e740f24c4304514d98",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-05-04T12:36:55.408Z",
  "text": "it's the`np.linalg.norm` implementation, the `ord` kwarg can be a load of different things.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 10
  },
  "html": "Ah... Unfortunately it&#39;s impossible for me to know these things ahead of time. There will be loads of specializations I can&#39;t predict.",
  "id": "5aec546db982f08504f2ce2f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-05-04T12:39:09.074Z",
  "text": "Ah... Unfortunately it's impossible for me to know these things ahead of time. There will be loads of specializations I can't predict.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 10
  },
  "html": "I just need to pass it in, not check against it.",
  "id": "5aec547eb37eab7d0468e9ac",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-05-04T12:39:26.526Z",
  "text": "I just need to pass it in, not check against it.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "so closures would be no use either ?",
  "id": "5aec54d6da323a7c04f7f9b3",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-05-04T12:40:54.420Z",
  "text": "so closures would be no use either ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 10
  },
  "html": "Closures would, if I can fix <code>**kwargs</code> in the closure and just use <code>**kwargs</code> inside the <code>njit</code>-ed function.",
  "id": "5aec550940f24c43045151d8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-05-04T12:41:45.831Z",
  "text": "Closures would, if I can fix `**kwargs` in the closure and just use `**kwargs` inside the `njit`-ed function.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "but kwargs is a dict, which isn&#39;t supported, so you&#39;ve have to unpack it ?",
  "id": "5aec55725cf0b8300457380d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-05-04T12:43:30.589Z",
  "text": "but kwargs is a dict, which isn't supported, so you've have to unpack it ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "<pre><code><span class=\"keyword\">from</span> numba <span class=\"keyword\">import</span> njit\n\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">(*args, **kwargs)</span>:</span>\n    bar_val = kwargs.get(<span class=\"string\">'bar'</span>)\n\n    <span class=\"decorator\">@njit</span>\n    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">baz</span><span class=\"params\">(*args)</span>:</span>\n        <span class=\"keyword\">return</span> args[<span class=\"number\">0</span>] + bar_val, args[<span class=\"number\">1</span>] + bar_val\n    <span class=\"keyword\">return</span> baz(*args)\n\nprint(foo(<span class=\"number\">1.</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, bar=<span class=\"number\">10</span>))</code></pre>",
  "id": "5aec558f5cf0b8300457383d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-05-04T12:43:59.237Z",
  "text": "```\nfrom numba import njit\n\ndef foo(*args, **kwargs):\n    bar_val = kwargs.get('bar')\n\n    @njit\n    def baz(*args):\n        return args[0] + bar_val, args[1] + bar_val\n    return baz(*args)\n\nprint(foo(1., 2, 3, bar=10))\n```\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 10
  },
  "html": "Let&#39;s put it this way: <code>func</code> is unknown with unknown kwarg support, but <code>kwargs</code> isn&#39;t going to change inside the <code>njit</code>-ed function. I need to be able to do this inside the compiled function:<pre><code>val = func(<span class=\"keyword\">*</span>args, <span class=\"keyword\">*</span><span class=\"keyword\">*</span>kwargs)</code></pre>",
  "id": "5aec561103cafa797b27dee6",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-05-04T12:46:09.515Z",
  "text": "Let's put it this way: `func` is unknown with unknown kwarg support, but `kwargs` isn't going to change inside the `njit`-ed function. I need to be able to do this inside the compiled function:\n```\nval = func(*args, **kwargs)\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 10
  },
  "html": "But I get that that&#39;s impossible at the moment.",
  "id": "5aec56375cf0b830045739ef",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-05-04T12:46:47.100Z",
  "text": "But I get that that's impossible at the moment.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "I believe that is the case.",
  "id": "5aec56996d98e53e0450a0ae",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-05-04T12:48:25.997Z",
  "text": "I believe that is the case.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 10
  },
  "html": "Any way to use/impersonate <code>functools.partial</code>?",
  "id": "5aec569c6d98e53e0450a0fd",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-05-04T12:48:28.511Z",
  "text": "Any way to use/impersonate `functools.partial`?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "I think this issue is that you want to be able to use kwargs inside a njitted function, and cannot unpack them in an outer scope.",
  "id": "5aec58d45cf0b830045742c2",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-05-04T12:57:56.967Z",
  "text": "I think this issue is that you want to be able to use kwargs inside a njitted function, and cannot unpack them in an outer scope.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "I don&#39;t think adding partial or closures etc will make that issue go away? Fundamentally,  <code>kwargs</code> is dictionary and in your case it is needed inside a njitted function?",
  "id": "5aec593859a0578004a4a798",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-05-04T12:59:36.727Z",
  "text": "I don't think adding partial or closures etc will make that issue go away? Fundamentally,  `kwargs` is dictionary and in your case it is needed inside a njitted function?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-05-04T13:10:41.503Z",
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 10
  },
  "html": "I need <code>partial</code> to freeze in some (positional) arguments, it&#39;s different from the <code>kwargs</code> discussion. But, yes, essentially.",
  "id": "5aec5b63da323a7c04f80f77",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-05-04T13:08:51.907Z",
  "text": "I need `partial` to freeze in some (positional) arguments, it's different from the `kwargs` discussion. But, yes, essentially.",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "I don&#39;t think partial will work as it returns a class.",
  "id": "5aec5db4f2d2d53704621a0f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-05-04T13:18:44.624Z",
  "text": "I don't think partial will work as it returns a class.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "I don&#39;t think right now a closure around the function that looks a bit like <code>partial</code> will work either as <code>make_function</code> isn&#39;t implemented to allow the function to be passed in. I have to wonder how hard that&#39;d be to implement though.",
  "id": "5aec5f336f9af87e0441ac73",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-05-04T13:25:07.345Z",
  "text": "I don't think right now a closure around the function that looks a bit like `partial` will work either as `make_function` isn't implemented to allow the function to be passed in. I have to wonder how hard that'd be to implement though.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-05-07T08:32:58.275Z",
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/SamRagusa",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/11341857?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/11341857?v=4&s=60",
   "displayName": "Sam Ragusa",
   "gv": "4",
   "id": "57742186c2f0db084a209dc5",
   "url": "/SamRagusa",
   "username": "SamRagusa",
   "v": 1
  },
  "html": "Hey everyone, I was wondering how long would be considered too long for Numba to take compiling code?  I have a function which compiles in a normal amount of time when operating on JitClass objects, but when I use Structured Scalars the same function takes 5+ minutes to compile, often until I end up shutting it off.  The code seems to work fine when compiled, but the endlessly long compilation time seems like something may be off.",
  "id": "5af00e1097e5506e04a23e1d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-05-07T08:28:00.799Z",
  "text": "Hey everyone, I was wondering how long would be considered too long for Numba to take compiling code?  I have a function which compiles in a normal amount of time when operating on JitClass objects, but when I use Structured Scalars the same function takes 5+ minutes to compile, often until I end up shutting it off.  The code seems to work fine when compiled, but the endlessly long compilation time seems like something may be off.",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"SamRagusa\" class=\"mention\">@SamRagusa</span> have you looked at the LLVM (<code>.inspect_llvm()</code> on the jitted function object)? It may be that this is just triggering the generation of huge quantities of LLVM IR which means the compiler backend is having a hard time.",
  "id": "5af0236fb37eab7d0472a878",
  "issues": [],
  "mentions": [
   {
    "screenName": "SamRagusa",
    "userId": "57742186c2f0db084a209dc5",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 15,
  "sent": "2018-05-07T09:59:11.251Z",
  "text": "@SamRagusa have you looked at the LLVM (`.inspect_llvm()` on the jitted function object)? It may be that this is just triggering the generation of huge quantities of LLVM IR which means the compiler backend is having a hard time.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-05-07T15:28:25.120Z",
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "regarding long compilation time, there are definitely parts of numba that should be refactored so that it is not generating fresh LLVM-IR of the implementation for every use-site.  One of the offenders I found recently is <code>list</code>.",
  "id": "5af0708b1eddba3d04dbf0d2",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-05-07T15:28:11.606Z",
  "text": "regarding long compilation time, there are definitely parts of numba that should be refactored so that it is not generating fresh LLVM-IR of the implementation for every use-site.  One of the offenders I found recently is `list`.",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/nitishjoshi25",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5562645?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5562645?v=4&s=60",
   "displayName": "Nitish Joshi",
   "gv": "4",
   "id": "58c77812d73408ce4f507255",
   "url": "/nitishjoshi25",
   "username": "nitishjoshi25",
   "v": 2
  },
  "html": "Im trying to use scipy.special.psi() inside a function that I want to optimize using numba...but it is not compiling.  The code and the error log are here <a href=\"https://pastebin.com/d4N8HCwE\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://pastebin.com/d4N8HCwE</a> . Can someone help pls.",
  "id": "5af08732b37eab7d04743299",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-05-07T17:04:50.540Z",
  "text": "Im trying to use scipy.special.psi() inside a function that I want to optimize using numba...but it is not compiling.  The code and the error log are here https://pastebin.com/d4N8HCwE . Can someone help pls.",
  "unread": false,
  "urls": [
   {
    "url": "https://pastebin.com/d4N8HCwE"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"nitishjoshi25\" class=\"mention\">@nitishjoshi25</span> <code>scipy.special</code> and indeed <code>scipy</code>are not supported by Numba. However, you are in luck, because <code>scipy.special</code> exports a cython module that you can use.",
  "id": "5af08a6a5cf0b8300462b575",
  "issues": [],
  "mentions": [
   {
    "screenName": "nitishjoshi25",
    "userId": "58c77812d73408ce4f507255",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 16,
  "sent": "2018-05-07T17:18:34.647Z",
  "text": "@nitishjoshi25 `scipy.special` and indeed `scipy`are not supported by Numba. However, you are in luck, because `scipy.special` exports a cython module that you can use.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "<pre><code class=\"python\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np\n<span class=\"keyword\">import</span> ctypes\n<span class=\"keyword\">from</span> numba <span class=\"keyword\">import</span> jit\n<span class=\"keyword\">from</span> numba.extending <span class=\"keyword\">import</span> get_cython_function_address <span class=\"keyword\">as</span> getaddr\n\npsi_fnaddr = getaddr(<span class=\"string\">\"scipy.special.cython_special\"</span>, <span class=\"string\">\"__pyx_fuse_1psi\"</span>)\npsi_ftype = ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)\nnb_psi = psi_ftype(psi_fnaddr)\n<span class=\"keyword\">import</span> scipy.special <span class=\"keyword\">as</span> sp\n\n<span class=\"comment\"># check function binding</span>\nx = np.float64(<span class=\"number\">0.5</span>)\nnp.testing.assert_allclose(nb_psi(x), sp.psi(x))\n\n<span class=\"decorator\">@jit(nopython=True)</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span><span class=\"params\">(a)</span>:</span>\n    s = <span class=\"number\">0</span>\n    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(a.size):\n        s += nb_psi(np.float64(a[i]))\n    <span class=\"keyword\">return</span> s\n\na = np.random.randint(low=<span class=\"number\">0</span>, high=<span class=\"number\">10</span>, size=<span class=\"number\">10000</span>)\nprint(func(a))</code></pre>",
  "id": "5af08a8540f24c43045cc5a0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-05-07T17:19:01.735Z",
  "text": "```python\nimport numpy as np\nimport ctypes\nfrom numba import jit\nfrom numba.extending import get_cython_function_address as getaddr\n\npsi_fnaddr = getaddr(\"scipy.special.cython_special\", \"__pyx_fuse_1psi\")\npsi_ftype = ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)\nnb_psi = psi_ftype(psi_fnaddr)\nimport scipy.special as sp\n\n# check function binding\nx = np.float64(0.5)\nnp.testing.assert_allclose(nb_psi(x), sp.psi(x))\n\n@jit(nopython=True)\ndef func(a):\n    s = 0\n    for i in range(a.size):\n        s += nb_psi(np.float64(a[i]))\n    return s\n \na = np.random.randint(low=0, high=10, size=10000)\nprint(func(a))\n```\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/nitishjoshi25",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5562645?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5562645?v=4&s=60",
   "displayName": "Nitish Joshi",
   "gv": "4",
   "id": "58c77812d73408ce4f507255",
   "url": "/nitishjoshi25",
   "username": "nitishjoshi25",
   "v": 2
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span> thanks a lot...:)",
  "id": "5af1578097f07c7e1378a027",
  "issues": [],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 17,
  "sent": "2018-05-08T07:53:36.326Z",
  "text": "@stuartarchibald thanks a lot...:)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"nitishjoshi25\" class=\"mention\">@nitishjoshi25</span> no problem :)",
  "id": "5af1600503cafa797b35cdf7",
  "issues": [],
  "mentions": [
   {
    "screenName": "nitishjoshi25",
    "userId": "58c77812d73408ce4f507255",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 17,
  "sent": "2018-05-08T08:29:57.761Z",
  "text": "@nitishjoshi25 no problem :)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/SamRagusa",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/11341857?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/11341857?v=4&s=60",
   "displayName": "Sam Ragusa",
   "gv": "4",
   "id": "57742186c2f0db084a209dc5",
   "url": "/SamRagusa",
   "username": "SamRagusa",
   "v": 1
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span>  I just did, and it&#39;s producing more than twice the code (57 MB when saved to file), so that&#39;s likely what it is. And <span data-link-type=\"mention\" data-screen-name=\"sklam\" class=\"mention\">@sklam</span> Without directly looking through all the LLVM, I&#39;m gonna guess my offender is nested generators.  Thanks for the info guys!",
  "id": "5af1936f00dc488804a3c4ef",
  "issues": [],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   },
   {
    "screenName": "sklam",
    "userId": "55b689f50fc9f982beab2a24",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 18,
  "sent": "2018-05-08T12:09:19.547Z",
  "text": "@stuartarchibald  I just did, and it's producing more than twice the code (57 MB when saved to file), so that's likely what it is. And @sklam Without directly looking through all the LLVM, I'm gonna guess my offender is nested generators.  Thanks for the info guys!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/innovate-invent",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=60",
   "displayName": "innovate-invent",
   "gv": "4",
   "id": "5ae7ccd1d73408ce4f97b27e",
   "url": "/innovate-invent",
   "username": "innovate-invent"
  },
  "html": "I&#39;m considering my options including switching to cffi rather than ctypes as it seems to better support what I need. The <a href=\"http://numba.pydata.org/numba-doc/dev/reference/pysupported.html?highlight=cffi#cffi\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">numba cffi support</a> description leaves a lot to be desired. Can anyone elaborate on what is and isn&#39;t supported relating to structures?",
  "id": "5af3b94a5666c42eb6fc935c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-05-10T03:15:22.711Z",
  "text": "I'm considering my options including switching to cffi rather than ctypes as it seems to better support what I need. The [numba cffi support](http://numba.pydata.org/numba-doc/dev/reference/pysupported.html?highlight=cffi#cffi) description leaves a lot to be desired. Can anyone elaborate on what is and isn't supported relating to structures?",
  "unread": false,
  "urls": [
   {
    "url": "http://numba.pydata.org/numba-doc/dev/reference/pysupported.html?highlight=cffi#cffi"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/innovate-invent",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=60",
   "displayName": "innovate-invent",
   "gv": "4",
   "id": "5ae7ccd1d73408ce4f97b27e",
   "url": "/innovate-invent",
   "username": "innovate-invent"
  },
  "html": "It isn&#39;t clear what I would pass as the numba type to the register_type() function when registering a declared class.",
  "id": "5af3b98fd332ee5fad086f50",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-05-10T03:16:31.001Z",
  "text": "It isn't clear what I would pass as the numba type to the register_type() function when registering a declared class.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/innovate-invent",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=60",
   "displayName": "innovate-invent",
   "gv": "4",
   "id": "5ae7ccd1d73408ce4f97b27e",
   "url": "/innovate-invent",
   "username": "innovate-invent"
  },
  "html": "er, registering a struct",
  "id": "5af3d5c1ea553a33ea512953",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-05-10T05:16:49.653Z",
  "text": "er, registering a struct",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "I don&#39;t think structs have been tested with that interface and likely won&#39;t work without some changes.",
  "id": "5af44f79862c5e33e924813f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-05-10T13:56:09.490Z",
  "text": "I don't think structs have been tested with that interface and likely won't work without some changes.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "You can have void pointers to pass around opaque structs",
  "id": "5af44f8dbd10f34a68f07055",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-05-10T13:56:29.390Z",
  "text": "You can have void pointers to pass around opaque structs",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/Melisius",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/11976167?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/11976167?v=4&s=60",
   "displayName": "Erik Kjellgren",
   "gv": "4",
   "id": "5af6f586d73408ce4f991248",
   "url": "/Melisius",
   "username": "Melisius",
   "v": 1
  },
  "html": "Is there anyway to help Numba compile code faster? I have auto-generated code and the compilation time is long",
  "id": "5af6f5af5e8e2175e25dbb2e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-05-12T14:09:51.564Z",
  "text": "Is there anyway to help Numba compile code faster? I have auto-generated code and the compilation time is long",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/nitishjoshi25",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5562645?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5562645?v=4&s=60",
   "displayName": "Nitish Joshi",
   "gv": "4",
   "id": "58c77812d73408ce4f507255",
   "url": "/nitishjoshi25",
   "username": "nitishjoshi25",
   "v": 2
  },
  "html": " im trying to use numpy object arrays ie a = np.empty(5,dtype=np.object), where a[i]&#39;s are numpy arrays of different shapes but of the same datatype. Im getting an error from numba during compilation. Is there another way to define &#39;a&#39;  rather than just defining a[i]&#39;s separately.",
  "id": "5af82e71e0b50c2d05bb0897",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-05-13T12:24:17.035Z",
  "text": " im trying to use numpy object arrays ie a = np.empty(5,dtype=np.object), where a[i]'s are numpy arrays of different shapes but of the same datatype. Im getting an error from numba during compilation. Is there another way to define 'a'  rather than just defining a[i]'s separately.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/Melisius",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/11976167?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/11976167?v=4&s=60",
   "displayName": "Erik Kjellgren",
   "gv": "4",
   "id": "5af6f586d73408ce4f991248",
   "url": "/Melisius",
   "username": "Melisius",
   "v": 1
  },
  "html": "Do you have a code example?",
  "id": "5af82eea1cfca775e10591e8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-05-13T12:26:18.337Z",
  "text": "Do you have a code example?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/nitishjoshi25",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5562645?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5562645?v=4&s=60",
   "displayName": "Nitish Joshi",
   "gv": "4",
   "id": "58c77812d73408ce4f507255",
   "url": "/nitishjoshi25",
   "username": "nitishjoshi25",
   "v": 2
  },
  "html": "<p>sure here  ``` from numba import jit<br>import numpy as np </p><p><span data-link-type=\"mention\" data-screen-name=\"jit\" class=\"mention\">@jit</span>(nopython=True)<br>def s(a):</p><pre><code>ans = <span class=\"number\">0</span>.\n<span class=\"keyword\">for</span> <span class=\"tag\">i</span> <span class=\"keyword\">in</span> <span class=\"tag\">a</span><span class=\"class\">.size</span>:\n    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"tag\">a</span>[i]<span class=\"class\">.shape</span>[<span class=\"number\">0</span>]:\n        <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> <span class=\"tag\">a</span>[i]<span class=\"class\">.shape</span>[<span class=\"number\">1</span>]:\n            ans += <span class=\"tag\">a</span>[i][j,k]\nreturn ans</code></pre><p>a = np.empty(3,dtype=np.object)<br>a[0] = np.ones((5,6),dtype=np.float64)<br>a[1] = np.ones((10,11),dtype=np.float64)<br>a[2] = np.ones((4,20),dtype=np.float64)<br>print(s(a))<br>```</p>",
  "id": "5af8370df04ce53632d34817",
  "issues": [],
  "mentions": [
   {
    "screenName": "jit",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 14,
  "sent": "2018-05-13T13:01:01.605Z",
  "text": "sure here  ``` from numba import jit\nimport numpy as np \n\n@jit(nopython=True)\ndef s(a):\n\n\tans = 0.\n\tfor i in a.size:\n\t\tfor j in a[i].shape[0]:\n\t\t\tfor k in a[i].shape[1]:\n\t\t\t\tans += a[i][j,k]\n\treturn ans\n\na = np.empty(3,dtype=np.object)\na[0] = np.ones((5,6),dtype=np.float64)\na[1] = np.ones((10,11),dtype=np.float64)\na[2] = np.ones((4,20),dtype=np.float64)\nprint(s(a))\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/nitishjoshi25",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5562645?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5562645?v=4&s=60",
   "displayName": "Nitish Joshi",
   "gv": "4",
   "id": "58c77812d73408ce4f507255",
   "url": "/nitishjoshi25",
   "username": "nitishjoshi25",
   "v": 2
  },
  "html": " the format is a little messed up. Here  is the code and the error <a href=\"https://pastebin.com/bUDHC6NR\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://pastebin.com/bUDHC6NR</a> ",
  "id": "5af8377e5a1d895fae375ba2",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-05-13T13:02:54.203Z",
  "text": " the format is a little messed up. Here  is the code and the error https://pastebin.com/bUDHC6NR ",
  "unread": false,
  "urls": [
   {
    "url": "https://pastebin.com/bUDHC6NR"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/Melisius",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/11976167?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/11976167?v=4&s=60",
   "displayName": "Erik Kjellgren",
   "gv": "4",
   "id": "5af6f586d73408ce4f991248",
   "url": "/Melisius",
   "username": "Melisius",
   "v": 1
  },
  "html": "Without direct regard your question, the code does not work.<br>a.size gives back an integer. And &quot;for i in integer:&quot; is not valid",
  "id": "5af838199ad18967b9e03ad0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-05-13T13:05:29.647Z",
  "text": "Without direct regard your question, the code does not work.\na.size gives back an integer. And \"for i in integer:\" is not valid",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/nitishjoshi25",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5562645?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5562645?v=4&s=60",
   "displayName": "Nitish Joshi",
   "gv": "4",
   "id": "58c77812d73408ce4f507255",
   "url": "/nitishjoshi25",
   "username": "nitishjoshi25",
   "v": 2
  },
  "html": "sorry...yea...",
  "id": "5af838a7e0b50c2d05bb204a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-05-13T13:07:51.143Z",
  "text": "sorry...yea...",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/nitishjoshi25",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5562645?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5562645?v=4&s=60",
   "displayName": "Nitish Joshi",
   "gv": "4",
   "id": "58c77812d73408ce4f507255",
   "url": "/nitishjoshi25",
   "username": "nitishjoshi25",
   "v": 2
  },
  "html": "but the object error still persists",
  "id": "5af838b7d245fe2eb7a857f2",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-05-13T13:08:07.464Z",
  "text": "but the object error still persists",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/nitishjoshi25",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5562645?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5562645?v=4&s=60",
   "displayName": "Nitish Joshi",
   "gv": "4",
   "id": "58c77812d73408ce4f507255",
   "url": "/nitishjoshi25",
   "username": "nitishjoshi25",
   "v": 2
  },
  "html": "Here&#39;s the correct code <a href=\"https://pastebin.com/aXHFsV3J\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://pastebin.com/aXHFsV3J</a>",
  "id": "5af83905bd10f34a68fb2598",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-05-13T13:09:25.193Z",
  "text": "Here's the correct code https://pastebin.com/aXHFsV3J",
  "unread": false,
  "urls": [
   {
    "url": "https://pastebin.com/aXHFsV3J"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/Melisius",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/11976167?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/11976167?v=4&s=60",
   "displayName": "Erik Kjellgren",
   "gv": "4",
   "id": "5af6f586d73408ce4f991248",
   "url": "/Melisius",
   "username": "Melisius",
   "v": 1
  },
  "html": "I think that np.object is not a supported type in Numba nopython mode",
  "id": "5af83923862c5e33e92f0fec",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-05-13T13:09:55.735Z",
  "text": "I think that np.object is not a supported type in Numba nopython mode",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/nitishjoshi25",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5562645?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5562645?v=4&s=60",
   "displayName": "Nitish Joshi",
   "gv": "4",
   "id": "58c77812d73408ce4f507255",
   "url": "/nitishjoshi25",
   "username": "nitishjoshi25",
   "v": 2
  },
  "html": "yea...is there any work around to this problem ?...",
  "id": "5af83971b84be71db902798a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-05-13T13:11:13.820Z",
  "text": "yea...is there any work around to this problem ?...",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/nitishjoshi25",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5562645?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5562645?v=4&s=60",
   "displayName": "Nitish Joshi",
   "gv": "4",
   "id": "58c77812d73408ce4f507255",
   "url": "/nitishjoshi25",
   "username": "nitishjoshi25",
   "v": 2
  },
  "html": "given that the size of the object array is large",
  "id": "5af839812df44c2d0623cf99",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-05-13T13:11:29.860Z",
  "text": "given that the size of the object array is large",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/Melisius",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/11976167?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/11976167?v=4&s=60",
   "displayName": "Erik Kjellgren",
   "gv": "4",
   "id": "5af6f586d73408ce4f991248",
   "url": "/Melisius",
   "username": "Melisius",
   "v": 1
  },
  "html": "Given that your problem looks alot of this sample code, I would use Numpy without Numba:<pre><code><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">s</span><span class=\"params\">(a)</span>:</span>\n    ans = <span class=\"number\">0</span>\n    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(a.size):\n        ans += np.sum(a[i])\n    <span class=\"keyword\">return</span> ans</code></pre>",
  "id": "5af83a37e1cf621dba16db44",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-05-13T13:14:31.702Z",
  "text": "Given that your problem looks alot of this sample code, I would use Numpy without Numba:\n\n    def s(a):\n        ans = 0\n        for i in range(a.size):\n            ans += np.sum(a[i])\n        return ans",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/nitishjoshi25",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5562645?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5562645?v=4&s=60",
   "displayName": "Nitish Joshi",
   "gv": "4",
   "id": "58c77812d73408ce4f507255",
   "url": "/nitishjoshi25",
   "username": "nitishjoshi25",
   "v": 2
  },
  "html": "this was just a toy problem to show what error i was getting, my actual code is completely different. However the problem of passing a np.object array  to a numba compiled function is the same ",
  "id": "5af83abda2d9513633373b65",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-05-13T13:16:45.314Z",
  "text": "this was just a toy problem to show what error i was getting, my actual code is completely different. However the problem of passing a np.object array  to a numba compiled function is the same ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/innovate-invent",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=60",
   "displayName": "innovate-invent",
   "gv": "4",
   "id": "5ae7ccd1d73408ce4f97b27e",
   "url": "/innovate-invent",
   "username": "innovate-invent"
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"nitishjoshi25\" class=\"mention\">@nitishjoshi25</span> does &#39;a&#39; need to be a numpy array? why not use a list?",
  "id": "5af88f13d332ee5fad15cda5",
  "issues": [],
  "mentions": [
   {
    "screenName": "nitishjoshi25",
    "userId": "58c77812d73408ce4f507255",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 14,
  "sent": "2018-05-13T19:16:35.927Z",
  "text": "@nitishjoshi25 does 'a' need to be a numpy array? why not use a list?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/Melisius",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/11976167?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/11976167?v=4&s=60",
   "displayName": "Erik Kjellgren",
   "gv": "4",
   "id": "5af6f586d73408ce4f991248",
   "url": "/Melisius",
   "username": "Melisius",
   "v": 1
  },
  "html": "<p>I have auto-generated code (for the sake of speed and my sanity). The code looks like this <a href=\"https://github.com/Melisius/SlowQuant/blob/New_integral_code/slowquant/molecularintegrals/electron_electron.py\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://github.com/Melisius/SlowQuant/blob/New_integral_code/slowquant/molecularintegrals/electron_electron.py</a></p><p>I decided to speed it up using Numba, but the compilation time is about 220 secounds on my machine.<br>Is it &quot;wrong&quot; use of Numba, applying it to code of this structure?<br>Is there any flags I can set to help it compile faster? (The next functions in the generated series is going to be much longer).</p>",
  "id": "5af927d35a1d895fae39a364",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-05-14T06:08:19.178Z",
  "text": "I have auto-generated code (for the sake of speed and my sanity). The code looks like this https://github.com/Melisius/SlowQuant/blob/New_integral_code/slowquant/molecularintegrals/electron_electron.py\n\nI decided to speed it up using Numba, but the compilation time is about 220 secounds on my machine. \nIs it \"wrong\" use of Numba, applying it to code of this structure?\nIs there any flags I can set to help it compile faster? (The next functions in the generated series is going to be much longer).",
  "unread": false,
  "urls": [
   {
    "url": "https://github.com/Melisius/SlowQuant/blob/New_integral_code/slowquant/molecularintegrals/electron_electron.py"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/nitishjoshi25",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5562645?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5562645?v=4&s=60",
   "displayName": "Nitish Joshi",
   "gv": "4",
   "id": "58c77812d73408ce4f507255",
   "url": "/nitishjoshi25",
   "username": "nitishjoshi25",
   "v": 2
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"innovate-invent\" class=\"mention\">@innovate-invent</span> using list gives this error  <a href=\"https://pastebin.com/DK8JF5aX\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://pastebin.com/DK8JF5aX</a>. However, i converted that list to a tuple and it worked. :) Thanks a lot ",
  "id": "5af92a9d41f54f22e228e20c",
  "issues": [],
  "mentions": [
   {
    "screenName": "innovate-invent",
    "userId": "5ae7ccd1d73408ce4f97b27e",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 12,
  "sent": "2018-05-14T06:20:13.829Z",
  "text": "@innovate-invent using list gives this error  https://pastebin.com/DK8JF5aX. However, i converted that list to a tuple and it worked. :) Thanks a lot ",
  "unread": false,
  "urls": [
   {
    "url": "https://pastebin.com/DK8JF5aX"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/innovate-invent",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=60",
   "displayName": "innovate-invent",
   "gv": "4",
   "id": "5ae7ccd1d73408ce4f97b27e",
   "url": "/innovate-invent",
   "username": "innovate-invent"
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"Melisius\" class=\"mention\">@Melisius</span> those functions are O(n^4), you might try profiling the compilation",
  "id": "5af92cb6f04ce53632d59348",
  "issues": [],
  "mentions": [
   {
    "screenName": "Melisius",
    "userId": "5af6f586d73408ce4f991248",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 12,
  "sent": "2018-05-14T06:29:10.120Z",
  "text": "@Melisius those functions are O(n^4), you might try profiling the compilation",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/nitishjoshi25",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5562645?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5562645?v=4&s=60",
   "displayName": "Nitish Joshi",
   "gv": "4",
   "id": "58c77812d73408ce4f507255",
   "url": "/nitishjoshi25",
   "username": "nitishjoshi25",
   "v": 2
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"innovate-invent\" class=\"mention\">@innovate-invent</span> however, using tuples results in a very slow code, even slower than original python itself.",
  "id": "5af93169bd10f34a68fd9553",
  "issues": [],
  "mentions": [
   {
    "screenName": "innovate-invent",
    "userId": "5ae7ccd1d73408ce4f97b27e",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 12,
  "sent": "2018-05-14T06:49:13.330Z",
  "text": "@innovate-invent however, using tuples results in a very slow code, even slower than original python itself.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/innovate-invent",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=60",
   "displayName": "innovate-invent",
   "gv": "4",
   "id": "5ae7ccd1d73408ce4f97b27e",
   "url": "/innovate-invent",
   "username": "innovate-invent"
  },
  "html": "do you have nopython=True?",
  "id": "5af9349a52194a4a67e1f673",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-05-14T07:02:50.792Z",
  "text": "do you have nopython=True?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/nitishjoshi25",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5562645?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5562645?v=4&s=60",
   "displayName": "Nitish Joshi",
   "gv": "4",
   "id": "58c77812d73408ce4f507255",
   "url": "/nitishjoshi25",
   "username": "nitishjoshi25",
   "v": 2
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"innovate-invent\" class=\"mention\">@innovate-invent</span> yes",
  "id": "5af93506d245fe2eb7aad4e5",
  "issues": [],
  "mentions": [
   {
    "screenName": "innovate-invent",
    "userId": "5ae7ccd1d73408ce4f97b27e",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 15,
  "sent": "2018-05-14T07:04:38.761Z",
  "text": "@innovate-invent yes",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/innovate-invent",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=60",
   "displayName": "innovate-invent",
   "gv": "4",
   "id": "5ae7ccd1d73408ce4f97b27e",
   "url": "/innovate-invent",
   "username": "innovate-invent"
  },
  "html": "is cache=True?",
  "id": "5af9355ce0b50c2d05bd922a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-05-14T07:06:04.593Z",
  "text": "is cache=True?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/innovate-invent",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=60",
   "displayName": "innovate-invent",
   "gv": "4",
   "id": "5ae7ccd1d73408ce4f97b27e",
   "url": "/innovate-invent",
   "username": "innovate-invent"
  },
  "html": "have you factored out the compilation time in your profiling?",
  "id": "5af9357752194a4a67e1fa12",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-05-14T07:06:31.039Z",
  "text": "have you factored out the compilation time in your profiling?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/innovate-invent",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=60",
   "displayName": "innovate-invent",
   "gv": "4",
   "id": "5ae7ccd1d73408ce4f97b27e",
   "url": "/innovate-invent",
   "username": "innovate-invent"
  },
  "html": "without seeing your actual code its pretty much impossible to help with speed",
  "id": "5af935dc9ad18967b9e2b2ce",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-05-14T07:08:12.781Z",
  "text": "without seeing your actual code its pretty much impossible to help with speed",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/innovate-invent",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=60",
   "displayName": "innovate-invent",
   "gv": "4",
   "id": "5ae7ccd1d73408ce4f97b27e",
   "url": "/innovate-invent",
   "username": "innovate-invent"
  },
  "html": "there is also the possibility that it is making a copy of the data",
  "id": "5af935f8d245fe2eb7aad824",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-05-14T07:08:40.313Z",
  "text": "there is also the possibility that it is making a copy of the data",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/innovate-invent",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=60",
   "displayName": "innovate-invent",
   "gv": "4",
   "id": "5ae7ccd1d73408ce4f97b27e",
   "url": "/innovate-invent",
   "username": "innovate-invent"
  },
  "html": "so it depends on the dataset",
  "id": "5af93601b84be71db904ee7d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-05-14T07:08:49.390Z",
  "text": "so it depends on the dataset",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/nitishjoshi25",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5562645?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5562645?v=4&s=60",
   "displayName": "Nitish Joshi",
   "gv": "4",
   "id": "58c77812d73408ce4f507255",
   "url": "/nitishjoshi25",
   "username": "nitishjoshi25",
   "v": 2
  },
  "html": "Here, this is just a toy code, however the problem that I may face with my actual code is the same. As I in increase the size of the list/tuple, the numba code becomes slower compared to normal python <a href=\"https://pastebin.com/sU8WwjFF\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://pastebin.com/sU8WwjFF</a>",
  "id": "5af9373c2df44c2d06265327",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-05-14T07:14:04.833Z",
  "text": "Here, this is just a toy code, however the problem that I may face with my actual code is the same. As I in increase the size of the list/tuple, the numba code becomes slower compared to normal python https://pastebin.com/sU8WwjFF",
  "unread": false,
  "urls": [
   {
    "url": "https://pastebin.com/sU8WwjFF"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/nitishjoshi25",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5562645?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5562645?v=4&s=60",
   "displayName": "Nitish Joshi",
   "gv": "4",
   "id": "58c77812d73408ce4f507255",
   "url": "/nitishjoshi25",
   "username": "nitishjoshi25",
   "v": 2
  },
  "html": "Using numba , this code takes 16 sec to run, while it takes only 3 sec in python",
  "id": "5af9377a9ad18967b9e2baee",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-05-14T07:15:06.297Z",
  "text": "Using numba , this code takes 16 sec to run, while it takes only 3 sec in python",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/innovate-invent",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=60",
   "displayName": "innovate-invent",
   "gv": "4",
   "id": "5ae7ccd1d73408ce4f97b27e",
   "url": "/innovate-invent",
   "username": "innovate-invent"
  },
  "html": "when you say &#39;in python&#39; are you using numpy?",
  "id": "5af9388cd245fe2eb7aade75",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-05-14T07:19:40.928Z",
  "text": "when you say 'in python' are you using numpy?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/innovate-invent",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=60",
   "displayName": "innovate-invent",
   "gv": "4",
   "id": "5ae7ccd1d73408ce4f97b27e",
   "url": "/innovate-invent",
   "username": "innovate-invent"
  },
  "html": "and are you precompiling the code? or compiling each time",
  "id": "5af938ab1cfca775e1082078",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-05-14T07:20:11.554Z",
  "text": "and are you precompiling the code? or compiling each time",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/innovate-invent",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=60",
   "displayName": "innovate-invent",
   "gv": "4",
   "id": "5ae7ccd1d73408ce4f97b27e",
   "url": "/innovate-invent",
   "username": "innovate-invent"
  },
  "html": "you may also want to try setting up your jitted function to leverage AVX",
  "id": "5af938d5e1cf621dba195b4e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-05-14T07:20:53.796Z",
  "text": "you may also want to try setting up your jitted function to leverage AVX",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/innovate-invent",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=60",
   "displayName": "innovate-invent",
   "gv": "4",
   "id": "5ae7ccd1d73408ce4f97b27e",
   "url": "/innovate-invent",
   "username": "innovate-invent"
  },
  "html": "<a href=\"https://gist.github.com/seibert/50b725012fbda101013b\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://gist.github.com/seibert/50b725012fbda101013b</a>",
  "id": "5af938d941f54f22e2291090",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-05-14T07:20:57.435Z",
  "text": "https://gist.github.com/seibert/50b725012fbda101013b",
  "unread": false,
  "urls": [
   {
    "url": "https://gist.github.com/seibert/50b725012fbda101013b"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/innovate-invent",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=60",
   "displayName": "innovate-invent",
   "gv": "4",
   "id": "5ae7ccd1d73408ce4f97b27e",
   "url": "/innovate-invent",
   "username": "innovate-invent"
  },
  "html": "you also need to check where it is spending its time. Is it taking longer generating &#39;a&#39; or in s(a)",
  "id": "5af9398741f54f22e22912d4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-05-14T07:23:51.622Z",
  "text": "you also need to check where it is spending its time. Is it taking longer generating 'a' or in s(a)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/nitishjoshi25",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5562645?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5562645?v=4&s=60",
   "displayName": "Nitish Joshi",
   "gv": "4",
   "id": "58c77812d73408ce4f507255",
   "url": "/nitishjoshi25",
   "username": "nitishjoshi25",
   "v": 2
  },
  "html": "when i say &#39;in python&#39; , i am just commenting out the the <span data-link-type=\"mention\" data-screen-name=\"jit\" class=\"mention\">@jit</span> and import numba line from the code. The rest remains the same.",
  "id": "5af93e05f04ce53632d5cbf6",
  "issues": [],
  "mentions": [
   {
    "screenName": "jit",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 18,
  "sent": "2018-05-14T07:43:01.286Z",
  "text": "when i say 'in python' , i am just commenting out the the @jit and import numba line from the code. The rest remains the same.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/nitishjoshi25",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5562645?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5562645?v=4&s=60",
   "displayName": "Nitish Joshi",
   "gv": "4",
   "id": "58c77812d73408ce4f507255",
   "url": "/nitishjoshi25",
   "username": "nitishjoshi25",
   "v": 2
  },
  "html": "im pretty sure numba is slowing down because of the list.",
  "id": "5af93eb041f54f22e229280a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-05-14T07:45:52.088Z",
  "text": "im pretty sure numba is slowing down because of the list.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/Melisius",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/11976167?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/11976167?v=4&s=60",
   "displayName": "Erik Kjellgren",
   "gv": "4",
   "id": "5af6f586d73408ce4f991248",
   "url": "/Melisius",
   "username": "Melisius",
   "v": 1
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"innovate-invent\" class=\"mention\">@innovate-invent</span> How do I profile the compilation? ",
  "id": "5af9401aa2d951363339d0c1",
  "issues": [],
  "mentions": [
   {
    "screenName": "innovate-invent",
    "userId": "5ae7ccd1d73408ce4f97b27e",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 18,
  "sent": "2018-05-14T07:51:54.940Z",
  "text": "@innovate-invent How do I profile the compilation? ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/innovate-invent",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=60",
   "displayName": "innovate-invent",
   "gv": "4",
   "id": "5ae7ccd1d73408ce4f97b27e",
   "url": "/innovate-invent",
   "username": "innovate-invent"
  },
  "html": "hopefully your IDE supports it",
  "id": "5af9403e5666c42eb60bd310",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-05-14T07:52:30.327Z",
  "text": "hopefully your IDE supports it",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/Melisius",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/11976167?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/11976167?v=4&s=60",
   "displayName": "Erik Kjellgren",
   "gv": "4",
   "id": "5af6f586d73408ce4f991248",
   "url": "/Melisius",
   "username": "Melisius",
   "v": 1
  },
  "html": "<p>Does any IDE support profiling of Numba Jit compilation?</p><p>The run time of the functions are great, after the compilation.</p><p>When I talk about compilation, I mean the first time the function is called and Numba makes the LLVM compilation (I have cache=True, so it will only do it once).<br>This step takes about 200 secounds for the code I posted. </p>",
  "id": "5af940f5f04ce53632d5da9a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-05-14T07:55:33.189Z",
  "text": "Does any IDE support profiling of Numba Jit compilation?\n\nThe run time of the functions are great, after the compilation.\n\nWhen I talk about compilation, I mean the first time the function is called and Numba makes the LLVM compilation (I have cache=True, so it will only do it once).\nThis step takes about 200 secounds for the code I posted. ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/innovate-invent",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=60",
   "displayName": "innovate-invent",
   "gv": "4",
   "id": "5ae7ccd1d73408ce4f97b27e",
   "url": "/innovate-invent",
   "username": "innovate-invent"
  },
  "html": "just profile it as if its any other python code",
  "id": "5af9410e2df44c2d06267871",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-05-14T07:55:58.072Z",
  "text": "just profile it as if its any other python code",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/Melisius",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/11976167?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/11976167?v=4&s=60",
   "displayName": "Erik Kjellgren",
   "gv": "4",
   "id": "5af6f586d73408ce4f991248",
   "url": "/Melisius",
   "username": "Melisius",
   "v": 1
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"innovate-invent\" class=\"mention\">@innovate-invent</span>  How can you tell that the code is O(n^4)? Also do you mean O(n^4) with respect to compilation time?",
  "id": "5af943c7a2d951363339e098",
  "issues": [],
  "mentions": [
   {
    "screenName": "innovate-invent",
    "userId": "5ae7ccd1d73408ce4f97b27e",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 19,
  "sent": "2018-05-14T08:07:35.881Z",
  "text": "@innovate-invent  How can you tell that the code is O(n^4)? Also do you mean O(n^4) with respect to compilation time?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-05-14T08:09:01.118Z",
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/innovate-invent",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=60",
   "displayName": "innovate-invent",
   "gv": "4",
   "id": "5ae7ccd1d73408ce4f97b27e",
   "url": "/innovate-invent",
   "username": "innovate-invent"
  },
  "html": "no, not compilation time. I am just saying it is O(n^4) from the fact that you have 4 nested loops. It&#39;s more realistically O(mnjk)",
  "id": "5af94410f04ce53632d5e618",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 20,
  "sent": "2018-05-14T08:08:48.648Z",
  "text": "no, not compilation time. I am just saying it is O(n^4) from the fact that you have 4 nested loops. It's more realistically O(mnjk)",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/innovate-invent",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=60",
   "displayName": "innovate-invent",
   "gv": "4",
   "id": "5ae7ccd1d73408ce4f97b27e",
   "url": "/innovate-invent",
   "username": "innovate-invent"
  },
  "html": "I am not sure but if numba is trying to flatten those loops then things could get crazy",
  "id": "5af944bcbd10f34a68fdddb6",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 20,
  "sent": "2018-05-14T08:11:40.406Z",
  "text": "I am not sure but if numba is trying to flatten those loops then things could get crazy",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/Melisius",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/11976167?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/11976167?v=4&s=60",
   "displayName": "Erik Kjellgren",
   "gv": "4",
   "id": "5af6f586d73408ce4f991248",
   "url": "/Melisius",
   "username": "Melisius",
   "v": 1
  },
  "html": "Ah okay.<br>My problem is not the run time of the code. It is only the time it uses to compile.",
  "id": "5af946635a1d895fae3a0bc5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 20,
  "sent": "2018-05-14T08:18:43.178Z",
  "text": "Ah okay.\nMy problem is not the run time of the code. It is only the time it uses to compile.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/innovate-invent",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=60",
   "displayName": "innovate-invent",
   "gv": "4",
   "id": "5ae7ccd1d73408ce4f97b27e",
   "url": "/innovate-invent",
   "username": "innovate-invent"
  },
  "html": "yea, run it through a profiler while its compiling and it might give some hints",
  "id": "5af94685d332ee5fad179532",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 20,
  "sent": "2018-05-14T08:19:17.293Z",
  "text": "yea, run it through a profiler while its compiling and it might give some hints",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/Melisius",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/11976167?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/11976167?v=4&s=60",
   "displayName": "Erik Kjellgren",
   "gv": "4",
   "id": "5af6f586d73408ce4f991248",
   "url": "/Melisius",
   "username": "Melisius",
   "v": 1
  },
  "html": "What compiler would you suggest? Is cProfile fine?",
  "id": "5af946b5e0b50c2d05bdcef9",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 20,
  "sent": "2018-05-14T08:20:05.917Z",
  "text": "What compiler would you suggest? Is cProfile fine?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/innovate-invent",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=60",
   "displayName": "innovate-invent",
   "gv": "4",
   "id": "5ae7ccd1d73408ce4f97b27e",
   "url": "/innovate-invent",
   "username": "innovate-invent"
  },
  "html": "make sure your profiler follows into libraries and doesn&#39;t just profile your code",
  "id": "5af946c1d245fe2eb7ab146e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 20,
  "sent": "2018-05-14T08:20:17.312Z",
  "text": "make sure your profiler follows into libraries and doesn't just profile your code",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/innovate-invent",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=60",
   "displayName": "innovate-invent",
   "gv": "4",
   "id": "5ae7ccd1d73408ce4f97b27e",
   "url": "/innovate-invent",
   "username": "innovate-invent"
  },
  "html": "preferably something that generates a call graph",
  "id": "5af9471ef04ce53632d5f154",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 20,
  "sent": "2018-05-14T08:21:50.927Z",
  "text": "preferably something that generates a call graph",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/innovate-invent",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=60",
   "displayName": "innovate-invent",
   "gv": "4",
   "id": "5ae7ccd1d73408ce4f97b27e",
   "url": "/innovate-invent",
   "username": "innovate-invent"
  },
  "html": "I use pyCharm with cProfiler",
  "id": "5af9479d2df44c2d06268d71",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 20,
  "sent": "2018-05-14T08:23:57.515Z",
  "text": "I use pyCharm with cProfiler",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/innovate-invent",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1768820?v=4&s=60",
   "displayName": "innovate-invent",
   "gv": "4",
   "id": "5ae7ccd1d73408ce4f97b27e",
   "url": "/innovate-invent",
   "username": "innovate-invent"
  },
  "html": "or yappi",
  "id": "5af947a041f54f22e2294614",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 20,
  "sent": "2018-05-14T08:24:00.457Z",
  "text": "or yappi",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/ihnorton",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/327706?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/327706?v=4&s=60",
   "displayName": "Isaiah Norton",
   "gv": "4",
   "id": "5349af1c5e986b0712f03159",
   "url": "/ihnorton",
   "username": "ihnorton",
   "v": 9
  },
  "html": "Do cpython extensions block nopython mode?",
  "id": "5afeda7ff04ce53632ea08ac",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-05-18T13:51:59.564Z",
  "text": "Do cpython extensions block nopython mode?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "Not sure what you mean there",
  "id": "5afeda9c2df44c2d063aa5df",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-05-18T13:52:28.913Z",
  "text": "Not sure what you mean there",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "Do you mean compiling a function that calls a cpython extension?",
  "id": "5afedb0ee0b50c2d05d21444",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-05-18T13:54:22.976Z",
  "text": "Do you mean compiling a function that calls a cpython extension?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/ihnorton",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/327706?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/327706?v=4&s=60",
   "displayName": "Isaiah Norton",
   "gv": "4",
   "id": "5349af1c5e986b0712f03159",
   "url": "/ihnorton",
   "username": "ihnorton",
   "v": 9
  },
  "html": "I have calls to wrapped code (think SWIG) that accepts and returns PyObject* under the hood.",
  "id": "5afedb3e41f54f22e23d33b4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-05-18T13:55:10.910Z",
  "text": "I have calls to wrapped code (think SWIG) that accepts and returns PyObject* under the hood.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/ihnorton",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/327706?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/327706?v=4&s=60",
   "displayName": "Isaiah Norton",
   "gv": "4",
   "id": "5349af1c5e986b0712f03159",
   "url": "/ihnorton",
   "username": "ihnorton",
   "v": 9
  },
  "html": "yes",
  "id": "5afedb42e0b50c2d05d214cc",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-05-18T13:55:14.977Z",
  "text": "yes",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "yes, in general you can&#39;t call CPython extensions (or really any function not listed in the Numba docs for supported Python and NumPy) from nopython mode.",
  "id": "5afedb77a2d95136334e1453",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-05-18T13:56:07.817Z",
  "text": "yes, in general you can't call CPython extensions (or really any function not listed in the Numba docs for supported Python and NumPy) from nopython mode.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/ihnorton",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/327706?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/327706?v=4&s=60",
   "displayName": "Isaiah Norton",
   "gv": "4",
   "id": "5349af1c5e986b0712f03159",
   "url": "/ihnorton",
   "username": "ihnorton",
   "v": 9
  },
  "html": "numba seems to be complaining about inferring the return type here?<pre><code><span class=\"type\">TypingError</span>: <span class=\"type\">Failed</span> at nopython (nopython frontend)\n<span class=\"type\">Invalid</span> usage <span class=\"keyword\">of</span> <span class=\"typedef\"><span class=\"keyword\">type</span><span class=\"container\">(<span class=\"type\">CPUDispatcher</span>(&lt;<span class=\"title\">function</span> <span class=\"title\">transform_fiber_array_numpy</span> <span class=\"title\">at</span> 0<span class=\"title\">x11ca5ec08</span>&gt;)</span>) with parameters <span class=\"container\">(<span class=\"title\">readonly</span> <span class=\"title\">array</span>(<span class=\"title\">float64</span>, 3<span class=\"title\">d</span>, <span class=\"type\">C</span>)</span>, array<span class=\"container\">(<span class=\"title\">float64</span>, 1<span class=\"title\">d</span>, <span class=\"type\">C</span>)</span>, tuple<span class=\"container\">(<span class=\"title\">int64</span> <span class=\"title\">x</span> 4)</span>)</span>\n * parameterized\n[<span class=\"number\">1</span>] <span class=\"type\">During</span>: resolving callee <span class=\"typedef\"><span class=\"keyword\">type</span>: <span class=\"keyword\">type</span><span class=\"container\">(<span class=\"type\">CPUDispatcher</span>(&lt;<span class=\"title\">function</span> <span class=\"title\">transform_fiber_array_numpy</span> <span class=\"title\">at</span> 0<span class=\"title\">x11ca5ec08</span>&gt;)</span>)</span>\n[<span class=\"number\">2</span>] <span class=\"type\">During</span>: typing <span class=\"keyword\">of</span> call at /opt/bld/<span class=\"type\">SlicerWMA</span>-s5-build2/python-whitematteranalysis/whitematteranalysis/register_two_subjects.py (<span class=\"number\">109</span>)</code></pre>",
  "id": "5afedb7cd332ee5fad2bca9d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-05-18T13:56:12.238Z",
  "text": "numba seems to be complaining about inferring the return type here?\n\n```\nTypingError: Failed at nopython (nopython frontend)\nInvalid usage of type(CPUDispatcher(<function transform_fiber_array_numpy at 0x11ca5ec08>)) with parameters (readonly array(float64, 3d, C), array(float64, 1d, C), tuple(int64 x 4))\n * parameterized\n[1] During: resolving callee type: type(CPUDispatcher(<function transform_fiber_array_numpy at 0x11ca5ec08>))\n[2] During: typing of call at /opt/bld/SlicerWMA-s5-build2/python-whitematteranalysis/whitematteranalysis/register_two_subjects.py (109)\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/ihnorton",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/327706?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/327706?v=4&s=60",
   "displayName": "Isaiah Norton",
   "gv": "4",
   "id": "5349af1c5e986b0712f03159",
   "url": "/ihnorton",
   "username": "ihnorton",
   "v": 9
  },
  "html": "ok.......",
  "id": "5afedb7e1cfca775e11c5131",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-05-18T13:56:14.800Z",
  "text": "ok.......",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/ihnorton",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/327706?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/327706?v=4&s=60",
   "displayName": "Isaiah Norton",
   "gv": "4",
   "id": "5349af1c5e986b0712f03159",
   "url": "/ihnorton",
   "username": "ihnorton",
   "v": 9
  },
  "html": "thanks.",
  "id": "5afedb805666c42eb62000ce",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-05-18T13:56:16.657Z",
  "text": "thanks.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "You can call cffi or ctypes-wrapped C functions directly",
  "id": "5afedb842df44c2d063aa972",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-05-18T13:56:20.050Z",
  "text": "You can call cffi or ctypes-wrapped C functions directly",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "We are working on being able to jump back into python mode in the middle of a nopython mode function.",
  "id": "5afedbabe0b50c2d05d216d2",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-05-18T13:56:59.724Z",
  "text": "We are working on being able to jump back into python mode in the middle of a nopython mode function.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "You lose some of the performance benefits, but there are plenty of cases where this is useful.",
  "id": "5afedbc1e1cf621dba2d1b3d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-05-18T13:57:21.131Z",
  "text": "You lose some of the performance benefits, but there are plenty of cases where this is useful.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "I think we&#39;ll see that feature working by the end of the summer.",
  "id": "5afedbd752194a4a67f64bc7",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-05-18T13:57:43.101Z",
  "text": "I think we'll see that feature working by the end of the summer.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/ihnorton",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/327706?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/327706?v=4&s=60",
   "displayName": "Isaiah Norton",
   "gv": "4",
   "id": "5349af1c5e986b0712f03159",
   "url": "/ihnorton",
   "username": "ihnorton",
   "v": 9
  },
  "html": "Thanks.",
  "id": "5afee3695666c42eb620277d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-05-18T14:30:01.851Z",
  "text": "Thanks.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 10
  },
  "html": "Question... Does Numba support compilation of arbitrary ufuncs or just a specific set of ufuncs?",
  "id": "5b007481e0b50c2d05d6b0d0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 20,
  "sent": "2018-05-19T19:01:21.773Z",
  "text": "Question... Does Numba support compilation of arbitrary ufuncs or just a specific set of ufuncs?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Lomelgande",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/8880982?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/8880982?v=4&s=60",
   "displayName": "Lomelgande",
   "gv": "4",
   "id": "5ab3f0f2d73408ce4f92b317",
   "url": "/Lomelgande",
   "username": "Lomelgande",
   "v": 2
  },
  "html": "Are there plans to support warp shuffling?",
  "id": "5b01bd032df44c2d06425243",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 20,
  "sent": "2018-05-20T18:22:59.747Z",
  "text": "Are there plans to support warp shuffling?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/insertinterestingnamehere",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1847484?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1847484?v=4&s=60",
   "displayName": "Ian Henriksen",
   "gv": "4",
   "id": "55ff0cf80fc9f982beb143b2",
   "url": "/insertinterestingnamehere",
   "username": "insertinterestingnamehere",
   "v": 3
  },
  "html": "Is there current support for atomics for parallel code run on the CPU (e.g. inside <code>@cfunc</code>)? All I currently see in the docs is that there are atomic operations available when using CUDA/HSA.",
  "id": "5b02da73d245fe2eb7c9a7da",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 21,
  "sent": "2018-05-21T14:40:51.129Z",
  "text": "Is there current support for atomics for parallel code run on the CPU (e.g. inside `@cfunc`)? All I currently see in the docs is that there are atomic operations available when using CUDA/HSA.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/mrocklin",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/306380?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/306380?v=4&s=60",
   "displayName": "Matthew Rocklin",
   "gv": "4",
   "id": "530c03e25e986b0712efafb8",
   "url": "/mrocklin",
   "username": "mrocklin",
   "v": 17
  },
  "html": "<p>What is the current state of recent debugging improvements on Numba.  Question originating from here: <span data-link-type=\"issue\" data-issue=\"9\" data-issue-repo=\"scisprints/2018_05_sklearn_skimage_dask\" class=\"issue\">scisprints/2018_05_sklearn_skimage_dask#9</span></p><p>Is <a href=\"https://numba.pydata.org/numba-doc/dev/user/troubleshoot.html\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://numba.pydata.org/numba-doc/dev/user/troubleshoot.html</a> still the most up-to-date reference?</p>",
  "id": "5b04094252194a4a6705234c",
  "issues": [
   {
    "number": "9",
    "repo": "scisprints/2018_05_sklearn_skimage_dask"
   }
  ],
  "mentions": [],
  "meta": [],
  "readBy": 22,
  "sent": "2018-05-22T12:12:50.305Z",
  "text": "What is the current state of recent debugging improvements on Numba.  Question originating from here: https://github.com/scisprints/2018_05_sklearn_skimage_dask/issues/9\n\nIs https://numba.pydata.org/numba-doc/dev/user/troubleshoot.html still the most up-to-date reference?",
  "unread": false,
  "urls": [
   {
    "url": "https://numba.pydata.org/numba-doc/dev/user/troubleshoot.html"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/mrocklin",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/306380?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/306380?v=4&s=60",
   "displayName": "Matthew Rocklin",
   "gv": "4",
   "id": "530c03e25e986b0712efafb8",
   "url": "/mrocklin",
   "username": "mrocklin",
   "v": 17
  },
  "html": "I recall <span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span> and maybe <span data-link-type=\"mention\" data-screen-name=\"sklam\" class=\"mention\">@sklam</span> doing some work here recently",
  "id": "5b040956b84be71db927fc17",
  "issues": [],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   },
   {
    "screenName": "sklam",
    "userId": "55b689f50fc9f982beab2a24",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 22,
  "sent": "2018-05-22T12:13:10.154Z",
  "text": "I recall @stuartarchibald and maybe @sklam doing some work here recently",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "That is the most up to date documentation.",
  "id": "5b040978677d792bd1a75e42",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 21,
  "sent": "2018-05-22T12:13:44.513Z",
  "text": "That is the most up to date documentation.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "Most of the effort has gone into what the user sees as error output from the compiler",
  "id": "5b04098e1cfca775e12b5aee",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 21,
  "sent": "2018-05-22T12:14:06.290Z",
  "text": "Most of the effort has gone into what the user sees as error output from the compiler",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "Optimisation wise, this should hopefully make it into the next release <span data-link-type=\"issue\" data-issue=\"2793\" data-issue-repo=\"numba/numba\" class=\"issue\">numba/numba#2793</span>",
  "id": "5b040a3b2df44c2d0649d070",
  "issues": [
   {
    "number": "2793",
    "repo": "numba/numba"
   }
  ],
  "mentions": [],
  "meta": [],
  "readBy": 21,
  "sent": "2018-05-22T12:16:59.180Z",
  "text": "Optimisation wise, this should hopefully make it into the next release https://github.com/numba/numba/pull/2793",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "^timeout, don&#39;t think its a fail",
  "id": "5b0434faf04ce53632f9d6d1",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 21,
  "sent": "2018-05-22T15:19:22.128Z",
  "text": "^timeout, don't think its a fail",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"insertinterestingnamehere\" class=\"mention\">@insertinterestingnamehere</span>: There are no user-visible atomic functions on the CPU, but that&#39;s an interesting idea now that we have things like <code>@prange</code>.",
  "id": "5b0578145f3e6b40fadbb509",
  "issues": [],
  "mentions": [
   {
    "screenName": "insertinterestingnamehere",
    "userId": "55ff0cf80fc9f982beb143b2",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 21,
  "sent": "2018-05-23T14:17:56.515Z",
  "text": "@insertinterestingnamehere: There are no user-visible atomic functions on the CPU, but that's an interesting idea now that we have things like `@prange`.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "Feel free to suggest it in a Numba issue (with some detail about which kinds of atomics would be helpful for you)",
  "id": "5b05782bee623e2e41f90de4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 21,
  "sent": "2018-05-23T14:18:19.902Z",
  "text": "Feel free to suggest it in a Numba issue (with some detail about which kinds of atomics would be helpful for you)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"Lomelgande\" class=\"mention\">@Lomelgande</span>: This PR adds a number of warp intrinsics: <span data-link-type=\"issue\" data-issue=\"2910\" data-issue-repo=\"numba/numba\" class=\"issue\">numba/numba#2910</span>  It&#39;s under review now.",
  "id": "5b05788fee623e2e41f90f8c",
  "issues": [
   {
    "number": "2910",
    "repo": "numba/numba"
   }
  ],
  "mentions": [
   {
    "screenName": "Lomelgande",
    "userId": "5ab3f0f2d73408ce4f92b317",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 21,
  "sent": "2018-05-23T14:19:59.947Z",
  "text": "@Lomelgande: This PR adds a number of warp intrinsics: https://github.com/numba/numba/pull/2910  It's under review now.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"hameerabbasi\" class=\"mention\">@hameerabbasi</span>: Numba can only compile calls NumPy ufuncs that we&#39;ve reimplemented for Numba, or ufuncs created with Numba itself.  We do not have a way yet to call out to arbitrary ufunc objects from nopython mode.",
  "id": "5b0578fc6309af743d09a7bb",
  "issues": [],
  "mentions": [
   {
    "screenName": "hameerabbasi",
    "userId": "55b089c90fc9f982beaaa526",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 21,
  "sent": "2018-05-23T14:21:48.297Z",
  "text": "@hameerabbasi: Numba can only compile calls NumPy ufuncs that we've reimplemented for Numba, or ufuncs created with Numba itself.  We do not have a way yet to call out to arbitrary ufunc objects from nopython mode.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/nunocalaim",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/6451402?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/6451402?v=4&s=60",
   "displayName": "nunocalaim",
   "gv": "4",
   "id": "5b057a0ed73408ce4f9a700a",
   "url": "/nunocalaim",
   "username": "nunocalaim"
  },
  "html": "Hi, I got this error message and I&#39;m not sure whether I should submit a bug or not",
  "id": "5b057a322817b43087c054bf",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 22,
  "sent": "2018-05-23T14:26:58.130Z",
  "text": "Hi, I got this error message and I'm not sure whether I should submit a bug or not",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-05-23T14:32:16.983Z",
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/nunocalaim",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/6451402?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/6451402?v=4&s=60",
   "displayName": "nunocalaim",
   "gv": "4",
   "id": "5b057a0ed73408ce4f9a700a",
   "url": "/nunocalaim",
   "username": "nunocalaim"
  },
  "html": "<pre><code><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">p</span><span class=\"params\">()</span>:</span>\n    A = np.array([[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]])\n    ^\n[<span class=\"number\">1</span>] During: lowering <span class=\"string\">\"$0.7 = build_list(items=[Var($0.6, &lt;ipython-input-25-7460252e930b&gt; (3))])\"</span> at &lt;ipython-input-<span class=\"number\">25</span>-<span class=\"number\">7460252e930</span>b&gt; (<span class=\"number\">3</span>)\n-------------------------------------------------------------------------------\nThis should <span class=\"keyword\">not</span> have happened, a problem has occurred <span class=\"keyword\">in</span> Numba<span class=\"string\">'s internals.</span></code></pre>",
  "id": "5b057a492817b43087c055b0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 22,
  "sent": "2018-05-23T14:27:21.147Z",
  "text": "```\ndef p():\n    A = np.array([[1, 2, 3]])\n    ^\n[1] During: lowering \"$0.7 = build_list(items=[Var($0.6, <ipython-input-25-7460252e930b> (3))])\" at <ipython-input-25-7460252e930b> (3)\n-------------------------------------------------------------------------------\nThis should not have happened, a problem has occurred in Numba's internals.\n```",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "editedAt": "2018-05-23T14:30:39.837Z",
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/nunocalaim",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/6451402?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/6451402?v=4&s=60",
   "displayName": "nunocalaim",
   "gv": "4",
   "id": "5b057a0ed73408ce4f9a700a",
   "url": "/nunocalaim",
   "username": "nunocalaim"
  },
  "html": "This reproduces the problem:<pre><code><span class=\"decorator\">@njit</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span><span class=\"params\">()</span>:</span>\n    <span class=\"keyword\">return</span> np.array([[<span class=\"number\">1</span>]])\nf()</code></pre>",
  "id": "5b057acbb435f21fb8bf4a70",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 22,
  "sent": "2018-05-23T14:29:31.605Z",
  "text": "This reproduces the problem:\n\n```\n@njit\ndef f():\n    return np.array([[1]])\nf()\n```",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/nunocalaim",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/6451402?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/6451402?v=4&s=60",
   "displayName": "nunocalaim",
   "gv": "4",
   "id": "5b057a0ed73408ce4f9a700a",
   "url": "/nunocalaim",
   "username": "nunocalaim"
  },
  "html": "I thought I had done this in the past with Numba (creating 2D arrays manually)",
  "id": "5b057b43aaafa25932ad50bb",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 22,
  "sent": "2018-05-23T14:31:31.331Z",
  "text": "I thought I had done this in the past with Numba (creating 2D arrays manually)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/nunocalaim",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/6451402?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/6451402?v=4&s=60",
   "displayName": "nunocalaim",
   "gv": "4",
   "id": "5b057a0ed73408ce4f9a700a",
   "url": "/nunocalaim",
   "username": "nunocalaim"
  },
  "html": "Thanks and keep the good work",
  "id": "5b057bc2fb0f4a0bfe6474fd",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 22,
  "sent": "2018-05-23T14:33:38.362Z",
  "text": "Thanks and keep the good work",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "<p><span data-link-type=\"mention\" data-screen-name=\"nunocalaim\" class=\"mention\">@nunocalaim</span> thanks, you should see an error like:</p><pre><code class=\"python\">numba.errors.LoweringError: Failed at nopython (nopython mode backend)\nlist(list(int64)): unsupported nested memory-managed object\n\nFile <span class=\"string\">\"tmp.py\"</span>, line <span class=\"number\">5</span>:\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span><span class=\"params\">()</span>:</span>\n    <span class=\"keyword\">return</span> np.array([[<span class=\"number\">1</span>]])\n    ^\n[<span class=\"number\">1</span>] During: lowering <span class=\"string\">\"$0.5 = build_list(items=[Var($0.4, tmp.py (5))])\"</span> at tmp.py (<span class=\"number\">5</span>)</code></pre><p>as list-of-list is not yet supported. It ought to have been caught as an issue higher up the compilation stack though.</p>",
  "id": "5b05831fee623e2e41f9494d",
  "issues": [],
  "mentions": [
   {
    "screenName": "nunocalaim",
    "userId": "5b057a0ed73408ce4f9a700a",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 22,
  "sent": "2018-05-23T15:05:03.794Z",
  "text": "@nunocalaim thanks, you should see an error like:\n```python\nnumba.errors.LoweringError: Failed at nopython (nopython mode backend)\nlist(list(int64)): unsupported nested memory-managed object\n\nFile \"tmp.py\", line 5:\ndef f():\n    return np.array([[1]])\n    ^\n[1] During: lowering \"$0.5 = build_list(items=[Var($0.4, tmp.py (5))])\" at tmp.py (5)\n```\nas list-of-list is not yet supported. It ought to have been caught as an issue higher up the compilation stack though.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/insertinterestingnamehere",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1847484?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1847484?v=4&s=60",
   "displayName": "Ian Henriksen",
   "gv": "4",
   "id": "55ff0cf80fc9f982beb143b2",
   "url": "/insertinterestingnamehere",
   "username": "insertinterestingnamehere",
   "v": 3
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"seibert\" class=\"mention\">@seibert</span>  Thanks for the info, I&#39;ll put an issue up.",
  "id": "5b0585ba752aff59310b94da",
  "issues": [],
  "mentions": [
   {
    "screenName": "seibert",
    "userId": "55b68af40fc9f982beab2a3c",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 22,
  "sent": "2018-05-23T15:16:10.227Z",
  "text": "@seibert  Thanks for the info, I'll put an issue up.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/heyer2",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085170?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085170?v=4&s=60",
   "displayName": "heyer2",
   "gv": "4",
   "id": "577d9ce3c2f0db084a21cda9",
   "url": "/heyer2",
   "username": "heyer2",
   "v": 5
  },
  "html": "Is there any way to cast an integer to a CPointer (for use in numba.carray) inside nopython mode? Been scouring the documentation but there doesn&#39;t seem to be any mention of it.",
  "id": "5b06f63ad96cfd743eba7ffe",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 20,
  "sent": "2018-05-24T17:28:26.978Z",
  "text": "Is there any way to cast an integer to a CPointer (for use in numba.carray) inside nopython mode? Been scouring the documentation but there doesn't seem to be any mention of it.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"heyer2\" class=\"mention\">@heyer2</span>, the expected usage with <code>carray</code> in with the <code>cfunc</code> and the pointer is comming from the function argument.  There is no exposed user API to cast int to CPointer within nopython.  Why do you need to cast int-&gt;ptr?",
  "id": "5b06fe713815f70bffd690d9",
  "issues": [],
  "mentions": [
   {
    "screenName": "heyer2",
    "userId": "577d9ce3c2f0db084a21cda9",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 20,
  "sent": "2018-05-24T18:03:29.366Z",
  "text": "@heyer2, the expected usage with `carray` in with the `cfunc` and the pointer is comming from the function argument.  There is no exposed user API to cast int to CPointer within nopython.  Why do you need to cast int->ptr?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-05-26T15:01:09.658Z",
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/jllanfranchi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6414943?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6414943?v=4&s=60",
   "displayName": "J. L. Lanfranchi",
   "gv": "4",
   "id": "5aa7320ed73408ce4f9115a7",
   "url": "/jllanfranchi",
   "username": "jllanfranchi",
   "v": 14
  },
  "html": "I want for a nopython function to be able dynamically call one of N other nopython functions. Is this or something similar possible? (I was thinking indexing into a tuple of callables, but that seems to fail. E.g., the code below.)<pre><code class=\"python\"><span class=\"decorator\">@njit</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f1</span><span class=\"params\">(x)</span>:</span>\n    <span class=\"keyword\">return</span> x + <span class=\"number\">1</span>\n\n<span class=\"decorator\">@njit</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f2</span><span class=\"params\">(x)</span>:</span>\n    <span class=\"keyword\">return</span> x + <span class=\"number\">2</span>\n\n<span class=\"decorator\">@njit</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">callit</span><span class=\"params\">(x, index, callables)</span>:</span>\n    <span class=\"keyword\">return</span> callables[index](x)\n\ncallit(x=<span class=\"number\">10</span>, index=<span class=\"number\">0</span>, callables=(f1, f2))</code></pre>",
  "id": "5b09767fba1a351a68c6fbb8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-05-26T15:00:15.835Z",
  "text": "I want for a nopython function to be able dynamically call one of N other nopython functions. Is this or something similar possible? (I was thinking indexing into a tuple of callables, but that seems to fail. E.g., the code below.)\n```python\n@njit\ndef f1(x):\n    return x + 1\n\n@njit\ndef f2(x):\n    return x + 2\n\n@njit\ndef callit(x, index, callables):\n    return callables[index](x)\n\ncallit(x=10, index=0, callables=(f1, f2))\n```",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Could do it with a closure I&#39;m pretty sure",
  "id": "5b09c3ec352b9e1a4b35da4d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-05-26T20:30:36.503Z",
  "text": "Could do it with a closure I'm pretty sure",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Something like:<pre><code class=\"python\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">callit</span><span class=\"params\">(x, index)</span>:</span></code></pre>",
  "id": "5b09c3fca45f930a65d965a8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-05-26T20:30:52.645Z",
  "text": "Something like:\n````python\ndef callit(x, index):\n````",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "shit",
  "id": "5b09c3ff361a950a661a0be2",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-05-26T20:30:55.293Z",
  "text": "shit",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "<pre><code class=\"python\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">callit</span><span class=\"params\">(x, index)</span>:</span>\n    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f1</span><span class=\"params\">(x)</span>:</span>\n        <span class=\"keyword\">return</span> x+<span class=\"number\">1</span>\n    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f2</span><span class=\"params\">(x)</span>:</span>\n        <span class=\"keyword\">return</span> x+<span class=\"number\">2</span>\n    f_list = [f1, f2]\n    <span class=\"keyword\">return</span> f_list[index](x)</code></pre>",
  "id": "5b09c43a016ae21a4ce7f67d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-05-26T20:31:54.086Z",
  "text": "````python\ndef callit(x, index):\n    def f1(x):\n        return x+1\n    def f2(x):\n        return x+2\n    f_list = [f1, f2]\n    return f_list[index](x)\n````",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "Ah no that doesn&#39;t work because of the list of functions.",
  "id": "5b09c72152e35117cde3e660",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-05-26T20:44:17.696Z",
  "text": "Ah no that doesn't work because of the list of functions.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Rik-de-Kort",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32839123?v=4&s=60",
   "displayName": "Rik-de-Kort",
   "gv": "4",
   "id": "5a0ea31cd73408ce4f7f000d",
   "url": "/Rik-de-Kort",
   "username": "Rik-de-Kort",
   "v": 4
  },
  "html": "In terms of performance I don&#39;t think there&#39;ll be much overhead if you just jit al the individual functions and then leave the callit function as-is",
  "id": "5b09c74a93dc78791c8a4239",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-05-26T20:44:58.638Z",
  "text": "In terms of performance I don't think there'll be much overhead if you just jit al the individual functions and then leave the callit function as-is",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/richardotis",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/6405510?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/6405510?v=4&s=60",
   "displayName": "Richard Otis",
   "gv": "4",
   "id": "55a137c15e0d51bd787b0b26",
   "url": "/richardotis",
   "username": "richardotis",
   "v": 13
  },
  "html": "You can do this in Cython with function pointers. Not sure how to pull it off with Numba.",
  "id": "5b09d8d9352b9e1a4b360e2e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-05-26T21:59:53.713Z",
  "text": "You can do this in Cython with function pointers. Not sure how to pull it off with Numba.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-05-26T23:55:06.393Z",
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/jllanfranchi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6414943?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6414943?v=4&s=60",
   "displayName": "J. L. Lanfranchi",
   "gv": "4",
   "id": "5aa7320ed73408ce4f9115a7",
   "url": "/jllanfranchi",
   "username": "jllanfranchi",
   "v": 14
  },
  "html": "<p>Thanks <span data-link-type=\"mention\" data-screen-name=\"Rik-de-Kort\" class=\"mention\">@Rik-de-Kort</span>  and <span data-link-type=\"mention\" data-screen-name=\"richardotis\" class=\"mention\">@richardotis</span> for the help/info. I know numba just got callables as function arguments, maybe tuples of callables will be along soon (?). I think for now I can get around this by pre-defining everything (this makes the code less clean &amp; maintainable, but should work for now). Then just use if statements to choose which function to call. E.g.:</p><pre><code class=\"python\"><span class=\"comment\"># -- In module file defining worker functions -- #</span>\n<span class=\"decorator\">@njit </span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f1</span><span class=\"params\">(x)</span>:</span>\n    <span class=\"keyword\">return</span> x + <span class=\"number\">1</span>\n\n<span class=\"decorator\">@njit </span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f2</span><span class=\"params\">(x)</span>:</span>\n    <span class=\"keyword\">return</span> x + <span class=\"number\">2</span>\n\n<span class=\"comment\"># -- In \"main\" module -- #</span>\nFUNC1_ID = <span class=\"number\">0</span>\nFUNC2_ID = <span class=\"number\">1</span>\n\n<span class=\"decorator\">@njit</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">callit</span><span class=\"params\">(x, func_id)</span>:</span>\n    <span class=\"keyword\">if</span> func_id == FUNC1_ID:\n        <span class=\"keyword\">return</span> f1(x)\n    <span class=\"keyword\">if</span> func_id == FUNC2_ID:\n        <span class=\"keyword\">return</span> f2(x)\n    <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">'Unrecognized function ID'</span>)</code></pre><p>Functions could be defined within <code>callit</code> but it brings me a miniscule step closer to more maintainable code if I can define them outside (maybe). But if performance were better as closures, then I&#39;d choose that...</p>",
  "id": "5b09f36e54ce2313615961f2",
  "issues": [],
  "mentions": [
   {
    "screenName": "Rik-de-Kort",
    "userId": "5a0ea31cd73408ce4f7f000d",
    "userIds": []
   },
   {
    "screenName": "richardotis",
    "userId": "55a137c15e0d51bd787b0b26",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 17,
  "sent": "2018-05-26T23:53:18.374Z",
  "text": "Thanks @Rik-de-Kort  and @richardotis for the help/info. I know numba just got callables as function arguments, maybe tuples of callables will be along soon (?). I think for now I can get around this by pre-defining everything (this makes the code less clean & maintainable, but should work for now). Then just use if statements to choose which function to call. E.g.:\n```python\n# -- In module file defining worker functions -- #\n@njit \ndef f1(x):\n    return x + 1\n\n@njit \ndef f2(x):\n    return x + 2\n\n# -- In \"main\" module -- #\nFUNC1_ID = 0\nFUNC2_ID = 1\n\n@njit\ndef callit(x, func_id):\n    if func_id == FUNC1_ID:\n        return f1(x)\n    if func_id == FUNC2_ID:\n        return f2(x)\n    raise ValueError('Unrecognized function ID')\n```\nFunctions could be defined within `callit` but it brings me a miniscule step closer to more maintainable code if I can define them outside (maybe). But if performance were better as closures, then I'd choose that...",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/scootty1",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=60",
   "displayName": "scootty1",
   "gv": "4",
   "id": "5af2b904d73408ce4f98a88d",
   "url": "/scootty1",
   "username": "scootty1"
  },
  "html": "Hi! I&#39;ve got the following code which unluckily turns out to be a bottleneck in my program:",
  "id": "5b0c28bf361a950a66207f8c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-05-28T16:05:19.857Z",
  "text": "Hi! I've got the following code which unluckily turns out to be a bottleneck in my program:",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-05-28T16:10:21.174Z",
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/scootty1",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=60",
   "displayName": "scootty1",
   "gv": "4",
   "id": "5af2b904d73408ce4f98a88d",
   "url": "/scootty1",
   "username": "scootty1"
  },
  "html": "<pre><code>@nb.jit(nopython=True, nogil=True, cache=True)\n<span class=\"function\">def <span class=\"title\">pipe_alpha_i</span><span class=\"params\">(dm, T, rho, ny, lam_fld, A, d_i, x, alpha)</span>:\n    Parameters:\n    -----------\n    dm : np.ndarray\n    T : np.ndarray\n    rho : np.ndarray\n    ny : np.ndarray\n    lam_fld : np.ndarray\n    A : <span class=\"keyword\">float</span>, integer\n    d_i : <span class=\"keyword\">float</span>, integer\n    x : np.ndarray\n    alpha : np.ndarray\n    \"\"\"\n\n    shape </span>= rho.shape  <span class=\"preprocessor\"># save shape:</span>\n    Re = np.zeros(shape)  <span class=\"preprocessor\"># preallocate arrays:</span>\n    Pr_f = np.zeros(T.shape)\n    Nu = np.zeros(shape)\n    <span class=\"preprocessor\"># get Reynolds and Prandtl number:</span>\n    get_Re_water(dm / (rho * A), d_i, ny, Re)\n    get_Pr_water(T, Pr_f)\n    Pe = Re * Pr_f  <span class=\"preprocessor\"># get Peclet number to replace calculations of Re*Pr</span>\n\n    <span class=\"keyword\">if</span> dm[<span class=\"number\">0</span>] &lt; <span class=\"number\">0</span>:\n        x = x[::-<span class=\"number\">1</span>]\n\n    turb = Re &gt; <span class=\"number\">2300</span>  <span class=\"preprocessor\"># get a mask for the turbulent flows:</span>\n    Nu[~turb] = (  <span class=\"preprocessor\"># equations for laminar Nusselt number</span>\n            <span class=\"number\">49.371</span>  <span class=\"preprocessor\"># 49.371 is 3.66**3 of eq (1) + 0.7**3 of eq (3)</span>\n            + (<span class=\"number\">1.077</span> * (Pe[~turb] * d_i / x[~turb])**(<span class=\"number\">1</span>/<span class=\"number\">3</span>) - <span class=\"number\">0.7</span>)**<span class=\"number\">3</span>  <span class=\"preprocessor\"># eq (2)</span>\n                 )**(<span class=\"number\">1</span>/<span class=\"number\">3</span>)\n\n    f = (<span class=\"number\">1.8</span> * np.<span class=\"built_in\">log10</span>(Re[turb]) - <span class=\"number\">1.5</span>)**(-<span class=\"number\">2</span>)  <span class=\"preprocessor\"># Reynolds correction factor for turb. flow</span>\n    Nu[turb] = (  <span class=\"preprocessor\"># equations for turbulent Nusselt number</span>\n            (f / <span class=\"number\">8</span> * Pe[turb])\n            / (<span class=\"number\">1</span> + <span class=\"number\">12.7</span> * (Pr_f[turb]**(<span class=\"number\">2</span>/<span class=\"number\">3</span>) - <span class=\"number\">1</span>) * (f / <span class=\"number\">8</span>)**(<span class=\"number\">0.5</span>))\n            * (<span class=\"number\">1</span> + (d_i / x[turb])**(<span class=\"number\">2</span>/<span class=\"number\">3</span>) / <span class=\"number\">3</span>)\n                )\n\n    alpha[:] = Nu * lam_fld / d_i  <span class=\"preprocessor\"># get alpha value</span></code></pre>",
  "id": "5b0c28f3a45f930a65dfdbe3",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-05-28T16:06:11.784Z",
  "text": "```\n@nb.jit(nopython=True, nogil=True, cache=True)\ndef pipe_alpha_i(dm, T, rho, ny, lam_fld, A, d_i, x, alpha):\n    Parameters:\n    -----------\n    dm : np.ndarray\n    T : np.ndarray\n    rho : np.ndarray\n    ny : np.ndarray\n    lam_fld : np.ndarray\n    A : float, integer\n    d_i : float, integer\n    x : np.ndarray\n    alpha : np.ndarray\n    \"\"\"\n\n    shape = rho.shape  # save shape:\n    Re = np.zeros(shape)  # preallocate arrays:\n    Pr_f = np.zeros(T.shape)\n    Nu = np.zeros(shape)\n    # get Reynolds and Prandtl number:\n    get_Re_water(dm / (rho * A), d_i, ny, Re)\n    get_Pr_water(T, Pr_f)\n    Pe = Re * Pr_f  # get Peclet number to replace calculations of Re*Pr\n\n    if dm[0] < 0:\n        x = x[::-1]\n\n    turb = Re > 2300  # get a mask for the turbulent flows:\n    Nu[~turb] = (  # equations for laminar Nusselt number\n            49.371  # 49.371 is 3.66**3 of eq (1) + 0.7**3 of eq (3)\n            + (1.077 * (Pe[~turb] * d_i / x[~turb])**(1/3) - 0.7)**3  # eq (2)\n                 )**(1/3)\n\n    f = (1.8 * np.log10(Re[turb]) - 1.5)**(-2)  # Reynolds correction factor for turb. flow\n    Nu[turb] = (  # equations for turbulent Nusselt number\n            (f / 8 * Pe[turb])\n            / (1 + 12.7 * (Pr_f[turb]**(2/3) - 1) * (f / 8)**(0.5))\n            * (1 + (d_i / x[turb])**(2/3) / 3)\n                )\n\n    alpha[:] = Nu * lam_fld / d_i  # get alpha value\n```",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/scootty1",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=60",
   "displayName": "scootty1",
   "gv": "4",
   "id": "5af2b904d73408ce4f98a88d",
   "url": "/scootty1",
   "username": "scootty1"
  },
  "html": "with:<pre><code><span class=\"decorator\">@nb.jit(nopython=True, nogil=True, cache=True)</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_Re_water</span><span class=\"params\">(v, L, ny, Re)</span>:</span>\n    Re[:] = np.abs(v) * L / ny\n\n<span class=\"decorator\">@nb.jit(nopython=True, nogil=True, cache=True)</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_Pr_water</span><span class=\"params\">(T, Pr)</span>:</span>  <span class=\"comment\"># 3rd degree polynome</span>\n    Pr[:] = (<span class=\"number\">12.5780108199379058</span> - <span class=\"number\">0.35124680571767508</span>*T\n             + <span class=\"number\">4.3225480444706085e-03</span>*T**<span class=\"number\">2</span> - <span class=\"number\">1.9174193923188898e-05</span>*T**<span class=\"number\">3</span>)</code></pre>",
  "id": "5b0c2a4fba1a351a68ce58d8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 21,
  "sent": "2018-05-28T16:11:59.865Z",
  "text": "with:\n```\n@nb.jit(nopython=True, nogil=True, cache=True)\ndef get_Re_water(v, L, ny, Re):\n    Re[:] = np.abs(v) * L / ny\n\n@nb.jit(nopython=True, nogil=True, cache=True)\ndef get_Pr_water(T, Pr):  # 3rd degree polynome\n    Pr[:] = (12.5780108199379058 - 0.35124680571767508*T\n             + 4.3225480444706085e-03*T**2 - 1.9174193923188898e-05*T**3)\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/scootty1",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=60",
   "displayName": "scootty1",
   "gv": "4",
   "id": "5af2b904d73408ce4f98a88d",
   "url": "/scootty1",
   "username": "scootty1"
  },
  "html": "<code>rho</code>, <code>ny</code> and <code>lam_fld</code> are already used in code outside of <code>pipe_alpha_i</code> and thus passed as arguments.<br><code>pipe_alpha_i</code> is called several thousand times. Depending on the calculation timeframe up to a few million times. Compared with other, more complicated, operations it is taking a big part of the total execution time.<br>Any advice on how to speed up this function? Would guvectorize help? <code>np.zeros</code> is taking alot of time. Would it be better to pass preallocated arrays into the function instead of using <code>np.zeros</code>each time? Since I am masking alot in this code: Is there a faster way to do <code>[turb]</code> or <code>[~turb]</code>?<br>Thanks in advance!",
  "id": "5b0c2c52361a950a66208c03",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 21,
  "sent": "2018-05-28T16:20:34.183Z",
  "text": "`rho`, `ny` and `lam_fld` are already used in code outside of `pipe_alpha_i` and thus passed as arguments.\n`pipe_alpha_i` is called several thousand times. Depending on the calculation timeframe up to a few million times. Compared with other, more complicated, operations it is taking a big part of the total execution time.\nAny advice on how to speed up this function? Would guvectorize help? `np.zeros` is taking alot of time. Would it be better to pass preallocated arrays into the function instead of using `np.zeros`each time? Since I am masking alot in this code: Is there a faster way to do `[turb]` or `[~turb]`?\nThanks in advance!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/jllanfranchi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6414943?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6414943?v=4&s=60",
   "displayName": "J. L. Lanfranchi",
   "gv": "4",
   "id": "5aa7320ed73408ce4f9115a7",
   "url": "/jllanfranchi",
   "username": "jllanfranchi",
   "v": 14
  },
  "html": "Numba at times runs faster if you do the looping explicitly. In this case, creating and using the mask <em>might</em> be slowing you down. So try just looping over indices and check if <code>Re</code> at that idx is &gt; 2300, if so do one op to the corresponding element of <code>Nu</code> and if not do the other op to the element of <code>Nu</code>. This is one thing to try. Another thing I&#39;ve found is that calling Numba functions can be a bottleneck (dispatching and whatnot can really drag your code down). So making the call to the numba function within other numba function could help make your overall program faster even without optimizing your function here. (And it seems in my code even calling numba functions from other numba functions <em>might</em> be slower than I&#39;d like, though I don&#39;t have <em>really</em> strong evidence of that and other experts said that <em>shouldn&#39;t</em> be the case...).",
  "id": "5b0c4eb4b6eece791dbd663c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 22,
  "sent": "2018-05-28T18:47:16.007Z",
  "text": "Numba at times runs faster if you do the looping explicitly. In this case, creating and using the mask _might_ be slowing you down. So try just looping over indices and check if `Re` at that idx is > 2300, if so do one op to the corresponding element of `Nu` and if not do the other op to the element of `Nu`. This is one thing to try. Another thing I've found is that calling Numba functions can be a bottleneck (dispatching and whatnot can really drag your code down). So making the call to the numba function within other numba function could help make your overall program faster even without optimizing your function here. (And it seems in my code even calling numba functions from other numba functions _might_ be slower than I'd like, though I don't have _really_ strong evidence of that and other experts said that _shouldn't_ be the case...).",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-05-28T18:51:53.966Z",
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/jllanfranchi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6414943?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6414943?v=4&s=60",
   "displayName": "J. L. Lanfranchi",
   "gv": "4",
   "id": "5aa7320ed73408ce4f9115a7",
   "url": "/jllanfranchi",
   "username": "jllanfranchi",
   "v": 14
  },
  "html": "(You&#39;ll also have to index into all the other variables for which you&#39;re using the <code>turb</code> mask now, too. And assign to <code>alpha</code> inside your loop, too. And also note that even without the use of a mask at all, it could be faster to do the looping explicitly in numba.)",
  "id": "5b0c4f1c93dc78791c911c5e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 22,
  "sent": "2018-05-28T18:49:00.282Z",
  "text": "(You'll also have to index into all the other variables for which you're using the `turb` mask now, too. And assign to `alpha` inside your loop, too. And also note that even without the use of a mask at all, it could be faster to do the looping explicitly in numba.)",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "editedAt": "2018-05-28T18:58:35.777Z",
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/jllanfranchi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6414943?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6414943?v=4&s=60",
   "displayName": "J. L. Lanfranchi",
   "gv": "4",
   "id": "5aa7320ed73408ce4f9115a7",
   "url": "/jllanfranchi",
   "username": "jllanfranchi",
   "v": 14
  },
  "html": "And yes, use <code>np.empty</code> instead of <code>np.zeros</code> assuming you will assign to each element of <code>Nu</code> (this is an optimization you can use regardless of whether you loop explicitly as I advise above or you keep the numpy style vector-operation syntax). Others will have to advise you on whether <code>guvectorize</code> would automatically speed up this style of code without converting to explicit looping.",
  "id": "5b0c50ee52e35117cdeacea7",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 22,
  "sent": "2018-05-28T18:56:46.837Z",
  "text": "And yes, use `np.empty` instead of `np.zeros` assuming you will assign to each element of `Nu` (this is an optimization you can use regardless of whether you loop explicitly as I advise above or you keep the numpy style vector-operation syntax). Others will have to advise you on whether `guvectorize` would automatically speed up this style of code without converting to explicit looping.",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "editedAt": "2018-05-28T21:11:24.437Z",
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/lala168",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/38100009?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/38100009?v=4&s=60",
   "displayName": "lala168",
   "gv": "4",
   "id": "5ac5f004d73408ce4f947890",
   "url": "/lala168",
   "username": "lala168",
   "v": 5
  },
  "html": "<p>Hi all, I tried a recursion on GPU but it didn&#39;t work. Is it supported?</p><pre><code>@numba.jit\ndef recur(<span class=\"comment\">rem):</span>\n    <span class=\"flow\">if</span> <span class=\"comment\">rem &lt; 0:</span>\n        return\n    recur(<span class=\"comment\">rem - 1)</span>\n\n@numba.cuda.jit\ndef test():\n    recur(<span class=\"number\">8</span>)\n\ntest[<span class=\"number\">1</span>,<span class=\"number\">1</span>]()</code></pre><p>error:<br>In definition 0:<br>RuntimeError: Failed at nopython (nopython frontend)<br>compiler re-entrant to the same function signature</p>",
  "id": "5b0c7029016ae21a4cef41ea",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 22,
  "sent": "2018-05-28T21:10:01.197Z",
  "text": "Hi all, I tried a recursion on GPU but it didn't work. Is it supported?\n```\n@numba.jit\ndef recur(rem):\n    if rem < 0:\n        return\n    recur(rem - 1)\n\n@numba.cuda.jit\ndef test():\n    recur(8)\n\ntest[1,1]()\n```\nerror:\nIn definition 0:\nRuntimeError: Failed at nopython (nopython frontend)\ncompiler re-entrant to the same function signature\n",
  "unread": false,
  "urls": [],
  "v": 4
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/scootty1",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=60",
   "displayName": "scootty1",
   "gv": "4",
   "id": "5af2b904d73408ce4f98a88d",
   "url": "/scootty1",
   "username": "scootty1"
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"jllanfranchi\" class=\"mention\">@jllanfranchi</span> Thanks! Replacing the masks with explicit loops sounds like a good idea. This should reduce the indexing work by about 50%. Currently I am rewriting my code so that all numba functions will be called from an enclosing numba function. And I&#39;m trying to keep all the numba functions as simple as possible to enable automatic inlining.",
  "id": "5b0d16ca361a950a66236414",
  "issues": [],
  "mentions": [
   {
    "screenName": "jllanfranchi",
    "userId": "5aa7320ed73408ce4f9115a7",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 24,
  "sent": "2018-05-29T09:00:58.618Z",
  "text": "@jllanfranchi Thanks! Replacing the masks with explicit loops sounds like a good idea. This should reduce the indexing work by about 50%. Currently I am rewriting my code so that all numba functions will be called from an enclosing numba function. And I'm trying to keep all the numba functions as simple as possible to enable automatic inlining.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/scootty1",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=60",
   "displayName": "scootty1",
   "gv": "4",
   "id": "5af2b904d73408ce4f98a88d",
   "url": "/scootty1",
   "username": "scootty1"
  },
  "html": "Also using <code>np.empty</code> is a good idea. Thanks! But would it be even better to allocate the arrays before starting my iterations and then pass them to <code>pipe_alpha_i</code> instead of calling <code>np.empty</code> inside <code>pipe_alpha_i</code> each time? Most of these arrays have sizes between 5 and 100 elements, so I am not sure if this is a good idea. Local variable access time seems to be so much faster than passing a small array to a function (and currently it is a class instance variable passed from a class method which is not jitted, thus I expect access times to be slower than creating an empty array).",
  "id": "5b0d185716f6496124eba954",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 24,
  "sent": "2018-05-29T09:07:35.764Z",
  "text": "Also using `np.empty` is a good idea. Thanks! But would it be even better to allocate the arrays before starting my iterations and then pass them to `pipe_alpha_i` instead of calling `np.empty` inside `pipe_alpha_i` each time? Most of these arrays have sizes between 5 and 100 elements, so I am not sure if this is a good idea. Local variable access time seems to be so much faster than passing a small array to a function (and currently it is a class instance variable passed from a class method which is not jitted, thus I expect access times to be slower than creating an empty array).",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/jllanfranchi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6414943?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6414943?v=4&s=60",
   "displayName": "J. L. Lanfranchi",
   "gv": "4",
   "id": "5aa7320ed73408ce4f9115a7",
   "url": "/jllanfranchi",
   "username": "jllanfranchi",
   "v": 14
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"scootty1\" class=\"mention\">@scootty1</span> you&#39;re welcome, hope the rewrite yields faster code for you! ... as for creating the empty arrays outside the function, if you can overwrite the array each time you call the function, I&#39;d say allocate the memory outside the function. <em><em>But</em></em> if you need new array(s) each time you call the function, it <em>probably</em> (keep in mind everything I say is speculative until you try it and time your code) will be just as good or better to call <code>np.empty</code> within <code>pipe_alpha_i</code>; and in this case, if timings are the same or similar, I&#39;d think creating the arrays within the function is much preferred so you save some ugly and onerous code whereby every time you call the function you have to create some number of arrays first and pass them in.",
  "id": "5b0d7283160c567d16e813a4",
  "issues": [],
  "mentions": [
   {
    "screenName": "scootty1",
    "userId": "5af2b904d73408ce4f98a88d",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 24,
  "sent": "2018-05-29T15:32:19.881Z",
  "text": "@scootty1 you're welcome, hope the rewrite yields faster code for you! ... as for creating the empty arrays outside the function, if you can overwrite the array each time you call the function, I'd say allocate the memory outside the function. *_But_* if you need new array(s) each time you call the function, it _probably_ (keep in mind everything I say is speculative until you try it and time your code) will be just as good or better to call `np.empty` within `pipe_alpha_i`; and in this case, if timings are the same or similar, I'd think creating the arrays within the function is much preferred so you save some ugly and onerous code whereby every time you call the function you have to create some number of arrays first and pass them in.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 10
  },
  "html": "Is there a way to &quot;freeze&quot; arguments into a Numba function without recompilation? I&#39;ve run into this where the thing I want to integrate with SciPy&#39;s ODE solvers are faster with a C callback... But they need arguments beyond the standard ones.",
  "id": "5b0e7120e26c847ac8a1b1ae",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 24,
  "sent": "2018-05-30T09:38:40.490Z",
  "text": "Is there a way to \"freeze\" arguments into a Numba function without recompilation? I've run into this where the thing I want to integrate with SciPy's ODE solvers are faster with a C callback... But they need arguments beyond the standard ones.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 10
  },
  "html": "Would closures with <code>cache=True</code> work?",
  "id": "5b0e71374eaffb692d68b177",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 24,
  "sent": "2018-05-30T09:39:03.481Z",
  "text": "Would closures with `cache=True` work?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-05-30T17:00:10.112Z",
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/scootty1",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=60",
   "displayName": "scootty1",
   "gv": "4",
   "id": "5af2b904d73408ce4f98a88d",
   "url": "/scootty1",
   "username": "scootty1"
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"jllanfranchi\" class=\"mention\">@jllanfranchi</span> Yep, it is faster. Having the possibility to have more arguments in nditer, especially <code>c_index</code> could make it even faster. At least I think so.<br>I don&#39;t need new arrays each time and it would not need too much effort to pass the arrays to the functions, so I guess I&#39;ll go with <code>np.empty</code> for now, but will test it with passing them later on. Thanks for your advice!",
  "id": "5b0ed81e352b9e1a4b45dcf7",
  "issues": [],
  "mentions": [
   {
    "screenName": "jllanfranchi",
    "userId": "5aa7320ed73408ce4f9115a7",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 25,
  "sent": "2018-05-30T16:58:06.942Z",
  "text": "@jllanfranchi Yep, it is faster. Having the possibility to have more arguments in nditer, especially `c_index` could make it even faster. At least I think so.\nI don't need new arrays each time and it would not need too much effort to pass the arrays to the functions, so I guess I'll go with `np.empty` for now, but will test it with passing them later on. Thanks for your advice!",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/jllanfranchi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6414943?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6414943?v=4&s=60",
   "displayName": "J. L. Lanfranchi",
   "gv": "4",
   "id": "5aa7320ed73408ce4f9115a7",
   "url": "/jllanfranchi",
   "username": "jllanfranchi",
   "v": 14
  },
  "html": "You&#39;re welcome, <span data-link-type=\"mention\" data-screen-name=\"scootty1\" class=\"mention\">@scootty1</span>, glad to help!",
  "id": "5b0ef61999fa7f4c06306509",
  "issues": [],
  "mentions": [
   {
    "screenName": "scootty1",
    "userId": "5af2b904d73408ce4f98a88d",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 28,
  "sent": "2018-05-30T19:06:01.855Z",
  "text": "You're welcome, @scootty1, glad to help!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 10
  },
  "html": "Hello, I see in the most recent minutes meeting: Reference-counted items (arrays lists) in lists",
  "id": "5b11a60f99fa7f4c0639b4be",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 26,
  "sent": "2018-06-01T20:01:19.831Z",
  "text": "Hello, I see in the most recent minutes meeting: Reference-counted items (arrays lists) in lists",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 10
  },
  "html": "Is it possible to support nested memory objects in general?",
  "id": "5b11a621e26c847ac8ad33a3",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 26,
  "sent": "2018-06-01T20:01:37.732Z",
  "text": "Is it possible to support nested memory objects in general?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 10
  },
  "html": "How much harder would this be?",
  "id": "5b11a62c99fa7f4c0639b4f4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 26,
  "sent": "2018-06-01T20:01:48.004Z",
  "text": "How much harder would this be?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/briantilley",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/3772260?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/3772260?v=4&s=60",
   "displayName": "briantilley",
   "gv": "4",
   "id": "5b13007ed73408ce4f9babf4",
   "url": "/briantilley",
   "username": "briantilley",
   "v": 1
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"lala168\" class=\"mention\">@lala168</span> You may want to try decorating recur() as a device function",
  "id": "5b130118f9f2e56cf236944b",
  "issues": [],
  "mentions": [
   {
    "screenName": "lala168",
    "userId": "5ac5f004d73408ce4f947890",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 27,
  "sent": "2018-06-02T20:42:00.624Z",
  "text": "@lala168 You may want to try decorating recur() as a device function",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/Melisius",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/11976167?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/11976167?v=4&s=60",
   "displayName": "Erik Kjellgren",
   "gv": "4",
   "id": "5af6f586d73408ce4f991248",
   "url": "/Melisius",
   "username": "Melisius",
   "v": 1
  },
  "html": "Is there a way to make look up tables in jitted functions?<br>As an example having a look up table for factorial2 instead of doing loop or recursion",
  "id": "5b13f1f6b6eece791dd6504c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 26,
  "sent": "2018-06-03T13:49:42.350Z",
  "text": "Is there a way to make look up tables in jitted functions?\nAs an example having a look up table for factorial2 instead of doing loop or recursion",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "<p><span data-link-type=\"mention\" data-screen-name=\"Melisius\" class=\"mention\">@Melisius</span> Could you just use a list and jump based on position?</p><pre><code><span class=\"keyword\">from</span> math <span class=\"keyword\">import</span> factorial <span class=\"keyword\">as</span> fac\n<span class=\"keyword\">from</span> numba <span class=\"keyword\">import</span> njit\n<span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np\n\n_jump_table = np.array([fac(x) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(<span class=\"number\">20</span>)], dtype=np.int64)\n\n<span class=\"decorator\">@njit</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">thing_with_lookup</span><span class=\"params\">(x, v)</span>:</span>\n    <span class=\"keyword\">return</span> x + _jump_table[v]\n\nprint(thing_with_lookup(np.arange(<span class=\"number\">20.</span>), <span class=\"number\">7</span>))</code></pre><p>In general, there&#39;s no <code>dict()</code> support  yet which is what you might have been thinking of ?</p>",
  "id": "5b154d0d352b9e1a4b59dd6b",
  "issues": [],
  "mentions": [
   {
    "screenName": "Melisius",
    "userId": "5af6f586d73408ce4f991248",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 21,
  "sent": "2018-06-04T14:30:37.795Z",
  "text": "@Melisius Could you just use a list and jump based on position?\n```\nfrom math import factorial as fac\nfrom numba import njit\nimport numpy as np\n\n_jump_table = np.array([fac(x) for x in range(20)], dtype=np.int64)\n\n@njit\ndef thing_with_lookup(x, v):\n    return x + _jump_table[v]\n\nprint(thing_with_lookup(np.arange(20.), 7))\n```\nIn general, there's no `dict()` support  yet which is what you might have been thinking of ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Lomelgande",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/8880982?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/8880982?v=4&s=60",
   "displayName": "Lomelgande",
   "gv": "4",
   "id": "5ab3f0f2d73408ce4f92b317",
   "url": "/Lomelgande",
   "username": "Lomelgande",
   "v": 2
  },
  "html": "I am working on some rendering functions and the way I am structuring stuff currently is very sloppy (given I cannot pass objects to CUDA kernels). I am trying to refactor my code to better organize it. I am wondering if the following code, or something similar, is possible. I want to create a device/host intersect function that is called with a single ray and a render function that generates a ray within each thread to call the _intersect function on . I want the _intersect function to be apart of the Torus class and not have it defined globally. Is there a way to call _intersect inside _render?<pre><code>class <span class=\"constant\">Torus(BaseObject)</span><span class=\"symbol\">:</span>\n    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span></span>(<span class=\"keyword\">self</span>, major, minor, **kwargs)<span class=\"symbol\">:</span>\n        <span class=\"keyword\">self</span>.major = major\n        <span class=\"keyword\">self</span>.minor = minor\n\n    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">intersect</span></span>(<span class=\"keyword\">self</span>, ray)<span class=\"symbol\">:</span>\n        hit, t = <span class=\"constant\">Torus._intersect(</span>ray, <span class=\"keyword\">self</span>.major, <span class=\"keyword\">self</span>.minor)\n\n    <span class=\"variable\">@jit</span>\n    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_intersect</span></span>(ray, major, minor)<span class=\"symbol\">:</span>\n        <span class=\"comment\">#test intersection</span>\n\n    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">render</span></span>(<span class=\"keyword\">self</span>, major, minor, more_args)<span class=\"symbol\">:</span>\n        <span class=\"constant\">Torus._render[</span>gridDim,blockDim](major, minor, more_args)\n\n    <span class=\"variable\">@cuda</span>.jit()\n    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_render</span></span>(major, minor, more_args)\n        <span class=\"comment\">#generate ray</span>\n        call <span class=\"constant\">Torus._intersect(</span>ray, major, minor) ??</code></pre>",
  "id": "5b170cbd016ae21a4c124628",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 22,
  "sent": "2018-06-05T22:20:45.168Z",
  "text": "I am working on some rendering functions and the way I am structuring stuff currently is very sloppy (given I cannot pass objects to CUDA kernels). I am trying to refactor my code to better organize it. I am wondering if the following code, or something similar, is possible. I want to create a device/host intersect function that is called with a single ray and a render function that generates a ray within each thread to call the _intersect function on . I want the _intersect function to be apart of the Torus class and not have it defined globally. Is there a way to call _intersect inside _render?\n\n\tclass Torus(BaseObject):\n\t\tdef __init__(self, major, minor, **kwargs):\n\t\t\tself.major = major\n\t\t\tself.minor = minor\n\n\t\tdef intersect(self, ray):\n\t\t\thit, t = Torus._intersect(ray, self.major, self.minor)\n\n\t\t@jit\n\t\tdef _intersect(ray, major, minor):\n\t\t\t#test intersection\n\n\t\tdef render(self, major, minor, more_args):\n\t\t\tTorus._render[gridDim,blockDim](major, minor, more_args)\n\n\t\t@cuda.jit()\n\t\tdef _render(major, minor, more_args)\n\t\t\t#generate ray\n\t\t\tcall Torus._intersect(ray, major, minor) ??\n\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/renansalesbarros",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/4539168?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/4539168?v=4&s=60",
   "displayName": "Renan",
   "gv": "4",
   "id": "5b1b9c76d73408ce4f9cb5a6",
   "url": "/renansalesbarros",
   "username": "renansalesbarros"
  },
  "html": "Hi guys, Im trying to recompile a cuda function so I can update some global variables. I searched a lot online but I cannot find how to do that. Does anyone knows?",
  "id": "5b1b9ccf659aad4a3261c923",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 23,
  "sent": "2018-06-09T09:24:31.417Z",
  "text": "Hi guys, Im trying to recompile a cuda function so I can update some global variables. I searched a lot online but I cannot find how to do that. Does anyone knows?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/jllanfranchi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6414943?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6414943?v=4&s=60",
   "displayName": "J. L. Lanfranchi",
   "gv": "4",
   "id": "5aa7320ed73408ce4f9115a7",
   "url": "/jllanfranchi",
   "username": "jllanfranchi",
   "v": 14
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"renansalesbarros\" class=\"mention\">@renansalesbarros</span> Found this in the docs: <a href=\"http://numba.pydata.org/numba-doc/latest/reference/jit-compilation.html#Dispatcher.recompile\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://numba.pydata.org/numba-doc/latest/reference/jit-compilation.html#Dispatcher.recompile</a> but maybe you did, too... if so, does <code>recompile</code> not work for cuda functions?",
  "id": "5b1be055144c8c6fea82c0d3",
  "issues": [],
  "mentions": [
   {
    "screenName": "renansalesbarros",
    "userId": "5b1b9c76d73408ce4f9cb5a6",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 20,
  "sent": "2018-06-09T14:12:37.856Z",
  "text": "@renansalesbarros Found this in the docs: http://numba.pydata.org/numba-doc/latest/reference/jit-compilation.html#Dispatcher.recompile but maybe you did, too... if so, does `recompile` not work for cuda functions?",
  "unread": false,
  "urls": [
   {
    "url": "http://numba.pydata.org/numba-doc/latest/reference/jit-compilation.html#Dispatcher.recompile"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"renansalesbarros\" class=\"mention\">@renansalesbarros</span>, <span data-link-type=\"mention\" data-screen-name=\"jllanfranchi\" class=\"mention\">@jllanfranchi</span>: We might be missing the recompile method for CUDA functions, but the other approach is to use a factory function.  Write a function that contains the CUDA kernel as an inner function, triggers compilation of it (which will capture the globals) and then returns it.",
  "id": "5b1d9f74659aad4a3266d0b7",
  "issues": [],
  "mentions": [
   {
    "screenName": "renansalesbarros",
    "userId": "5b1b9c76d73408ce4f9cb5a6",
    "userIds": []
   },
   {
    "screenName": "jllanfranchi",
    "userId": "5aa7320ed73408ce4f9115a7",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 21,
  "sent": "2018-06-10T22:00:20.974Z",
  "text": "@renansalesbarros, @jllanfranchi: We might be missing the recompile method for CUDA functions, but the other approach is to use a factory function.  Write a function that contains the CUDA kernel as an inner function, triggers compilation of it (which will capture the globals) and then returns it.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/ataoer",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/25292690?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/25292690?v=4&s=60",
   "displayName": "taotaotao",
   "gv": "4",
   "id": "58da8d31d73408ce4f5456f9",
   "url": "/ataoer",
   "username": "ataoer",
   "v": 4
  },
  "html": "Hey guys, I got some trouble with cuda.",
  "id": "5b226a91d128fa71f669423c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-06-14T13:16:01.878Z",
  "text": "Hey guys, I got some trouble with cuda.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/ataoer",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/25292690?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/25292690?v=4&s=60",
   "displayName": "taotaotao",
   "gv": "4",
   "id": "58da8d31d73408ce4f5456f9",
   "url": "/ataoer",
   "username": "ataoer",
   "v": 4
  },
  "html": "Here is the part of my code",
  "id": "5b226a9c32618e705eba25b1",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-06-14T13:16:12.586Z",
  "text": "Here is the part of my code",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/ataoer",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/25292690?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/25292690?v=4&s=60",
   "displayName": "taotaotao",
   "gv": "4",
   "id": "58da8d31d73408ce4f5456f9",
   "url": "/ataoer",
   "username": "ataoer",
   "v": 4
  },
  "html": "<pre><code><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">vectorized_result</span><span class=\"params\">(val)</span>:</span>\n    vector = np.zeros((<span class=\"number\">10</span>, <span class=\"number\">1</span>), dtype=float)\n    vector[int(val)] = [<span class=\"number\">1.0</span>]\n    <span class=\"keyword\">return</span> vector\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">load_data</span><span class=\"params\">(path)</span>:</span>\n    <span class=\"string\">\"\"\" \u52a0\u8f7d\u6570\u636e \"\"\"</span>\n    <span class=\"keyword\">with</span> open(path) <span class=\"keyword\">as</span> csv_file:\n        csv_reader = csv.reader(csv_file)\n        next(csv_reader) <span class=\"comment\"># \u8df3\u8fc7\u5934\u90e8</span>\n        <span class=\"comment\"># return np.array([ np.array([np.reshape(np.array(row[1:], dtype=float), (784, 1)), vectorized_result(row[0])]) for row in csv_reader])</span>\n        <span class=\"keyword\">return</span> np.array([ vectorized_result(row[<span class=\"number\">0</span>]) <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> csv_reader])\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">shuffle</span><span class=\"params\">(T)</span>:</span>\n    <span class=\"string\">\"\"\"\n        TPB = (32, 32)\n        (32 * 32) * 39 = 39936\n    \"\"\"</span>\n    c = <span class=\"number\">10</span>\n    n = len(T)\n    print(n)\n    <span class=\"comment\"># \u5728gpu\u4e2dshuffle\u6bcf\u4e2a\u5c0f\u6bb5</span>\n    <span class=\"comment\"># print(T[0], T[100], T[1000])</span>\n    T = cuda.to_device(T)\n    rng_states = create_xoroshiro128p_states(<span class=\"number\">32</span> * <span class=\"number\">32</span>, seed = <span class=\"number\">2</span>)\n    chunk_shuffle[<span class=\"number\">32</span>, <span class=\"number\">32</span>](T, rng_states)\n\ndata = load_data(<span class=\"string\">'./data/train.csv'</span>)\nshuffle(data[:<span class=\"number\">39936</span>]</code></pre>",
  "id": "5b226ac88864a936cc87c7bd",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-06-14T13:16:56.657Z",
  "text": "```\ndef vectorized_result(val):\n    vector = np.zeros((10, 1), dtype=float)\n    vector[int(val)] = [1.0]\n    return vector\ndef load_data(path):\n    \"\"\" \u52a0\u8f7d\u6570\u636e \"\"\"\n    with open(path) as csv_file:\n        csv_reader = csv.reader(csv_file)\n        next(csv_reader) # \u8df3\u8fc7\u5934\u90e8\n        # return np.array([ np.array([np.reshape(np.array(row[1:], dtype=float), (784, 1)), vectorized_result(row[0])]) for row in csv_reader])\n        return np.array([ vectorized_result(row[0]) for row in csv_reader])\ndef shuffle(T):\n    \"\"\"\n        TPB = (32, 32)\n        (32 * 32) * 39 = 39936\n    \"\"\"\n    c = 10\n    n = len(T)\n    print(n)\n    # \u5728gpu\u4e2dshuffle\u6bcf\u4e2a\u5c0f\u6bb5\n    # print(T[0], T[100], T[1000])\n    T = cuda.to_device(T)\n    rng_states = create_xoroshiro128p_states(32 * 32, seed = 2)\n    chunk_shuffle[32, 32](T, rng_states)\n\ndata = load_data('./data/train.csv')\nshuffle(data[:39936]\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/ataoer",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/25292690?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/25292690?v=4&s=60",
   "displayName": "taotaotao",
   "gv": "4",
   "id": "58da8d31d73408ce4f5456f9",
   "url": "/ataoer",
   "username": "ataoer",
   "v": 4
  },
  "html": "I got this error",
  "id": "5b226ad6d128fa71f6694287",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-06-14T13:17:10.770Z",
  "text": "I got this error",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/ataoer",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/25292690?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/25292690?v=4&s=60",
   "displayName": "taotaotao",
   "gv": "4",
   "id": "58da8d31d73408ce4f5456f9",
   "url": "/ataoer",
   "username": "ataoer",
   "v": 4
  },
  "html": "<pre><code>  File <span class=\"string\">\"/home/wangtao/.conda/envs/ml/lib/python3.6/site-packages/numba/targets/base.py\"</span>, line <span class=\"number\">1043</span>, <span class=\"keyword\">in</span> __call__\n    <span class=\"built_in\">return</span> self._imp(self._context, builder, self._sig, args)\n  File <span class=\"string\">\"/home/wangtao/.conda/envs/ml/lib/python3.6/site-packages/numba/cuda/printimpl.py\"</span>, line <span class=\"number\">66</span>, <span class=\"keyword\">in</span> <span class=\"built_in\">print</span>_varargs\n    argfmt, argvals = <span class=\"built_in\">print</span>_item(argtype, context, builder, argval)\n  File <span class=\"string\">\"/home/wangtao/.conda/envs/ml/lib/python3.6/functools.py\"</span>, line <span class=\"number\">803</span>, <span class=\"keyword\">in</span> wrapper\n    <span class=\"built_in\">return</span> dispatch(args[<span class=\"number\">0</span>].__class__)(*args, **kw)\n  File <span class=\"string\">\"/home/wangtao/.conda/envs/ml/lib/python3.6/site-packages/numba/cuda/printimpl.py\"</span>, line <span class=\"number\">25</span>, <span class=\"keyword\">in</span> <span class=\"built_in\">print</span>_item\n    % (ty,))\nnumba.errors.LoweringError: Failed at nopython (nopython mode backend)\nprinting unimplemented <span class=\"keyword\">for</span> values of <span class=\"built_in\">type</span> array(int64, <span class=\"number\">2</span>d, A)</code></pre>",
  "id": "5b226ae8ebf21755ca3153bf",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-06-14T13:17:28.051Z",
  "text": "```\n  File \"/home/wangtao/.conda/envs/ml/lib/python3.6/site-packages/numba/targets/base.py\", line 1043, in __call__\n    return self._imp(self._context, builder, self._sig, args)\n  File \"/home/wangtao/.conda/envs/ml/lib/python3.6/site-packages/numba/cuda/printimpl.py\", line 66, in print_varargs\n    argfmt, argvals = print_item(argtype, context, builder, argval)\n  File \"/home/wangtao/.conda/envs/ml/lib/python3.6/functools.py\", line 803, in wrapper\n    return dispatch(args[0].__class__)(*args, **kw)\n  File \"/home/wangtao/.conda/envs/ml/lib/python3.6/site-packages/numba/cuda/printimpl.py\", line 25, in print_item\n    % (ty,))\nnumba.errors.LoweringError: Failed at nopython (nopython mode backend)\nprinting unimplemented for values of type array(int64, 2d, A)\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/ataoer",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/25292690?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/25292690?v=4&s=60",
   "displayName": "taotaotao",
   "gv": "4",
   "id": "58da8d31d73408ce4f5456f9",
   "url": "/ataoer",
   "username": "ataoer",
   "v": 4
  },
  "html": "It\u2019s seem like type error",
  "id": "5b226af4e87f0c7bee8b0d36",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-06-14T13:17:40.366Z",
  "text": "It\u2019s seem like type error",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/ataoer",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/25292690?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/25292690?v=4&s=60",
   "displayName": "taotaotao",
   "gv": "4",
   "id": "58da8d31d73408ce4f5456f9",
   "url": "/ataoer",
   "username": "ataoer",
   "v": 4
  },
  "html": "Then I make another code to fix this error",
  "id": "5b226b1d37a2df7bed3c4665",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-06-14T13:18:21.387Z",
  "text": "Then I make another code to fix this error",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/ataoer",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/25292690?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/25292690?v=4&s=60",
   "displayName": "taotaotao",
   "gv": "4",
   "id": "58da8d31d73408ce4f5456f9",
   "url": "/ataoer",
   "username": "ataoer",
   "v": 4
  },
  "html": "<pre><code>```\n<span class=\"decorator\">@cuda.jit</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span><span class=\"params\">(T)</span>:</span>\n    print(cuda.grid(<span class=\"number\">1</span>),\nT = cuda.to_device(np.zeros((<span class=\"number\">10</span>, <span class=\"number\">1</span>), dtype=int))\ntest[<span class=\"number\">1</span>,<span class=\"number\">1</span>](T)</code></pre>```",
  "id": "5b226b31a0161836cb1ad64c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-06-14T13:18:41.955Z",
  "text": "```\n```\n@cuda.jit\ndef test(T):\n    print(cuda.grid(1),\nT = cuda.to_device(np.zeros((10, 1), dtype=int))\ntest[1,1](T)\n```\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/ataoer",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/25292690?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/25292690?v=4&s=60",
   "displayName": "taotaotao",
   "gv": "4",
   "id": "58da8d31d73408ce4f5456f9",
   "url": "/ataoer",
   "username": "ataoer",
   "v": 4
  },
  "html": "I got this error too ",
  "id": "5b226b4eebf21755ca315571",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-06-14T13:19:10.868Z",
  "text": "I got this error too ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/ataoer",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/25292690?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/25292690?v=4&s=60",
   "displayName": "taotaotao",
   "gv": "4",
   "id": "58da8d31d73408ce4f5456f9",
   "url": "/ataoer",
   "username": "ataoer",
   "v": 4
  },
  "html": "sorry for my bad English XD,but  I really want to know what is going on ",
  "id": "5b226b7ee87f0c7bee8b1013",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-06-14T13:19:58.399Z",
  "text": "sorry for my bad English XD,but  I really want to know what is going on ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/ataoer",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/25292690?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/25292690?v=4&s=60",
   "displayName": "taotaotao",
   "gv": "4",
   "id": "58da8d31d73408ce4f5456f9",
   "url": "/ataoer",
   "username": "ataoer",
   "v": 4
  },
  "html": "can anybody help my out?",
  "id": "5b226b89fd5b835b2d5b4389",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-06-14T13:20:09.340Z",
  "text": "can anybody help my out?\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "Don&#39;t think you can print arrays from CUDA",
  "id": "5b226cd970d89b3a31965f26",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-06-14T13:25:45.606Z",
  "text": "Don't think you can print arrays from CUDA",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "floats and ints should be fine though",
  "id": "5b226ced82b1b355c9578ec8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-06-14T13:26:05.233Z",
  "text": "floats and ints should be fine though",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/ataoer",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/25292690?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/25292690?v=4&s=60",
   "displayName": "taotaotao",
   "gv": "4",
   "id": "58da8d31d73408ce4f5456f9",
   "url": "/ataoer",
   "username": "ataoer",
   "v": 4
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span> Hi, thx for your reply,I Have removed print\u2026. I got another error ...",
  "id": "5b226fc5c277fb705dcdc485",
  "issues": [],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 19,
  "sent": "2018-06-14T13:38:13.243Z",
  "text": "@stuartarchibald Hi, thx for your reply,I Have removed print\u2026. I got another error ...",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/ataoer",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/25292690?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/25292690?v=4&s=60",
   "displayName": "taotaotao",
   "gv": "4",
   "id": "58da8d31d73408ce4f5456f9",
   "url": "/ataoer",
   "username": "ataoer",
   "v": 4
  },
  "html": "<pre><code>numba.errors.<span class=\"type\">TypingError</span>: <span class=\"type\">Failed</span> at nopython (nopython frontend)\n<span class=\"type\">Invalid</span> usage of <span class=\"type\">Function</span>(&lt;numba.cuda.compiler.<span class=\"type\">DeviceFunctionTemplate</span> <span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">at</span> 0<span class=\"title\">x7f04c8c0bd30&gt;</span>) <span class=\"keyword\"><span class=\"keyword\">with</span></span> <span class=\"title\">parameters</span> (</span>array(float64, <span class=\"number\">3</span>d, <span class=\"type\">A</span>), int64, int64, array(<span class=\"type\">Record</span>([(<span class=\"symbol\">'s</span>0', '&lt;u8'), (<span class=\"symbol\">'s</span>1', '&lt;u8')]), <span class=\"number\">1</span>d, <span class=\"type\">A</span>))\n * parameterized\n<span class=\"type\">In</span> definition <span class=\"number\">0</span>:\n    <span class=\"type\">TypingError</span>: <span class=\"type\">Failed</span> at nopython (nopython frontend)\n<span class=\"type\">Invalid</span> usage of <span class=\"type\">Function</span>(&lt;numba.cuda.compiler.<span class=\"type\">DeviceFunctionTemplate</span> <span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">at</span> 0<span class=\"title\">x7f04c8c0bcf8&gt;</span>) <span class=\"keyword\"><span class=\"keyword\">with</span></span> <span class=\"title\">parameters</span> (</span>array(float64, <span class=\"number\">3</span>d, <span class=\"type\">A</span>), int64, int64)\n * parameterized\n<span class=\"type\">In</span> definition <span class=\"number\">0</span>:\n    <span class=\"type\">LoweringError</span>: <span class=\"type\">Failed</span> at nopython (nopython mode backend)\n<span class=\"type\">NRT</span> required but not enabled\n<span class=\"type\">File</span> <span class=\"string\">\"meger_shuffle.py\"</span>, line <span class=\"number\">11</span>\n[<span class=\"number\">1</span>] <span class=\"type\">During</span>: lowering <span class=\"string\">\"T[i] = $0.3\"</span> at meger_shuffle.py (<span class=\"number\">11</span>)\n    raised from /home/wangtao/.conda/envs/ml/lib/python3.6/site-packages/numba/runtime/context.py:<span class=\"number\">19</span>\n[<span class=\"number\">1</span>] <span class=\"type\">During</span>: resolving callee <span class=\"class\"><span class=\"keyword\">type</span>:</span> <span class=\"type\">Function</span>(&lt;numba.cuda.compiler.<span class=\"type\">DeviceFunctionTemplate</span> <span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">at</span> 0<span class=\"title\">x7f04c8c0bcf8&gt;</span>)\n</span>[<span class=\"number\">2</span>] <span class=\"type\">During</span>: typing of call at meger_shuffle.py (<span class=\"number\">19</span>)\n    raised from /home/wangtao/.conda/envs/ml/lib/python3.6/site-packages/numba/types/functions.py:<span class=\"number\">137</span>\n[<span class=\"number\">1</span>] <span class=\"type\">During</span>: resolving callee <span class=\"class\"><span class=\"keyword\">type</span>:</span> <span class=\"type\">Function</span>(&lt;numba.cuda.compiler.<span class=\"type\">DeviceFunctionTemplate</span> <span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">at</span> 0<span class=\"title\">x7f04c8c0bd30&gt;</span>)\n</span>[<span class=\"number\">2</span>] <span class=\"type\">During</span>: typing of call at meger_shuffle.py (<span class=\"number\">31</span>)</code></pre>",
  "id": "5b22701886343c3a3204503b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-06-14T13:39:35.983Z",
  "text": "```\nnumba.errors.TypingError: Failed at nopython (nopython frontend)\nInvalid usage of Function(<numba.cuda.compiler.DeviceFunctionTemplate object at 0x7f04c8c0bd30>) with parameters (array(float64, 3d, A), int64, int64, array(Record([('s0', '<u8'), ('s1', '<u8')]), 1d, A))\n * parameterized\nIn definition 0:\n    TypingError: Failed at nopython (nopython frontend)\nInvalid usage of Function(<numba.cuda.compiler.DeviceFunctionTemplate object at 0x7f04c8c0bcf8>) with parameters (array(float64, 3d, A), int64, int64)\n * parameterized\nIn definition 0:\n    LoweringError: Failed at nopython (nopython mode backend)\nNRT required but not enabled\nFile \"meger_shuffle.py\", line 11\n[1] During: lowering \"T[i] = $0.3\" at meger_shuffle.py (11)\n    raised from /home/wangtao/.conda/envs/ml/lib/python3.6/site-packages/numba/runtime/context.py:19\n[1] During: resolving callee type: Function(<numba.cuda.compiler.DeviceFunctionTemplate object at 0x7f04c8c0bcf8>)\n[2] During: typing of call at meger_shuffle.py (19)\n    raised from /home/wangtao/.conda/envs/ml/lib/python3.6/site-packages/numba/types/functions.py:137\n[1] During: resolving callee type: Function(<numba.cuda.compiler.DeviceFunctionTemplate object at 0x7f04c8c0bd30>)\n[2] During: typing of call at meger_shuffle.py (31)\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/ataoer",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/25292690?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/25292690?v=4&s=60",
   "displayName": "taotaotao",
   "gv": "4",
   "id": "58da8d31d73408ce4f5456f9",
   "url": "/ataoer",
   "username": "ataoer",
   "v": 4
  },
  "html": "<pre><code><span class=\"decorator\">@cuda.jit(device=True)</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">arr_swap</span><span class=\"params\">(T, i ,j)</span>:</span>\n    T[i], T[j] = T[j], T[i]</code></pre>",
  "id": "5b22706f82b1b355c95798dd",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 20,
  "sent": "2018-06-14T13:41:03.070Z",
  "text": "```\n@cuda.jit(device=True)\ndef arr_swap(T, i ,j):\n    T[i], T[j] = T[j], T[i]\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/ataoer",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/25292690?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/25292690?v=4&s=60",
   "displayName": "taotaotao",
   "gv": "4",
   "id": "58da8d31d73408ce4f5456f9",
   "url": "/ataoer",
   "username": "ataoer",
   "v": 4
  },
  "html": "Is this wrong ?",
  "id": "5b22707832618e705eba3890",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 20,
  "sent": "2018-06-14T13:41:12.490Z",
  "text": "Is this wrong ?\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "without a working reproducer it&#39;s quite hard to guess what the problem is, though I suspect you may be using unsupported types",
  "id": "5b2270a5d128fa71f66955f9",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-06-14T13:41:57.093Z",
  "text": "without a working reproducer it's quite hard to guess what the problem is, though I suspect you may be using unsupported types",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/ataoer",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/25292690?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/25292690?v=4&s=60",
   "displayName": "taotaotao",
   "gv": "4",
   "id": "58da8d31d73408ce4f5456f9",
   "url": "/ataoer",
   "username": "ataoer",
   "v": 4
  },
  "html": "Oh, thank you, I\u2019ll check my code",
  "id": "5b2272038864a936cc87dca0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 20,
  "sent": "2018-06-14T13:47:47.038Z",
  "text": "Oh, thank you, I\u2019ll check my code",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/ataoer",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/25292690?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/25292690?v=4&s=60",
   "displayName": "taotaotao",
   "gv": "4",
   "id": "58da8d31d73408ce4f5456f9",
   "url": "/ataoer",
   "username": "ataoer",
   "v": 4
  },
  "html": "Maybe I find the answer",
  "id": "5b22803bd128fa71f6698631",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 21,
  "sent": "2018-06-14T14:48:27.334Z",
  "text": "Maybe I find the answer",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/ataoer",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/25292690?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/25292690?v=4&s=60",
   "displayName": "taotaotao",
   "gv": "4",
   "id": "58da8d31d73408ce4f5456f9",
   "url": "/ataoer",
   "username": "ataoer",
   "v": 4
  },
  "html": "<a href=\"https://groups.google.com/a/continuum.io/forum/#!topic/numba-users/fSYKKpyLmpY\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://groups.google.com/a/continuum.io/forum/#!topic/numba-users/fSYKKpyLmpY</a>",
  "id": "5b228041e87f0c7bee8b4c4e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 22,
  "sent": "2018-06-14T14:48:33.513Z",
  "text": "https://groups.google.com/a/continuum.io/forum/#!topic/numba-users/fSYKKpyLmpY",
  "unread": false,
  "urls": [
   {
    "url": "https://groups.google.com/a/continuum.io/forum/#!topic/numba-users/fSYKKpyLmpY"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 10
  },
  "html": "Does using a closure trigger recompilation if all captured variables and arguments are of the same type?",
  "id": "5b2b868914805602859966f3",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-06-21T11:05:45.250Z",
  "text": "Does using a closure trigger recompilation if all captured variables and arguments are of the same type?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "as in, you have a function that is jitted inside a standard python closure?",
  "id": "5b2b88e95862c35f47ba88d8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-06-21T11:15:53.175Z",
  "text": "as in, you have a function that is jitted inside a standard python closure?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 10
  },
  "html": "Yes.",
  "id": "5b2b8934479ca2668972198d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-06-21T11:17:08.236Z",
  "text": "Yes.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "I think it would recompile",
  "id": "5b2b8990467bd7268c26aebc",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-06-21T11:18:40.007Z",
  "text": "I think it would recompile",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 10
  },
  "html": "Is there any way to check for sure?",
  "id": "5b2b8ce0ce3b0f268d34f104",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 20,
  "sent": "2018-06-21T11:32:48.325Z",
  "text": "Is there any way to check for sure?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-06-21T11:43:08.529Z",
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 10
  },
  "html": "<p>Something like the following:</p><pre><code><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">gen_return_1</span><span class=\"params\">()</span>:</span>\n    retval = <span class=\"number\">1</span>\n    <span class=\"decorator\">@njit</span>\n    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">return_1</span><span class=\"params\">()</span>:</span>\n        <span class=\"keyword\">return</span> retval\n    <span class=\"keyword\">return</span> return_1\n\ngen_return_1()() <span class=\"comment\"># Compile once</span>\ngen_return_1()() <span class=\"comment\"># Does this recompile?</span></code></pre><p>In reality I would have different values for <code>retval</code>.</p>",
  "id": "5b2b8ec15862c35f47ba964c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 21,
  "sent": "2018-06-21T11:40:49.850Z",
  "text": "Something like the following:\n\n```\ndef gen_return_1():\n    retval = 1\n    @njit\n    def return_1():\n        return retval\n    return return_1\n\ngen_return_1()() # Compile once\ngen_return_1()() # Does this recompile?\n```\n\nIn reality I would have different values for `retval`.",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "you could set the env var <code>NUMBA_DEBUG=1</code> and watch what it does",
  "id": "5b2b8f89960fcd4eb9164974",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 22,
  "sent": "2018-06-21T11:44:09.213Z",
  "text": "you could set the env var `NUMBA_DEBUG=1` and watch what it does",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 10
  },
  "html": "Seems like it doesn&#39;t recompile, which is awesome! <a href=\"https://gist.github.com/hameerabbasi/badd2977d2bc958fec10628074a1c58d\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://gist.github.com/hameerabbasi/badd2977d2bc958fec10628074a1c58d</a>",
  "id": "5b2b9255467bd7268c26c539",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 22,
  "sent": "2018-06-21T11:56:05.617Z",
  "text": "Seems like it doesn't recompile, which is awesome! https://gist.github.com/hameerabbasi/badd2977d2bc958fec10628074a1c58d",
  "unread": false,
  "urls": [
   {
    "url": "https://gist.github.com/hameerabbasi/badd2977d2bc958fec10628074a1c58d"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "seems like it does?! You call it once and see the compilation trace, then call it again and see another compilation trace ?",
  "id": "5b2b93250168e70c08e05928",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 22,
  "sent": "2018-06-21T11:59:33.066Z",
  "text": "seems like it does?! You call it once and see the compilation trace, then call it again and see another compilation trace ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 10
  },
  "html": "I could be wrong, but isn&#39;t the second one just the IR dump?",
  "id": "5b2b940b467bd7268c26cba6",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 22,
  "sent": "2018-06-21T12:03:23.591Z",
  "text": "I could be wrong, but isn't the second one just the IR dump?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 10
  },
  "html": "It&#39;s a lot shorter.",
  "id": "5b2b94165862c35f47baa4c4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 23,
  "sent": "2018-06-21T12:03:34.194Z",
  "text": "It's a lot shorter.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "the first one contains the compilation trace for the numba runtime which is necessary for numba functions to work",
  "id": "5b2b94356ceffe4eba24f1ef",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 23,
  "sent": "2018-06-21T12:04:05.005Z",
  "text": "the first one contains the compilation trace for the numba runtime which is necessary for numba functions to work",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 10
  },
  "html": "Ah, dang. Is this within scope for an issue?",
  "id": "5b2b9479fc606203806f16f4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 23,
  "sent": "2018-06-21T12:05:13.471Z",
  "text": "Ah, dang. Is this within scope for an issue?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 10
  },
  "html": "I actually want to generate a C callback for a SciPy function. But my function itself is parametrized.",
  "id": "5b2b94d8fc606203806f1815",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 23,
  "sent": "2018-06-21T12:06:48.323Z",
  "text": "I actually want to generate a C callback for a SciPy function. But my function itself is parametrized.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 10
  },
  "html": "And repeated recompilation could take a lot of time.",
  "id": "5b2b95057da8cd7c8c6033df",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 23,
  "sent": "2018-06-21T12:07:33.554Z",
  "text": "And repeated recompilation could take a lot of time.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "Please feel free to file a ticket :)",
  "id": "5b2b970c5862c35f47baacf4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 23,
  "sent": "2018-06-21T12:16:12.989Z",
  "text": "Please feel free to file a ticket :)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "I think fundamentally it&#39;s going to be challenging to resolve as the inner function appears as a different code object",
  "id": "5b2b97a159799e701734f266",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 23,
  "sent": "2018-06-21T12:18:41.946Z",
  "text": "I think fundamentally it's going to be challenging to resolve as the inner function appears as a different code object",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 10
  },
  "html": "Yeah, I thought of the same, which is why my initial intuition was that it won&#39;t work.",
  "id": "5b2b9b7d5862c35f47babaab",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 23,
  "sent": "2018-06-21T12:35:09.533Z",
  "text": "Yeah, I thought of the same, which is why my initial intuition was that it won't work.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "I suppose for functions that &quot;look&quot; suspiciously similar, based on a to be defined suspicion heuristic, it&#39;d be possible to compare the code objects etc and go cache fishing based on that",
  "id": "5b2b9c5dd2abe466887c8857",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 23,
  "sent": "2018-06-21T12:38:53.783Z",
  "text": "I suppose for functions that \"look\" suspiciously similar, based on a to be defined suspicion heuristic, it'd be possible to compare the code objects etc and go cache fishing based on that",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 10
  },
  "html": "Maybe something simpler, like being the local variable of a function would work?",
  "id": "5b2b9f2d7d3bca737afdb9b5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 23,
  "sent": "2018-06-21T12:50:53.190Z",
  "text": "Maybe something simpler, like being the local variable of a function would work?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/njwhite",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/912123?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/912123?v=4&s=60",
   "displayName": "njwhite",
   "gv": "4",
   "id": "5a4d0cb1d73408ce4f85e996",
   "url": "/njwhite",
   "username": "njwhite",
   "v": 11
  },
  "html": "I know Numba doesn&#39;t support it atm, but in theory could you make a cuda.shared.array with a dimension of cuda.gridSize.x?",
  "id": "5b2d08b5ce3b0f268d38a22d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 22,
  "sent": "2018-06-22T14:33:25.005Z",
  "text": "I know Numba doesn't support it atm, but in theory could you make a cuda.shared.array with a dimension of cuda.gridSize.x?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/wherewp",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/40582003?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/40582003?v=4&s=60",
   "displayName": "wherewp",
   "gv": "4",
   "id": "5b316881d73408ce4f9e94d6",
   "url": "/wherewp",
   "username": "wherewp"
  },
  "html": "Hello everybody! Something odd: I&#39;m trying to take the dot product of two matrices with numpy.dot, but numba gives the error: Unknown attribute &#39;dot&#39; of type Module(&lt;module &#39;numpy&#39; from &#39;/home/daniel/.local/lib/python3.6/site-packages/numpy/__init__.py&#39;&gt;). Works fine in normal python and dot looks like it&#39;s on the list of supported operations. Strange news!",
  "id": "5b3168f2b9c2fb25570b1c93",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-06-25T22:13:06.229Z",
  "text": "Hello everybody! Something odd: I'm trying to take the dot product of two matrices with numpy.dot, but numba gives the error: Unknown attribute 'dot' of type Module(<module 'numpy' from '/home/daniel/.local/lib/python3.6/site-packages/numpy/__init__.py'>). Works fine in normal python and dot looks like it's on the list of supported operations. Strange news!\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "that&#39;s unexpected!",
  "id": "5b31696359799e701741833d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-06-25T22:14:59.656Z",
  "text": "that's unexpected!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"wherewp\" class=\"mention\">@wherewp</span>, any chance you could share a reproducer please?",
  "id": "5b316979b9c2fb25570b1d88",
  "issues": [],
  "mentions": [
   {
    "screenName": "wherewp",
    "userId": "5b316881d73408ce4f9e94d6",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 19,
  "sent": "2018-06-25T22:15:21.169Z",
  "text": "@wherewp, any chance you could share a reproducer please?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/wherewp",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/40582003?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/40582003?v=4&s=60",
   "displayName": "wherewp",
   "gv": "4",
   "id": "5b316881d73408ce4f9e94d6",
   "url": "/wherewp",
   "username": "wherewp"
  },
  "html": "Sure thing! Here it is: convolved[ii, pp, 0, ff] = numpy.dot(patch, flattened_filters[:, ff]) + filters_b[ff]",
  "id": "5b316a63aeb8fa0c0741ea15",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-06-25T22:19:15.132Z",
  "text": "Sure thing! Here it is: convolved[ii, pp, 0, ff] = numpy.dot(patch, flattened_filters[:, ff]) + filters_b[ff]",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "thanks, that seems reasonable as a use",
  "id": "5b316aa07d3bca737a09b0be",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-06-25T22:20:16.716Z",
  "text": "thanks, that seems reasonable as a use",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "which version of Numba are you using?",
  "id": "5b316aa8ad21887018de06af",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-06-25T22:20:24.927Z",
  "text": "which version of Numba are you using?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/wherewp",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/40582003?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/40582003?v=4&s=60",
   "displayName": "wherewp",
   "gv": "4",
   "id": "5b316881d73408ce4f9e94d6",
   "url": "/wherewp",
   "username": "wherewp"
  },
  "html": "numba.<strong>version</strong> is &#39;0.38.1+1.gc42707d0f.dirty&#39;",
  "id": "5b316aebbe98b14224087ee0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 20,
  "sent": "2018-06-25T22:21:31.049Z",
  "text": "numba.__version__ is '0.38.1+1.gc42707d0f.dirty'",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "Do you have SciPy installed ?",
  "id": "5b316b2c479ca266897f293e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-06-25T22:22:36.219Z",
  "text": "Do you have SciPy installed ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/wherewp",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/40582003?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/40582003?v=4&s=60",
   "displayName": "wherewp",
   "gv": "4",
   "id": "5b316881d73408ce4f9e94d6",
   "url": "/wherewp",
   "username": "wherewp"
  },
  "html": "Yes indeed",
  "id": "5b316b34be98b14224087f22",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 20,
  "sent": "2018-06-25T22:22:44.888Z",
  "text": "Yes indeed",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "(thanks, 0.38.1 should be fine)",
  "id": "5b316b397da8cd7c8c6d5ade",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-06-25T22:22:49.848Z",
  "text": "(thanks, 0.38.1 should be fine)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "Do <em>any</em> np.linalg. functions work",
  "id": "5b316b4b960fcd4eb922fc26",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-06-25T22:23:07.854Z",
  "text": "Do *any* np.linalg. functions work",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "perhaps try something like <code>np.linalg.norm</code> on a vector",
  "id": "5b316b58a288503b3ddf145e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 20,
  "sent": "2018-06-25T22:23:20.534Z",
  "text": "perhaps try something like `np.linalg.norm` on a vector",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/wherewp",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/40582003?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/40582003?v=4&s=60",
   "displayName": "wherewp",
   "gv": "4",
   "id": "5b316881d73408ce4f9e94d6",
   "url": "/wherewp",
   "username": "wherewp"
  },
  "html": "Alas, no! Here&#39;s the error when I try to use numpy.linalg.norm: No definition for lowering &lt;built-in method oneD_impl of _dynfunc._Closure object at 0x7f6c443e9d48&gt;(array(float32, 1d, C), omitted(default=None)) -&gt; float32",
  "id": "5b316bea6ceffe4eba32cf18",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 21,
  "sent": "2018-06-25T22:25:46.548Z",
  "text": "Alas, no! Here's the error when I try to use numpy.linalg.norm: No definition for lowering <built-in method oneD_impl of _dynfunc._Closure object at 0x7f6c443e9d48>(array(float32, 1d, C), omitted(default=None)) -> float32\n\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "right, so I think there&#39;s probably more going on there :)",
  "id": "5b316c4672b31d3691f34560",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 20,
  "sent": "2018-06-25T22:27:18.273Z",
  "text": "right, so I think there's probably more going on there :)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "Did you build your own Numba or is this from the Numba channel ?",
  "id": "5b316c62960fcd4eb922feb5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 20,
  "sent": "2018-06-25T22:27:46.041Z",
  "text": "Did you build your own Numba or is this from the Numba channel ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/wherewp",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/40582003?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/40582003?v=4&s=60",
   "displayName": "wherewp",
   "gv": "4",
   "id": "5b316881d73408ce4f9e94d6",
   "url": "/wherewp",
   "username": "wherewp"
  },
  "html": "This is from anaconda (conda install numba). Is there a more reliable source?",
  "id": "5b316c71d2abe4668889ea5f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 21,
  "sent": "2018-06-25T22:28:01.139Z",
  "text": "This is from anaconda (conda install numba). Is there a more reliable source?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "that is the reliable source :)",
  "id": "5b316ca97da8cd7c8c6d5d9d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 21,
  "sent": "2018-06-25T22:28:57.309Z",
  "text": "that is the reliable source :)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/wherewp",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/40582003?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/40582003?v=4&s=60",
   "displayName": "wherewp",
   "gv": "4",
   "id": "5b316881d73408ce4f9e94d6",
   "url": "/wherewp",
   "username": "wherewp"
  },
  "html": "Drat!",
  "id": "5b316cb1d2abe4668889eae4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 22,
  "sent": "2018-06-25T22:29:05.175Z",
  "text": "Drat!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "Can you share any more of your code?",
  "id": "5b316cbe6ceffe4eba32d1a4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 22,
  "sent": "2018-06-25T22:29:18.481Z",
  "text": "Can you share any more of your code?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/wherewp",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/40582003?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/40582003?v=4&s=60",
   "displayName": "wherewp",
   "gv": "4",
   "id": "5b316881d73408ce4f9e94d6",
   "url": "/wherewp",
   "username": "wherewp"
  },
  "html": "Yes, let me try to make a minimal example",
  "id": "5b316cd8d2abe4668889eb3c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 22,
  "sent": "2018-06-25T22:29:44.173Z",
  "text": "Yes, let me try to make a minimal example",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "Does <em>any</em> Numba decorated code compile for you ?",
  "id": "5b316d0859799e70174188e0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 22,
  "sent": "2018-06-25T22:30:32.843Z",
  "text": "Does *any* Numba decorated code compile for you ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/wherewp",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/40582003?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/40582003?v=4&s=60",
   "displayName": "wherewp",
   "gv": "4",
   "id": "5b316881d73408ce4f9e94d6",
   "url": "/wherewp",
   "username": "wherewp"
  },
  "html": "It&#39;s just this linear algebra business that&#39;s tripping it up",
  "id": "5b316d270168e70c08ee45e9",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 22,
  "sent": "2018-06-25T22:31:03.791Z",
  "text": "It's just this linear algebra business that's tripping it up",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/wherewp",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/40582003?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/40582003?v=4&s=60",
   "displayName": "wherewp",
   "gv": "4",
   "id": "5b316881d73408ce4f9e94d6",
   "url": "/wherewp",
   "username": "wherewp"
  },
  "html": "Yes, the example of adding 1 to arrays works",
  "id": "5b316d597da8cd7c8c6d5ec1",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 22,
  "sent": "2018-06-25T22:31:53.753Z",
  "text": "Yes, the example of adding 1 to arrays works",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "ok, and if you take a <code>np.linalg.norm()</code> of that array does that work ?",
  "id": "5b316d6f960fcd4eb92300b5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 22,
  "sent": "2018-06-25T22:32:15.406Z",
  "text": "ok, and if you take a `np.linalg.norm()` of that array does that work ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/wherewp",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/40582003?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/40582003?v=4&s=60",
   "displayName": "wherewp",
   "gv": "4",
   "id": "5b316881d73408ce4f9e94d6",
   "url": "/wherewp",
   "username": "wherewp"
  },
  "html": "No sir. So maybe that&#39;s our minimal example: <a href=\"https://pastebin.com/6qSJTw5x\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://pastebin.com/6qSJTw5x</a>",
  "id": "5b316ddea288503b3ddf1afd",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 22,
  "sent": "2018-06-25T22:34:06.355Z",
  "text": "No sir. So maybe that's our minimal example: https://pastebin.com/6qSJTw5x",
  "unread": false,
  "urls": [
   {
    "url": "https://pastebin.com/6qSJTw5x"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "ahhhhhhhhhhh",
  "id": "5b316df17d3bca737a09b598",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 22,
  "sent": "2018-06-25T22:34:25.028Z",
  "text": "ahhhhhhhhhhh",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "CUDA",
  "id": "5b316df20168e70c08ee46f4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 23,
  "sent": "2018-06-25T22:34:26.090Z",
  "text": "CUDA",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "the missing link",
  "id": "5b316df6ce3b0f268d42ed04",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 23,
  "sent": "2018-06-25T22:34:30.475Z",
  "text": "the missing link",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "right, the CPU target has <code>np.linalg</code> support, CUDA does not (and the same goes for a lot of np functions)",
  "id": "5b316e2159799e7017418c91",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 23,
  "sent": "2018-06-25T22:35:13.217Z",
  "text": "right, the CPU target has `np.linalg` support, CUDA does not (and the same goes for a lot of np functions)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/wherewp",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/40582003?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/40582003?v=4&s=60",
   "displayName": "wherewp",
   "gv": "4",
   "id": "5b316881d73408ce4f9e94d6",
   "url": "/wherewp",
   "username": "wherewp"
  },
  "html": "Alas! No way to fast-multiply a matrix on CUDA then?",
  "id": "5b316e420168e70c08ee47a9",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 23,
  "sent": "2018-06-25T22:35:46.022Z",
  "text": "Alas! No way to fast-multiply a matrix on CUDA then?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "<a href=\"http://numba.pydata.org/numba-doc/dev/cuda/cudapysupported.html#numpy-support\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://numba.pydata.org/numba-doc/dev/cuda/cudapysupported.html#numpy-support</a>",
  "id": "5b316e9e960fcd4eb92303e8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 23,
  "sent": "2018-06-25T22:37:18.681Z",
  "text": "http://numba.pydata.org/numba-doc/dev/cuda/cudapysupported.html#numpy-support",
  "unread": false,
  "urls": [
   {
    "url": "http://numba.pydata.org/numba-doc/dev/cuda/cudapysupported.html#numpy-support"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/wherewp",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/40582003?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/40582003?v=4&s=60",
   "displayName": "wherewp",
   "gv": "4",
   "id": "5b316881d73408ce4f9e94d6",
   "url": "/wherewp",
   "username": "wherewp"
  },
  "html": "Understood! Thank you very much!",
  "id": "5b316efcb9c2fb25570b274d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 23,
  "sent": "2018-06-25T22:38:52.036Z",
  "text": "Understood! Thank you very much!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "you can use e.g. <a href=\"https://github.com/numba/pyculib\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://github.com/numba/pyculib</a>",
  "id": "5b316f23b9c2fb25570b2756",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 23,
  "sent": "2018-06-25T22:39:31.779Z",
  "text": "you can use e.g. https://github.com/numba/pyculib",
  "unread": false,
  "urls": [
   {
    "url": "https://github.com/numba/pyculib"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "and there is some work ongoing to improve interop with CuPy, <a href=\"https://github.com/numba/numba/pull/3055/files#diff-53b1e1d3835917f542f7e7a8b6b46464R16\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://github.com/numba/numba/pull/3055/files#diff-53b1e1d3835917f542f7e7a8b6b46464R16</a>",
  "id": "5b316f676ceffe4eba32d69d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 23,
  "sent": "2018-06-25T22:40:39.735Z",
  "text": "and there is some work ongoing to improve interop with CuPy, https://github.com/numba/numba/pull/3055/files#diff-53b1e1d3835917f542f7e7a8b6b46464R16",
  "unread": false,
  "urls": [
   {
    "url": "https://github.com/numba/numba/pull/3055/files#diff-53b1e1d3835917f542f7e7a8b6b46464R16"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/pithonmath",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/33359973?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/33359973?v=4&s=60",
   "displayName": "pithonmath",
   "gv": "4",
   "id": "5b35211cd73408ce4f9efb04",
   "url": "/pithonmath",
   "username": "pithonmath"
  },
  "html": "I am trying to start with Numba and am using the Mandelbrot set example. It runs on the integrated GPU (intel HD graphics) instead of my GTX 1050ti. How can I force it to run on the 2nd GPU? (GPU 1)",
  "id": "5b35226872b31d3691fbe180",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 22,
  "sent": "2018-06-28T18:01:12.490Z",
  "text": "I am trying to start with Numba and am using the Mandelbrot set example. It runs on the integrated GPU (intel HD graphics) instead of my GTX 1050ti. How can I force it to run on the 2nd GPU? (GPU 1)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/jllanfranchi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6414943?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6414943?v=4&s=60",
   "displayName": "J. L. Lanfranchi",
   "gv": "4",
   "id": "5aa7320ed73408ce4f9115a7",
   "url": "/jllanfranchi",
   "username": "jllanfranchi",
   "v": 14
  },
  "html": "You can always use the <code>CUDA_VISIBLE_DEVICES</code> environment variable for any code that uses CUDA <a href=\"https://devblogs.nvidia.com/cuda-pro-tip-control-gpu-visibility-cuda_visible_devices\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://devblogs.nvidia.com/cuda-pro-tip-control-gpu-visibility-cuda_visible_devices</a>",
  "id": "5b35245d72b31d3691fbe55b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 22,
  "sent": "2018-06-28T18:09:33.794Z",
  "text": "You can always use the `CUDA_VISIBLE_DEVICES` environment variable for any code that uses CUDA https://devblogs.nvidia.com/cuda-pro-tip-control-gpu-visibility-cuda_visible_devices",
  "unread": false,
  "urls": [
   {
    "url": "https://devblogs.nvidia.com/cuda-pro-tip-control-gpu-visibility-cuda_visible_devices"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/pithonmath",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/33359973?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/33359973?v=4&s=60",
   "displayName": "pithonmath",
   "gv": "4",
   "id": "5b35211cd73408ce4f9efb04",
   "url": "/pithonmath",
   "username": "pithonmath"
  },
  "html": "Should I just add a system variable with name: CUDA_VISIBLE_DEVICES and value: GPU 1?",
  "id": "5b3524e0479ca2668987e031",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 22,
  "sent": "2018-06-28T18:11:44.205Z",
  "text": "Should I just add a system variable with name: CUDA_VISIBLE_DEVICES and value: GPU 1?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/jllanfranchi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6414943?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6414943?v=4&s=60",
   "displayName": "J. L. Lanfranchi",
   "gv": "4",
   "id": "5aa7320ed73408ce4f9115a7",
   "url": "/jllanfranchi",
   "username": "jllanfranchi",
   "v": 14
  },
  "html": "On Linux, it&#39;s just <code>export CUDA_VISIBLE_DEVICES=1</code>; I&#39;d expect the same in Windows but would need to google to be sure.",
  "id": "5b352589a288503b3de7913a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 22,
  "sent": "2018-06-28T18:14:33.533Z",
  "text": "On Linux, it's just `export CUDA_VISIBLE_DEVICES=1`; I'd expect the same in Windows but would need to google to be sure.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/pithonmath",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/33359973?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/33359973?v=4&s=60",
   "displayName": "pithonmath",
   "gv": "4",
   "id": "5b35211cd73408ce4f9efb04",
   "url": "/pithonmath",
   "username": "pithonmath"
  },
  "html": "This seems to not work, the code still uses the integrated graphics. I have created a new system environment variable with name CUDA_VISIBLE_DEVICES and value 1. Is there another followup step I need? ",
  "id": "5b35262c72b31d3691fbeb85",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 22,
  "sent": "2018-06-28T18:17:16.827Z",
  "text": "This seems to not work, the code still uses the integrated graphics. I have created a new system environment variable with name CUDA_VISIBLE_DEVICES and value 1. Is there another followup step I need? ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/jllanfranchi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6414943?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6414943?v=4&s=60",
   "displayName": "J. L. Lanfranchi",
   "gv": "4",
   "id": "5aa7320ed73408ce4f9115a7",
   "url": "/jllanfranchi",
   "username": "jllanfranchi",
   "v": 14
  },
  "html": "First thing: try also 0, sometimes it is rather nonsensical which gets which number. Second thing, if you&#39;re running from a Jupyter notebook, you can use the code from avijit9 here before you import/use Numba to set the variable: <a href=\"https://github.com/pytorch/pytorch/issues/1901#issuecomment-310903894\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://github.com/pytorch/pytorch/issues/1901#issuecomment-310903894</a> Beyond this, I&#39;ll have to defer to others to help you, as I&#39;m not a Windows user.",
  "id": "5b3526bb7da8cd7c8c761c22",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 22,
  "sent": "2018-06-28T18:19:39.803Z",
  "text": "First thing: try also 0, sometimes it is rather nonsensical which gets which number. Second thing, if you're running from a Jupyter notebook, you can use the code from avijit9 here before you import/use Numba to set the variable: https://github.com/pytorch/pytorch/issues/1901#issuecomment-310903894 Beyond this, I'll have to defer to others to help you, as I'm not a Windows user.",
  "unread": false,
  "urls": [
   {
    "url": "https://github.com/pytorch/pytorch/issues/1901#issuecomment-310903894"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/pithonmath",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/33359973?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/33359973?v=4&s=60",
   "displayName": "pithonmath",
   "gv": "4",
   "id": "5b35211cd73408ce4f9efb04",
   "url": "/pithonmath",
   "username": "pithonmath"
  },
  "html": "Those do not seem to have any effect, but thanks for the help.",
  "id": "5b3528c30168e70c08f738e0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 22,
  "sent": "2018-06-28T18:28:19.363Z",
  "text": "Those do not seem to have any effect, but thanks for the help.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-07-04T17:13:33.778Z",
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/igorghi",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/30356971?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/30356971?v=4&s=60",
   "displayName": "igorghi",
   "gv": "4",
   "id": "5b3cfafdd73408ce4f9fa1e5",
   "url": "/igorghi",
   "username": "igorghi"
  },
  "html": "Hello everybody! It is my first time here so if I did something wrong posting this, sorry in advance. I was trying to use generators with numba and I think I hit some edge case. Initially I was trying to make a batch pairwise generator, that generates pairwise combinations of elements in an array. It worked without the numba decorator and killed the jupyter/python kernel when ran with the decorator, generating a long stack in the command line. I reduced it to a minimal example: <a href=\"https://pastebin.com/zsiNgi7p\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://pastebin.com/zsiNgi7p</a>. In this example I am not considering the case when len(arr) % n_batch != 0. When using the decorator and returning from generator using next() it appears to work as expected, however when returning from a for loop it crashes. I am using python 3.6 and numba 0.39.0rc1+4.ga4b70ccc3. ",
  "id": "5b3cfe1f60c38707835d9c20",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-07-04T17:04:31.843Z",
  "text": "Hello everybody! It is my first time here so if I did something wrong posting this, sorry in advance. I was trying to use generators with numba and I think I hit some edge case. Initially I was trying to make a batch pairwise generator, that generates pairwise combinations of elements in an array. It worked without the numba decorator and killed the jupyter/python kernel when ran with the decorator, generating a long stack in the command line. I reduced it to a minimal example: https://pastebin.com/zsiNgi7p. In this example I am not considering the case when len(arr) % n_batch != 0. When using the decorator and returning from generator using next() it appears to work as expected, however when returning from a for loop it crashes. I am using python 3.6 and numba 0.39.0rc1+4.ga4b70ccc3. ",
  "unread": false,
  "urls": [
   {
    "url": "https://pastebin.com/zsiNgi7p"
   }
  ],
  "v": 3
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/igorghi",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/30356971?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/30356971?v=4&s=60",
   "displayName": "igorghi",
   "gv": "4",
   "id": "5b3cfafdd73408ce4f9fa1e5",
   "url": "/igorghi",
   "username": "igorghi"
  },
  "html": "Sorry I meant number of combinations % n_batch != 0. Also, it appears to crash sometimes when calling print(next(gen)) ",
  "id": "5b3d00e470efc60660ad1dfe",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-07-04T17:16:20.910Z",
  "text": "Sorry I meant number of combinations % n_batch != 0. Also, it appears to crash sometimes when calling print(next(gen)) ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"igorghi\" class=\"mention\">@igorghi</span> thanks, this is unfortunate and clearly a bug. The <code>kill</code> is a <code>SIGABRT</code> from a double free/corruption in the <code>NRT_MemInfo_call_dtor()</code>. If you have a github account, please could you create an issue <a href=\"https://github.com/numba/numba/issues\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://github.com/numba/numba/issues</a> ? Thanks again :)",
  "id": "5b3d35503d8f71623d5ceebb",
  "issues": [],
  "mentions": [
   {
    "screenName": "igorghi",
    "userId": "5b3cfafdd73408ce4f9fa1e5",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 18,
  "sent": "2018-07-04T21:00:00.847Z",
  "text": "@igorghi thanks, this is unfortunate and clearly a bug. The `kill` is a `SIGABRT` from a double free/corruption in the `NRT_MemInfo_call_dtor()`. If you have a github account, please could you create an issue https://github.com/numba/numba/issues ? Thanks again :)",
  "unread": false,
  "urls": [
   {
    "url": "https://github.com/numba/numba/issues"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"igorghi\" class=\"mention\">@igorghi</span> I&#39;ve added <span data-link-type=\"issue\" data-issue=\"3081\" data-issue-repo=\"numba/numba\" class=\"issue\">numba/numba#3081</span>, feel free to comment if there&#39;s anything missing etc. Thanks.",
  "id": "5b3d640889db5e701ca29558",
  "issues": [
   {
    "number": "3081",
    "repo": "numba/numba"
   }
  ],
  "mentions": [
   {
    "screenName": "igorghi",
    "userId": "5b3cfafdd73408ce4f9fa1e5",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 18,
  "sent": "2018-07-05T00:19:20.961Z",
  "text": "@igorghi I've added https://github.com/numba/numba/issues/3081, feel free to comment if there's anything missing etc. Thanks.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/igorghi",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/30356971?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/30356971?v=4&s=60",
   "displayName": "igorghi",
   "gv": "4",
   "id": "5b3cfafdd73408ce4f9fa1e5",
   "url": "/igorghi",
   "username": "igorghi"
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span> Hi! Thanks for your quick answer! Sorry that I didn&#39;t see it before, you already created the issue! :) ",
  "id": "5b3e73c87e23133ecb34f7ea",
  "issues": [],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 18,
  "sent": "2018-07-05T19:38:48.750Z",
  "text": "@stuartarchibald Hi! Thanks for your quick answer! Sorry that I didn't see it before, you already created the issue! :) ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/bbermond73",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/40903050?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/40903050?v=4&s=60",
   "displayName": "bbermond73",
   "gv": "4",
   "id": "5b3ff630d73408ce4f9fe635",
   "url": "/bbermond73",
   "username": "bbermond73"
  },
  "html": "hello i have just one little question i use python for a very long time and i am currently descovering numba, on my algorithm compiling my code with <span data-link-type=\"mention\" data-screen-name=\"jit\" class=\"mention\">@jit</span> doesn&#39;t seem to ameliorate my code and it even became slower. Is it normal or just a misuse of this programm",
  "id": "5b3ff6a27b811a6d63d66620",
  "issues": [],
  "mentions": [
   {
    "screenName": "jit",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 16,
  "sent": "2018-07-06T23:09:22.741Z",
  "text": "hello i have just one little question i use python for a very long time and i am currently descovering numba, on my algorithm compiling my code with @jit doesn't seem to ameliorate my code and it even became slower. Is it normal or just a misuse of this programm",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-07-07T10:19:43.042Z",
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/jllanfranchi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6414943?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6414943?v=4&s=60",
   "displayName": "J. L. Lanfranchi",
   "gv": "4",
   "id": "5aa7320ed73408ce4f9115a7",
   "url": "/jllanfranchi",
   "username": "jllanfranchi",
   "v": 14
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"bbermond73\" class=\"mention\">@bbermond73</span> Are you using <code>nopython=True</code>? If not, you generally won&#39;t see much speedup. If you are, then I&#39;d expect you&#39;d get at least some speedup, but it depends on your code. Only way to answer such a question is with some example code. (E.g., simply using Numpy can make your (non-Numba) Python code quite fast in certain contexts if &quot;coded well,&quot; and hence for this subset of problems, Numba might not improve things much, though I wouldn&#39;t expect too much slowdown, either. Like I said, need to see the code.)",
  "id": "5b40936281816669a437f2fe",
  "issues": [],
  "mentions": [
   {
    "screenName": "bbermond73",
    "userId": "5b3ff630d73408ce4f9fe635",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 16,
  "sent": "2018-07-07T10:18:10.755Z",
  "text": "@bbermond73 Are you using `nopython=True`? If not, you generally won't see much speedup. If you are, then I'd expect you'd get at least some speedup, but it depends on your code. Only way to answer such a question is with some example code. (E.g., simply using Numpy can make your (non-Numba) Python code quite fast in certain contexts if \"coded well,\" and hence for this subset of problems, Numba might not improve things much, though I wouldn't expect too much slowdown, either. Like I said, need to see the code.)",
  "unread": false,
  "urls": [],
  "v": 3
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "To clairfy some of the above: <code>nopython=True</code> is not required to get a speedup.  It is, however, a good idea to use that option because it means that Numba will raise an exception if it can&#39;t remove all the Python interpreter calls from your function.  The exception will usually tell you what the problem is (though improving those messages is a constant effort).",
  "id": "5b40cf193c5abf52b643c548",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-07-07T14:32:57.332Z",
  "text": "To clairfy some of the above: `nopython=True` is not required to get a speedup.  It is, however, a good idea to use that option because it means that Numba will raise an exception if it can't remove all the Python interpreter calls from your function.  The exception will usually tell you what the problem is (though improving those messages is a constant effort).",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-07-07T14:37:20.617Z",
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "When Numba cannot translate your function to a form free of Python, it falls back to &quot;object mode&quot;, which is typically the same speed as regular Python.  However, calling a Numba-compiled function has more overhead than calling a regular function, so for shorter functions, Numba can make them slower in object mode.",
  "id": "5b40cf8a60c387078365a635",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-07-07T14:34:50.349Z",
  "text": "When Numba cannot translate your function to a form free of Python, it falls back to \"object mode\", which is typically the same speed as regular Python.  However, calling a Numba-compiled function has more overhead than calling a regular function, so for shorter functions, Numba can make them slower in object mode.",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "But to echo the above suggestion, we would need to see the kind of thing you are trying to compile to offer any advice.  Numba can only optimize a numerically-focused subset of Python, as described here: <a href=\"http://numba.pydata.org/numba-doc/0.38.0/reference/pysupported.html\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://numba.pydata.org/numba-doc/0.38.0/reference/pysupported.html</a>  and <a href=\"http://numba.pydata.org/numba-doc/0.38.0/reference/numpysupported.html\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://numba.pydata.org/numba-doc/0.38.0/reference/numpysupported.html</a>",
  "id": "5b40cfe7f166440661216b10",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-07-07T14:36:23.898Z",
  "text": "But to echo the above suggestion, we would need to see the kind of thing you are trying to compile to offer any advice.  Numba can only optimize a numerically-focused subset of Python, as described here: http://numba.pydata.org/numba-doc/0.38.0/reference/pysupported.html  and http://numba.pydata.org/numba-doc/0.38.0/reference/numpysupported.html",
  "unread": false,
  "urls": [
   {
    "url": "http://numba.pydata.org/numba-doc/0.38.0/reference/pysupported.html"
   },
   {
    "url": "http://numba.pydata.org/numba-doc/0.38.0/reference/numpysupported.html"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/bbermond73",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/40903050?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/40903050?v=4&s=60",
   "displayName": "bbermond73",
   "gv": "4",
   "id": "5b3ff630d73408ce4f9fe635",
   "url": "/bbermond73",
   "username": "bbermond73"
  },
  "html": "well, thanks for the advices. Numba fails globally if i try th nopython=True mode. However i can provide you my code if needed to understand but it is quite long (1000 lines of code).",
  "id": "5b4169ba3d8f71623d65541e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-07-08T01:32:42.550Z",
  "text": "well, thanks for the advices. Numba fails globally if i try th nopython=True mode. However i can provide you my code if needed to understand but it is quite long (1000 lines of code).",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "the error message that Numba returns should help guide you toward what the uncompilable part of the code is",
  "id": "5b422968e534eb69a5d21e9c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-07-08T15:10:32.445Z",
  "text": "the error message that Numba returns should help guide you toward what the uncompilable part of the code is",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "FYI: this was just posted on Twitter: <a href=\"https://twitter.com/xhochy/status/1015949805812617216\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://twitter.com/xhochy/status/1015949805812617216</a>",
  "id": "5b423a013d8f71623d667c63",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-07-08T16:21:21.192Z",
  "text": "FYI: this was just posted on Twitter: https://twitter.com/xhochy/status/1015949805812617216",
  "unread": false,
  "urls": [
   {
    "url": "https://twitter.com/xhochy/status/1015949805812617216"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/Melisius",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/11976167?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/11976167?v=4&s=60",
   "displayName": "Erik Kjellgren",
   "gv": "4",
   "id": "5af6f586d73408ce4f991248",
   "url": "/Melisius",
   "username": "Melisius",
   "v": 1
  },
  "html": "Is there a way to call BLAS functions inside nopython jitted functions?",
  "id": "5b428a9a3c5abf52b6467354",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-07-08T22:05:14.005Z",
  "text": "Is there a way to call BLAS functions inside nopython jitted functions?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/albop",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/276777?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/276777?v=4&s=60",
   "displayName": "Pablo Winant",
   "gv": "4",
   "id": "55ef21560fc9f982beb00961",
   "url": "/albop",
   "username": "albop",
   "v": 22
  },
  "html": "Hi everyone!",
  "id": "5b43b6aa60c38707836b05c6",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-07-09T19:25:30.842Z",
  "text": "Hi everyone!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/albop",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/276777?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/276777?v=4&s=60",
   "displayName": "Pablo Winant",
   "gv": "4",
   "id": "55ef21560fc9f982beb00961",
   "url": "/albop",
   "username": "albop",
   "v": 22
  },
  "html": "I&#39;m trying to understand one little thing about how tuple behave in numba. Namely, I&#39;m trying to rewrite some computationally intensive routines, that were previously creating a lot of intermediary arrays, by using tuples and tuples of tuples instead. Reasoning being that these tuples would be allocated on the stack and elementary operations potentially eliminated by the compiler.  Does it make any sense ? Has anybody already tried to do that ?",
  "id": "5b43b76a3572e970c1835e4f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-07-09T19:28:42.148Z",
  "text": "I'm trying to understand one little thing about how tuple behave in numba. Namely, I'm trying to rewrite some computationally intensive routines, that were previously creating a lot of intermediary arrays, by using tuples and tuples of tuples instead. Reasoning being that these tuples would be allocated on the stack and elementary operations potentially eliminated by the compiler.  Does it make any sense ? Has anybody already tried to do that ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "tuples will behave like a C struct (with size known at compile time), so yes, the compiler can do things that it would not normally be able to do indexing into an array of arbitrary size.  However, I&#39;m not sure how much that will actually help vs. making your code harder to read.",
  "id": "5b43b9609b82c6701bafa0ed",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-07-09T19:37:04.398Z",
  "text": "tuples will behave like a C struct (with size known at compile time), so yes, the compiler can do things that it would not normally be able to do indexing into an array of arbitrary size.  However, I'm not sure how much that will actually help vs. making your code harder to read.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/albop",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/276777?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/276777?v=4&s=60",
   "displayName": "Pablo Winant",
   "gv": "4",
   "id": "55ef21560fc9f982beb00961",
   "url": "/albop",
   "username": "albop",
   "v": 22
  },
  "html": "thanks. I don&#39;t know about harder to read. My idea was to implement elementary functions for basic algebraic operations between tuples/tuples-of-tuples as using some kind of size-dependent generation. Then write my methods using this functions and hope that they are inlined. It was inspired by some experience I had with StaticArrays in Julia <a href=\"https://github.com/JuliaArrays/StaticArrays.jl\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://github.com/JuliaArrays/StaticArrays.jl</a>",
  "id": "5b43ba2270efc60660ba237d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-07-09T19:40:18.322Z",
  "text": "thanks. I don't know about harder to read. My idea was to implement elementary functions for basic algebraic operations between tuples/tuples-of-tuples as using some kind of size-dependent generation. Then write my methods using this functions and hope that they are inlined. It was inspired by some experience I had with StaticArrays in Julia https://github.com/JuliaArrays/StaticArrays.jl",
  "unread": false,
  "urls": [
   {
    "url": "https://github.com/JuliaArrays/StaticArrays.jl"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/albop",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/276777?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/276777?v=4&s=60",
   "displayName": "Pablo Winant",
   "gv": "4",
   "id": "55ef21560fc9f982beb00961",
   "url": "/albop",
   "username": "albop",
   "v": 22
  },
  "html": "There is a chance that if it worked it would be easy to read.",
  "id": "5b43ba4960c38707836b0d9b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-07-09T19:40:57.099Z",
  "text": "There is a chance that if it worked it would be easy to read.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/gavinpotter",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/41059217?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/41059217?v=4&s=60",
   "displayName": "gavinpotter",
   "gv": "4",
   "id": "5b44a52bd73408ce4fa04912",
   "url": "/gavinpotter",
   "username": "gavinpotter"
  },
  "html": "Hi everyone,  I&#39;m new to Numba - great product.  I&#39;m trying to figure out how to profile the jitted code.  I have several routines that call other jitted routines,  When I run it through the normal profilers, all the jitted routines are shown as a single block.  Does anyone know of a way of separating them out so I can see the time spent in each jitted function. Thanks.",
  "id": "5b44a6467e23133ecb410887",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-07-10T12:27:50.120Z",
  "text": "Hi everyone,  I'm new to Numba - great product.  I'm trying to figure out how to profile the jitted code.  I have several routines that call other jitted routines,  When I run it through the normal profilers, all the jitted routines are shown as a single block.  Does anyone know of a way of separating them out so I can see the time spent in each jitted function. Thanks.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"gavinpotter\" class=\"mention\">@gavinpotter</span> what are you using to profile presently ?",
  "id": "5b44aaae33b0282df40f8099",
  "issues": [],
  "mentions": [
   {
    "screenName": "gavinpotter",
    "userId": "5b44a52bd73408ce4fa04912",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 18,
  "sent": "2018-07-10T12:46:38.150Z",
  "text": "@gavinpotter what are you using to profile presently ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"Melisius\" class=\"mention\">@Melisius</span> if you can bind to the BLAS function with <code>ctypes</code> you can call it from Numba.",
  "id": "5b44acd63d8f71623d6bd072",
  "issues": [],
  "mentions": [
   {
    "screenName": "Melisius",
    "userId": "5af6f586d73408ce4f991248",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 18,
  "sent": "2018-07-10T12:55:50.255Z",
  "text": "@Melisius if you can bind to the BLAS function with `ctypes` you can call it from Numba.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"gavinpotter\" class=\"mention\">@gavinpotter</span>: I&#39;m not sure what the options are for free binary profilers that can span the Python and C call stack, but if you have access to Intel&#39;s VTune, it should be able to handle it.",
  "id": "5b44c219a99e1e52b725bb13",
  "issues": [],
  "mentions": [
   {
    "screenName": "gavinpotter",
    "userId": "5b44a52bd73408ce4fa04912",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 17,
  "sent": "2018-07-10T14:26:33.020Z",
  "text": "@gavinpotter: I'm not sure what the options are for free binary profilers that can span the Python and C call stack, but if you have access to Intel's VTune, it should be able to handle it.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/gavinpotter",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/41059217?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/41059217?v=4&s=60",
   "displayName": "gavinpotter",
   "gv": "4",
   "id": "5b44a52bd73408ce4fa04912",
   "url": "/gavinpotter",
   "username": "gavinpotter"
  },
  "html": "I&#39;m using cProfile.  I&#39;ll take a look at Intel&#39;s VTune.  Thanks.",
  "id": "5b44c5eb60c38707836d6e7f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-07-10T14:42:51.405Z",
  "text": "I'm using cProfile.  I'll take a look at Intel's VTune.  Thanks.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/gavinpotter",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/41059217?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/41059217?v=4&s=60",
   "displayName": "gavinpotter",
   "gv": "4",
   "id": "5b44a52bd73408ce4fa04912",
   "url": "/gavinpotter",
   "username": "gavinpotter"
  },
  "html": "<a href=\"https://files.gitter.im/numba/numba/rqfA/image.png\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\"><img src=\"https://files.gitter.im/numba/numba/rqfA/thumb/image.png\" alt=\"image.png\" rel=\"nofollow\"></a>",
  "id": "5b44c5f1e534eb69a5d7d8a3",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-07-10T14:42:57.618Z",
  "text": "[![image.png](https://files.gitter.im/numba/numba/rqfA/thumb/image.png)](https://files.gitter.im/numba/numba/rqfA/image.png)",
  "unread": false,
  "urls": [
   {
    "url": "https://files.gitter.im/numba/numba/rqfA/thumb/image.png"
   },
   {
    "url": "https://files.gitter.im/numba/numba/rqfA/image.png"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"gavinpotter\" class=\"mention\">@gavinpotter</span>: While fishing around Google, I discovered that the person I sit next to wrote this, and I had no idea :)  <a href=\"https://github.com/jcrist/pycallgrind\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://github.com/jcrist/pycallgrind</a>",
  "id": "5b44c7aa9b82c6701bb1feca",
  "issues": [],
  "mentions": [
   {
    "screenName": "gavinpotter",
    "userId": "5b44a52bd73408ce4fa04912",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 18,
  "sent": "2018-07-10T14:50:18.345Z",
  "text": "@gavinpotter: While fishing around Google, I discovered that the person I sit next to wrote this, and I had no idea :)  https://github.com/jcrist/pycallgrind",
  "unread": false,
  "urls": [
   {
    "url": "https://github.com/jcrist/pycallgrind"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "I have never tried it, but may be useful for you.",
  "id": "5b44c7cc7e23133ecb416beb",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-07-10T14:50:52.875Z",
  "text": "I have never tried it, but may be useful for you.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "/all Numba 0.39.0 has been released: <a href=\"https://groups.google.com/a/continuum.io/forum/#!topic/numba-users/fsAiSQ39ztg\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://groups.google.com/a/continuum.io/forum/#!topic/numba-users/fsAiSQ39ztg</a>",
  "id": "5b44df4b3d8f71623d6c6b12",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-07-10T16:31:07.025Z",
  "text": "/all Numba 0.39.0 has been released: https://groups.google.com/a/continuum.io/forum/#!topic/numba-users/fsAiSQ39ztg",
  "unread": false,
  "urls": [
   {
    "url": "https://groups.google.com/a/continuum.io/forum/#!topic/numba-users/fsAiSQ39ztg"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/gavinpotter",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/41059217?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/41059217?v=4&s=60",
   "displayName": "gavinpotter",
   "gv": "4",
   "id": "5b44a52bd73408ce4fa04912",
   "url": "/gavinpotter",
   "username": "gavinpotter"
  },
  "html": "Thanks I&#39;ll take a look, Intel VTune was a little expensive.",
  "id": "5b44e03e63042f2df3666534",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-07-10T16:35:10.594Z",
  "text": "Thanks I'll take a look, Intel VTune was a little expensive.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "Yes... :)",
  "id": "5b44e04a3572e970c185fa0b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-07-10T16:35:22.346Z",
  "text": "Yes... :)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/gavinpotter",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/41059217?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/41059217?v=4&s=60",
   "displayName": "gavinpotter",
   "gv": "4",
   "id": "5b44a52bd73408ce4fa04912",
   "url": "/gavinpotter",
   "username": "gavinpotter"
  },
  "html": "Do we report bugs here or somewhere else?",
  "id": "5b44e07a3572e970c185fa9d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-07-10T16:36:10.193Z",
  "text": "Do we report bugs here or somewhere else?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "If possible, an issue in the tracker would be preferable: <a href=\"https://github.com/numba/numba/issues\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://github.com/numba/numba/issues</a>",
  "id": "5b44e09cf166440661297aa9",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-07-10T16:36:44.439Z",
  "text": "If possible, an issue in the tracker would be preferable: https://github.com/numba/numba/issues",
  "unread": false,
  "urls": [
   {
    "url": "https://github.com/numba/numba/issues"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/lala168",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/38100009?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/38100009?v=4&s=60",
   "displayName": "lala168",
   "gv": "4",
   "id": "5ac5f004d73408ce4f947890",
   "url": "/lala168",
   "username": "lala168",
   "v": 5
  },
  "html": "Any information about when <span data-link-type=\"mention\" data-screen-name=\"jitclass\" class=\"mention\">@jitclass</span> will be available on GPU? Thanks.",
  "id": "5b47374c866e0c6b15a019d2",
  "issues": [],
  "mentions": [
   {
    "screenName": "jitclass",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 17,
  "sent": "2018-07-12T11:11:08.823Z",
  "text": "Any information about when @jitclass will be available on GPU? Thanks.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "No plan currently, but we&#39;re interested.",
  "id": "5b47b7df9a612333aa5b1287",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-07-12T20:19:43.792Z",
  "text": "No plan currently, but we're interested.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/saulshanabrook",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1186124?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1186124?v=4&s=60",
   "displayName": "Saul Shanabrook",
   "gv": "4",
   "id": "529c6f2eed5ab0b3bf04e08b",
   "url": "/saulshanabrook",
   "username": "saulshanabrook",
   "v": 182
  },
  "html": "<p>Should it be possible to overload getitem from the high level extension API?</p><p>When I try a simple example, that should take an int index and just return it:</p><pre><code><span class=\"decorator\">@overload(\"getitem\")</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">py_xnd_getitem</span><span class=\"params\">(x_t, i_t)</span>:</span>\n    print(x_t, i_t)\n    <span class=\"keyword\">if</span> isinstance(x_t, types.PyXndType) <span class=\"keyword\">and</span> isinstance(i_t, numba_types.Integer):\n\n        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getitem_impl</span><span class=\"params\">(x, i)</span>:</span>\n            <span class=\"keyword\">return</span> i\n\n        <span class=\"keyword\">return</span> getitem_impl</code></pre><p>I get <code>No definition for lowering getitem(PyXnd, int64) -&gt; int6</code>. So it seems likes it is picking up the typing for this correctly, but now the lowering.</p>",
  "id": "5b47e225897d514b3c49076b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-07-12T23:20:05.726Z",
  "text": "Should it be possible to overload getitem from the high level extension API?\n\nWhen I try a simple example, that should take an int index and just return it:\n\n```\n@overload(\"getitem\")\ndef py_xnd_getitem(x_t, i_t):\n    print(x_t, i_t)\n    if isinstance(x_t, types.PyXndType) and isinstance(i_t, numba_types.Integer):\n\n        def getitem_impl(x, i):\n            return i\n\n        return getitem_impl\n```\n\nI get `No definition for lowering getitem(PyXnd, int64) -> int6`. So it seems likes it is picking up the typing for this correctly, but now the lowering.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ehsantn",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2333645?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2333645?v=4&s=60",
   "displayName": "Ehsan Totoni",
   "gv": "4",
   "id": "56537ea416b6c7089cbbe080",
   "url": "/ehsantn",
   "username": "ehsantn",
   "v": 7
  },
  "html": "it is not supported yet: <span data-link-type=\"issue\" data-issue=\"3030\" data-issue-repo=\"numba/numba\" class=\"issue\">numba/numba#3030</span>",
  "id": "5b47e5bebd14e65d2f63afd5",
  "issues": [
   {
    "number": "3030",
    "repo": "numba/numba"
   }
  ],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-07-12T23:35:25.999Z",
  "text": "it is not supported yet: https://github.com/numba/numba/issues/3030",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ehsantn",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2333645?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2333645?v=4&s=60",
   "displayName": "Ehsan Totoni",
   "gv": "4",
   "id": "56537ea416b6c7089cbbe080",
   "url": "/ehsantn",
   "username": "ehsantn",
   "v": 7
  },
  "html": "you have to use low-level APIs",
  "id": "5b47e5c69a612333aa5b8d82",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-07-12T23:35:34.836Z",
  "text": "you have to use low-level APIs",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/saulshanabrook",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1186124?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1186124?v=4&s=60",
   "displayName": "Saul Shanabrook",
   "gv": "4",
   "id": "529c6f2eed5ab0b3bf04e08b",
   "url": "/saulshanabrook",
   "username": "saulshanabrook",
   "v": 182
  },
  "html": "Thanks for the pointer. ",
  "id": "5b47e6b566c1e833a9e2f7fa",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-07-12T23:39:33.345Z",
  "text": "Thanks for the pointer. ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-07-13T08:01:59.411Z",
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/bhvbhushan",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/25975440?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/25975440?v=4&s=60",
   "displayName": "Bhavya Bhushan",
   "gv": "4",
   "id": "5b485b70d73408ce4fa0b378",
   "url": "/bhvbhushan",
   "username": "bhvbhushan",
   "v": 1
  },
  "html": "<p>I am facing the below error while trying to use number.jit decorator over my module.<br>Can someone please help me with that, what could be the root cause of the issue??<br>&#39;def computed_dict(input_file_dict):<br>    &lt;source elided&gt;<br>    pattern = re.compile(&quot;^\\w+\\s\\d+[\\/]\\d+$&quot;)<br>    if any(merged_df[&#39;Name&#39;].apply(lambda x:pattern.match(x))):<br>    ^</p><h2>[1] During: lowering &quot;$0.20 = make_function(closure=$0.18, code=&lt;code object &lt;lambda&gt; at 0x1092648b0, file &quot;lcms_tstpl_pvd/data_model.py&quot;, line 138&gt;, name=None, defaults=None)&quot; at lcms_tstpl_pvd/data_model.py (138)</h2>\n<p>This should not have happened, a problem has occurred in Numba&#39;s internals.</p><p>Please report the error message and traceback, along with a minimal reproducer<br>at: <a href=\"https://github.com/numba/numba/issues/new\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://github.com/numba/numba/issues/new</a></p><p>If more help is needed please feel free to speak to the Numba core developers<br>directly at: <a href=\"https://gitter.im/numba/numba\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://gitter.im/numba/numba</a></p><p>Thanks in advance for your help in improving Numba!&#39;</p>",
  "id": "5b485c05d1428e5aefe3d3d4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-07-13T08:00:05.491Z",
  "text": "I am facing the below error while trying to use number.jit decorator over my module.\nCan someone please help me with that, what could be the root cause of the issue??\n'def computed_dict(input_file_dict):\n    <source elided>\n    pattern = re.compile(\"^\\w+\\s\\d+[\\/]\\d+$\")\n    if any(merged_df['Name'].apply(lambda x:pattern.match(x))):\n    ^\n[1] During: lowering \"$0.20 = make_function(closure=$0.18, code=<code object <lambda> at 0x1092648b0, file \"lcms_tstpl_pvd/data_model.py\", line 138>, name=None, defaults=None)\" at lcms_tstpl_pvd/data_model.py (138)\n-------------------------------------------------------------------------------\nThis should not have happened, a problem has occurred in Numba's internals.\n\nPlease report the error message and traceback, along with a minimal reproducer\nat: https://github.com/numba/numba/issues/new\n\nIf more help is needed please feel free to speak to the Numba core developers\ndirectly at: https://gitter.im/numba/numba\n\nThanks in advance for your help in improving Numba!'",
  "unread": false,
  "urls": [
   {
    "url": "https://github.com/numba/numba/issues/new"
   },
   {
    "url": "https://gitter.im/numba/numba"
   }
  ],
  "v": 3
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"bhvbhushan\" class=\"mention\">@bhvbhushan</span> Thanks for the report. It&#39;s probably the <code>lambda</code>, this is a known problem that the next release should be catching as an issue before it ends up in the lowering phase.",
  "id": "5b4872f2ba5f154b3b9add78",
  "issues": [],
  "mentions": [
   {
    "screenName": "bhvbhushan",
    "userId": "5b485b70d73408ce4fa0b378",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 18,
  "sent": "2018-07-13T09:37:54.508Z",
  "text": "@bhvbhushan Thanks for the report. It's probably the `lambda`, this is a known problem that the next release should be catching as an issue before it ends up in the lowering phase.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/bhvbhushan",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/25975440?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/25975440?v=4&s=60",
   "displayName": "Bhavya Bhushan",
   "gv": "4",
   "id": "5b485b70d73408ce4fa0b378",
   "url": "/bhvbhushan",
   "username": "bhvbhushan",
   "v": 1
  },
  "html": "<p><span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span> Thanks for responding. So, can you please also let me know by when you be doing the next release ?? Also, it does not work with Try-Except , so, are you planning to resolve this as well.</p><p>Because, I would really like to implement Numba in my packages</p>",
  "id": "5b4882fa26aa91065e9020f2",
  "issues": [],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 18,
  "sent": "2018-07-13T10:46:18.385Z",
  "text": "@stuartarchibald Thanks for responding. So, can you please also let me know by when you be doing the next release ?? Also, it does not work with Try-Except , so, are you planning to resolve this as well.\n\nBecause, I would really like to implement Numba in my packages",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"bhvbhushan\" class=\"mention\">@bhvbhushan</span> no problem. Next release will be in a couple of months. It will not fix the problem you have (the work required to support <code>make_function</code> is <em>HUGE</em>) it will however catch code that it can&#39;t handle and produce a better report about the problem. <code>try..except</code> is also not supported and will not be fixed in the next release. The documentation explains what is/is not supported <a href=\"http://numba.pydata.org/numba-doc/dev/reference/pysupported.html\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://numba.pydata.org/numba-doc/dev/reference/pysupported.html</a>. It is also worth noting that Numba focuses on being able to compile numerically orientated NumPy based code and to get really good performance &quot;nopython&quot; mode should be used, this page is a performance guide <a href=\"http://numba.pydata.org/numba-doc/dev/user/performance-tips.html\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://numba.pydata.org/numba-doc/dev/user/performance-tips.html</a>",
  "id": "5b4884be73026160f59d006f",
  "issues": [],
  "mentions": [
   {
    "screenName": "bhvbhushan",
    "userId": "5b485b70d73408ce4fa0b378",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 18,
  "sent": "2018-07-13T10:53:50.017Z",
  "text": "@bhvbhushan no problem. Next release will be in a couple of months. It will not fix the problem you have (the work required to support `make_function` is *HUGE*) it will however catch code that it can't handle and produce a better report about the problem. `try..except` is also not supported and will not be fixed in the next release. The documentation explains what is/is not supported http://numba.pydata.org/numba-doc/dev/reference/pysupported.html. It is also worth noting that Numba focuses on being able to compile numerically orientated NumPy based code and to get really good performance \"nopython\" mode should be used, this page is a performance guide http://numba.pydata.org/numba-doc/dev/user/performance-tips.html",
  "unread": false,
  "urls": [
   {
    "url": "http://numba.pydata.org/numba-doc/dev/reference/pysupported.html"
   },
   {
    "url": "http://numba.pydata.org/numba-doc/dev/user/performance-tips.html"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/bhvbhushan",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/25975440?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/25975440?v=4&s=60",
   "displayName": "Bhavya Bhushan",
   "gv": "4",
   "id": "5b485b70d73408ce4fa0b378",
   "url": "/bhvbhushan",
   "username": "bhvbhushan",
   "v": 1
  },
  "html": "Aah... got it<br>Thanks a lot <span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span> for explaining !!!",
  "id": "5b48859466c1e833a9e47732",
  "issues": [],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 19,
  "sent": "2018-07-13T10:57:24.346Z",
  "text": "Aah... got it\nThanks a lot @stuartarchibald for explaining !!!\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/albop",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/276777?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/276777?v=4&s=60",
   "displayName": "Pablo Winant",
   "gv": "4",
   "id": "55ef21560fc9f982beb00961",
   "url": "/albop",
   "username": "albop",
   "v": 22
  },
  "html": "One simple question: I&#39;m trying to define several implementations of one jitted function that have a variable number of arguments. For instance I would like something like <code>mysum(a,b)-&gt;a+b</code> and <code>mysum(a,b,c)-&gt;a+b+c</code>. I guess it must be feasible since <code>max()</code> seem to behave that way and is njittable. I tried <code>overload</code>, but it doesn&#39;t seem to  work.  And <code>generated_jit</code> doesn&#39;t allow for variable number of arguments. Do you have any suggestion ?",
  "id": "5b488bdcb5efcd5aeef90d5b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-07-13T11:24:12.925Z",
  "text": "One simple question: I'm trying to define several implementations of one jitted function that have a variable number of arguments. For instance I would like something like `mysum(a,b)->a+b` and `mysum(a,b,c)->a+b+c`. I guess it must be feasible since `max()` seem to behave that way and is njittable. I tried `overload`, but it doesn't seem to  work.  And `generated_jit` doesn't allow for variable number of arguments. Do you have any suggestion ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"albop\" class=\"mention\">@albop</span> can you just use <code>*args</code> ?",
  "id": "5b489cd51c0f906b144f2a56",
  "issues": [],
  "mentions": [
   {
    "screenName": "albop",
    "userId": "55ef21560fc9f982beb00961",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 19,
  "sent": "2018-07-13T12:36:37.312Z",
  "text": "@albop can you just use `*args` ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/albop",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/276777?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/276777?v=4&s=60",
   "displayName": "Pablo Winant",
   "gv": "4",
   "id": "55ef21560fc9f982beb00961",
   "url": "/albop",
   "username": "albop",
   "v": 22
  },
  "html": "But then result is not jitted ?",
  "id": "5b489d1473026160f59d4b3a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-07-13T12:37:40.533Z",
  "text": "But then result is not jitted ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/albop",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/276777?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/276777?v=4&s=60",
   "displayName": "Pablo Winant",
   "gv": "4",
   "id": "55ef21560fc9f982beb00961",
   "url": "/albop",
   "username": "albop",
   "v": 22
  },
  "html": "I tried *args in generated_jit and wit ",
  "id": "5b489d429a612333aa5d5d01",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-07-13T12:38:26.809Z",
  "text": "I tried *args in generated_jit and wit ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/albop",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/276777?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/276777?v=4&s=60",
   "displayName": "Pablo Winant",
   "gv": "4",
   "id": "55ef21560fc9f982beb00961",
   "url": "/albop",
   "username": "albop",
   "v": 22
  },
  "html": "overlo",
  "id": "5b489d45641ecc065f9f758d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-07-13T12:38:29.384Z",
  "text": "overlo",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "Do you need some specialisation based on the number of arguments ?",
  "id": "5b489d64641ecc065f9f75b4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-07-13T12:39:00.912Z",
  "text": "Do you need some specialisation based on the number of arguments ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/albop",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/276777?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/276777?v=4&s=60",
   "displayName": "Pablo Winant",
   "gv": "4",
   "id": "55ef21560fc9f982beb00961",
   "url": "/albop",
   "username": "albop",
   "v": 22
  },
  "html": "Yes",
  "id": "5b489d6fc02eb83d7c700fc9",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-07-13T12:39:11.060Z",
  "text": "Yes",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "<pre><code><span class=\"keyword\">from</span> numba <span class=\"keyword\">import</span> njit\n<span class=\"keyword\">from</span> numba.extending <span class=\"keyword\">import</span> overload\n\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">(*args)</span>:</span>\n    <span class=\"keyword\">pass</span>\n\n<span class=\"decorator\">@overload(foo)</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">overload_foo</span><span class=\"params\">(*args)</span>:</span>\n    <span class=\"keyword\">if</span> len(args) == <span class=\"number\">1</span>:\n        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">impl_one</span><span class=\"params\">(*args)</span>:</span>\n            <span class=\"keyword\">return</span> <span class=\"number\">1</span>\n        <span class=\"keyword\">return</span> impl_one\n    <span class=\"keyword\">else</span>:\n        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">impl_many</span><span class=\"params\">(*args)</span>:</span>\n            <span class=\"keyword\">return</span> <span class=\"number\">1000</span>\n        <span class=\"keyword\">return</span> impl_many\n\n<span class=\"decorator\">@njit</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">call_foo</span><span class=\"params\">(*args)</span>:</span>\n    <span class=\"keyword\">return</span> foo(*args)\n\nx = range(<span class=\"number\">10</span>)\n<span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, len(x)):\n    args = x[:y]\n    print(call_foo(*args))</code></pre>",
  "id": "5b489e1066c1e833a9e4be21",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-07-13T12:41:52.330Z",
  "text": "```\nfrom numba import njit\nfrom numba.extending import overload\n\ndef foo(*args):\n    pass\n\n@overload(foo)\ndef overload_foo(*args):\n    if len(args) == 1:\n        def impl_one(*args):\n            return 1\n        return impl_one\n    else:\n        def impl_many(*args):\n            return 1000\n        return impl_many\n\n@njit\ndef call_foo(*args):\n    return foo(*args)\n\nx = range(10)\nfor y in range(1, len(x)):\n    args = x[:y]\n    print(call_foo(*args))\n```\n\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/albop",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/276777?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/276777?v=4&s=60",
   "displayName": "Pablo Winant",
   "gv": "4",
   "id": "55ef21560fc9f982beb00961",
   "url": "/albop",
   "username": "albop",
   "v": 22
  },
  "html": "If you want the background I have an interpolation function &#39;interp(x,y,u)&#39; replicating the one in scipy and would like to extend to &#39;interp(x1,x2,y,u)&#39; and higher dimensions",
  "id": "5b489e101c0f906b144f2f9a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 20,
  "sent": "2018-07-13T12:41:52.530Z",
  "text": "If you want the background I have an interpolation function 'interp(x,y,u)' replicating the one in scipy and would like to extend to 'interp(x1,x2,y,u)' and higher dimensions",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "like that ^ ?",
  "id": "5b489e1473026160f59d4eef",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 21,
  "sent": "2018-07-13T12:41:56.090Z",
  "text": "like that ^ ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/albop",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/276777?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/276777?v=4&s=60",
   "displayName": "Pablo Winant",
   "gv": "4",
   "id": "55ef21560fc9f982beb00961",
   "url": "/albop",
   "username": "albop",
   "v": 22
  },
  "html": "Yes. Does it work ? If so I need to buy a more powerful computer. Or glasses.",
  "id": "5b489e48b5efcd5aeef94645",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 21,
  "sent": "2018-07-13T12:42:48.808Z",
  "text": "Yes. Does it work ? If so I need to buy a more powerful computer. Or glasses.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-07-13T12:43:19.149Z",
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "well, it produces <code>1, 1000, 1000, 1000....</code> for me",
  "id": "5b489e609a612333aa5d61cb",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 21,
  "sent": "2018-07-13T12:43:12.230Z",
  "text": "well, it produces `1, 1000, 1000, 1000....` for me",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/albop",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/276777?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/276777?v=4&s=60",
   "displayName": "Pablo Winant",
   "gv": "4",
   "id": "55ef21560fc9f982beb00961",
   "url": "/albop",
   "username": "albop",
   "v": 22
  },
  "html": "Ok thanks! I&#39;ll try when I get back to my computer",
  "id": "5b489e9d6534bc5d2e579b08",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 21,
  "sent": "2018-07-13T12:44:13.189Z",
  "text": "Ok thanks! I'll try when I get back to my computer",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "np",
  "id": "5b489ea3897d514b3c4ae82e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 21,
  "sent": "2018-07-13T12:44:19.490Z",
  "text": "np",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/albop",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/276777?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/276777?v=4&s=60",
   "displayName": "Pablo Winant",
   "gv": "4",
   "id": "55ef21560fc9f982beb00961",
   "url": "/albop",
   "username": "albop",
   "v": 22
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span>, I tried it it woks. The thing I hadn&#39;t understood, was that the overloading occurs in &quot;njitted space&quot;. I don&#39;t completely understand it still, but thanks to you I know how to make it work !",
  "id": "5b48a6b873026160f59d6c50",
  "issues": [],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 21,
  "sent": "2018-07-13T13:18:48.834Z",
  "text": "@stuartarchibald, I tried it it woks. The thing I hadn't understood, was that the overloading occurs in \"njitted space\". I don't completely understand it still, but thanks to you I know how to make it work !",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"albop\" class=\"mention\">@albop</span> yes, the resolution of which overloaded item to select and compile in requires that it happens in <code>njitted space</code>, calling <code>foo</code> outside of this would just call the python definition.",
  "id": "5b48a82195e03e3d7b4728aa",
  "issues": [],
  "mentions": [
   {
    "screenName": "albop",
    "userId": "55ef21560fc9f982beb00961",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 21,
  "sent": "2018-07-13T13:24:49.038Z",
  "text": "@albop yes, the resolution of which overloaded item to select and compile in requires that it happens in `njitted space`, calling `foo` outside of this would just call the python definition.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/sevagh",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/8574092?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/8574092?v=4&s=60",
   "displayName": "sevagh",
   "gv": "4",
   "id": "59331f4dd73408ce4f64764d",
   "url": "/sevagh",
   "username": "sevagh",
   "v": 4
  },
  "html": "hello. i have a python application that uses numba (installed with conda). it runs fine with conda (i.e. <code>conda env create -f environment.yml</code>). i&#39;m now trying to package it with <code>setup.py</code>, and when i run my script in a fresh virtual environment (installed with setup.py), and i run into this issue: <code>RuntimeError: cannot cache function &#39;_nsdf&#39;: no locator available for file &#39;/home/sevagh/venvs/transcribe-new/lib/python3.6/site-packages/transcribe-0.0.1-py3.6.egg/transcribe/pitch.py&#39;</code>. quick research shows a possible permission error for the cache file. any tips would be appreciated",
  "id": "5b4a0eef1c0f906b1452818a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 20,
  "sent": "2018-07-14T14:55:43.186Z",
  "text": "hello. i have a python application that uses numba (installed with conda). it runs fine with conda (i.e. `conda env create -f environment.yml`). i'm now trying to package it with `setup.py`, and when i run my script in a fresh virtual environment (installed with setup.py), and i run into this issue: `RuntimeError: cannot cache function '_nsdf': no locator available for file '/home/sevagh/venvs/transcribe-new/lib/python3.6/site-packages/transcribe-0.0.1-py3.6.egg/transcribe/pitch.py'`. quick research shows a possible permission error for the cache file. any tips would be appreciated",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/sevagh",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/8574092?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/8574092?v=4&s=60",
   "displayName": "sevagh",
   "gv": "4",
   "id": "59331f4dd73408ce4f64764d",
   "url": "/sevagh",
   "username": "sevagh",
   "v": 4
  },
  "html": "<blockquote>\nIf true, cache enables a file-based cache to shorten compilation times when the function was already compiled in a previous invocation. The cache is maintained in the <strong>pycache</strong> subdirectory of the directory containing the source file; if the current user is not allowed to write to it, though, it falls back to a platform-specific user-wide cache directory (such as $HOME/.cache/numba on Unix platforms).</blockquote>\n",
  "id": "5b4a1025ba5f154b3b9ed5f8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 20,
  "sent": "2018-07-14T15:00:53.757Z",
  "text": ">If true, cache enables a file-based cache to shorten compilation times when the function was already compiled in a previous invocation. The cache is maintained in the __pycache__ subdirectory of the directory containing the source file; if the current user is not allowed to write to it, though, it falls back to a platform-specific user-wide cache directory (such as $HOME/.cache/numba on Unix platforms).",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/sevagh",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/8574092?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/8574092?v=4&s=60",
   "displayName": "sevagh",
   "gv": "4",
   "id": "59331f4dd73408ce4f64764d",
   "url": "/sevagh",
   "username": "sevagh",
   "v": 4
  },
  "html": "the user i&#39;m running as should have permission everywhere in <code>~</code> where the virtual env is",
  "id": "5b4a110e9a612333aa60b23f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 20,
  "sent": "2018-07-14T15:04:46.865Z",
  "text": "the user i'm running as should have permission everywhere in `~` where the virtual env is",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/sevagh",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/8574092?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/8574092?v=4&s=60",
   "displayName": "sevagh",
   "gv": "4",
   "id": "59331f4dd73408ce4f64764d",
   "url": "/sevagh",
   "username": "sevagh",
   "v": 4
  },
  "html": "<p>i put some print statements in numba/caching.py: ```(transcribe) sevagh:transcribe $ transcribe</p><p>&lt;class &#39;numba.caching._UserProvidedCacheLocator&#39;&gt;       &lt;function _nsdf at 0x7fd002447048&gt;     /home/sevagh/venvs/transcribe/lib/python3.6/site-packages/<a href=\"http://transcribe-0.0.1-py3.6.egg/transcribe/pitch.py\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">transcribe-0.0.1-py3.6.egg/transcribe/pitch.py</a>       None</p><p>&lt;class &#39;numba.caching._InTreeCacheLocator&#39;&gt;     &lt;function _nsdf at 0x7fd002447048&gt;     /home/sevagh/venvs/transcribe/lib/python3.6/site-packages/<a href=\"http://transcribe-0.0.1-py3.6.egg/transcribe/pitch.py\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">transcribe-0.0.1-py3.6.egg/transcribe/pitch.py</a>       None</p><p>&lt;class &#39;numba.caching._UserWideCacheLocator&#39;&gt;   &lt;function _nsdf at 0x7fd002447048&gt;     /home/sevagh/venvs/transcribe/lib/python3.6/site-packages/<a href=\"http://transcribe-0.0.1-py3.6.egg/transcribe/pitch.py\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">transcribe-0.0.1-py3.6.egg/transcribe/pitch.py</a>       None</p><p>&lt;class &#39;numba.caching._IPythonCacheLocator&#39;&gt;    &lt;function _nsdf at 0x7fd002447048&gt;     /home/sevagh/venvs/transcribe/lib/python3.6/site-packages/<a href=\"http://transcribe-0.0.1-py3.6.egg/transcribe/pitch.py\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">transcribe-0.0.1-py3.6.egg/transcribe/pitch.py</a>       None<br>```</p>",
  "id": "5b4a1683582aaa630769fae6",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 20,
  "sent": "2018-07-14T15:28:03.736Z",
  "text": "i put some print statements in numba/caching.py: ```(transcribe) sevagh:transcribe $ transcribe\n<class 'numba.caching._UserProvidedCacheLocator'>       <function _nsdf at 0x7fd002447048>     /home/sevagh/venvs/transcribe/lib/python3.6/site-packages/transcribe-0.0.1-py3.6.egg/transcribe/pitch.py       None\n<class 'numba.caching._InTreeCacheLocator'>     <function _nsdf at 0x7fd002447048>     /home/sevagh/venvs/transcribe/lib/python3.6/site-packages/transcribe-0.0.1-py3.6.egg/transcribe/pitch.py       None\n<class 'numba.caching._UserWideCacheLocator'>   <function _nsdf at 0x7fd002447048>     /home/sevagh/venvs/transcribe/lib/python3.6/site-packages/transcribe-0.0.1-py3.6.egg/transcribe/pitch.py       None\n<class 'numba.caching._IPythonCacheLocator'>    <function _nsdf at 0x7fd002447048>     /home/sevagh/venvs/transcribe/lib/python3.6/site-packages/transcribe-0.0.1-py3.6.egg/transcribe/pitch.py       None\n```",
  "unread": false,
  "urls": [
   {
    "url": "http://transcribe-0.0.1-py3.6.egg/transcribe/pitch.py"
   },
   {
    "url": "http://transcribe-0.0.1-py3.6.egg/transcribe/pitch.py"
   },
   {
    "url": "http://transcribe-0.0.1-py3.6.egg/transcribe/pitch.py"
   },
   {
    "url": "http://transcribe-0.0.1-py3.6.egg/transcribe/pitch.py"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/sevagh",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/8574092?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/8574092?v=4&s=60",
   "displayName": "sevagh",
   "gv": "4",
   "id": "59331f4dd73408ce4f64764d",
   "url": "/sevagh",
   "username": "sevagh",
   "v": 4
  },
  "html": "<p>ah, i see. the egg is being installed unzipped, so the file doesn&#39;t exist and i&#39;m hitting <a href=\"mailto:```@classmethod\" rel=\"nofollow\">```@classmethod</a><br>def from_function(cls, py_func, py_file):<br>    if not os.path.exists(py_file):</p><pre><code>    <span class=\"comment\"># Perhaps a placeholder (e.g. \"&lt;ipython-XXX&gt;\")</span>\n    <span class=\"built_in\">print</span>(<span class=\"string\">'holy shit!'</span>)\n    <span class=\"built_in\">return</span></code></pre><p>```</p>",
  "id": "5b4a17c1b5efcd5aeefcb0cf",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 21,
  "sent": "2018-07-14T15:33:21.168Z",
  "text": "ah, i see. the egg is being installed unzipped, so the file doesn't exist and i'm hitting ```@classmethod\ndef from_function(cls, py_func, py_file):\n    if not os.path.exists(py_file):\n        # Perhaps a placeholder (e.g. \"<ipython-XXX>\")\n        print('holy shit!')\n        return\n```",
  "unread": false,
  "urls": [
   {
    "url": "mailto:```@classmethod"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"sevagh\" class=\"mention\">@sevagh</span>: Can you open a github issue on this?  This will let us track the problem more easily.",
  "id": "5b4a2818582aaa63076a2228",
  "issues": [],
  "mentions": [
   {
    "screenName": "sevagh",
    "userId": "59331f4dd73408ce4f64764d",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 21,
  "sent": "2018-07-14T16:43:04.573Z",
  "text": "@sevagh: Can you open a github issue on this?  This will let us track the problem more easily.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/mwickert",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/12569094?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/12569094?v=4&s=60",
   "displayName": "Mark Wickert",
   "gv": "4",
   "id": "5b4a5d7cd73408ce4fa0e470",
   "url": "/mwickert",
   "username": "mwickert"
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"sklam\" class=\"mention\">@sklam</span> : Are you still available at the SciPy sprints?",
  "id": "5b4a5edd897d514b3c4ee62b",
  "issues": [],
  "mentions": [
   {
    "screenName": "sklam",
    "userId": "55b689f50fc9f982beab2a24",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 22,
  "sent": "2018-07-14T20:36:45.690Z",
  "text": "@sklam : Are you still available at the SciPy sprints?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"mwickert\" class=\"mention\">@mwickert</span>: Siu and I had to leave early today.",
  "id": "5b4a6e00641ecc065fa395f3",
  "issues": [],
  "mentions": [
   {
    "screenName": "mwickert",
    "userId": "5b4a5d7cd73408ce4fa0e470",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 22,
  "sent": "2018-07-14T21:41:20.408Z",
  "text": "@mwickert: Siu and I had to leave early today.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/jni",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/492549?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/492549?v=4&s=60",
   "displayName": "Juan Nunez-Iglesias",
   "gv": "4",
   "id": "53815253048862e761fa28b2",
   "url": "/jni",
   "username": "jni",
   "v": 42
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"sklam\" class=\"mention\">@sklam</span> <span data-link-type=\"mention\" data-screen-name=\"seibert\" class=\"mention\">@seibert</span> Are you guys back tomorrow or not? Devastated to miss you!",
  "id": "5b4a7c1cb5efcd5aeefd7756",
  "issues": [],
  "mentions": [
   {
    "screenName": "sklam",
    "userId": "55b689f50fc9f982beab2a24",
    "userIds": []
   },
   {
    "screenName": "seibert",
    "userId": "55b68af40fc9f982beab2a3c",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 23,
  "sent": "2018-07-14T22:41:32.126Z",
  "text": "@sklam @seibert Are you guys back tomorrow or not? Devastated to miss you!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/mwickert",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/12569094?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/12569094?v=4&s=60",
   "displayName": "Mark Wickert",
   "gv": "4",
   "id": "5b4a5d7cd73408ce4fa0e470",
   "url": "/mwickert",
   "username": "mwickert"
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"sklam\" class=\"mention\">@sklam</span>: Leaving for airport at 9:30 AM tomorrow, so later",
  "id": "5b4a8175866e0c6b15a84a84",
  "issues": [],
  "mentions": [
   {
    "screenName": "sklam",
    "userId": "55b689f50fc9f982beab2a24",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 23,
  "sent": "2018-07-14T23:04:21.416Z",
  "text": "@sklam: Leaving for airport at 9:30 AM tomorrow, so later",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"jni\" class=\"mention\">@jni</span>: I was thinking of coming back out tomorrow.  Will you still be around?",
  "id": "5b4a844d1c0f906b14537631",
  "issues": [],
  "mentions": [
   {
    "screenName": "jni",
    "userId": "53815253048862e761fa28b2",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 23,
  "sent": "2018-07-14T23:16:29.540Z",
  "text": "@jni: I was thinking of coming back out tomorrow.  Will you still be around?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/jni",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/492549?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/492549?v=4&s=60",
   "displayName": "Juan Nunez-Iglesias",
   "gv": "4",
   "id": "53815253048862e761fa28b2",
   "url": "/jni",
   "username": "jni",
   "v": 42
  },
  "html": "Yes I will be around and would very much like to discuss numba-y things!!!",
  "id": "5b4a851a6534bc5d2e5bd5bd",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 22,
  "sent": "2018-07-14T23:19:54.748Z",
  "text": "Yes I will be around and would very much like to discuss numba-y things!!!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/jni",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/492549?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/492549?v=4&s=60",
   "displayName": "Juan Nunez-Iglesias",
   "gv": "4",
   "id": "53815253048862e761fa28b2",
   "url": "/jni",
   "username": "jni",
   "v": 42
  },
  "html": "there&#39;s the world cup final 10-12, I&#39;ll watch that at Gabriel&#39;s, happy to continue chatting over that, or we can chat before or after that",
  "id": "5b4a8541c02eb83d7c745d90",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 22,
  "sent": "2018-07-14T23:20:33.044Z",
  "text": "there's the world cup final 10-12, I'll watch that at Gabriel's, happy to continue chatting over that, or we can chat before or after that",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/vyasr",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/1538165?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/1538165?v=4&s=60",
   "displayName": "vyasr",
   "gv": "4",
   "id": "5a26ee18d73408ce4f81e2f6",
   "url": "/vyasr",
   "username": "vyasr",
   "v": 7
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"seibert\" class=\"mention\">@seibert</span> if you&#39;ll be around today i&#39;d love to chat! i missed you guys yesterday but would love to chat a bit if you&#39;re around",
  "id": "5b4b5e086534bc5d2e5df9af",
  "issues": [],
  "mentions": [
   {
    "screenName": "seibert",
    "userId": "55b68af40fc9f982beab2a3c",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 21,
  "sent": "2018-07-15T14:45:28.884Z",
  "text": "@seibert if you'll be around today i'd love to chat! i missed you guys yesterday but would love to chat a bit if you're around",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "I&#39;m planning to be at the sprint around 1:30pm.  Will post here when I get there.",
  "id": "5b4b7276866e0c6b15abb7b8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 21,
  "sent": "2018-07-15T16:12:38.906Z",
  "text": "I'm planning to be at the sprint around 1:30pm.  Will post here when I get there.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/jni",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/492549?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/492549?v=4&s=60",
   "displayName": "Juan Nunez-Iglesias",
   "gv": "4",
   "id": "53815253048862e761fa28b2",
   "url": "/jni",
   "username": "jni",
   "v": 42
  },
  "html": "thanks Stan, looking forward to seeing you!",
  "id": "5b4b72a7866e0c6b15abb902",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 21,
  "sent": "2018-07-15T16:13:27.680Z",
  "text": "thanks Stan, looking forward to seeing you!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "ok, hanging out in room 103",
  "id": "5b4b96b81c0f906b14579fe1",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 22,
  "sent": "2018-07-15T18:47:20.996Z",
  "text": "ok, hanging out in room 103",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/jni",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/492549?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/492549?v=4&s=60",
   "displayName": "Juan Nunez-Iglesias",
   "gv": "4",
   "id": "53815253048862e761fa28b2",
   "url": "/jni",
   "username": "jni",
   "v": 42
  },
  "html": "thanks, down there in ~5-10min",
  "id": "5b4b96ff582aaa63076db6b2",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 22,
  "sent": "2018-07-15T18:48:31.991Z",
  "text": "thanks, down there in ~5-10min",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/Melisius",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/11976167?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/11976167?v=4&s=60",
   "displayName": "Erik Kjellgren",
   "gv": "4",
   "id": "5af6f586d73408ce4f991248",
   "url": "/Melisius",
   "username": "Melisius",
   "v": 1
  },
  "html": "Is there away to get thread_id under prange loop? I have a custom random number generator I would like to be able to use in parallel. I think the easiest way is to have a generator per thread, but then I need to know thread_ids",
  "id": "5b4de2708fe2780689bcceca",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 21,
  "sent": "2018-07-17T12:34:56.728Z",
  "text": "Is there away to get thread_id under prange loop? I have a custom random number generator I would like to be able to use in parallel. I think the easiest way is to have a generator per thread, but then I need to know thread_ids",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "there is no way to get that now, but I think that would be a useful thing to expose, although we would need a corresponding API to get the size of the thread pool",
  "id": "5b4e095655a7e23c014aa234",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 22,
  "sent": "2018-07-17T15:20:54.890Z",
  "text": "there is no way to get that now, but I think that would be a useful thing to expose, although we would need a corresponding API to get the size of the thread pool",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"Melisius\" class=\"mention\">@Melisius</span>: Can you open an issue suggesting this on Github?  <span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span> is going to be doing some serious refactoring to our threadpool, and this might be something he can incorporate into the rewrite.",
  "id": "5b4e097dcad358639d5f68b9",
  "issues": [],
  "mentions": [
   {
    "screenName": "Melisius",
    "userId": "5af6f586d73408ce4f991248",
    "userIds": []
   },
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 22,
  "sent": "2018-07-17T15:21:33.702Z",
  "text": "@Melisius: Can you open an issue suggesting this on Github?  @stuartarchibald is going to be doing some serious refactoring to our threadpool, and this might be something he can incorporate into the rewrite.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "Or at least think about how it would work, given that we want to support both generic pthreads and TBB for the threading backend",
  "id": "5b4e0995ecc1f82e2fbf3006",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 22,
  "sent": "2018-07-17T15:21:57.926Z",
  "text": "Or at least think about how it would work, given that we want to support both generic pthreads and TBB for the threading backend",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "In case anyone is curious about supporting AMD GPUs on Linux: <a href=\"https://groups.google.com/a/continuum.io/forum/#!topic/numba-users/Bhon0Qw-GZA\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://groups.google.com/a/continuum.io/forum/#!topic/numba-users/Bhon0Qw-GZA</a>",
  "id": "5b4e327bad8d085553a9d10f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 22,
  "sent": "2018-07-17T18:16:27.393Z",
  "text": "In case anyone is curious about supporting AMD GPUs on Linux: https://groups.google.com/a/continuum.io/forum/#!topic/numba-users/Bhon0Qw-GZA",
  "unread": false,
  "urls": [
   {
    "url": "https://groups.google.com/a/continuum.io/forum/#!topic/numba-users/Bhon0Qw-GZA"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/saulshanabrook",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1186124?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1186124?v=4&s=60",
   "displayName": "Saul Shanabrook",
   "gv": "4",
   "id": "529c6f2eed5ab0b3bf04e08b",
   "url": "/saulshanabrook",
   "username": "saulshanabrook",
   "v": 182
  },
  "html": "Anyone know easiest way to write an intrinsic that convert python strings to  c strings? I am getting lowering error <code>Cannot cast str to CString:</code>. I see there is an Opaque numba <code>str</code>type which seems to be what is inferred when I type a literal string in. I found the  <code>pyapi.string_as_string</code>function, but it looks like that takes in a pyobject type? Will that work on a <code>str</code> type?",
  "id": "5b50f601f9ffc4664bece025",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-07-19T20:35:13.735Z",
  "text": "Anyone know easiest way to write an intrinsic that convert python strings to  c strings? I am getting lowering error `Cannot cast str to CString:`. I see there is an Opaque numba `str`type which seems to be what is inferred when I type a literal string in. I found the  `pyapi.string_as_string `function, but it looks like that takes in a pyobject type? Will that work on a `str` type?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"saulshanabrook\" class=\"mention\">@saulshanabrook</span>  in the <code>codegen</code> section.  use <code>context.insert_const_string</code>, which is from <code>numba/targets/base.py</code>",
  "id": "5b50f8dce06d7e74098d3241",
  "issues": [],
  "mentions": [
   {
    "screenName": "saulshanabrook",
    "userId": "529c6f2eed5ab0b3bf04e08b",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 17,
  "sent": "2018-07-19T20:47:24.625Z",
  "text": "@saulshanabrook  in the `codegen` section.  use `context.insert_const_string`, which is from `numba/targets/base.py`",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/saulshanabrook",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1186124?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1186124?v=4&s=60",
   "displayName": "Saul Shanabrook",
   "gv": "4",
   "id": "529c6f2eed5ab0b3bf04e08b",
   "url": "/saulshanabrook",
   "username": "saulshanabrook",
   "v": 182
  },
  "html": "Thank you, that is helpful.",
  "id": "5b53846232fa1b7408592cb8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-07-21T19:07:14.675Z",
  "text": "Thank you, that is helpful.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/extraymond",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/707176?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/707176?v=4&s=60",
   "displayName": "extraymond",
   "gv": "4",
   "id": "5669689c16b6c7089cbe2cb4",
   "url": "/extraymond",
   "username": "extraymond",
   "v": 16
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"seibert\" class=\"mention\">@seibert</span> This awesome! Is this done via hsa or using hip to convert cuda features?",
  "id": "5b55a856f477e4664ab7348c",
  "issues": [],
  "mentions": [
   {
    "screenName": "seibert",
    "userId": "55b68af40fc9f982beab2a3c",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 14,
  "sent": "2018-07-23T10:05:10.868Z",
  "text": "@seibert This awesome! Is this done via hsa or using hip to convert cuda features?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"extraymond\" class=\"mention\">@extraymond</span> :) It does it via HSA. The <code>roctools</code> package contains a library that is linked against an LLVM with AMDGCN target support, generated IR is compiled down to machine code with that.",
  "id": "5b55b48c9ddf5f4aad01ba55",
  "issues": [],
  "mentions": [
   {
    "screenName": "extraymond",
    "userId": "5669689c16b6c7089cbe2cb4",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 14,
  "sent": "2018-07-23T10:57:16.745Z",
  "text": "@extraymond :) It does it via HSA. The `roctools` package contains a library that is linked against an LLVM with AMDGCN target support, generated IR is compiled down to machine code with that.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/extraymond",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/707176?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/707176?v=4&s=60",
   "displayName": "extraymond",
   "gv": "4",
   "id": "5669689c16b6c7089cbe2cb4",
   "url": "/extraymond",
   "username": "extraymond",
   "v": 16
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span> Thx!!! What a great news :)",
  "id": "5b55b8aa9ddf5f4aad01c4f7",
  "issues": [],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 14,
  "sent": "2018-07-23T11:14:50.960Z",
  "text": "@stuartarchibald Thx!!! What a great news :)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 10
  },
  "html": "Has anyone here created a C callback for <code>scipy.integrate.solve_ivp</code> and knows what the signature should be for a multi-variable differential equation?",
  "id": "5b55cf19c579673e6b8bbbbd",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-07-23T12:50:33.376Z",
  "text": "Has anyone here created a C callback for `scipy.integrate.solve_ivp` and knows what the signature should be for a multi-variable differential equation?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-07-23T12:51:24.195Z",
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 10
  },
  "html": "Also, does anyone know how to get the array pointer from an array for a <code>cfunc</code> output?",
  "id": "5b55cf4563cf1636bde749e3",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-07-23T12:51:17.428Z",
  "text": "Also, does anyone know how to get the array pointer from an array for a `cfunc` output?",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "Do you mean the .data attribute on the NumPy array?",
  "id": "5b55cf7bc86c4f0b472ae4c4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-07-23T12:52:11.832Z",
  "text": "Do you mean the .data attribute on the NumPy array?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 10
  },
  "html": "Possibly, if that&#39;ll give me back the C pointer to the start of the array, then yes.",
  "id": "5b55cf9763cf1636bde74a9c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-07-23T12:52:39.430Z",
  "text": "Possibly, if that'll give me back the C pointer to the start of the array, then yes.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "yeah, I think that&#39;s what you are looking for",
  "id": "5b55cfa2c86c4f0b472ae50d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-07-23T12:52:50.489Z",
  "text": "yeah, I think that's what you are looking for",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 10
  },
  "html": "Thanks, <span data-link-type=\"mention\" data-screen-name=\"seibert\" class=\"mention\">@seibert</span>!",
  "id": "5b55cfd14b880b3e6a4263dd",
  "issues": [],
  "mentions": [
   {
    "screenName": "seibert",
    "userId": "55b68af40fc9f982beab2a3c",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 14,
  "sent": "2018-07-23T12:53:37.301Z",
  "text": "Thanks, @seibert!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/abirmar",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/39221115?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/39221115?v=4&s=60",
   "displayName": "abirmar",
   "gv": "4",
   "id": "5af71328d73408ce4f991587",
   "url": "/abirmar",
   "username": "abirmar",
   "v": 4
  },
  "html": "Hey guys",
  "id": "5b55d6f0c86c4f0b472afee0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-07-23T13:24:00.199Z",
  "text": "Hey guys",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/abirmar",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/39221115?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/39221115?v=4&s=60",
   "displayName": "abirmar",
   "gv": "4",
   "id": "5af71328d73408ce4f991587",
   "url": "/abirmar",
   "username": "abirmar",
   "v": 4
  },
  "html": "I have a little question regarding the correct signature in <span data-link-type=\"mention\" data-screen-name=\"numba\" class=\"mention\">@numba</span>.jit(...)",
  "id": "5b55d70eb2411177a2663c49",
  "issues": [],
  "mentions": [
   {
    "screenName": "numba",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 12,
  "sent": "2018-07-23T13:24:30.627Z",
  "text": "I have a little question regarding the correct signature in @numba.jit(...)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-07-23T13:25:28.921Z",
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/abirmar",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/39221115?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/39221115?v=4&s=60",
   "displayName": "abirmar",
   "gv": "4",
   "id": "5af71328d73408ce4f991587",
   "url": "/abirmar",
   "username": "abirmar",
   "v": 4
  },
  "html": "<pre><code><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span><span class=\"params\">(array, df, floor)</span>:</span>\n   {...}</code></pre>",
  "id": "5b55d732f02a0977a3f436e5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-07-23T13:25:06.762Z",
  "text": "```\ndef func(array, df, floor):\n   {...}\n```",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/abirmar",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/39221115?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/39221115?v=4&s=60",
   "displayName": "abirmar",
   "gv": "4",
   "id": "5af71328d73408ce4f991587",
   "url": "/abirmar",
   "username": "abirmar",
   "v": 4
  },
  "html": "Where array is a np.array, df is a float and floor is normally a float too - but I allow it to be <code>None</code>.",
  "id": "5b55d771c579673e6b8bd9bc",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-07-23T13:26:09.941Z",
  "text": "Where array is a np.array, df is a float and floor is normally a float too - but I allow it to be `None`.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/abirmar",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/39221115?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/39221115?v=4&s=60",
   "displayName": "abirmar",
   "gv": "4",
   "id": "5af71328d73408ce4f991587",
   "url": "/abirmar",
   "username": "abirmar",
   "v": 4
  },
  "html": "Since <code>floor = 0</code> is not necessarily a good idea in that function.",
  "id": "5b55d78f9ddf5f4aad0228d1",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-07-23T13:26:39.812Z",
  "text": "Since `floor = 0` is not necessarily a good idea in that function.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/abirmar",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/39221115?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/39221115?v=4&s=60",
   "displayName": "abirmar",
   "gv": "4",
   "id": "5af71328d73408ce4f991587",
   "url": "/abirmar",
   "username": "abirmar",
   "v": 4
  },
  "html": "Now if I want to jit this, how would I do that?",
  "id": "5b55d79cb2411177a2663dbf",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-07-23T13:26:52.601Z",
  "text": "Now if I want to jit this, how would I do that?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/abirmar",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/39221115?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/39221115?v=4&s=60",
   "displayName": "abirmar",
   "gv": "4",
   "id": "5af71328d73408ce4f991587",
   "url": "/abirmar",
   "username": "abirmar",
   "v": 4
  },
  "html": "My decorator so far is <pre><code>@numba.jit('float64[<span class=\"link_label\">:</span>](<span class=\"link_url\">float64[:], float64</span>)', nopython=True)</code></pre>",
  "id": "5b55d7bac331e03552109ba6",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-07-23T13:27:22.159Z",
  "text": "My decorator so far is \n```\n@numba.jit('float64[:](float64[:], float64)', nopython=True)  \n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/abirmar",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/39221115?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/39221115?v=4&s=60",
   "displayName": "abirmar",
   "gv": "4",
   "id": "5af71328d73408ce4f991587",
   "url": "/abirmar",
   "username": "abirmar",
   "v": 4
  },
  "html": "But I&#39;m missing the last argument of course.<br>Ideas?",
  "id": "5b55d7cff02a0977a3f43867",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-07-23T13:27:43.608Z",
  "text": "But I'm missing the last argument of course.\nIdeas?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/abirmar",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/39221115?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/39221115?v=4&s=60",
   "displayName": "abirmar",
   "gv": "4",
   "id": "5af71328d73408ce4f991587",
   "url": "/abirmar",
   "username": "abirmar",
   "v": 4
  },
  "html": "And... next question, what to do about this:<pre><code>cannot determine Numba <span class=\"keyword\">type</span> <span class=\"keyword\">of</span> &lt;<span class=\"keyword\">class</span> <span class=\"string\">'numpy.ufunc'</span>&gt;</code></pre>",
  "id": "5b55d91af9ffc4664bf824b0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-07-23T13:33:14.022Z",
  "text": "And... next question, what to do about this:\n\n```\ncannot determine Numba type of <class 'numpy.ufunc'>\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"abirmar\" class=\"mention\">@abirmar</span> Q1. Probably best to let Numba do the typing for you, just omit the signatures and Numba will work out what to do depending on what you pass in. To handle <code>None</code>, I think <a href=\"http://numba.pydata.org/numba-doc/dev/user/generated-jit.html\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://numba.pydata.org/numba-doc/dev/user/generated-jit.html</a> should work, the same can also be achieved with <code>numba.extending.overload</code> if you so wish.",
  "id": "5b55da88f10ffa0b48a78d3f",
  "issues": [],
  "mentions": [
   {
    "screenName": "abirmar",
    "userId": "5af71328d73408ce4f991587",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 13,
  "sent": "2018-07-23T13:39:20.409Z",
  "text": "@abirmar Q1. Probably best to let Numba do the typing for you, just omit the signatures and Numba will work out what to do depending on what you pass in. To handle `None`, I think http://numba.pydata.org/numba-doc/dev/user/generated-jit.html should work, the same can also be achieved with `numba.extending.overload` if you so wish.",
  "unread": false,
  "urls": [
   {
    "url": "http://numba.pydata.org/numba-doc/dev/user/generated-jit.html"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "<pre><code><span class=\"keyword\">from</span> numba <span class=\"keyword\">import</span> njit, generated_jit\n<span class=\"keyword\">import</span> numba\n<span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np\n\narray = np.zeros(<span class=\"number\">10</span>)\ndf = <span class=\"number\">5.</span>\n\n<span class=\"decorator\">@generated_jit(nopython=True)</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span><span class=\"params\">(array, df, floor)</span>:</span>\n    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> isinstance(floor, numba.types.misc.NoneType):\n        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">impl</span><span class=\"params\">(array, df, floor)</span>:</span>\n            <span class=\"keyword\">return</span> array[<span class=\"number\">0</span>] + df + floor\n    <span class=\"keyword\">else</span>:\n        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">impl</span><span class=\"params\">(array, df, floor)</span>:</span>\n            <span class=\"keyword\">return</span> array[<span class=\"number\">0</span>] + df \n    <span class=\"keyword\">return</span> impl\n\n\nprint(func(array, df, <span class=\"keyword\">None</span>))\nprint(func(array, df, <span class=\"number\">7</span>))</code></pre>",
  "id": "5b55da8fe06d7e7409987aa0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-07-23T13:39:27.209Z",
  "text": "```\nfrom numba import njit, generated_jit\nimport numba\nimport numpy as np\n\narray = np.zeros(10)\ndf = 5.\n\n@generated_jit(nopython=True)\ndef func(array, df, floor):\n    if not isinstance(floor, numba.types.misc.NoneType):\n        def impl(array, df, floor):\n            return array[0] + df + floor\n    else:\n        def impl(array, df, floor):\n            return array[0] + df \n    return impl\n\n\nprint(func(array, df, None))\nprint(func(array, df, 7))\n```\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "gives 5 and then 12 for me.",
  "id": "5b55daa526bfd636be422dbf",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-07-23T13:39:49.752Z",
  "text": "gives 5 and then 12 for me.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "Q2. Please could you provide some context?",
  "id": "5b55dac5c579673e6b8be384",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-07-23T13:40:21.581Z",
  "text": "Q2. Please could you provide some context?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/abirmar",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/39221115?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/39221115?v=4&s=60",
   "displayName": "abirmar",
   "gv": "4",
   "id": "5af71328d73408ce4f991587",
   "url": "/abirmar",
   "username": "abirmar",
   "v": 4
  },
  "html": "Thanks. Regarding Q2, that came from an error in front of the screen, so... calling that off for now. :)",
  "id": "5b55db4ab2411177a2664b48",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-07-23T13:42:34.387Z",
  "text": "Thanks. Regarding Q2, that came from an error in front of the screen, so... calling that off for now. :)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/abirmar",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/39221115?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/39221115?v=4&s=60",
   "displayName": "abirmar",
   "gv": "4",
   "id": "5af71328d73408ce4f991587",
   "url": "/abirmar",
   "username": "abirmar",
   "v": 4
  },
  "html": "What type would array have in the above code? I get an error when I&#39;m trying to call <code>array.shape</code> inside of it",
  "id": "5b55dbc4c86c4f0b472b0fd9",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-07-23T13:44:36.568Z",
  "text": "What type would array have in the above code? I get an error when I'm trying to call `array.shape` inside of it",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "inside where?, the impl closure or the outer func ?",
  "id": "5b55dc1df02a0977a3f4460a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-07-23T13:46:05.242Z",
  "text": "inside where?, the impl closure or the outer func ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/abirmar",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/39221115?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/39221115?v=4&s=60",
   "displayName": "abirmar",
   "gv": "4",
   "id": "5af71328d73408ce4f991587",
   "url": "/abirmar",
   "username": "abirmar",
   "v": 4
  },
  "html": "<p><code>The decorated function is called with the Numba types of the arguments, not their values.</code></p><p>... okay. </p>",
  "id": "5b55dc1e05e1cc3553056f55",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-07-23T13:46:06.592Z",
  "text": "`The decorated function is called with the Numba types of the arguments, not their values.`\n\n... okay. ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/abirmar",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/39221115?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/39221115?v=4&s=60",
   "displayName": "abirmar",
   "gv": "4",
   "id": "5af71328d73408ce4f991587",
   "url": "/abirmar",
   "username": "abirmar",
   "v": 4
  },
  "html": "Yes, it seemed like it wouldn&#39;t be a numpy array anymore",
  "id": "5b55dc4005e1cc3553056faa",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-07-23T13:46:40.926Z",
  "text": "Yes, it seemed like it wouldn't be a numpy array anymore",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "its the typing mechanism equivalent",
  "id": "5b55dc57b2411177a2664ef7",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-07-23T13:47:03.841Z",
  "text": "its the typing mechanism equivalent",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "so the code can be compiled to a type specific implementation the types all have to be figured out, in the <code>func</code> scope, the args have been parsed and their numba typing system equivalent types are in use",
  "id": "5b55dc9526bfd636be423699",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-07-23T13:48:05.837Z",
  "text": "so the code can be compiled to a type specific implementation the types all have to be figured out, in the `func` scope, the args have been parsed and their numba typing system equivalent types are in use",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "as the typing is being executed in python you can use whatever tools you like to poke around and see what&#39;s going on",
  "id": "5b55dccd05e1cc3553057451",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-07-23T13:49:01.822Z",
  "text": "as the typing is being executed in python you can use whatever tools you like to poke around and see what's going on",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/abirmar",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/39221115?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/39221115?v=4&s=60",
   "displayName": "abirmar",
   "gv": "4",
   "id": "5af71328d73408ce4f991587",
   "url": "/abirmar",
   "username": "abirmar",
   "v": 4
  },
  "html": "okay, I see. Then I&#39;ll do that now. Thanks for your help!",
  "id": "5b55dce4ee530e4aac90a385",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-07-23T13:49:24.130Z",
  "text": "okay, I see. Then I'll do that now. Thanks for your help!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "alternatively switch on e.g. <a href=\"http://numba.pydata.org/numba-doc/dev/reference/envvars.html#envvar-NUMBA_DEBUG_TYPEINFER\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://numba.pydata.org/numba-doc/dev/reference/envvars.html#envvar-NUMBA_DEBUG_TYPEINFER</a>",
  "id": "5b55dcecc331e0355210b134",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-07-23T13:49:32.464Z",
  "text": "alternatively switch on e.g. http://numba.pydata.org/numba-doc/dev/reference/envvars.html#envvar-NUMBA_DEBUG_TYPEINFER",
  "unread": false,
  "urls": [
   {
    "url": "http://numba.pydata.org/numba-doc/dev/reference/envvars.html#envvar-NUMBA_DEBUG_TYPEINFER"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/fzimmermann89",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/5222871?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/5222871?v=4&s=60",
   "displayName": "Felix",
   "gv": "4",
   "id": "55f482ef0fc9f982beb07ff6",
   "url": "/fzimmermann89",
   "username": "fzimmermann89",
   "v": 2
  },
  "html": "hi, I am wondering if it&#39;s somehow possible to call cuda math api functions within a numba cuda kernel",
  "id": "5b561134f10ffa0b48a85470",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-07-23T17:32:36.889Z",
  "text": "hi, I am wondering if it's somehow possible to call cuda math api functions within a numba cuda kernel",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/fzimmermann89",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/5222871?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/5222871?v=4&s=60",
   "displayName": "Felix",
   "gv": "4",
   "id": "55f482ef0fc9f982beb07ff6",
   "url": "/fzimmermann89",
   "username": "fzimmermann89",
   "v": 2
  },
  "html": "there are some functions which aren&#39;t accesible through cmath/np",
  "id": "5b561160f02a0977a3f50240",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-07-23T17:33:20.210Z",
  "text": "there are some functions which aren't accesible through cmath/np",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/fzimmermann89",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/5222871?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/5222871?v=4&s=60",
   "displayName": "Felix",
   "gv": "4",
   "id": "55f482ef0fc9f982beb07ff6",
   "url": "/fzimmermann89",
   "username": "fzimmermann89",
   "v": 2
  },
  "html": "for example, it would be nice to be able to call sincospi directly",
  "id": "5b5611c532fa1b74085f05bc",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-07-23T17:35:01.915Z",
  "text": "for example, it would be nice to be able to call sincospi directly",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "we need to add a Python wrapper around that function, I think",
  "id": "5b5612b5c86c4f0b472bd775",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-07-23T17:39:01.861Z",
  "text": "we need to add a Python wrapper around that function, I think",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/fzimmermann89",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/5222871?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/5222871?v=4&s=60",
   "displayName": "Felix",
   "gv": "4",
   "id": "55f482ef0fc9f982beb07ff6",
   "url": "/fzimmermann89",
   "username": "fzimmermann89",
   "v": 2
  },
  "html": "can you give me a hint where to look? the problem is, that there is no math/numpy function doing the same",
  "id": "5b5613434b880b3e6a434c00",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-07-23T17:41:23.302Z",
  "text": "can you give me a hint where to look? the problem is, that there is no math/numpy function doing the same",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/fzimmermann89",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/5222871?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/5222871?v=4&s=60",
   "displayName": "Felix",
   "gv": "4",
   "id": "55f482ef0fc9f982beb07ff6",
   "url": "/fzimmermann89",
   "username": "fzimmermann89",
   "v": 2
  },
  "html": "it would be nice to have a generic wrapper to call cuda sdk funtions..",
  "id": "5b56137af9ffc4664bf8efbb",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-07-23T17:42:18.615Z",
  "text": "it would be nice to have a generic wrapper to call cuda sdk funtions..",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "part of it depends on how the CUDA SDK function is implemented.  If it appears in libdevice (<a href=\"https://docs.nvidia.com/cuda/libdevice-users-guide/index.html\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://docs.nvidia.com/cuda/libdevice-users-guide/index.html</a>) then we can:<ul>\n<li>make a Python function that does the same thing on the CPU (fast/slow doesn&#39;t matter) in the <code>numba.cuda</code> subpackage</li>\n<li>register that Numba can compile that function in CUDA (<a href=\"https://github.com/numba/numba/blob/master/numba/cuda/cudamath.py\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://github.com/numba/numba/blob/master/numba/cuda/cudamath.py</a>)</li>\n<li>implement that function as a call to the libdevice function (<a href=\"https://github.com/numba/numba/blob/master/numba/cuda/libdevice.py\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://github.com/numba/numba/blob/master/numba/cuda/libdevice.py</a>)</li>\n</ul>\n",
  "id": "5b561582c86c4f0b472bdfa6",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-07-23T17:50:58.525Z",
  "text": "part of it depends on how the CUDA SDK function is implemented.  If it appears in libdevice (https://docs.nvidia.com/cuda/libdevice-users-guide/index.html) then we can:\n* make a Python function that does the same thing on the CPU (fast/slow doesn't matter) in the `numba.cuda` subpackage\n* register that Numba can compile that function in CUDA (https://github.com/numba/numba/blob/master/numba/cuda/cudamath.py)\n* implement that function as a call to the libdevice function (https://github.com/numba/numba/blob/master/numba/cuda/libdevice.py)",
  "unread": false,
  "urls": [
   {
    "url": "https://docs.nvidia.com/cuda/libdevice-users-guide/index.html"
   },
   {
    "url": "https://github.com/numba/numba/blob/master/numba/cuda/cudamath.py"
   },
   {
    "url": "https://github.com/numba/numba/blob/master/numba/cuda/libdevice.py"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "The tricky bit with the sincos functions is that they write their result to pointers (rather than return a value), so the usual template doesn&#39;t work.",
  "id": "5b5615b963cf1636bde84335",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-07-23T17:51:53.325Z",
  "text": "The tricky bit with the sincos functions is that they write their result to pointers (rather than return a value), so the usual template doesn't work.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "Can you open an issue on the issue tracker about this?  Would be good to know this is helpful to solve for people.",
  "id": "5b5615d8c579673e6b8cb662",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-07-23T17:52:24.646Z",
  "text": "Can you open an issue on the issue tracker about this?  Would be good to know this is helpful to solve for people.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/fzimmermann89",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/5222871?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/5222871?v=4&s=60",
   "displayName": "Felix",
   "gv": "4",
   "id": "55f482ef0fc9f982beb07ff6",
   "url": "/fzimmermann89",
   "username": "fzimmermann89",
   "v": 2
  },
  "html": "Thanks! <span data-link-type=\"issue\" data-issue=\"3149\" data-issue-repo=\"numba/numba\" class=\"issue\">numba/numba#3149</span>",
  "id": "5b5618f6c86c4f0b472beaf8",
  "issues": [
   {
    "number": "3149",
    "repo": "numba/numba"
   }
  ],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-07-23T18:05:42.206Z",
  "text": "Thanks! https://github.com/numba/numba/issues/3149",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lericson",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/46901?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/46901?v=4&s=60",
   "displayName": "Ludvig Ericson",
   "gv": "4",
   "id": "58a33630d73408ce4f4a55ea",
   "url": "/lericson",
   "username": "lericson",
   "v": 3
  },
  "html": "Hello! Is there a roadmap for how Numba integration with the OOP stuff is going to be improved? It seems to me that Numba in its current form hampers things like polymorphism quite severely, even if you accept that everything has to be Numbaified.",
  "id": "5b5897446dd1ab57233c738c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-07-25T15:29:08.745Z",
  "text": "Hello! Is there a roadmap for how Numba integration with the OOP stuff is going to be improved? It seems to me that Numba in its current form hampers things like polymorphism quite severely, even if you accept that everything has to be Numbaified.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "There is not currently a roadmap.  The jitclass experiment showed us how complex issue becomes when you try to balance Python compatibility with compiler complexity and performance, so the first step on the roadmap is designing what the bounds of support should be.",
  "id": "5b5897b132d98c2ed2b43f15",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-07-25T15:30:57.411Z",
  "text": "There is not currently a roadmap.  The jitclass experiment showed us how complex issue becomes when you try to balance Python compatibility with compiler complexity and performance, so the first step on the roadmap is designing what the bounds of support should be.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lericson",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/46901?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/46901?v=4&s=60",
   "displayName": "Ludvig Ericson",
   "gv": "4",
   "id": "58a33630d73408ce4f4a55ea",
   "url": "/lericson",
   "username": "lericson",
   "v": 3
  },
  "html": "As an example, consider some optimization routine <code>opt</code>, it takes some objective function <code>f</code> and perhaps some other functions, like physical dynamics or what have you. The problem I run into is that I want <code>opt</code> to be generic, so I don&#39;t want to write <code>f()</code> in its code, but rather take an argument. And that works, of course, but eventually you want to put all of this into classes, and that&#39;s where it really starts getting annoying ",
  "id": "5b5897b25301255724c4f76d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-07-25T15:30:58.310Z",
  "text": "As an example, consider some optimization routine `opt`, it takes some objective function `f` and perhaps some other functions, like physical dynamics or what have you. The problem I run into is that I want `opt` to be generic, so I don't want to write `f()` in its code, but rather take an argument. And that works, of course, but eventually you want to put all of this into classes, and that's where it really starts getting annoying ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lericson",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/46901?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/46901?v=4&s=60",
   "displayName": "Ludvig Ericson",
   "gv": "4",
   "id": "58a33630d73408ce4f4a55ea",
   "url": "/lericson",
   "username": "lericson",
   "v": 3
  },
  "html": "I see",
  "id": "5b5897c3e5fc191d959c25ca",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-07-25T15:31:15.415Z",
  "text": "I see",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "But we definitely see the need.",
  "id": "5b5897cab1b9572ed3dd9a71",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-07-25T15:31:22.189Z",
  "text": "But we definitely see the need.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lericson",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/46901?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/46901?v=4&s=60",
   "displayName": "Ludvig Ericson",
   "gv": "4",
   "id": "58a33630d73408ce4f4a55ea",
   "url": "/lericson",
   "username": "lericson",
   "v": 3
  },
  "html": "What I do right now is to have factory functions that compile new versions of the code with &quot;static linking&quot; so to speak",
  "id": "5b5897e307be4357bdec6f67",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-07-25T15:31:47.412Z",
  "text": "What I do right now is to have factory functions that compile new versions of the code with \"static linking\" so to speak",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lericson",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/46901?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/46901?v=4&s=60",
   "displayName": "Ludvig Ericson",
   "gv": "4",
   "id": "58a33630d73408ce4f4a55ea",
   "url": "/lericson",
   "username": "lericson",
   "v": 3
  },
  "html": "Like a <code>make_opt(f)</code> that actually compiles a new <code>opt</code>",
  "id": "5b589804b1b9572ed3dd9c72",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-07-25T15:32:20.658Z",
  "text": "Like a `make_opt(f)` that actually compiles a new `opt`",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 5
  },
  "html": "yeah, that is a common workaround",
  "id": "5b58980ce5fc191d959c2714",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-07-25T15:32:28.769Z",
  "text": "yeah, that is a common workaround",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lericson",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/46901?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/46901?v=4&s=60",
   "displayName": "Ludvig Ericson",
   "gv": "4",
   "id": "58a33630d73408ce4f4a55ea",
   "url": "/lericson",
   "username": "lericson",
   "v": 3
  },
  "html": "Good then at least I&#39;m not nuts :D",
  "id": "5b589852ee7b230b4467ef75",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-07-25T15:33:38.988Z",
  "text": "Good then at least I'm not nuts :D",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lericson",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/46901?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/46901?v=4&s=60",
   "displayName": "Ludvig Ericson",
   "gv": "4",
   "id": "58a33630d73408ce4f4a55ea",
   "url": "/lericson",
   "username": "lericson",
   "v": 3
  },
  "html": "My problem now is that <code>make_opt</code> actually generates a whole slew of functions, that then <code>opt</code> uses. I need to get to those, and typically you&#39;d have a class for this. One solution would be to have the factory <code>make_opt</code> return an object with those members, sort of emulating a constructor",
  "id": "5b5898ba07be4357bdec72ce",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-07-25T15:35:22.131Z",
  "text": "My problem now is that `make_opt` actually generates a whole slew of functions, that then `opt` uses. I need to get to those, and typically you'd have a class for this. One solution would be to have the factory `make_opt` return an object with those members, sort of emulating a constructor",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/albop",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/276777?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/276777?v=4&s=60",
   "displayName": "Pablo Winant",
   "gv": "4",
   "id": "55ef21560fc9f982beb00961",
   "url": "/albop",
   "username": "albop",
   "v": 22
  },
  "html": ".",
  "id": "5b58a3b74d2e050b4553cd47",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-07-25T16:22:15.493Z",
  "text": ".",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-07-27T09:37:31.188Z",
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/extraymond",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/707176?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/707176?v=4&s=60",
   "displayName": "extraymond",
   "gv": "4",
   "id": "5669689c16b6c7089cbe2cb4",
   "url": "/extraymond",
   "username": "extraymond",
   "v": 16
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span> Hi! I&#39;m the one who open a issue regarding rocm. Thx for your reply!",
  "id": "5b5ae7d21be9bb57bcc8c2a4",
  "issues": [],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 10,
  "sent": "2018-07-27T09:37:22.145Z",
  "text": "@stuartarchibald Hi! I'm the one who open a issue regarding rocm. Thx for your reply!",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "Hi <span data-link-type=\"mention\" data-screen-name=\"extraymond\" class=\"mention\">@extraymond</span> :) No problem.",
  "id": "5b5ae7f7b97f4f3f1f9ff20b",
  "issues": [],
  "mentions": [
   {
    "screenName": "extraymond",
    "userId": "5669689c16b6c7089cbe2cb4",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 10,
  "sent": "2018-07-27T09:37:59.605Z",
  "text": "Hi @extraymond :) No problem.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "I&#39;ve just added an ROC device function use example to the docs",
  "id": "5b5ae8274d2e050b455a4edc",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-07-27T09:38:47.100Z",
  "text": "I've just added an ROC device function use example to the docs",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/extraymond",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/707176?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/707176?v=4&s=60",
   "displayName": "extraymond",
   "gv": "4",
   "id": "5669689c16b6c7089cbe2cb4",
   "url": "/extraymond",
   "username": "extraymond",
   "v": 16
  },
  "html": "From your reply, you stated that it would need a kernel to start it. It seems like a context manager behaviour, is there anything around it?",
  "id": "5b5ae839b97f4f3f1f9ff333",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-07-27T09:39:05.895Z",
  "text": "From your reply, you stated that it would need a kernel to start it. It seems like a context manager behaviour, is there anything around it?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/extraymond",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/707176?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/707176?v=4&s=60",
   "displayName": "extraymond",
   "gv": "4",
   "id": "5669689c16b6c7089cbe2cb4",
   "url": "/extraymond",
   "username": "extraymond",
   "v": 16
  },
  "html": "Or it would have to be explicit structured to allow the function to run on gpu. I&#39;m guessing this is required by how gpgpu works right?",
  "id": "5b5ae86ae5fc191d95a2b55f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-07-27T09:39:54.212Z",
  "text": "Or it would have to be explicit structured to allow the function to run on gpu. I'm guessing this is required by how gpgpu works right?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "Basically, the entry point for execution on gpgpu targets is a &quot;kernel&quot; as this does all the setup for the call to the hardware etc",
  "id": "5b5ae8a646235249cd56ba7d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-07-27T09:40:54.012Z",
  "text": "Basically, the entry point for execution on gpgpu targets is a \"kernel\" as this does all the setup for the call to the hardware etc",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "the programming model is relatively close to that found in C/C++",
  "id": "5b5ae8e1be87b449ce5a0772",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-07-27T09:41:53.636Z",
  "text": "the programming model is relatively close to that found in C/C++",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-07-27T09:47:08.945Z",
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/extraymond",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/707176?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/707176?v=4&s=60",
   "displayName": "extraymond",
   "gv": "4",
   "id": "5669689c16b6c7089cbe2cb4",
   "url": "/extraymond",
   "username": "extraymond",
   "v": 16
  },
  "html": "Sorry I&#39;ve little knowledge about how C/C++ works, looking at your python example, can you walk me through what your function does, particularly these four  lines seems out of context to me:<pre><code class=\"python\">    <span class=\"comment\"># workitem id in a 1D workgroup</span>\n    tx = roc.get_local_id(<span class=\"number\">0</span>)\n    <span class=\"comment\"># workgroup id in a 1D grid</span>\n    ty = roc.get_group_id(<span class=\"number\">0</span>)\n    <span class=\"comment\"># workgroup size, i.e. number of workitem per workgroup</span>\n    bw = roc.get_local_size(<span class=\"number\">0</span>)\n    <span class=\"comment\"># Compute flattened index inside the array</span>\n    pos = tx + ty * bw</code></pre>",
  "id": "5b5aea0e3396495b33402413",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-07-27T09:46:54.830Z",
  "text": "Sorry I've little knowledge about how C/C++ works, looking at your python example, can you walk me through what your function does, particularly these four  lines seems out of context to me:\n\n```python\n    # workitem id in a 1D workgroup\n    tx = roc.get_local_id(0)\n    # workgroup id in a 1D grid\n    ty = roc.get_group_id(0)\n    # workgroup size, i.e. number of workitem per workgroup\n    bw = roc.get_local_size(0)\n    # Compute flattened index inside the array\n    pos = tx + ty * bw\n```",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "right, that&#39;s accommodating for the way GPGPUs behave, it&#39;s a SIMT model where a bunch of (in ROC parlance) workitems are executed simultaneously by the GPU, these are arranged into grids as defined by the kernel launch parameters",
  "id": "5b5aebf55301255724cbb9b8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-07-27T09:55:01.794Z",
  "text": "right, that's accommodating for the way GPGPUs behave, it's a SIMT model where a bunch of (in ROC parlance) workitems are executed simultaneously by the GPU, these are arranged into grids as defined by the kernel launch parameters",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "the code is working out where in the grid each thread is and then flattening that for use as an index into the array so that each workitem updates its own element of the array",
  "id": "5b5aec7cee7b230b446e9213",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-07-27T09:57:16.112Z",
  "text": "the code is working out where in the grid each thread is and then flattening that for use as an index into the array so that each workitem updates its own element of the array",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-07-27T10:16:41.498Z",
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/extraymond",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/707176?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/707176?v=4&s=60",
   "displayName": "extraymond",
   "gv": "4",
   "id": "5669689c16b6c7089cbe2cb4",
   "url": "/extraymond",
   "username": "extraymond",
   "v": 16
  },
  "html": "<p>I&#39;m trying to understand this with some opencl material at the moment.</p><p>These lines are sort of like registering a list of workers (by their id in the composition of a gpu) that will accept the computation later on, is this a good analogy for the behaviour your code does?</p>",
  "id": "5b5aefa64d2e050b455a7636",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-07-27T10:10:46.819Z",
  "text": "I'm trying to understand this with some opencl material at the moment.\n\nThese lines are sort of like registering a list of workers (by their id in the composition of a gpu) that will accept the computation later on, is this a good analogy for the behaviour your code does?",
  "unread": false,
  "urls": [],
  "v": 3
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "sort of, yes",
  "id": "5b5af36cd2f0934551d5f5b7",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-07-27T10:26:52.218Z",
  "text": "sort of, yes",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "the kernel is compiled as an ELF, so there&#39;s no ahead of time registration. The worker &quot;composition&quot; can be varied at runtime across multiple launches of the same kernel.",
  "id": "5b5af4035301255724cbe597",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-07-27T10:29:23.112Z",
  "text": "the kernel is compiled as an ELF, so there's no ahead of time registration. The worker \"composition\" can be varied at runtime across multiple launches of the same kernel.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "When the kernel is launched, the launch configuration is what determines the layout of the workitems/workgroup/grid etc",
  "id": "5b5af470db8bd24550b79269",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-07-27T10:31:12.586Z",
  "text": "When the kernel is launched, the launch configuration is what determines the layout of the workitems/workgroup/grid etc",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "the kernel then has the functions like <code>get_local_id</code> to allow for self identification by a workitem",
  "id": "5b5af4cf4d2e050b455a8faa",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-07-27T10:32:47.883Z",
  "text": "the kernel then has the functions like `get_local_id` to allow for self identification by a workitem",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "it is necessary for a workitem to know where it is with respect to the rest of the workitems (based on the launch config) so that e.g. array access can be checked to be within bounds",
  "id": "5b5af50fee7b230b446ec3e4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-07-27T10:33:51.944Z",
  "text": "it is necessary for a workitem to know where it is with respect to the rest of the workitems (based on the launch config) so that e.g. array access can be checked to be within bounds",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "for example, you wouldn&#39;t want a workitem with a global_id of &gt;20 from a launch like [1, 100] accessing an array of size 20 as it would be out of bounds",
  "id": "5b5af5723396495b334060e7",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-07-27T10:35:30.486Z",
  "text": "for example, you wouldn't want a workitem with a global_id of >20 from a launch like [1, 100] accessing an array of size 20 as it would be out of bounds",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/extraymond",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/707176?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/707176?v=4&s=60",
   "displayName": "extraymond",
   "gv": "4",
   "id": "5669689c16b6c7089cbe2cb4",
   "url": "/extraymond",
   "username": "extraymond",
   "v": 16
  },
  "html": "<p>Thx for your reply, so what differs from typical python programming,  is that we have to register workes which have length greater than the input data, then do the calculation right?</p><p>As for assiging tx ,ty and bw is like returning the position of the registered position for the data to be worked on if that&#39;s a fair comparision.</p><p>Lastly, are there any cases where I would call different values in roc.get_local_id(). roc.group_id(). roc.get_local_size()? If so, what are their requirements?</p>",
  "id": "5b5afc3ee5fc191d95a32c3b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-07-27T11:04:30.880Z",
  "text": "Thx for your reply, so what differs from typical python programming,  is that we have to register workes which have length greater than the input data, then do the calculation right?\n\nAs for assiging tx ,ty and bw is like returning the position of the registered position for the data to be worked on if that's a fair comparision.\n\nLastly, are there any cases where I would call different values in roc.get_local_id(). roc.group_id(). roc.get_local_size()? If so, what are their requirements?\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "the arg to those functions is the grid dimension on which to compute the &quot;position&quot;, as you can launch with multidimensional workgroups and grids by specifying tuples in the kernel launch config",
  "id": "5b5affed46235249cd574006",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-07-27T11:20:13.578Z",
  "text": "the arg to those functions is the grid dimension on which to compute the \"position\", as you can launch with multidimensional workgroups and grids by specifying tuples in the kernel launch config",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "like [(2,16,4),(4,8,8)]",
  "id": "5b5b003c3396495b33409e04",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-07-27T11:21:32.830Z",
  "text": "like [(2,16,4),(4,8,8)]",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "up to 3D launch configs are permitted",
  "id": "5b5b0048d2f0934551d6434a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-07-27T11:21:44.275Z",
  "text": "up to 3D launch configs are permitted",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/saulshanabrook",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1186124?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1186124?v=4&s=60",
   "displayName": "Saul Shanabrook",
   "gv": "4",
   "id": "529c6f2eed5ab0b3bf04e08b",
   "url": "/saulshanabrook",
   "username": "saulshanabrook",
   "v": 182
  },
  "html": "I am trying to understand the differences between Opaque and Dummy types. What I want to do is have a type for  a <code>ndtypes.ndt</code> object, that has all attributes computed at compile time. I am able to do this with a base <code>NdtSpec</code> that stores the ndt python object on the type, similar to  a Constant type.  Then I use <code>overload_attribute</code> to add some attributes that just return the typed value. Then I inherit from that type for the type that is registered with the <code>ndtypes.ndt</code> python object. That works, and I use a <code>PrimitiveModel</code> that stores a pointer to the python object, so boxing/unboxing is easy, just recast that pointer.",
  "id": "5b5b00eca31e386158b6dffb",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-07-27T11:24:28.479Z",
  "text": "I am trying to understand the differences between Opaque and Dummy types. What I want to do is have a type for  a `ndtypes.ndt` object, that has all attributes computed at compile time. I am able to do this with a base `NdtSpec` that stores the ndt python object on the type, similar to  a Constant type.  Then I use `overload_attribute` to add some attributes that just return the typed value. Then I inherit from that type for the type that is registered with the `ndtypes.ndt` python object. That works, and I use a `PrimitiveModel` that stores a pointer to the python object, so boxing/unboxing is easy, just recast that pointer.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/saulshanabrook",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1186124?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1186124?v=4&s=60",
   "displayName": "Saul Shanabrook",
   "gv": "4",
   "id": "529c6f2eed5ab0b3bf04e08b",
   "url": "/saulshanabrook",
   "username": "saulshanabrook",
   "v": 182
  },
  "html": "This works, but then I am trying to define the <code>xnd</code> type that has a <code>type</code> attribute that should resolve to the <code>ndtypes.ndt</code> associated with that xnd object. So again, I make a <code>XndSpec</code> base class that stores the ndt type on the type, and add a <code>type</code> <code>overload_attribute</code>.  But this fails with <code>Cannot lower constant of type &#39;NdtObjectWrapper(2 * 3 * int64)&#39;</code> ",
  "id": "5b5b0137b9a1803f20603c5c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-07-27T11:25:43.144Z",
  "text": "This works, but then I am trying to define the `xnd` type that has a `type` attribute that should resolve to the `ndtypes.ndt` associated with that xnd object. So again, I make a `XndSpec` base class that stores the ndt type on the type, and add a `type` `overload_attribute`.  But this fails with `Cannot lower constant of type 'NdtObjectWrapper(2 * 3 * int64)'` ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/saulshanabrook",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1186124?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1186124?v=4&s=60",
   "displayName": "Saul Shanabrook",
   "gv": "4",
   "id": "529c6f2eed5ab0b3bf04e08b",
   "url": "/saulshanabrook",
   "username": "saulshanabrook",
   "v": 182
  },
  "html": "Because I haven&#39;t told Numba how to lower a const of the Ndt type. Which makes sense, because I don&#39;t actually wanna store a const to this type, because this type has a ndt object pointer in it&#39;s datamodel.",
  "id": "5b5b02951be9bb57bcc95a8b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-07-27T11:31:33.435Z",
  "text": "Because I haven't told Numba how to lower a const of the Ndt type. Which makes sense, because I don't actually wanna store a const to this type, because this type has a ndt object pointer in it's datamodel.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/saulshanabrook",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1186124?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1186124?v=4&s=60",
   "displayName": "Saul Shanabrook",
   "gv": "4",
   "id": "529c6f2eed5ab0b3bf04e08b",
   "url": "/saulshanabrook",
   "username": "saulshanabrook",
   "v": 182
  },
  "html": "So really what I would like is for <code>NdtObjectWrapper</code> to be a numba type that has no runtime representation. All attributes of it are defined at compile time, using the underlying ndt object attached to the type. ",
  "id": "5b5b02c2b9a1803f20604476",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-07-27T11:32:18.961Z",
  "text": "So really what I would like is for `NdtObjectWrapper` to be a numba type that has no runtime representation. All attributes of it are defined at compile time, using the underlying ndt object attached to the type. ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/saulshanabrook",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1186124?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1186124?v=4&s=60",
   "displayName": "Saul Shanabrook",
   "gv": "4",
   "id": "529c6f2eed5ab0b3bf04e08b",
   "url": "/saulshanabrook",
   "username": "saulshanabrook",
   "v": 182
  },
  "html": "I want to be able to box/unbox it, which again has no runtime component, boxing just returns the value on the type.",
  "id": "5b5b02ecd2f0934551d6560c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-07-27T11:33:00.634Z",
  "text": "I want to be able to box/unbox it, which again has no runtime component, boxing just returns the value on the type.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/saulshanabrook",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1186124?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1186124?v=4&s=60",
   "displayName": "Saul Shanabrook",
   "gv": "4",
   "id": "529c6f2eed5ab0b3bf04e08b",
   "url": "/saulshanabrook",
   "username": "saulshanabrook",
   "v": 182
  },
  "html": "So maybe this would be a <code>Const</code> type?",
  "id": "5b5b03035301255724cc3d94",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-07-27T11:33:23.436Z",
  "text": "So maybe this would be a `Const` type?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-07-27T12:03:38.282Z",
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/saulshanabrook",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1186124?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1186124?v=4&s=60",
   "displayName": "Saul Shanabrook",
   "gv": "4",
   "id": "529c6f2eed5ab0b3bf04e08b",
   "url": "/saulshanabrook",
   "username": "saulshanabrook",
   "v": 182
  },
  "html": "<p>To make things more concrete:</p><ul>\n<li>ndt spec type <code>NdtSpec</code> <a href=\"https://github.com/Quansight/numba-xnd/blob/294217042f8cd8a902dcff01c72f6de9611094cc/numba_xnd/libndtypes/objects.py\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://github.com/Quansight/numba-xnd/blob/294217042f8cd8a902dcff01c72f6de9611094cc/numba_xnd/libndtypes/objects.py</a></li>\n<li>higher level ndt type (inherits from spec) <code>NdtObjectWrapperType</code>: <a href=\"https://github.com/Quansight/numba-xnd/blob/294217042f8cd8a902dcff01c72f6de9611094cc/numba_xnd/ndtypes/objects.py\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://github.com/Quansight/numba-xnd/blob/294217042f8cd8a902dcff01c72f6de9611094cc/numba_xnd/ndtypes/objects.py</a></li>\n<li>xnd spec type <code>XndSpec</code>: <a href=\"https://github.com/Quansight/numba-xnd/blob/294217042f8cd8a902dcff01c72f6de9611094cc/numba_xnd/libxnd/objects.py\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://github.com/Quansight/numba-xnd/blob/294217042f8cd8a902dcff01c72f6de9611094cc/numba_xnd/libxnd/objects.py</a></li>\n<li>higher level xnd type (inherits from spec) <code>XndObjectWrapperType</code> <a href=\"https://github.com/Quansight/numba-xnd/blob/294217042f8cd8a902dcff01c72f6de9611094cc/numba_xnd/xnd/objects.py\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://github.com/Quansight/numba-xnd/blob/294217042f8cd8a902dcff01c72f6de9611094cc/numba_xnd/xnd/objects.py</a></li>\n</ul>\n<p>The issue is that lowering the <code>type</code> attribute on the <code>XndSpec</code> (<a href=\"https://github.com/Quansight/numba-xnd/blob/294217042f8cd8a902dcff01c72f6de9611094cc/numba_xnd/libxnd/objects.py#L17-L26\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://github.com/Quansight/numba-xnd/blob/294217042f8cd8a902dcff01c72f6de9611094cc/numba_xnd/libxnd/objects.py#L17-L26</a>) fails with <code>Cannot lower constant of type &#39;NdtObjectWrapper(2 * 3 * int64)&#39;</code>. </p><p>I can see why it is trying to lower this is a constant. Is it possible instead to box this type in the overloaded attribute? So that it uses the existing boxing I defined for <code>NdtObjectWrapperType</code>?</p>",
  "id": "5b5b09b3b9a1803f20607036",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-07-27T12:01:55.021Z",
  "text": "To make things more concrete:\n\n* ndt spec type `NdtSpec` https://github.com/Quansight/numba-xnd/blob/294217042f8cd8a902dcff01c72f6de9611094cc/numba_xnd/libndtypes/objects.py\n* higher level ndt type (inherits from spec) `NdtObjectWrapperType`: https://github.com/Quansight/numba-xnd/blob/294217042f8cd8a902dcff01c72f6de9611094cc/numba_xnd/ndtypes/objects.py\n* xnd spec type `XndSpec`: https://github.com/Quansight/numba-xnd/blob/294217042f8cd8a902dcff01c72f6de9611094cc/numba_xnd/libxnd/objects.py\n* higher level xnd type (inherits from spec) `XndObjectWrapperType` https://github.com/Quansight/numba-xnd/blob/294217042f8cd8a902dcff01c72f6de9611094cc/numba_xnd/xnd/objects.py\n\nThe issue is that lowering the `type` attribute on the `XndSpec` (https://github.com/Quansight/numba-xnd/blob/294217042f8cd8a902dcff01c72f6de9611094cc/numba_xnd/libxnd/objects.py#L17-L26) fails with `Cannot lower constant of type 'NdtObjectWrapper(2 * 3 * int64)'`. \n\nI can see why it is trying to lower this is a constant. Is it possible instead to box this type in the overloaded attribute? So that it uses the existing boxing I defined for `NdtObjectWrapperType`?",
  "unread": false,
  "urls": [
   {
    "url": "https://github.com/Quansight/numba-xnd/blob/294217042f8cd8a902dcff01c72f6de9611094cc/numba_xnd/libndtypes/objects.py"
   },
   {
    "url": "https://github.com/Quansight/numba-xnd/blob/294217042f8cd8a902dcff01c72f6de9611094cc/numba_xnd/ndtypes/objects.py"
   },
   {
    "url": "https://github.com/Quansight/numba-xnd/blob/294217042f8cd8a902dcff01c72f6de9611094cc/numba_xnd/libxnd/objects.py"
   },
   {
    "url": "https://github.com/Quansight/numba-xnd/blob/294217042f8cd8a902dcff01c72f6de9611094cc/numba_xnd/xnd/objects.py"
   },
   {
    "url": "https://github.com/Quansight/numba-xnd/blob/294217042f8cd8a902dcff01c72f6de9611094cc/numba_xnd/libxnd/objects.py#L17-L26"
   }
  ],
  "v": 3
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/saulshanabrook",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1186124?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1186124?v=4&s=60",
   "displayName": "Saul Shanabrook",
   "gv": "4",
   "id": "529c6f2eed5ab0b3bf04e08b",
   "url": "/saulshanabrook",
   "username": "saulshanabrook",
   "v": 182
  },
  "html": "Ah nevermind, I realized that I should define the <code>type</code> attribute on <code>XndObjectWrapperType</code> to use the low level API so that it can return a boxed pointer to a python object. ",
  "id": "5b5b1e086dd1ab5723446224",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-07-27T13:28:40.012Z",
  "text": "Ah nevermind, I realized that I should define the `type` attribute on `XndObjectWrapperType` to use the low level API so that it can return a boxed pointer to a python object. ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/saulshanabrook",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1186124?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1186124?v=4&s=60",
   "displayName": "Saul Shanabrook",
   "gv": "4",
   "id": "529c6f2eed5ab0b3bf04e08b",
   "url": "/saulshanabrook",
   "username": "saulshanabrook",
   "v": 182
  },
  "html": "Is it possible to tell Numba to type a variable as a <code>const</code> type? For example, I am trying to pass in some object to a <code>intrinsic(support_literals=True)</code> function, but it isn&#39;t being passed in as a <code>numba.types.Const</code>. When I pass in strings/ints, they are passed in as <code>Const</code>s.  ",
  "id": "5b5b34f5ee7b230b44703ce5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2018-07-27T15:06:29.308Z",
  "text": "Is it possible to tell Numba to type a variable as a `const` type? For example, I am trying to pass in some object to a `intrinsic(support_literals=True)` function, but it isn't being passed in as a `numba.types.Const`. When I pass in strings/ints, they are passed in as `Const`s.  ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/saulshanabrook",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1186124?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1186124?v=4&s=60",
   "displayName": "Saul Shanabrook",
   "gv": "4",
   "id": "529c6f2eed5ab0b3bf04e08b",
   "url": "/saulshanabrook",
   "username": "saulshanabrook",
   "v": 182
  },
  "html": "I can get around this by serializing the object as a string before passing it in, but this seems messy.",
  "id": "5b5b35354d2e050b455c12b4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2018-07-27T15:07:33.125Z",
  "text": "I can get around this by serializing the object as a string before passing it in, but this seems messy.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/extraymond",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/707176?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/707176?v=4&s=60",
   "displayName": "extraymond",
   "gv": "4",
   "id": "5669689c16b6c7089cbe2cb4",
   "url": "/extraymond",
   "username": "extraymond",
   "v": 16
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span> Thx for your explanation, I would fiddle with this more in the weekend! Seems like a fun way to learn programming!",
  "id": "5b5b3821e5fc191d95a49eef",
  "issues": [],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 8,
  "sent": "2018-07-27T15:20:01.774Z",
  "text": "@stuartarchibald Thx for your explanation, I would fiddle with this more in the weekend! Seems like a fun way to learn programming!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 57
  },
  "html": "np",
  "id": "5b5b38c507be4357bdf4ddec",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 7,
  "sent": "2018-07-27T15:22:45.096Z",
  "text": "np",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"saulshanabrook\" class=\"mention\">@saulshanabrook</span> , u r touching a lot of the numba internals.  can u go to the numba-dev channel and I\u2019ll answer u there.",
  "id": "5b5b594ee5fc191d95a52a3a",
  "issues": [],
  "mentions": [
   {
    "screenName": "saulshanabrook",
    "userId": "529c6f2eed5ab0b3bf04e08b",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 5,
  "sent": "2018-07-27T17:41:34.439Z",
  "text": "@saulshanabrook , u r touching a lot of the numba internals.  can u go to the numba-dev channel and I\u2019ll answer u there.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/leezu",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/946903?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/946903?v=4&s=60",
   "displayName": "Leonard Lausen",
   "gv": "4",
   "id": "57a86b2c40f3a6eec05e6fc5",
   "url": "/leezu",
   "username": "leezu",
   "v": 6
  },
  "html": "<p>According to the docs, random is &quot;[...] is thread-safe and fork-safe. Each thread and each process will produce independent streams of random numbers.&quot;. However numpy.random &quot;[...] is not thread-safe when releasing the GIL.&quot; Is this correct?</p><p>Would the following cause any issues in no-gil mode?<br>    seed = ...<br>    for i in prange(X):<br>      np.random.seed(seed + i)</p>",
  "id": "5b5e2e0344812258443fad44",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-07-29T21:13:39.100Z",
  "text": "According to the docs, random is \"[...] is thread-safe and fork-safe. Each thread and each process will produce independent streams of random numbers.\". However numpy.random \"[...] is not thread-safe when releasing the GIL.\" Is this correct?\n\nWould the following cause any issues in no-gil mode?\n    seed = ...\n    for i in prange(X):\n      np.random.seed(seed + i)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "In which version of the docs are you seeing that warning?  I thought we removed that.",
  "id": "5b5e2e5633154658457991b9",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-07-29T21:15:02.665Z",
  "text": "In which version of the docs are you seeing that warning?  I thought we removed that.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/leezu",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/946903?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/946903?v=4&s=60",
   "displayName": "Leonard Lausen",
   "gv": "4",
   "id": "57a86b2c40f3a6eec05e6fc5",
   "url": "/leezu",
   "username": "leezu",
   "v": 6
  },
  "html": "<a href=\"https://numba.pydata.org/numba-doc/dev/reference/numpysupported.html\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://numba.pydata.org/numba-doc/dev/reference/numpysupported.html</a>",
  "id": "5b5e2e67854add6cee06e45b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-07-29T21:15:19.458Z",
  "text": "https://numba.pydata.org/numba-doc/dev/reference/numpysupported.html",
  "unread": false,
  "urls": [
   {
    "url": "https://numba.pydata.org/numba-doc/dev/reference/numpysupported.html"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/leezu",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/946903?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/946903?v=4&s=60",
   "displayName": "Leonard Lausen",
   "gv": "4",
   "id": "57a86b2c40f3a6eec05e6fc5",
   "url": "/leezu",
   "username": "leezu",
   "v": 6
  },
  "html": "It&#39;s removed for the python page, but it seems still present on the numpy page",
  "id": "5b5e2e7833154658457991ed",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-07-29T21:15:36.337Z",
  "text": "It's removed for the python page, but it seems still present on the numpy page",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "hmm, can you open an github issue on this?  I&#39;m pretty certain the NumPy generator should be thread safe just like the Python generator (they basically use the same implementation with a tiny tweak to make the RNG sequence track differences between the two)",
  "id": "5b5e2eebcb4d5b036ca4d25b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-07-29T21:17:31.514Z",
  "text": "hmm, can you open an github issue on this?  I'm pretty certain the NumPy generator should be thread safe just like the Python generator (they basically use the same implementation with a tiny tweak to make the RNG sequence track differences between the two)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "I&#39;ll ping someone on Monday to verify before we fix the docs",
  "id": "5b5e2ef795988830b087497f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-07-29T21:17:43.654Z",
  "text": "I'll ping someone on Monday to verify before we fix the docs",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/leezu",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/946903?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/946903?v=4&s=60",
   "displayName": "Leonard Lausen",
   "gv": "4",
   "id": "57a86b2c40f3a6eec05e6fc5",
   "url": "/leezu",
   "username": "leezu",
   "v": 6
  },
  "html": "Ok, thanks <a target=\"_blank\" data-link-type=\"issue\" data-issue=\"3183\" href=\"https://github.com/numba/numba/issues/3183\" data-provider=\"github\" data-issue-repo=\"numba/numba\" class=\"issue\">numba/numba#3183</a>",
  "id": "5b5e300e3315465845799608",
  "issues": [
   {
    "number": "3183",
    "repo": "numba/numba"
   }
  ],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-07-29T21:22:22.576Z",
  "text": "Ok, thanks https://github.com/numba/numba/issues/3183",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "thanks!",
  "id": "5b5e304ec83d1230b13436a0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-07-29T21:23:26.007Z",
  "text": "thanks!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/DavidMertz",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/2380665?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/2380665?v=4&s=60",
   "displayName": "David Mertz",
   "gv": "4",
   "id": "5776e17ec2f0db084a2104b0",
   "url": "/DavidMertz",
   "username": "DavidMertz",
   "v": 6
  },
  "html": "<p>I&#39;m trying to make a very simple cuda.to_device() example work.  Specifically, I have this simple function:</p><pre><code class=\"python\"><span class=\"decorator\">@vectorize('float64(float64)', target='cuda')</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">compute_gpu</span><span class=\"params\">(arr)</span>:</span>\n    <span class=\"keyword\">return</span> math.sin(arr) + math.cos(arr * arr)</code></pre><p>I&#39;d like to see if it can be faster with an explicit copy to device (or at least see how much slower).  I&#39;m trying this:</p><pre><code class=\"python\"><span class=\"decorator\">@cuda.jit</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">kernel</span><span class=\"params\">(src, target)</span>:</span>\n    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(src.shape[<span class=\"number\">0</span>]):\n        target[i] = math.sin(src[i]) + math.cos(src[i] * src[i])\n\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">compute_gpu_device</span><span class=\"params\">(arr)</span>:</span>\n    d_arr = cuda.device_array(arr.shape, dtype=arr.dtype)\n    kernel(cuda.to_device(arr), d_arr)\n    <span class=\"keyword\">return</span> d_arr.copy_to_host()</code></pre><p>I either get this error or a <em>freeze-computer-and-reboot</em> (I think the freeze is after multiple tries, not sure):</p><pre><code>CudaAPIError: [702] <span class=\"operator\"><span class=\"keyword\">Call</span> <span class=\"keyword\">to</span> cuMemAlloc results <span class=\"keyword\">in</span> CUDA_ERROR_LAUNCH_TIMEOUT</span></code></pre>",
  "id": "5b63324ac917d40dc2328d35",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-08-02T16:33:14.373Z",
  "text": "I'm trying to make a very simple cuda.to_device() example work.  Specifically, I have this simple function:\n\n```python\n@vectorize('float64(float64)', target='cuda')\ndef compute_gpu(arr):\n    return math.sin(arr) + math.cos(arr * arr)\n```\n\nI'd like to see if it can be faster with an explicit copy to device (or at least see how much slower).  I'm trying this:\n\n```python\n@cuda.jit\ndef kernel(src, target):\n    for i in range(src.shape[0]):\n        target[i] = math.sin(src[i]) + math.cos(src[i] * src[i])\n        \ndef compute_gpu_device(arr):\n    d_arr = cuda.device_array(arr.shape, dtype=arr.dtype)\n    kernel(cuda.to_device(arr), d_arr)\n    return d_arr.copy_to_host()\n```\n\nI either get this error or a *freeze-computer-and-reboot* (I think the freeze is after multiple tries, not sure):\n\n```\nCudaAPIError: [702] Call to cuMemAlloc results in CUDA_ERROR_LAUNCH_TIMEOUT\n```\n\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "is this a Mac?",
  "id": "5b633295c917d40dc2328f47",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-08-02T16:34:29.550Z",
  "text": "is this a Mac?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/DavidMertz",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/2380665?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/2380665?v=4&s=60",
   "displayName": "David Mertz",
   "gv": "4",
   "id": "5776e17ec2f0db084a2104b0",
   "url": "/DavidMertz",
   "username": "DavidMertz",
   "v": 6
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"seibert\" class=\"mention\">@seibert</span> Yes.  But I can try it on an AE5.2 K80 node if that&#39;s likely to play better.",
  "id": "5b6333aec917d40dc232944f",
  "issues": [],
  "mentions": [
   {
    "screenName": "seibert",
    "userId": "55b68af40fc9f982beab2a3c",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 13,
  "sent": "2018-08-02T16:39:10.867Z",
  "text": "@seibert Yes.  But I can try it on an AE5.2 K80 node if that's likely to play better.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/DavidMertz",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/2380665?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/2380665?v=4&s=60",
   "displayName": "David Mertz",
   "gv": "4",
   "id": "5776e17ec2f0db084a2104b0",
   "url": "/DavidMertz",
   "username": "DavidMertz",
   "v": 6
  },
  "html": "Was trying to get the basic logic right before I bother with more realistic benchmarking.",
  "id": "5b6333d03bca002dcbb243eb",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-08-02T16:39:44.096Z",
  "text": "Was trying to get the basic logic right before I bother with more realistic benchmarking.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "I don&#39;t know what the specific problem is here, but when there is a memory issue, the Mac behaves very poorly",
  "id": "5b6336875d1362758b228486",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-08-02T16:51:19.509Z",
  "text": "I don't know what the specific problem is here, but when there is a memory issue, the Mac behaves very poorly",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "one thing to try would be to save the return from <code>cuda.to_device(arr)</code> to a variable, and pass that",
  "id": "5b63369b0cfcf02fdfff832d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-08-02T16:51:39.181Z",
  "text": "one thing to try would be to save the return from `cuda.to_device(arr)` to a variable, and pass that",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "it is possibly you&#39;ve found some kind of GPU memory lifetime bug",
  "id": "5b6336a48eb2d52fde3730b7",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-08-02T16:51:48.820Z",
  "text": "it is possibly you've found some kind of GPU memory lifetime bug",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/JesseRMeyer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/5846309?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/5846309?v=4&s=60",
   "displayName": "Jesse Meyer",
   "gv": "4",
   "id": "594bd395d73408ce4f695537",
   "url": "/JesseRMeyer",
   "username": "JesseRMeyer",
   "v": 3
  },
  "html": "Is there a way how to tell Numba to output LLVM&#39;s compiled code (similar to what Godbolt does)?",
  "id": "5b6337cec79ebc1ae79b0fdd",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-08-02T16:56:46.491Z",
  "text": "Is there a way how to tell Numba to output LLVM's compiled code (similar to what Godbolt does)?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "yes",
  "id": "5b63387c04436a1ae608ebec",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-08-02T16:59:40.197Z",
  "text": "yes",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "This: <a href=\"http://numba.pydata.org/numba-doc/latest/reference/jit-compilation.html?highlight=inspect_types#Dispatcher.inspect_llvm\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://numba.pydata.org/numba-doc/latest/reference/jit-compilation.html?highlight=inspect_types#Dispatcher.inspect_llvm</a>",
  "id": "5b6338b36d45752f987d656f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-08-02T17:00:35.521Z",
  "text": "This: http://numba.pydata.org/numba-doc/latest/reference/jit-compilation.html?highlight=inspect_types#Dispatcher.inspect_llvm",
  "unread": false,
  "urls": [
   {
    "url": "http://numba.pydata.org/numba-doc/latest/reference/jit-compilation.html?highlight=inspect_types#Dispatcher.inspect_llvm"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "or this: <a href=\"http://numba.pydata.org/numba-doc/latest/reference/envvars.html#envvar-NUMBA_DUMP_LLVM\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://numba.pydata.org/numba-doc/latest/reference/envvars.html#envvar-NUMBA_DUMP_LLVM</a>",
  "id": "5b6338cc8eb2d52fde373ea9",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-08-02T17:01:00.914Z",
  "text": "or this: http://numba.pydata.org/numba-doc/latest/reference/envvars.html#envvar-NUMBA_DUMP_LLVM",
  "unread": false,
  "urls": [
   {
    "url": "http://numba.pydata.org/numba-doc/latest/reference/envvars.html#envvar-NUMBA_DUMP_LLVM"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/JesseRMeyer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/5846309?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/5846309?v=4&s=60",
   "displayName": "Jesse Meyer",
   "gv": "4",
   "id": "594bd395d73408ce4f695537",
   "url": "/JesseRMeyer",
   "username": "JesseRMeyer",
   "v": 3
  },
  "html": "Thanks! inspect_asm() looks like what I was looking for.",
  "id": "5b633b9104436a1ae608fead",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-08-02T17:12:49.100Z",
  "text": "Thanks! inspect_asm() looks like what I was looking for.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "no problem",
  "id": "5b633c8c6d45752f987d7d61",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-08-02T17:17:00.453Z",
  "text": "no problem",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/JesseRMeyer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/5846309?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/5846309?v=4&s=60",
   "displayName": "Jesse Meyer",
   "gv": "4",
   "id": "594bd395d73408ce4f695537",
   "url": "/JesseRMeyer",
   "username": "JesseRMeyer",
   "v": 3
  },
  "html": "Is there a way to tell Numba to filter LLVM&#39;s asm? It&#39;s (naturally) very verbose, and I suspect only 3 or so lines of assembly are relevant out of what is about 100 lines shown.  Filtering unused labels and assembler directives would make the output more valuable to me.",
  "id": "5b6340ae0cfcf02fdfffc252",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-08-02T17:34:38.958Z",
  "text": "Is there a way to tell Numba to filter LLVM's asm? It's (naturally) very verbose, and I suspect only 3 or so lines of assembly are relevant out of what is about 100 lines shown.  Filtering unused labels and assembler directives would make the output more valuable to me.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/JesseRMeyer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/5846309?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/5846309?v=4&s=60",
   "displayName": "Jesse Meyer",
   "gv": "4",
   "id": "594bd395d73408ce4f695537",
   "url": "/JesseRMeyer",
   "username": "JesseRMeyer",
   "v": 3
  },
  "html": "Another question. I&#39;m passing in a 2D uint8 array to a function which returns a 2D uint8 of the same shape with the declaration <span data-link-type=\"mention\" data-screen-name=\"jit\" class=\"mention\">@jit</span>(uint8[:]<a href=\"http://uint8[:][:]\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">:</a>, nopython=True), but numba responds with &quot;Buffer dtype cannot be buffer&quot;. How do I accomplish this?",
  "id": "5b63482b74470f5c983e3aa9",
  "issues": [],
  "mentions": [
   {
    "screenName": "jit",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 15,
  "sent": "2018-08-02T18:06:35.069Z",
  "text": "Another question. I'm passing in a 2D uint8 array to a function which returns a 2D uint8 of the same shape with the declaration @jit(uint8[:][:](uint8[:][:]), nopython=True), but numba responds with \"Buffer dtype cannot be buffer\". How do I accomplish this?",
  "unread": false,
  "urls": [
   {
    "url": "http://uint8[:][:]"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "that signature doesn&#39;t seem right (did gitter markdown mess with the rendering?)",
  "id": "5b6348e50cfcf02fdffff00e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-08-02T18:09:41.856Z",
  "text": "that signature doesn't seem right (did gitter markdown mess with the rendering?)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "you also don&#39;t need to supply a type signature at all.  This is the preferred approach.",
  "id": "5b6349015d1362758b22f7f6",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-08-02T18:10:09.072Z",
  "text": "you also don't need to supply a type signature at all.  This is the preferred approach.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/JesseRMeyer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/5846309?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/5846309?v=4&s=60",
   "displayName": "Jesse Meyer",
   "gv": "4",
   "id": "594bd395d73408ce4f695537",
   "url": "/JesseRMeyer",
   "username": "JesseRMeyer",
   "v": 3
  },
  "html": "It seems that it did.",
  "id": "5b63490104436a1ae60953c8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-08-02T18:10:09.505Z",
  "text": "It seems that it did.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/JesseRMeyer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/5846309?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/5846309?v=4&s=60",
   "displayName": "Jesse Meyer",
   "gv": "4",
   "id": "594bd395d73408ce4f695537",
   "url": "/JesseRMeyer",
   "username": "JesseRMeyer",
   "v": 3
  },
  "html": "I prefer to specify my types for static checking.",
  "id": "5b6349233bca002dcbb2c5de",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-08-02T18:10:43.205Z",
  "text": "I prefer to specify my types for static checking.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "hmm, if you put &quot;`&quot; around the code, I think that will prevent the markdown rendering",
  "id": "5b634943c917d40dc2331a99",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-08-02T18:11:15.417Z",
  "text": "hmm, if you put \"`\" around the code, I think that will prevent the markdown rendering",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/JesseRMeyer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/5846309?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/5846309?v=4&s=60",
   "displayName": "Jesse Meyer",
   "gv": "4",
   "id": "594bd395d73408ce4f695537",
   "url": "/JesseRMeyer",
   "username": "JesseRMeyer",
   "v": 3
  },
  "html": "<a href=\"mailto:&#39;@jit\" rel=\"nofollow\">&#39;@jit</a>(uint8<a href=\"http://uint8[:,:]\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">:,:</a>, nopython=True)&#39;",
  "id": "5b63494b3a5a2d2f99e46bb3",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-08-02T18:11:23.180Z",
  "text": "'@jit(uint8[:,:](uint8[:,:]), nopython=True)'",
  "unread": false,
  "urls": [
   {
    "url": "mailto:&#39;@jit"
   },
   {
    "url": "http://uint8[:,:]"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/JesseRMeyer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/5846309?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/5846309?v=4&s=60",
   "displayName": "Jesse Meyer",
   "gv": "4",
   "id": "594bd395d73408ce4f695537",
   "url": "/JesseRMeyer",
   "username": "JesseRMeyer",
   "v": 3
  },
  "html": "<code>@jit(uint8[:,:](uint8[:,:]), nopython=True)</code>",
  "id": "5b63495104436a1ae60955f1",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-08-02T18:11:29.333Z",
  "text": "`@jit(uint8[:,:](uint8[:,:]), nopython=True)`",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "ok, and what are you passing in?  NumPy array?",
  "id": "5b63496679bfdf5c998cd41c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-08-02T18:11:50.974Z",
  "text": "ok, and what are you passing in?  NumPy array?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/JesseRMeyer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/5846309?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/5846309?v=4&s=60",
   "displayName": "Jesse Meyer",
   "gv": "4",
   "id": "594bd395d73408ce4f695537",
   "url": "/JesseRMeyer",
   "username": "JesseRMeyer",
   "v": 3
  },
  "html": "Yes",
  "id": "5b63496c0cfcf02fdffff3bf",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-08-02T18:11:56.378Z",
  "text": "Yes",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "hmm, this seems strange.  Can you open an issue?  I&#39;m trying to figure out if there is something funny about how uint8 is being handled.",
  "id": "5b63498ba9426c705d1a33bc",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-08-02T18:12:27.533Z",
  "text": "hmm, this seems strange.  Can you open an issue?  I'm trying to figure out if there is something funny about how uint8 is being handled.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/JesseRMeyer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/5846309?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/5846309?v=4&s=60",
   "displayName": "Jesse Meyer",
   "gv": "4",
   "id": "594bd395d73408ce4f695537",
   "url": "/JesseRMeyer",
   "username": "JesseRMeyer",
   "v": 3
  },
  "html": "But Numba cannot progress past the declaration (I&#39;ve commented out every call to the function).",
  "id": "5b63498f74470f5c983e428f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-08-02T18:12:31.625Z",
  "text": "But Numba cannot progress past the declaration (I've commented out every call to the function).",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/JesseRMeyer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/5846309?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/5846309?v=4&s=60",
   "displayName": "Jesse Meyer",
   "gv": "4",
   "id": "594bd395d73408ce4f695537",
   "url": "/JesseRMeyer",
   "username": "JesseRMeyer",
   "v": 3
  },
  "html": "Sure.",
  "id": "5b6349a85d1362758b22fba8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 20,
  "sent": "2018-08-02T18:12:56.104Z",
  "text": "Sure.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/JesseRMeyer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/5846309?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/5846309?v=4&s=60",
   "displayName": "Jesse Meyer",
   "gv": "4",
   "id": "594bd395d73408ce4f695537",
   "url": "/JesseRMeyer",
   "username": "JesseRMeyer",
   "v": 3
  },
  "html": "How would you prefer that I name the issue for the tracker? ",
  "id": "5b634a5f3a5a2d2f99e47295",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 20,
  "sent": "2018-08-02T18:15:59.483Z",
  "text": "How would you prefer that I name the issue for the tracker? ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "&quot;Buffer dtype cannot be buffer&quot;",
  "id": "5b634ab66d45752f987dd2a7",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 20,
  "sent": "2018-08-02T18:17:26.747Z",
  "text": "\"Buffer dtype cannot be buffer\"",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "that&#39;s pretty distinctive",
  "id": "5b634abe3bca002dcbb2ce8f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 20,
  "sent": "2018-08-02T18:17:33.999Z",
  "text": "that's pretty distinctive",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "if you can put in a short code example, that will ensure we check the same thing you are doing",
  "id": "5b634ad73bca002dcbb2cf86",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 20,
  "sent": "2018-08-02T18:17:59.813Z",
  "text": "if you can put in a short code example, that will ensure we check the same thing you are doing",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/JesseRMeyer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/5846309?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/5846309?v=4&s=60",
   "displayName": "Jesse Meyer",
   "gv": "4",
   "id": "594bd395d73408ce4f695537",
   "url": "/JesseRMeyer",
   "username": "JesseRMeyer",
   "v": 3
  },
  "html": "<code>@jit(uint8[:][:](uint8[:][:]), nopython=True)</code> is the code that generates that error.",
  "id": "5b634aea3bca002dcbb2cf8f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 21,
  "sent": "2018-08-02T18:18:18.908Z",
  "text": "`@jit(uint8[:][:](uint8[:][:]), nopython=True)` is the code that generates that error.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/JesseRMeyer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/5846309?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/5846309?v=4&s=60",
   "displayName": "Jesse Meyer",
   "gv": "4",
   "id": "594bd395d73408ce4f695537",
   "url": "/JesseRMeyer",
   "username": "JesseRMeyer",
   "v": 3
  },
  "html": "The code I put above actually generates Invalid usage of tuple(int64 x 2) with parameters ()",
  "id": "5b634b023a5a2d2f99e475e6",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 22,
  "sent": "2018-08-02T18:18:42.798Z",
  "text": "The code I put above actually generates Invalid usage of tuple(int64 x 2) with parameters ()",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/JesseRMeyer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/5846309?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/5846309?v=4&s=60",
   "displayName": "Jesse Meyer",
   "gv": "4",
   "id": "594bd395d73408ce4f695537",
   "url": "/JesseRMeyer",
   "username": "JesseRMeyer",
   "v": 3
  },
  "html": "I hadn&#39;t realized I made that modification before posting - sorry.",
  "id": "5b634b188eb2d52fde37ad8c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 22,
  "sent": "2018-08-02T18:19:04.272Z",
  "text": "I hadn't realized I made that modification before posting - sorry.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/JesseRMeyer",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/5846309?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/5846309?v=4&s=60",
   "displayName": "Jesse Meyer",
   "gv": "4",
   "id": "594bd395d73408ce4f695537",
   "url": "/JesseRMeyer",
   "username": "JesseRMeyer",
   "v": 3
  },
  "html": "I do not know if the syntax differences actually change the semantics in a subtle way.",
  "id": "5b634b6d0cfcf02fdf00026d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 22,
  "sent": "2018-08-02T18:20:29.376Z",
  "text": "I do not know if the syntax differences actually change the semantics in a subtle way.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/looooo",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/5084704?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/5084704?v=4&s=60",
   "displayName": "lorenz",
   "gv": "4",
   "id": "577e4cfec2f0db084a21e347",
   "url": "/looooo",
   "username": "looooo",
   "v": 156
  },
  "html": "<p>for me newer versions of numba (0.39, 0.4_dev) are slower than 0.38:<br><a href=\"https://github.com/booya-at/poly-tri/blob/master/tests/speed_numba0-39.ipynb\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://github.com/booya-at/poly-tri/blob/master/tests/speed_numba0-39.ipynb</a><br><a href=\"https://github.com/booya-at/poly-tri/blob/master/tests/speed_numba0.38.ipynb\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://github.com/booya-at/poly-tri/blob/master/tests/speed_numba0.38.ipynb</a></p><p>what is the reason for this. Is there a difference between llvm-light of numba channel and llvm-light of conda-forge channel? </p>",
  "id": "5b64151a8eb2d52fde3c17a5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 20,
  "sent": "2018-08-03T08:40:58.092Z",
  "text": "for me newer versions of numba (0.39, 0.4_dev) are slower than 0.38:\nhttps://github.com/booya-at/poly-tri/blob/master/tests/speed_numba0-39.ipynb\nhttps://github.com/booya-at/poly-tri/blob/master/tests/speed_numba0.38.ipynb\n\nwhat is the reason for this. Is there a difference between llvm-light of numba channel and llvm-light of conda-forge channel? ",
  "unread": false,
  "urls": [
   {
    "url": "https://github.com/booya-at/poly-tri/blob/master/tests/speed_numba0-39.ipynb"
   },
   {
    "url": "https://github.com/booya-at/poly-tri/blob/master/tests/speed_numba0.38.ipynb"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "It would take some digging into the source of PolyTriPy to determine what is happening.  If you run cProfile, can you narrow down specific functions that are slower?",
  "id": "5b645c0dc79ebc1ae7a17a0b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 20,
  "sent": "2018-08-03T13:43:41.464Z",
  "text": "It would take some digging into the source of PolyTriPy to determine what is happening.  If you run cProfile, can you narrow down specific functions that are slower?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "The only difference between llvmlite on the numba channel and the conda-forge is that on the numba channel we build everything with the C compilers used by the Anaconda Distribution (gcc 7.2 for Linux), whereas conda-forge has not yet upgraded to newer compilers and uses gcc 4.8 for Linux still.  That should not affect the performance of generated code.",
  "id": "5b645fc66d45752f9883e417",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 21,
  "sent": "2018-08-03T13:59:34.953Z",
  "text": "The only difference between llvmlite on the numba channel and the conda-forge is that on the numba channel we build everything with the C compilers used by the Anaconda Distribution (gcc 7.2 for Linux), whereas conda-forge has not yet upgraded to newer compilers and uses gcc 4.8 for Linux still.  That should not affect the performance of generated code.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/looooo",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/5084704?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/5084704?v=4&s=60",
   "displayName": "lorenz",
   "gv": "4",
   "id": "577e4cfec2f0db084a21e347",
   "url": "/looooo",
   "username": "looooo",
   "v": 156
  },
  "html": "so mixing numba/llvm-light  from numba-channel and conda-forge packages is not a good idea? <span data-link-type=\"mention\" data-screen-name=\"seibert\" class=\"mention\">@seibert</span> ",
  "id": "5b65ecfb85278d705e8503f7",
  "issues": [],
  "mentions": [
   {
    "screenName": "seibert",
    "userId": "55b68af40fc9f982beab2a3c",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 18,
  "sent": "2018-08-04T18:14:19.349Z",
  "text": "so mixing numba/llvm-light  from numba-channel and conda-forge packages is not a good idea? @seibert ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/looooo",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/5084704?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/5084704?v=4&s=60",
   "displayName": "lorenz",
   "gv": "4",
   "id": "577e4cfec2f0db084a21e347",
   "url": "/looooo",
   "username": "looooo",
   "v": 156
  },
  "html": "I guess I am using numpy from conda-forge",
  "id": "5b65ed18a9426c705d28a628",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-08-04T18:14:48.712Z",
  "text": "I guess I am using numpy from conda-forge",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "Mixing compiled packages between conda-forge and Anaconda is not a good idea until conda-forge upgrades their compilers, correct.  It often works anyway, until you start dealing with C++ code (like Cython extensions).",
  "id": "5b686225e8698a2dca15ed54",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-08-06T14:58:45.448Z",
  "text": "Mixing compiled packages between conda-forge and Anaconda is not a good idea until conda-forge upgrades their compilers, correct.  It often works anyway, until you start dealing with C++ code (like Cython extensions).",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lericson",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/46901?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/46901?v=4&s=60",
   "displayName": "Ludvig Ericson",
   "gv": "4",
   "id": "58a33630d73408ce4f4a55ea",
   "url": "/lericson",
   "username": "lericson",
   "v": 3
  },
  "html": "I have a funny idea. What about a neural network library based on numba? The library generates code, bytecode or an AST or whatever it is numba does JIT on",
  "id": "5b6ae769a9426c705d4237f3",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-08-08T12:51:53.984Z",
  "text": "I have a funny idea. What about a neural network library based on numba? The library generates code, bytecode or an AST or whatever it is numba does JIT on",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lericson",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/46901?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/46901?v=4&s=60",
   "displayName": "Ludvig Ericson",
   "gv": "4",
   "id": "58a33630d73408ce4f4a55ea",
   "url": "/lericson",
   "username": "lericson",
   "v": 3
  },
  "html": "In general it would be interesting to implement some kind of symbolic math library on numba",
  "id": "5b6ae7826d45752f98a6480d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-08-08T12:52:18.395Z",
  "text": "In general it would be interesting to implement some kind of symbolic math library on numba",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lericson",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/46901?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/46901?v=4&s=60",
   "displayName": "Ludvig Ericson",
   "gv": "4",
   "id": "58a33630d73408ce4f4a55ea",
   "url": "/lericson",
   "username": "lericson",
   "v": 3
  },
  "html": "I know sympy has a numpy backend, not sure if there is numba support -- at any rate it would be good to have something tailormade",
  "id": "5b6ae7993a5a2d2f990cbcea",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-08-08T12:52:41.565Z",
  "text": "I know sympy has a numpy backend, not sure if there is numba support -- at any rate it would be good to have something tailormade",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/ehsantn",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2333645?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2333645?v=4&s=60",
   "displayName": "Ehsan Totoni",
   "gv": "4",
   "id": "56537ea416b6c7089cbbe080",
   "url": "/ehsantn",
   "username": "ehsantn",
   "v": 13
  },
  "html": "This is a good idea if someone has the cycles to do it :)",
  "id": "5b6afc13359c70045ca44486",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-08-08T14:20:03.284Z",
  "text": "This is a good idea if someone has the cycles to do it :)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "With so many other neural network libraries out there (and a number of them looking at JIT graph optimization), I&#39;m not sure one based on Numba would do anything significantly new.  That said, Numba as an extension mechanism for neural network libraries (to implement new custom operations) is something that makes a lot of sense.",
  "id": "5b6b1416e8698a2dca252613",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-08-08T16:02:30.195Z",
  "text": "With so many other neural network libraries out there (and a number of them looking at JIT graph optimization), I'm not sure one based on Numba would do anything significantly new.  That said, Numba as an extension mechanism for neural network libraries (to implement new custom operations) is something that makes a lot of sense.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "Numba support for libraries like autograd and tangent would also be neat.",
  "id": "5b6b1422e8698a2dca252627",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-08-08T16:02:42.584Z",
  "text": "Numba support for libraries like autograd and tangent would also be neat.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "We think Tangent (<a href=\"https://github.com/google/tangent\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://github.com/google/tangent</a>) in particular generates pretty Numba-friendly code, though it would  require a Numba implementation of their stack to fully work.",
  "id": "5b6b146a359c70045ca4e0cc",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-08-08T16:03:54.597Z",
  "text": "We think Tangent (https://github.com/google/tangent) in particular generates pretty Numba-friendly code, though it would  require a Numba implementation of their stack to fully work.",
  "unread": false,
  "urls": [
   {
    "url": "https://github.com/google/tangent"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/dhirschfeld",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/881019?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/881019?v=4&s=60",
   "displayName": "Dave Hirschfeld",
   "gv": "4",
   "id": "533187555e986b0712effbbd",
   "url": "/dhirschfeld",
   "username": "dhirschfeld",
   "v": 40
  },
  "html": "Using sympy with numba <em>should</em> be possible, but last I checked it wasn&#39;t - <a target=\"_blank\" data-link-type=\"issue\" data-issue=\"2328\" class=\"issue\">#2328</a>",
  "id": "5b6b9c2ee9b96f2c98e1aa10",
  "issues": [
   {
    "number": "2328"
   }
  ],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-08-09T01:43:10.307Z",
  "text": "Using sympy with numba *should* be possible, but last I checked it wasn't - #2328",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lericson",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/46901?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/46901?v=4&s=60",
   "displayName": "Ludvig Ericson",
   "gv": "4",
   "id": "58a33630d73408ce4f4a55ea",
   "url": "/lericson",
   "username": "lericson",
   "v": 3
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"seibert\" class=\"mention\">@seibert</span> interesting, Tangent absolutely looks like the right direction -- perhaps a simple proof-of-concept with some subset of Tangent that is compilable by Numba would be a nice first step",
  "id": "5b6c027fe9b96f2c98e3c2cd",
  "issues": [],
  "mentions": [
   {
    "screenName": "seibert",
    "userId": "55b68af40fc9f982beab2a3c",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 16,
  "sent": "2018-08-09T08:59:43.846Z",
  "text": "@seibert interesting, Tangent absolutely looks like the right direction -- perhaps a simple proof-of-concept with some subset of Tangent that is compilable by Numba would be a nice first step",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lericson",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/46901?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/46901?v=4&s=60",
   "displayName": "Ludvig Ericson",
   "gv": "4",
   "id": "58a33630d73408ce4f4a55ea",
   "url": "/lericson",
   "username": "lericson",
   "v": 3
  },
  "html": "But then indeed Numba would be more of an optimization for Tangent than anything else",
  "id": "5b6c028ea6af14730b0f2d93",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-08-09T08:59:58.617Z",
  "text": "But then indeed Numba would be more of an optimization for Tangent than anything else",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lericson",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/46901?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/46901?v=4&s=60",
   "displayName": "Ludvig Ericson",
   "gv": "4",
   "id": "58a33630d73408ce4f4a55ea",
   "url": "/lericson",
   "username": "lericson",
   "v": 3
  },
  "html": "And the question then becomes if it would not be better to just use Pypy",
  "id": "5b6c029649932d4fe4b991b2",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-08-09T09:00:06.925Z",
  "text": "And the question then becomes if it would not be better to just use Pypy",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lericson",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/46901?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/46901?v=4&s=60",
   "displayName": "Ludvig Ericson",
   "gv": "4",
   "id": "58a33630d73408ce4f4a55ea",
   "url": "/lericson",
   "username": "lericson",
   "v": 3
  },
  "html": "In fact how does Numba heavy code stack up to Pypy jitted code?",
  "id": "5b6c02a4937eee2423f2fce5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-08-09T09:00:20.495Z",
  "text": "In fact how does Numba heavy code stack up to Pypy jitted code?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lericson",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/46901?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/46901?v=4&s=60",
   "displayName": "Ludvig Ericson",
   "gv": "4",
   "id": "58a33630d73408ce4f4a55ea",
   "url": "/lericson",
   "username": "lericson",
   "v": 3
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"dhirschfeld\" class=\"mention\">@dhirschfeld</span> Interesting! Assuming that it would work, it in my mind would seem like SymPy code is fairly messy, is that the case? And how would you say SymPy with lambdify compares to Tangent? It seems like a similar approach.",
  "id": "5b6c0adf67eb9f60feb727bb",
  "issues": [],
  "mentions": [
   {
    "screenName": "dhirschfeld",
    "userId": "533187555e986b0712effbbd",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 17,
  "sent": "2018-08-09T09:35:27.401Z",
  "text": "@dhirschfeld Interesting! Assuming that it would work, it in my mind would seem like SymPy code is fairly messy, is that the case? And how would you say SymPy with lambdify compares to Tangent? It seems like a similar approach.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/scootty1",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=60",
   "displayName": "scootty1",
   "gv": "4",
   "id": "5af2b904d73408ce4f98a88d",
   "url": "/scootty1",
   "username": "scootty1",
   "v": 6
  },
  "html": "Hi! I&#39;ve got some trouble with <code>typeof_pyval</code> taking up huge amounts of my program runtime. Is there any way to disable checking types each time a jitted function is called from python code?",
  "id": "5b6d43b726e68560fdd67ae5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-08-10T07:50:15.831Z",
  "text": "Hi! I've got some trouble with `typeof_pyval` taking up huge amounts of my program runtime. Is there any way to disable checking types each time a jitted function is called from python code?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/scootty1",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=60",
   "displayName": "scootty1",
   "gv": "4",
   "id": "5af2b904d73408ce4f98a88d",
   "url": "/scootty1",
   "username": "scootty1",
   "v": 6
  },
  "html": "Or are there specific types that result in especially long calls to <code>typeof_pyval</code>? I&#39;ve got the feeling that mutables of non-fixed types, like lists of many different objects, take a really long time, since each element must be checked... Can I somehow improve the performance when passing a container of lots of different objects? Will an array of dtype object be faster?",
  "id": "5b6d4448196bc60b6bacb4f6",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-08-10T07:52:40.241Z",
  "text": "Or are there specific types that result in especially long calls to `typeof_pyval`? I've got the feeling that mutables of non-fixed types, like lists of many different objects, take a really long time, since each element must be checked... Can I somehow improve the performance when passing a container of lots of different objects? Will an array of dtype object be faster?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"scootty1\" class=\"mention\">@scootty1</span> IIRC there&#39;s fast paths in type identification for common types but anything else ends up having to be resolved by a more involved fall back mechanism (I guess this is what you are hitting).",
  "id": "5b6d5460a6af14730b16bd74",
  "issues": [],
  "mentions": [
   {
    "screenName": "scootty1",
    "userId": "5af2b904d73408ce4f98a88d",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 15,
  "sent": "2018-08-10T09:01:20.847Z",
  "text": "@scootty1 IIRC there's fast paths in type identification for common types but anything else ends up having to be resolved by a more involved fall back mechanism (I guess this is what you are hitting).",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/scootty1",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=60",
   "displayName": "scootty1",
   "gv": "4",
   "id": "5af2b904d73408ce4f98a88d",
   "url": "/scootty1",
   "username": "scootty1",
   "v": 6
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span> Thanks for that information! I did some testing with all kinds of types and it seems like lists always have to be resolved by the more involved fall back mechanism. At least when they are stored in some other container like a tuple. Using arrays instead of lists drastically reduces the time needed for calls to typeof",
  "id": "5b6d597167eb9f60febe96ec",
  "issues": [],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 14,
  "sent": "2018-08-10T09:22:57.091Z",
  "text": "@stuartarchibald Thanks for that information! I did some testing with all kinds of types and it seems like lists always have to be resolved by the more involved fall back mechanism. At least when they are stored in some other container like a tuple. Using arrays instead of lists drastically reduces the time needed for calls to typeof",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "I <em>think</em> lists look at the first element for their type, so as a minimum they&#39;ll have to be typed as <code>list</code> and then loop round for the <code>what type of list is it</code>",
  "id": "5b6d5a8a179f842c971ae8ed",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-08-10T09:27:38.182Z",
  "text": "I *think* lists look at the first element for their type, so as a minimum they'll have to be typed as `list` and then loop round for the `what type of list is it`",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/scootty1",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=60",
   "displayName": "scootty1",
   "gv": "4",
   "id": "5af2b904d73408ce4f98a88d",
   "url": "/scootty1",
   "username": "scootty1",
   "v": 6
  },
  "html": "I my tests I used single-element-lists stored in a tuple. But the increase in time taken for type inference was so tremendous, that I think there is something wrong with it when using lists.",
  "id": "5b6d60f7e9b96f2c98eb68a7",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-08-10T09:55:03.596Z",
  "text": "I my tests I used single-element-lists stored in a tuple. But the increase in time taken for type inference was so tremendous, that I think there is something wrong with it when using lists.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "I think the giant scope for <code>stuff to put in tuples</code> is probably the reason. There are specialisations internally if you have a tuple with homogeneous type.",
  "id": "5b6d7f34b3cbd23ffc21eb0e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-08-10T12:04:04.619Z",
  "text": "I think the giant scope for `stuff to put in tuples` is probably the reason. There are specialisations internally if you have a tuple with homogeneous type.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/scootty1",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=60",
   "displayName": "scootty1",
   "gv": "4",
   "id": "5af2b904d73408ce4f98a88d",
   "url": "/scootty1",
   "username": "scootty1",
   "v": 6
  },
  "html": "I made some more tests. My real use case function has 67 input arguments. It is executed 10k times. If I pass all input arguments separately, so not a single nested list/tuple/whatever, each single element list as input argument raises the execution time by about 1.5s. Using <code>np.ndarray</code>s instead of lists results in a total execution time of 1.12s, including <code>typeof_pyval</code> and <code>_compile_for_args</code>.",
  "id": "5b6d832f637ee66082cf9420",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-08-10T12:21:03.554Z",
  "text": "I made some more tests. My real use case function has 67 input arguments. It is executed 10k times. If I pass all input arguments separately, so not a single nested list/tuple/whatever, each single element list as input argument raises the execution time by about 1.5s. Using `np.ndarray`s instead of lists results in a total execution time of 1.12s, including `typeof_pyval` and `_compile_for_args`.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/scootty1",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=60",
   "displayName": "scootty1",
   "gv": "4",
   "id": "5af2b904d73408ce4f98a88d",
   "url": "/scootty1",
   "username": "scootty1",
   "v": 6
  },
  "html": "Passing 4 separate lists, all only of <code>len(my_list) == 1</code> with for example <code>my_list1 = [5]</code>, <code>my_list2 = [True]</code>, etc..., results in a total execution time of ca. 6.9s. <code>_compile_for_args</code> has a small increase of ca. 30ms, the function execution itself an increase of ca. 70ms. The remaining 6.8s increase comes from <code>typeof_pyval</code>.",
  "id": "5b6d843c179f842c971bade6",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-08-10T12:25:32.954Z",
  "text": "Passing 4 separate lists, all only of `len(my_list) == 1` with for example `my_list1 = [5]`, `my_list2 = [True]`, etc..., results in a total execution time of ca. 6.9s. `_compile_for_args` has a small increase of ca. 30ms, the function execution itself an increase of ca. 70ms. The remaining 6.8s increase comes from `typeof_pyval`.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/scootty1",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=60",
   "displayName": "scootty1",
   "gv": "4",
   "id": "5af2b904d73408ce4f98a88d",
   "url": "/scootty1",
   "username": "scootty1",
   "v": 6
  },
  "html": "So from my point of view it doesn&#39;t seem to come from the giant scope of the stuff to put in tuple, rather from some trouble with the type inference of lists. But to be honest: I m a total rookie when it comes to internals/backends of programming languages. :)",
  "id": "5b6d8542a3a93d2422466380",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-08-10T12:29:54.621Z",
  "text": "So from my point of view it doesn't seem to come from the giant scope of the stuff to put in tuple, rather from some trouble with the type inference of lists. But to be honest: I m a total rookie when it comes to internals/backends of programming languages. :)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/scootty1",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=60",
   "displayName": "scootty1",
   "gv": "4",
   "id": "5af2b904d73408ce4f98a88d",
   "url": "/scootty1",
   "username": "scootty1",
   "v": 6
  },
  "html": "One thing about the tuple with homogeneous type: I&#39;ve got mostly arrays with np.float64 and a few with np.int32/64. Should I save them to separate tuples to improve the performance?",
  "id": "5b6d85b649932d4fe4c1cd76",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-08-10T12:31:50.177Z",
  "text": "One thing about the tuple with homogeneous type: I've got mostly arrays with np.float64 and a few with np.int32/64. Should I save them to separate tuples to improve the performance?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "Can you just use arrays ?",
  "id": "5b6d8821988005174ebd7090",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-08-10T12:42:09.836Z",
  "text": "Can you just use arrays ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "it&#39;s also worth noting the boxing/unboxing lists  can be expensive and does a load of <code>typeof</code> type stuff.",
  "id": "5b6d88d3179f842c971bc993",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-08-10T12:45:07.993Z",
  "text": "it's also worth noting the boxing/unboxing lists  can be expensive and does a load of `typeof` type stuff.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/scootty1",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=60",
   "displayName": "scootty1",
   "gv": "4",
   "id": "5af2b904d73408ce4f98a88d",
   "url": "/scootty1",
   "username": "scootty1",
   "v": 6
  },
  "html": "Yes, I could just use arrays. It will be some effort, but it should be doable. 24 of my 67 input arguments are not arrays. Most of them are floats, ca. 4 are bools. I could either pack these into arrays or tuples (all of them are fixed values) for each type. But this will reduce the code readability.",
  "id": "5b6d8af5a3a93d24224685b2",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-08-10T12:54:13.230Z",
  "text": "Yes, I could just use arrays. It will be some effort, but it should be doable. 24 of my 67 input arguments are not arrays. Most of them are floats, ca. 4 are bools. I could either pack these into arrays or tuples (all of them are fixed values) for each type. But this will reduce the code readability.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/scootty1",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=60",
   "displayName": "scootty1",
   "gv": "4",
   "id": "5af2b904d73408ce4f98a88d",
   "url": "/scootty1",
   "username": "scootty1",
   "v": 6
  },
  "html": "I removed all lists, thus boxing/unboxing of lists is not an issue anymore. But does this also hold true for unboxing tuples?",
  "id": "5b6d8b255762ee4fe558d7df",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-08-10T12:55:01.449Z",
  "text": "I removed all lists, thus boxing/unboxing of lists is not an issue anymore. But does this also hold true for unboxing tuples?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "IIRC tuples are cheaper",
  "id": "5b6d8bc9196bc60b6bae1291",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-08-10T12:57:45.949Z",
  "text": "IIRC tuples are cheaper",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "If you have a load of fixed values would a closure help ?",
  "id": "5b6d8be3179f842c971bdb99",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-08-10T12:58:11.021Z",
  "text": "If you have a load of fixed values would a closure help ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/scootty1",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=60",
   "displayName": "scootty1",
   "gv": "4",
   "id": "5af2b904d73408ce4f98a88d",
   "url": "/scootty1",
   "username": "scootty1",
   "v": 6
  },
  "html": "I also thought about using closures, but I was not sure if I could implement it in my case. I guess I should really take a look at it.",
  "id": "5b6d8c8449932d4fe4c1f689",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-08-10T13:00:52.184Z",
  "text": "I also thought about using closures, but I was not sure if I could implement it in my case. I guess I should really take a look at it.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/max9111",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/8729846?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/8729846?v=4&s=60",
   "displayName": "max9111",
   "gv": "4",
   "id": "5a940f4cd73408ce4f8ee242",
   "url": "/max9111",
   "username": "max9111",
   "v": 2
  },
  "html": "It is quite easy (and documented) how to wrap cython cdef functions taking (floats, ints) as input/output. But how to wrap a functions which takes or return complex numbers? eg. hankel1e from scipy.special <a href=\"https://docs.scipy.org/doc/scipy/reference/special.cython_special.html#module-scipy.special.cython_special\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://docs.scipy.org/doc/scipy/reference/special.cython_special.html#module-scipy.special.cython_special</a>",
  "id": "5b6d8cea67eb9f60febf91e9",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-08-10T13:02:34.506Z",
  "text": "It is quite easy (and documented) how to wrap cython cdef functions taking (floats, ints) as input/output. But how to wrap a functions which takes or return complex numbers? eg. hankel1e from scipy.special https://docs.scipy.org/doc/scipy/reference/special.cython_special.html#module-scipy.special.cython_special",
  "unread": false,
  "urls": [
   {
    "url": "https://docs.scipy.org/doc/scipy/reference/special.cython_special.html#module-scipy.special.cython_special"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/scootty1",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=60",
   "displayName": "scootty1",
   "gv": "4",
   "id": "5af2b904d73408ce4f98a88d",
   "url": "/scootty1",
   "username": "scootty1",
   "v": 6
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span> But back to the tuples: Would splitting up the tuples into one tuple for arrays, one for bools, one for floats and one for ints help? And is a tuple with arrays of dtype float64 AND int32/64 considered homogeneous?",
  "id": "5b6d8d9ea6af14730b17d913",
  "issues": [],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 15,
  "sent": "2018-08-10T13:05:34.328Z",
  "text": "@stuartarchibald But back to the tuples: Would splitting up the tuples into one tuple for arrays, one for bools, one for floats and one for ints help? And is a tuple with arrays of dtype float64 AND int32/64 considered homogeneous?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "because there&#39;s specialisations if the types in a tuple are all the same",
  "id": "5b6d8ea4196bc60b6bae2363",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-08-10T13:09:56.122Z",
  "text": "because there's specialisations if the types in a tuple are all the same",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "if dtypes are different then they are not homogeneous ",
  "id": "5b6d8eb35762ee4fe558eb03",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-08-10T13:10:11.051Z",
  "text": "if dtypes are different then they are not homogeneous ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "you can do <code>type(numba.typeof(&lt;some python thing&gt;))</code>",
  "id": "5b6d8f7d179f842c971bf283",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-08-10T13:13:33.957Z",
  "text": "you can do `type(numba.typeof(<some python thing>))`",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "to find out",
  "id": "5b6d8f81196bc60b6bae265b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-08-10T13:13:37.958Z",
  "text": "to find out",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/scootty1",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=60",
   "displayName": "scootty1",
   "gv": "4",
   "id": "5af2b904d73408ce4f98a88d",
   "url": "/scootty1",
   "username": "scootty1",
   "v": 6
  },
  "html": "Ok, thanks alot for your help! This really helped me with understanding at least a few more things running in the backend and especially with improving my code. Perhaps these specialisations fot homogeneous tuples should be mentioned in the documentation.",
  "id": "5b6d8f8aa3a93d242246a620",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-08-10T13:13:46.184Z",
  "text": "Ok, thanks alot for your help! This really helped me with understanding at least a few more things running in the backend and especially with improving my code. Perhaps these specialisations fot homogeneous tuples should be mentioned in the documentation.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "If you have a giant number of arguments to your functions, typing them is always going to cause grief, and given you have 10k invocations, that&#39;s a lot of things to check <em>literally</em> every time a call is made",
  "id": "5b6d8fda937eee2423fb7f39",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-08-10T13:15:06.269Z",
  "text": "If you have a giant number of arguments to your functions, typing them is always going to cause grief, and given you have 10k invocations, that's a lot of things to check *literally* every time a call is made",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/scootty1",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=60",
   "displayName": "scootty1",
   "gv": "4",
   "id": "5af2b904d73408ce4f98a88d",
   "url": "/scootty1",
   "username": "scootty1",
   "v": 6
  },
  "html": "well, 10k is just the test-case. The real use case will be more like 1e6 times and more.",
  "id": "5b6d900c196bc60b6bae297a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-08-10T13:15:56.294Z",
  "text": "well, 10k is just the test-case. The real use case will be more like 1e6 times and more.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "I&#39;d look at either driving the iterations using Numba too, which means there&#39;s no real dispatch cost and/or using closures to limit the number of things that need typing.",
  "id": "5b6d9017a3a93d242246a915",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-08-10T13:16:07.798Z",
  "text": "I'd look at either driving the iterations using Numba too, which means there's no real dispatch cost and/or using closures to limit the number of things that need typing.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/scootty1",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=60",
   "displayName": "scootty1",
   "gv": "4",
   "id": "5af2b904d73408ce4f98a88d",
   "url": "/scootty1",
   "username": "scootty1",
   "v": 6
  },
  "html": "yep, I m on my way towards this goal, but my timeschedule is quite tight. So I guess I won&#39;t be able to get to this point. Especially since there are lots of functions from additional modules being called in the iterations, for which I&#39;d have to make sure that these are jitted as well.",
  "id": "5b6d9078b3cbd23ffc225cce",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-08-10T13:17:44.462Z",
  "text": "yep, I m on my way towards this goal, but my timeschedule is quite tight. So I guess I won't be able to get to this point. Especially since there are lots of functions from additional modules being called in the iterations, for which I'd have to make sure that these are jitted as well.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/scootty1",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=60",
   "displayName": "scootty1",
   "gv": "4",
   "id": "5af2b904d73408ce4f98a88d",
   "url": "/scootty1",
   "username": "scootty1",
   "v": 6
  },
  "html": "I also tried just jitting the function containing the outer loop without nopython mode and was hoping that all arguments passed into it would &quot;remain&quot; typed, but it seemed like they still need typing at each call.",
  "id": "5b6d90e72a8e6c6083a4deff",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-08-10T13:19:35.825Z",
  "text": "I also tried just jitting the function containing the outer loop without nopython mode and was hoping that all arguments passed into it would \"remain\" typed, but it seemed like they still need typing at each call.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/scootty1",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=60",
   "displayName": "scootty1",
   "gv": "4",
   "id": "5af2b904d73408ce4f98a88d",
   "url": "/scootty1",
   "username": "scootty1",
   "v": 6
  },
  "html": "Oh and I just realized that also having arrays of different ndims makes the tuple heterogeneous. I guess making all homogeneous tuples will be too much effort then... :(",
  "id": "5b6d919d26e68560fdd806b7",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-08-10T13:22:37.479Z",
  "text": "Oh and I just realized that also having arrays of different ndims makes the tuple heterogeneous. I guess making all homogeneous tuples will be too much effort then... :(",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/scootty1",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=60",
   "displayName": "scootty1",
   "gv": "4",
   "id": "5af2b904d73408ce4f98a88d",
   "url": "/scootty1",
   "username": "scootty1",
   "v": 6
  },
  "html": "One more thing: Is using namedtuple with caching possible? As far as I remember namedtuples weren&#39;t supported with caching...",
  "id": "5b6d94d12a8e6c6083a4f8e7",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-08-10T13:36:17.916Z",
  "text": "One more thing: Is using namedtuple with caching possible? As far as I remember namedtuples weren't supported with caching...",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/scootty1",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=60",
   "displayName": "scootty1",
   "gv": "4",
   "id": "5af2b904d73408ce4f98a88d",
   "url": "/scootty1",
   "username": "scootty1",
   "v": 6
  },
  "html": "And how does the performance of homogeneous namedtuple compare to a homogeneous tuple?",
  "id": "5b6d94fd2a8e6c6083a4f9cb",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-08-10T13:37:01.749Z",
  "text": "And how does the performance of homogeneous namedtuple compare to a homogeneous tuple?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"max9111\" class=\"mention\">@max9111</span> don&#39;t think that&#39;s possible right now ? In part because ctypes has no C99 complex support and hacking up a struct or whatever won&#39;t be portable?",
  "id": "5b6d96655762ee4fe5591c60",
  "issues": [],
  "mentions": [
   {
    "screenName": "max9111",
    "userId": "5a940f4cd73408ce4f8ee242",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 19,
  "sent": "2018-08-10T13:43:01.497Z",
  "text": "@max9111 don't think that's possible right now ? In part because ctypes has no C99 complex support and hacking up a struct or whatever won't be portable?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"scootty1\" class=\"mention\">@scootty1</span> don&#39;t recall re caching and I&#39;d imagine about the same.",
  "id": "5b6d968a179f842c971c20cd",
  "issues": [],
  "mentions": [
   {
    "screenName": "scootty1",
    "userId": "5af2b904d73408ce4f98a88d",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 19,
  "sent": "2018-08-10T13:43:38.170Z",
  "text": "@scootty1 don't recall re caching and I'd imagine about the same.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "typing requires looking at all the things, once typed, if there is a specialisation available it helps with code gen and boxing etc.",
  "id": "5b6d96d067eb9f60febfd3da",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-08-10T13:44:48.101Z",
  "text": "typing requires looking at all the things, once typed, if there is a specialisation available it helps with code gen and boxing etc.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/scootty1",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=60",
   "displayName": "scootty1",
   "gv": "4",
   "id": "5af2b904d73408ce4f98a88d",
   "url": "/scootty1",
   "username": "scootty1",
   "v": 6
  },
  "html": "Ok, then thanks alot again! I&#39;ll give NamedUniTuple a try.",
  "id": "5b6d982f26e68560fdd82d4d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-08-10T13:50:39.885Z",
  "text": "Ok, then thanks alot again! I'll give NamedUniTuple a try.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "If you can spend the time trying to reduce the number of calls requiring typing or the number of args to your function that&#39;d be a good bet.",
  "id": "5b6d9890196bc60b6bae5c74",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-08-10T13:52:16.928Z",
  "text": "If you can spend the time trying to reduce the number of calls requiring typing or the number of args to your function that'd be a good bet.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/scootty1",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=60",
   "displayName": "scootty1",
   "gv": "4",
   "id": "5af2b904d73408ce4f98a88d",
   "url": "/scootty1",
   "username": "scootty1",
   "v": 6
  },
  "html": "Reducing the number of calls is probably quite hard, since there are too many functions involved, but I&#39;ll try to add the constant vars as closures and then go for NamedUniTuple or UniTuple.",
  "id": "5b6d998f179f842c971c3677",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-08-10T13:56:31.088Z",
  "text": "Reducing the number of calls is probably quite hard, since there are too many functions involved, but I'll try to add the constant vars as closures and then go for NamedUniTuple or UniTuple.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<pre><code><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np\n<span class=\"keyword\">from</span> numba <span class=\"keyword\">import</span> njit, typeof\n\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo_factory</span><span class=\"params\">(x5, x6, x7, x8, x9, x10)</span>:</span>\n    <span class=\"decorator\">@njit</span>\n    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">(x1, x2, x3, x4)</span>:</span>\n        <span class=\"keyword\">return</span> x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 + x10\n    <span class=\"keyword\">return</span> foo\n\n\nfoo_inst = foo_factory(*range(<span class=\"number\">6</span>))\n\nprint(foo_inst(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>))\nprint(foo_inst(<span class=\"number\">1j</span>, <span class=\"number\">2j</span>, <span class=\"number\">3j</span>, <span class=\"number\">4j</span>))\nprint(foo_inst.signatures)</code></pre>",
  "id": "5b6d9a2649932d4fe4c24819",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 20,
  "sent": "2018-08-10T13:59:02.430Z",
  "text": "```\nimport numpy as np\nfrom numba import njit, typeof\n\ndef foo_factory(x5, x6, x7, x8, x9, x10):\n    @njit\n    def foo(x1, x2, x3, x4):\n        return x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 + x10\n    return foo\n\n\nfoo_inst = foo_factory(*range(6))\n\nprint(foo_inst(1, 2, 3, 4))\nprint(foo_inst(1j, 2j, 3j, 4j))\nprint(foo_inst.signatures)\n```\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "try something like that ^ ?",
  "id": "5b6d9a2d179f842c971c3a6a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 20,
  "sent": "2018-08-10T13:59:09.928Z",
  "text": "try something like that ^ ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/scootty1",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=60",
   "displayName": "scootty1",
   "gv": "4",
   "id": "5af2b904d73408ce4f98a88d",
   "url": "/scootty1",
   "username": "scootty1",
   "v": 6
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span> Awesome! I also just found out that passing views to closures also keeps the views. Thus I could probably passing args during iteration at all! This could also make jitting all the other functions easier, thus resulting in being able to jit the outer iteration loop. You really really helped me alot! Thanks a million for your help and time!",
  "id": "5b6d9dbd2a8e6c6083a5372f",
  "issues": [],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 20,
  "sent": "2018-08-10T14:14:21.260Z",
  "text": "@stuartarchibald Awesome! I also just found out that passing views to closures also keeps the views. Thus I could probably passing args during iteration at all! This could also make jitting all the other functions easier, thus resulting in being able to jit the outer iteration loop. You really really helped me alot! Thanks a million for your help and time!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "no worries, glad you found something that works for you, thanks for using Numba :)",
  "id": "5b6d9e0f5762ee4fe55948a2",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 20,
  "sent": "2018-08-10T14:15:43.272Z",
  "text": "no worries, glad you found something that works for you, thanks for using Numba :)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/scootty1",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=60",
   "displayName": "scootty1",
   "gv": "4",
   "id": "5af2b904d73408ce4f98a88d",
   "url": "/scootty1",
   "username": "scootty1",
   "v": 6
  },
  "html": "Ok, just found out that using views in closures is NOT working when the inner function is properly jitted :(",
  "id": "5b6da0632a8e6c6083a549a9",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 21,
  "sent": "2018-08-10T14:25:39.547Z",
  "text": "Ok, just found out that using views in closures is NOT working when the inner function is properly jitted :(",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/scootty1",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=60",
   "displayName": "scootty1",
   "gv": "4",
   "id": "5af2b904d73408ce4f98a88d",
   "url": "/scootty1",
   "username": "scootty1",
   "v": 6
  },
  "html": "<pre><code><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">outer</span><span class=\"params\">(arr)</span>:</span>  <span class=\"comment\"># assigning to view</span>\n    <span class=\"comment\">#@nb.njit</span>\n    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">inner</span><span class=\"params\">()</span>:</span>\n        arr[:] = arr**<span class=\"number\">2</span>\n    <span class=\"keyword\">return</span> inner\n\na = np.random.rand(<span class=\"number\">5</span>) * <span class=\"number\">10</span>\nfun = outer(a)\nfun()  <span class=\"comment\"># only works without jitting</span>\n\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">outer2</span><span class=\"params\">(arr)</span>:</span>  <span class=\"comment\"># just checking if view is preserved</span>\n    <span class=\"decorator\">@nb.njit</span>\n    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">inner2</span><span class=\"params\">()</span>:</span>\n        <span class=\"keyword\">return</span> arr**<span class=\"number\">2</span>\n    <span class=\"keyword\">return</span> inner2\n\na = np.random.rand(<span class=\"number\">5</span>) * <span class=\"number\">10</span>\nfun2 = outer2(a)\nfun2()  <span class=\"comment\"># returns some values...</span>\na[<span class=\"number\">2</span>] = <span class=\"number\">5.</span>\nfun2()  <span class=\"comment\"># returns the same values like the last call, setting a[2]=5 has no effect</span></code></pre>",
  "id": "5b6da246196bc60b6bae9fd1",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 21,
  "sent": "2018-08-10T14:33:42.332Z",
  "text": "```\ndef outer(arr):  # assigning to view\n    #@nb.njit\n    def inner():\n        arr[:] = arr**2\n    return inner\n\na = np.random.rand(5) * 10\nfun = outer(a)\nfun()  # only works without jitting\n\ndef outer2(arr):  # just checking if view is preserved\n    @nb.njit\n    def inner2():\n        return arr**2\n    return inner2\n\na = np.random.rand(5) * 10\nfun2 = outer2(a)\nfun2()  # returns some values...\na[2] = 5.\nfun2()  # returns the same values like the last call, setting a[2]=5 has no effect\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/scootty1",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=60",
   "displayName": "scootty1",
   "gv": "4",
   "id": "5af2b904d73408ce4f98a88d",
   "url": "/scootty1",
   "username": "scootty1",
   "v": 6
  },
  "html": "Both does not work with views when njitting the inner functions. Is there any way to still make it work?",
  "id": "5b6da27fa6af14730b185d4f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 21,
  "sent": "2018-08-10T14:34:39.202Z",
  "text": "Both does not work with views when njitting the inner functions. Is there any way to still make it work?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/scootty1",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=60",
   "displayName": "scootty1",
   "gv": "4",
   "id": "5af2b904d73408ce4f98a88d",
   "url": "/scootty1",
   "username": "scootty1",
   "v": 6
  },
  "html": "Oh and thanks for developing numba. :) It has made my work alot easier (and faster ;) )",
  "id": "5b6da2f0a3a93d242247262d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 21,
  "sent": "2018-08-10T14:36:32.516Z",
  "text": "Oh and thanks for developing numba. :) It has made my work alot easier (and faster ;) )",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "I expect you are seeing this behaviour because globals get frozen at the site of jitting",
  "id": "5b6da3f2e9b96f2c98ece3c8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 21,
  "sent": "2018-08-10T14:40:50.286Z",
  "text": "I expect you are seeing this behaviour because globals get frozen at the site of jitting",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "in this case, <code>a</code> is a global, if you look at the assembler you can see it compiled into the function e.g.:<pre><code>        movq    <span class=\"number\">24</span>(<span class=\"variable\">%rax</span>), <span class=\"variable\">%rcx</span>\n        movabsq <span class=\"variable\">$4</span>629171138767924931, <span class=\"variable\">%rdx</span>\n        movq    <span class=\"variable\">%rdx</span>, (<span class=\"variable\">%rcx</span>)\n        movabsq <span class=\"variable\">$4</span>632395481148135534, <span class=\"variable\">%rdx</span>\n        movq    <span class=\"variable\">%rdx</span>, <span class=\"number\">8</span>(<span class=\"variable\">%rcx</span>)\n        movabsq <span class=\"variable\">$4</span>630310143633842459, <span class=\"variable\">%rdx</span>\n        movq    <span class=\"variable\">%rdx</span>, <span class=\"number\">16</span>(<span class=\"variable\">%rcx</span>)\n        movabsq <span class=\"variable\">$4</span>629050144526092045, <span class=\"variable\">%rdx</span>\n        movq    <span class=\"variable\">%rdx</span>, <span class=\"number\">24</span>(<span class=\"variable\">%rcx</span>)\n        movabsq <span class=\"variable\">$4</span>625745225956082637, <span class=\"variable\">%rdx</span></code></pre>",
  "id": "5b6da425196bc60b6baeada5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 21,
  "sent": "2018-08-10T14:41:41.922Z",
  "text": "in this case, `a` is a global, if you look at the assembler you can see it compiled into the function e.g.:\n```\n        movq    24(%rax), %rcx\n        movabsq $4629171138767924931, %rdx\n        movq    %rdx, (%rcx)\n        movabsq $4632395481148135534, %rdx\n        movq    %rdx, 8(%rcx)\n        movabsq $4630310143633842459, %rdx\n        movq    %rdx, 16(%rcx)\n        movabsq $4629050144526092045, %rdx\n        movq    %rdx, 24(%rcx)\n        movabsq $4625745225956082637, %rdx\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<pre><code><span class=\"keyword\">import</span> numba <span class=\"keyword\">as</span> nb\n<span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np\n\nsomething_freezable = <span class=\"number\">1337</span>\n\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">outer2</span><span class=\"params\">()</span>:</span>\n    <span class=\"decorator\">@nb.njit</span>\n    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">inner2</span><span class=\"params\">(arr)</span>:</span>\n        <span class=\"keyword\">return</span> something_freezable + arr**<span class=\"number\">2</span>\n    <span class=\"keyword\">return</span> inner2\n\nnp.random.seed(<span class=\"number\">0</span>)\na = np.random.rand(<span class=\"number\">5</span>) * <span class=\"number\">10</span>\nfun2 = outer2()\nprint(fun2(a))\na[<span class=\"number\">2</span>] = <span class=\"number\">5.</span>\nprint(fun2(a))</code></pre>try that ^",
  "id": "5b6da49167eb9f60fec03122",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 21,
  "sent": "2018-08-10T14:43:29.750Z",
  "text": "```\nimport numba as nb\nimport numpy as np\n\nsomething_freezable = 1337\n\ndef outer2():\n    @nb.njit\n    def inner2(arr):\n        return something_freezable + arr**2\n    return inner2\n\nnp.random.seed(0)\na = np.random.rand(5) * 10\nfun2 = outer2()\nprint(fun2(a))\na[2] = 5.\nprint(fun2(a))\n```\ntry that ^\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/scootty1",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=60",
   "displayName": "scootty1",
   "gv": "4",
   "id": "5af2b904d73408ce4f98a88d",
   "url": "/scootty1",
   "username": "scootty1",
   "v": 6
  },
  "html": "Yeah. Any workaround for this? assigning to <code>arr[:] = ...</code> is not that important, but seeing globals would make it possible to avoid passing args at all.<br>Puh, honestly I do not fully understand that ;)",
  "id": "5b6da4a467eb9f60fec031e4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 21,
  "sent": "2018-08-10T14:43:48.265Z",
  "text": "Yeah. Any workaround for this? assigning to `arr[:] = ...` is not that important, but seeing globals would make it possible to avoid passing args at all.\nPuh, honestly I do not fully understand that ;)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/scootty1",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=60",
   "displayName": "scootty1",
   "gv": "4",
   "id": "5af2b904d73408ce4f98a88d",
   "url": "/scootty1",
   "username": "scootty1",
   "v": 6
  },
  "html": "Thanks, I&#39;ll give it a try",
  "id": "5b6da4c4937eee2423fc0694",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 21,
  "sent": "2018-08-10T14:44:20.751Z",
  "text": "Thanks, I'll give it a try",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "If we didn&#39;t capture globals at compile time we&#39;d need to retype everything every time in case the global had changed its type, also, we&#39;d need to reflect any changes made to the global back. <a href=\"http://numba.pydata.org/numba-doc/dev/user/faq.html?highlight=global#numba-doesn-t-seem-to-care-when-i-modify-a-global-variable\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://numba.pydata.org/numba-doc/dev/user/faq.html?highlight=global#numba-doesn-t-seem-to-care-when-i-modify-a-global-variable</a>",
  "id": "5b6da565e9b96f2c98ecebbd",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 21,
  "sent": "2018-08-10T14:47:01.154Z",
  "text": "If we didn't capture globals at compile time we'd need to retype everything every time in case the global had changed its type, also, we'd need to reflect any changes made to the global back. http://numba.pydata.org/numba-doc/dev/user/faq.html?highlight=global#numba-doesn-t-seem-to-care-when-i-modify-a-global-variable",
  "unread": false,
  "urls": [
   {
    "url": "http://numba.pydata.org/numba-doc/dev/user/faq.html?highlight=global#numba-doesn-t-seem-to-care-when-i-modify-a-global-variable"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/scootty1",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=60",
   "displayName": "scootty1",
   "gv": "4",
   "id": "5af2b904d73408ce4f98a88d",
   "url": "/scootty1",
   "username": "scootty1",
   "v": 6
  },
  "html": "Ok, I remember having read this some time ago, but it like I didn&#39;t understand its consequences to full extent.<br>So... This will still make it possible to reduce the amount of arguments passed to my functions to 5 or less. Considering that I do not only have <em>one</em> jitted function which is called once per iteration, but more like several hundreds, all having different kinds and amounts of input arguments except for the 5 arrays which are views, this will greatly help me make my code more readable and faster. And especially I will be able to call all functions using exactly the same arguments. :)<br>So this has been of massive help to me. Thanks alot again!",
  "id": "5b6da715196bc60b6baec2ab",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 21,
  "sent": "2018-08-10T14:54:13.588Z",
  "text": "Ok, I remember having read this some time ago, but it like I didn't understand its consequences to full extent.\nSo... This will still make it possible to reduce the amount of arguments passed to my functions to 5 or less. Considering that I do not only have *one* jitted function which is called once per iteration, but more like several hundreds, all having different kinds and amounts of input arguments except for the 5 arrays which are views, this will greatly help me make my code more readable and faster. And especially I will be able to call all functions using exactly the same arguments. :)\nSo this has been of massive help to me. Thanks alot again!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "huh, inspired by this thread, I went looking for the dict version tag (<a href=\"https://www.python.org/dev/peps/pep-0509/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://www.python.org/dev/peps/pep-0509/</a>) in Python 3.6 that would allow Numba to quickly detect if globals had changed and re-jit.  Turns out there is no Python API to read the version tag?",
  "id": "5b6da92a988005174ebe3ee4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 22,
  "sent": "2018-08-10T15:03:06.851Z",
  "text": "huh, inspired by this thread, I went looking for the dict version tag (https://www.python.org/dev/peps/pep-0509/) in Python 3.6 that would allow Numba to quickly detect if globals had changed and re-jit.  Turns out there is no Python API to read the version tag?",
  "unread": false,
  "urls": [
   {
    "url": "https://www.python.org/dev/peps/pep-0509/"
   }
  ],
  "v": 1
 },
 {
  "editedAt": "2018-08-10T15:03:38.323Z",
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "You have to call the C API to get it...",
  "id": "5b6da933937eee2423fc24f2",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 22,
  "sent": "2018-08-10T15:03:15.499Z",
  "text": "You have to call the C API to get it...",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "well, i suppose good news is that we could do that",
  "id": "5b6da96a49932d4fe4c2a6cf",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 22,
  "sent": "2018-08-10T15:04:10.706Z",
  "text": "well, i suppose good news is that we could do that",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "bad news is that we have to do that",
  "id": "5b6da97449932d4fe4c2a72b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 22,
  "sent": "2018-08-10T15:04:20.911Z",
  "text": "bad news is that we have to do that",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "and here is why there is no <code>__version__</code> Python attribute on dict objects: <a href=\"https://www.python.org/dev/peps/pep-0509/#expose-the-version-at-python-level-as-a-read-only-version-property\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://www.python.org/dev/peps/pep-0509/#expose-the-version-at-python-level-as-a-read-only-version-property</a>",
  "id": "5b6da9c667eb9f60fec0549e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 23,
  "sent": "2018-08-10T15:05:42.256Z",
  "text": "and here is why there is no `__version__` Python attribute on dict objects: https://www.python.org/dev/peps/pep-0509/#expose-the-version-at-python-level-as-a-read-only-version-property",
  "unread": false,
  "urls": [
   {
    "url": "https://www.python.org/dev/peps/pep-0509/#expose-the-version-at-python-level-as-a-read-only-version-property"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/scootty1",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=60",
   "displayName": "scootty1",
   "gv": "4",
   "id": "5af2b904d73408ce4f98a88d",
   "url": "/scootty1",
   "username": "scootty1",
   "v": 6
  },
  "html": "So if re-jitting based on detected changes to globals was possible: Would that mean that globals may, in specific cases, not be considered as compile time constants anymore?",
  "id": "5b6dae6649932d4fe4c2c60a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 23,
  "sent": "2018-08-10T15:25:26.752Z",
  "text": "So if re-jitting based on detected changes to globals was possible: Would that mean that globals may, in specific cases, not be considered as compile time constants anymore?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "yes",
  "id": "5b6daf9b5762ee4fe559bb9f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 23,
  "sent": "2018-08-10T15:30:35.399Z",
  "text": "yes",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/scootty1",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=60",
   "displayName": "scootty1",
   "gv": "4",
   "id": "5af2b904d73408ce4f98a88d",
   "url": "/scootty1",
   "username": "scootty1",
   "v": 6
  },
  "html": "nice! ok, now i m finally gone. Thanks again for your help.",
  "id": "5b6db145988005174ebe7c47",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 24,
  "sent": "2018-08-10T15:37:41.107Z",
  "text": "nice! ok, now i m finally gone. Thanks again for your help.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sivark",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/13558717?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/13558717?v=4&s=60",
   "displayName": "Siva Swaminathan",
   "gv": "4",
   "id": "57ffe110d73408ce4f2e0dbf",
   "url": "/sivark",
   "username": "sivark",
   "v": 7
  },
  "html": "Hello there! I&#39;m new to Numba (some prior experience with Julia, if that&#39;s relevant) and find numba speedups (when they happen and when they don&#39;t) to be a bit mysterious (eg: no caching with parallel). Are there any suggested resources that I can look at, to build a good mental model of Numba?",
  "id": "5b6f49faa6af14730b212153",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 24,
  "sent": "2018-08-11T20:41:30.127Z",
  "text": "Hello there! I'm new to Numba (some prior experience with Julia, if that's relevant) and find numba speedups (when they happen and when they don't) to be a bit mysterious (eg: no caching with parallel). Are there any suggested resources that I can look at, to build a good mental model of Numba?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/saulshanabrook",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1186124?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1186124?v=4&s=60",
   "displayName": "Saul Shanabrook",
   "gv": "4",
   "id": "529c6f2eed5ab0b3bf04e08b",
   "url": "/saulshanabrook",
   "username": "saulshanabrook",
   "v": 202
  },
  "html": "I sometimes find it helpful to look at the optimized LLVM that is produced, by setting <code>NUMBA_DUMP_OPTIMIZED=1</code> in my environment. There is usually a bunch of code for boxing/unboxing but if you can find the part that is actually implementing your logic it might be helpful to see how it is lowered.",
  "id": "5b6ff408988005174eca3d77",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 22,
  "sent": "2018-08-12T08:47:04.527Z",
  "text": "I sometimes find it helpful to look at the optimized LLVM that is produced, by setting `NUMBA_DUMP_OPTIMIZED=1` in my environment. There is usually a bunch of code for boxing/unboxing but if you can find the part that is actually implementing your logic it might be helpful to see how it is lowered.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"sivark\" class=\"mention\">@sivark</span> Thanks for giving Numba a try. <a target=\"_blank\" data-link-type=\"issue\" data-issue=\"2712\" href=\"https://github.com/numba/numba/issues/2712\" data-provider=\"github\" data-issue-repo=\"numba/numba\" class=\"issue\">numba/numba#2712</a> is a ticket for no caching with <code>parallel=True</code>, it&#39;s a known limitation of the <code>gufunc</code> implementation (the internal thing used in parallelisation). Perhaps start by reading the 5m guide <a href=\"http://numba.pydata.org/numba-doc/dev/user/5minguide.html\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://numba.pydata.org/numba-doc/dev/user/5minguide.html</a> and then the performance tips <a href=\"http://numba.pydata.org/numba-doc/dev/user/performance-tips.html\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://numba.pydata.org/numba-doc/dev/user/performance-tips.html</a> ? There is a WIP tool to help find out out what <code>parallel=True</code>did here <a target=\"_blank\" data-link-type=\"pr\" data-issue=\"3160\" href=\"https://github.com/numba/numba/pull/3160\" data-provider=\"github\" data-issue-repo=\"numba/numba\" class=\"pr\">numba/numba#3160</a>, that will hopefully make the next release. If you want to know what Numba is doing internally this might be useful <a href=\"http://numba.pydata.org/numba-doc/dev/developer/architecture.html\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://numba.pydata.org/numba-doc/dev/developer/architecture.html</a>",
  "id": "5b716653196bc60b6bc21e47",
  "issues": [
   {
    "number": "2712",
    "repo": "numba/numba"
   },
   {
    "number": "3160",
    "repo": "numba/numba"
   }
  ],
  "mentions": [
   {
    "screenName": "sivark",
    "userId": "57ffe110d73408ce4f2e0dbf",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 21,
  "sent": "2018-08-13T11:06:59.550Z",
  "text": "@sivark Thanks for giving Numba a try. https://github.com/numba/numba/issues/2712 is a ticket for no caching with `parallel=True`, it's a known limitation of the `gufunc` implementation (the internal thing used in parallelisation). Perhaps start by reading the 5m guide http://numba.pydata.org/numba-doc/dev/user/5minguide.html and then the performance tips http://numba.pydata.org/numba-doc/dev/user/performance-tips.html ? There is a WIP tool to help find out out what `parallel=True`did here https://github.com/numba/numba/pull/3160, that will hopefully make the next release. If you want to know what Numba is doing internally this might be useful http://numba.pydata.org/numba-doc/dev/developer/architecture.html",
  "unread": false,
  "urls": [
   {
    "url": "http://numba.pydata.org/numba-doc/dev/user/5minguide.html"
   },
   {
    "url": "http://numba.pydata.org/numba-doc/dev/user/performance-tips.html"
   },
   {
    "url": "http://numba.pydata.org/numba-doc/dev/developer/architecture.html"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/scootty1",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=60",
   "displayName": "scootty1",
   "gv": "4",
   "id": "5af2b904d73408ce4f98a88d",
   "url": "/scootty1",
   "username": "scootty1",
   "v": 6
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span> Over the weekend I had another idea on how to solve my problem with passing too many values to a njitted function. I could simply make a jitclass containing the function and the variables. But as far as I remember jitclass performance was alot lower than calling a njitted function directly. Does this still hold true or would you say I should give jitclasses a try?",
  "id": "5b717c9726e68560fdecd1ec",
  "issues": [],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 22,
  "sent": "2018-08-13T12:41:59.243Z",
  "text": "@stuartarchibald Over the weekend I had another idea on how to solve my problem with passing too many values to a njitted function. I could simply make a jitclass containing the function and the variables. But as far as I remember jitclass performance was alot lower than calling a njitted function directly. Does this still hold true or would you say I should give jitclasses a try?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sivark",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/13558717?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/13558717?v=4&s=60",
   "displayName": "Siva Swaminathan",
   "gv": "4",
   "id": "57ffe110d73408ce4f2e0dbf",
   "url": "/sivark",
   "username": "sivark",
   "v": 7
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"saulshanabrook\" class=\"mention\">@saulshanabrook</span> , <span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span> Thanks for the helpful suggestions! I&#39;ll try them out. ",
  "id": "5b71a1262a8e6c6083ba6078",
  "issues": [],
  "mentions": [
   {
    "screenName": "saulshanabrook",
    "userId": "529c6f2eed5ab0b3bf04e08b",
    "userIds": []
   },
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 23,
  "sent": "2018-08-13T15:17:58.048Z",
  "text": "@saulshanabrook , @stuartarchibald Thanks for the helpful suggestions! I'll try them out. ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/scootty1",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=60",
   "displayName": "scootty1",
   "gv": "4",
   "id": "5af2b904d73408ce4f98a88d",
   "url": "/scootty1",
   "username": "scootty1",
   "v": 6
  },
  "html": "Oh and is <code>setattr(self, &#39;_newvarname&#39;, a)</code> allowed in jitclass <code>__init__(self, a)</code> method, where <code>a</code> is correctly typed in <code>spec</code>? Specifically I&#39;d like to be able to construct a jitclass with variable names from a list, to dynamically set variables depending on which vars are needed.",
  "id": "5b71a64c937eee242310c705",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 22,
  "sent": "2018-08-13T15:39:56.804Z",
  "text": "Oh and is `setattr(self, '_newvarname', a)` allowed in jitclass `__init__(self, a)` method, where `a` is correctly typed in `spec`? Specifically I'd like to be able to construct a jitclass with variable names from a list, to dynamically set variables depending on which vars are needed.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/scootty1",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=60",
   "displayName": "scootty1",
   "gv": "4",
   "id": "5af2b904d73408ce4f98a88d",
   "url": "/scootty1",
   "username": "scootty1",
   "v": 6
  },
  "html": "Currently I use a workaround with defining the jitclass with:",
  "id": "5b71a768179f842c9731c2a7",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 22,
  "sent": "2018-08-13T15:44:40.340Z",
  "text": "Currently I use a workaround with defining the jitclass with:",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/scootty1",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=60",
   "displayName": "scootty1",
   "gv": "4",
   "id": "5af2b904d73408ce4f98a88d",
   "url": "/scootty1",
   "username": "scootty1",
   "v": 6
  },
  "html": "<pre><code>arr_a = np.arange(<span class=\"number\">10</span>)\narr_b = np.random.rand(<span class=\"number\">20</span>, <span class=\"number\">5</span>)\nspecs = {<span class=\"string\">'a'</span>: nb.typeof(arr_a), <span class=\"string\">'b'</span>: nb.typeof(arr_b)}\n\n<span class=\"decorator\">@nb.jitclass(spec=specs)</span>\n<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span><span class=\"params\">()</span>:</span>\n    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span>\n        <span class=\"keyword\">pass</span>\n\na = A()\nsetattr(a, <span class=\"string\">'a'</span>, arr_a)\nsetattr(a, <span class=\"string\">'b'</span>, arr_b)</code></pre>",
  "id": "5b71a7a0937eee242310ce56",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 22,
  "sent": "2018-08-13T15:45:36.482Z",
  "text": "```\narr_a = np.arange(10)\narr_b = np.random.rand(20, 5)\nspecs = {'a': nb.typeof(arr_a), 'b': nb.typeof(arr_b)}\n\n@nb.jitclass(spec=specs)\nclass A():\n    def __init__(self):\n        pass\n\na = A()\nsetattr(a, 'a', arr_a)\nsetattr(a, 'b', arr_b)\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/scootty1",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=60",
   "displayName": "scootty1",
   "gv": "4",
   "id": "5af2b904d73408ce4f98a88d",
   "url": "/scootty1",
   "username": "scootty1",
   "v": 6
  },
  "html": "Is there any way I could replace <code>pass</code> in <code>__init__</code> with some dynamic variable allocation, like passing a list of argument names to init, looping over it and using <code>setattr</code> inside init?",
  "id": "5b71a7f826e68560fdedeb84",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 22,
  "sent": "2018-08-13T15:47:04.365Z",
  "text": "Is there any way I could replace `pass` in `__init__` with some dynamic variable allocation, like passing a list of argument names to init, looping over it and using `setattr` inside init?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": " <span data-link-type=\"mention\" data-screen-name=\"scootty1\" class=\"mention\">@scootty1</span> I would guess that the jitclass may not result in as fast execution, however if the class is essentially just a POD holder for a load of scalar consts they&#39;ll probably just get inlined by the llvm optimiser anyway.",
  "id": "5b71b590937eee2423112617",
  "issues": [],
  "mentions": [
   {
    "screenName": "scootty1",
    "userId": "5af2b904d73408ce4f98a88d",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 22,
  "sent": "2018-08-13T16:45:04.256Z",
  "text": " @scootty1 I would guess that the jitclass may not result in as fast execution, however if the class is essentially just a POD holder for a load of scalar consts they'll probably just get inlined by the llvm optimiser anyway.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/scootty1",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=60",
   "displayName": "scootty1",
   "gv": "4",
   "id": "5af2b904d73408ce4f98a88d",
   "url": "/scootty1",
   "username": "scootty1",
   "v": 6
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span> In my first tests it seems that using a jitclass is a little bit faster during iteration than passing lots of arguments, but the time to construct the jitclasses with a list of 67 specs is totally killing the small increase in performance :)",
  "id": "5b71b79e5762ee4fe56f1585",
  "issues": [],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 23,
  "sent": "2018-08-13T16:53:50.187Z",
  "text": "@stuartarchibald In my first tests it seems that using a jitclass is a little bit faster during iteration than passing lots of arguments, but the time to construct the jitclasses with a list of 67 specs is totally killing the small increase in performance :)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-08-13T16:54:20.973Z",
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "I think it&#39;ll be at the mercy of the inliner",
  "id": "5b71b7b88206fd2a46a18a75",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 23,
  "sent": "2018-08-13T16:54:16.755Z",
  "text": "I think it'll be at the mercy of the inliner",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/scootty1",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=60",
   "displayName": "scootty1",
   "gv": "4",
   "id": "5af2b904d73408ce4f98a88d",
   "url": "/scootty1",
   "username": "scootty1",
   "v": 6
  },
  "html": "yeah. Looks like I&#39;ll need to stick to using closures to some extent and do the rest the &quot;traditional style&quot; with passing some arguments to the functions.",
  "id": "5b71b8898206fd2a46a1900a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 23,
  "sent": "2018-08-13T16:57:45.457Z",
  "text": "yeah. Looks like I'll need to stick to using closures to some extent and do the rest the \"traditional style\" with passing some arguments to the functions.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-08-13T16:59:07.291Z",
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "and to your other question, you can&#39;t dynamically shove in new variables as class members because the jitclass inst is a heap allocated C struct",
  "id": "5b71b8ce8206fd2a46a1932f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 23,
  "sent": "2018-08-13T16:58:54.974Z",
  "text": "and to your other question, you can't dynamically shove in new variables as class members because the jitclass inst is a heap allocated C struct",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/scootty1",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/38665102?v=4&s=60",
   "displayName": "scootty1",
   "gv": "4",
   "id": "5af2b904d73408ce4f98a88d",
   "url": "/scootty1",
   "username": "scootty1",
   "v": 6
  },
  "html": "ok thanks. thanks again for your help!",
  "id": "5b71b9792a8e6c6083baf9fc",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 23,
  "sent": "2018-08-13T17:01:45.736Z",
  "text": "ok thanks. thanks again for your help!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "np",
  "id": "5b71bad4a3a93d24225cc146",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 23,
  "sent": "2018-08-13T17:07:32.449Z",
  "text": "np",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/g/u/gienahstar_twitter",
   "avatarUrlMedium": "https://abs.twimg.com/sticky/default_profile_images/default_profile_normal.png?s=128",
   "avatarUrlSmall": "https://abs.twimg.com/sticky/default_profile_images/default_profile_normal.png?s=60",
   "displayName": "Dr. Horrible",
   "id": "5b74a6c4d73408ce4fa4bad8",
   "url": "/gienahstar_twitter",
   "username": "gienahstar_twitter",
   "v": 2
  },
  "html": "is this room alive?",
  "id": "5b74a6d75b07ae730ac3640f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 22,
  "sent": "2018-08-15T22:19:03.242Z",
  "text": "is this room alive?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/g/u/gienahstar_twitter",
   "avatarUrlMedium": "https://abs.twimg.com/sticky/default_profile_images/default_profile_normal.png?s=128",
   "avatarUrlSmall": "https://abs.twimg.com/sticky/default_profile_images/default_profile_normal.png?s=60",
   "displayName": "Dr. Horrible",
   "id": "5b74a6c4d73408ce4fa4bad8",
   "url": "/gienahstar_twitter",
   "username": "gienahstar_twitter",
   "v": 2
  },
  "html": "since numba uses LLVM to optimize machine code, I need to know, does it make use of SIMD instructions?",
  "id": "5b74a6f4196bc60b6bd525dc",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 22,
  "sent": "2018-08-15T22:19:32.180Z",
  "text": "since numba uses LLVM to optimize machine code, I need to know, does it make use of SIMD instructions?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"gienahstar_twitter\" class=\"mention\">@gienahstar_twitter</span> yes (usual caveats about having code that makes sense for them to be in use and a CPU that supports them)",
  "id": "5b74aa3f67eb9f60fee6be68",
  "issues": [],
  "mentions": [
   {
    "screenName": "gienahstar_twitter",
    "userId": "5b74a6c4d73408ce4fa4bad8",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 22,
  "sent": "2018-08-15T22:33:35.527Z",
  "text": "@gienahstar_twitter yes (usual caveats about having code that makes sense for them to be in use and a CPU that supports them)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/g/u/gienahstar_twitter",
   "avatarUrlMedium": "https://abs.twimg.com/sticky/default_profile_images/default_profile_normal.png?s=128",
   "avatarUrlSmall": "https://abs.twimg.com/sticky/default_profile_images/default_profile_normal.png?s=60",
   "displayName": "Dr. Horrible",
   "id": "5b74a6c4d73408ce4fa4bad8",
   "url": "/gienahstar_twitter",
   "username": "gienahstar_twitter",
   "v": 2
  },
  "html": "thanks",
  "id": "5b74aa585ec2bc174f03f9de",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 23,
  "sent": "2018-08-15T22:34:00.725Z",
  "text": "thanks",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "Intel&#39;s SVML is also supported for vectorized math functions",
  "id": "5b74aa5aa37112689c25f650",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 22,
  "sent": "2018-08-15T22:34:02.579Z",
  "text": "Intel's SVML is also supported for vectorized math functions",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "Perhaps take a look at the performance tips page <a href=\"http://numba.pydata.org/numba-doc/dev/user/performance-tips.html\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://numba.pydata.org/numba-doc/dev/user/performance-tips.html</a>",
  "id": "5b74aa7f5b07ae730ac37844",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 23,
  "sent": "2018-08-15T22:34:39.507Z",
  "text": "Perhaps take a look at the performance tips page http://numba.pydata.org/numba-doc/dev/user/performance-tips.html",
  "unread": false,
  "urls": [
   {
    "url": "http://numba.pydata.org/numba-doc/dev/user/performance-tips.html"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "and the inspection methods on the Dispatcher objects <a href=\"http://numba.pydata.org/numba-doc/latest/reference/jit-compilation.html?highlight=inspect_asm#dispatcher-objects\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://numba.pydata.org/numba-doc/latest/reference/jit-compilation.html?highlight=inspect_asm#dispatcher-objects</a>",
  "id": "5b74aaa1a2101b348b338325",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 23,
  "sent": "2018-08-15T22:35:13.375Z",
  "text": "and the inspection methods on the Dispatcher objects http://numba.pydata.org/numba-doc/latest/reference/jit-compilation.html?highlight=inspect_asm#dispatcher-objects",
  "unread": false,
  "urls": [
   {
    "url": "http://numba.pydata.org/numba-doc/latest/reference/jit-compilation.html?highlight=inspect_asm#dispatcher-objects"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<code>inspect_asm</code> is probably of interest",
  "id": "5b74aaaa988005174ee4a928",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 24,
  "sent": "2018-08-15T22:35:22.523Z",
  "text": "`inspect_asm` is probably of interest",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/g/u/gienahstar_twitter",
   "avatarUrlMedium": "https://abs.twimg.com/sticky/default_profile_images/default_profile_normal.png?s=128",
   "avatarUrlSmall": "https://abs.twimg.com/sticky/default_profile_images/default_profile_normal.png?s=60",
   "displayName": "Dr. Horrible",
   "id": "5b74a6c4d73408ce4fa4bad8",
   "url": "/gienahstar_twitter",
   "username": "gienahstar_twitter",
   "v": 2
  },
  "html": "I will check them out",
  "id": "5b74aab3a2101b348b338378",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 25,
  "sent": "2018-08-15T22:35:31.301Z",
  "text": "I will check them out",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/asodeur",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/38456167?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/38456167?v=4&s=60",
   "displayName": "Andreas Sodeur",
   "gv": "4",
   "id": "5b39e8fbd73408ce4f9f4daf",
   "url": "/asodeur",
   "username": "asodeur",
   "v": 2
  },
  "html": "Hi, I am trying to use lists with custom memory managed types (defined via lowlevel interface). This went pretty well until I tried lists of custom types containing lists of custom types. The issue is that NativeType.cleanup does not get called on the inner list. Hence when the inner list is unboxed again for a second call to the jited function the meminfo stored via pyapi.object_set_private_data is still there and numba is recycling the list from the previous call. However, my custom types might  have already released their meminfo and hence would need to get unboxed again.",
  "id": "5b755ba7a6af14730b427547",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 24,
  "sent": "2018-08-16T11:10:31.475Z",
  "text": "Hi, I am trying to use lists with custom memory managed types (defined via lowlevel interface). This went pretty well until I tried lists of custom types containing lists of custom types. The issue is that NativeType.cleanup does not get called on the inner list. Hence when the inner list is unboxed again for a second call to the jited function the meminfo stored via pyapi.object_set_private_data is still there and numba is recycling the list from the previous call. However, my custom types might  have already released their meminfo and hence would need to get unboxed again.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/asodeur",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/38456167?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/38456167?v=4&s=60",
   "displayName": "Andreas Sodeur",
   "gv": "4",
   "id": "5b39e8fbd73408ce4f9f4daf",
   "url": "/asodeur",
   "username": "asodeur",
   "v": 2
  },
  "html": "There are two possible solutions: (1) I make sure to clean-up the object_private_data of any list contained in a custom type in my dtor, (2) simply wipe out all object_private_data after each call to a function (ie when returning to Python).  (1) is probably cleaner but might slow things down. (2) is a no-go if Numba is caching data on object_private_data accross calls. Which way to proceed?",
  "id": "5b755d00e9b96f2c98173bef",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 24,
  "sent": "2018-08-16T11:16:16.023Z",
  "text": "There are two possible solutions: (1) I make sure to clean-up the object_private_data of any list contained in a custom type in my dtor, (2) simply wipe out all object_private_data after each call to a function (ie when returning to Python).  (1) is probably cleaner but might slow things down. (2) is a no-go if Numba is caching data on object_private_data accross calls. Which way to proceed?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/asodeur",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/38456167?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/38456167?v=4&s=60",
   "displayName": "Andreas Sodeur",
   "gv": "4",
   "id": "5b39e8fbd73408ce4f9f4daf",
   "url": "/asodeur",
   "username": "asodeur",
   "v": 2
  },
  "html": "<code>pyapi.object_set_private_data</code> is only used by the list and set unboxers. <code>NativeValue.cleanup</code> resets the data for both types. Is it save to just erase the object_private_data before the next call into jitted function or am I overlooking subtleties (no_gil &amp; threading ...)?  ",
  "id": "5b758fb049932d4fe4edce91",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 25,
  "sent": "2018-08-16T14:52:32.318Z",
  "text": "`pyapi.object_set_private_data` is only used by the list and set unboxers. `NativeValue.cleanup` resets the data for both types. Is it save to just erase the object_private_data before the next call into jitted function or am I overlooking subtleties (no_gil & threading ...)?  ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"sklam\" class=\"mention\">@sklam</span>: ^^^ I think you had to deal with this recently?",
  "id": "5b759039988005174ee9b2b8",
  "issues": [],
  "mentions": [
   {
    "screenName": "sklam",
    "userId": "55b689f50fc9f982beab2a24",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 25,
  "sent": "2018-08-16T14:54:49.100Z",
  "text": "@sklam: ^^^ I think you had to deal with this recently?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 7
  },
  "html": "List-of-list is as an argument is very tricky.  In <a target=\"_blank\" data-link-type=\"pr\" data-issue=\"2840\" href=\"https://github.com/numba/numba/pull/2840\" data-provider=\"github\" data-issue-repo=\"numba/numba\" class=\"pr\">numba/numba#2840</a>, I explicitly called out that list-of-list as argument is not supported.",
  "id": "5b75bf6967eb9f60feece9ed",
  "issues": [
   {
    "number": "2840",
    "repo": "numba/numba"
   }
  ],
  "mentions": [],
  "meta": [],
  "readBy": 25,
  "sent": "2018-08-16T18:16:09.279Z",
  "text": "List-of-list is as an argument is very tricky.  In https://github.com/numba/numba/pull/2840, I explicitly called out that list-of-list as argument is not supported.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 7
  },
  "html": "erasing the list private data must use: <code>object_reset_private_data</code>",
  "id": "5b75bfe8937eee2423284e67",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 25,
  "sent": "2018-08-16T18:18:16.972Z",
  "text": "erasing the list private data must use: `object_reset_private_data`",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 7
  },
  "html": "there is detail description of the problem at: <a href=\"http://numba.pydata.org/numba-doc/latest/reference/pysupported.html#list-reflection\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://numba.pydata.org/numba-doc/latest/reference/pysupported.html#list-reflection</a>",
  "id": "5b75c01c937eee2423285026",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 25,
  "sent": "2018-08-16T18:19:08.413Z",
  "text": "there is detail description of the problem at: http://numba.pydata.org/numba-doc/latest/reference/pysupported.html#list-reflection",
  "unread": false,
  "urls": [
   {
    "url": "http://numba.pydata.org/numba-doc/latest/reference/pysupported.html#list-reflection"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/asodeur",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/38456167?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/38456167?v=4&s=60",
   "displayName": "Andreas Sodeur",
   "gv": "4",
   "id": "5b39e8fbd73408ce4f9f4daf",
   "url": "/asodeur",
   "username": "asodeur",
   "v": 2
  },
  "html": "ok, I&#39;ll try my luck with proper clean-up from the dtors ...",
  "id": "5b769ee4dd0b74601e1d5668",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 25,
  "sent": "2018-08-17T10:09:40.753Z",
  "text": "ok, I'll try my luck with proper clean-up from the dtors ...",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/d53dave",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/3652719?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/3652719?v=4&s=60",
   "displayName": "Dave",
   "gv": "4",
   "id": "5b79d3c1d73408ce4fa51cc8",
   "url": "/d53dave",
   "username": "d53dave",
   "v": 1
  },
  "html": "Hi everybody and, first of all, thanks to everybody involved in the development of numba. it&#39;s an amazing project.",
  "id": "5b79d3fadd0b74601e2e379d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 23,
  "sent": "2018-08-19T20:32:58.781Z",
  "text": "Hi everybody and, first of all, thanks to everybody involved in the development of numba. it's an amazing project.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/d53dave",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/3652719?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/3652719?v=4&s=60",
   "displayName": "Dave",
   "gv": "4",
   "id": "5b79d3c1d73408ce4fa51cc8",
   "url": "/d53dave",
   "username": "d53dave",
   "v": 1
  },
  "html": "I have one quick question about an issue I&#39;m running into: I&#39;m using CUDA and I&#39;m wiring some tests that are supposed to run in the CUDA Simulator, i.e. NUMBA_ENABLE_CUDASIM=1. Is it a bug or a feature that inside the simulator, a kernel cannot invoke another kernel? It errors out with <code>TypeError: tid=[0, 0, 0] ctaid=[0, 0, 0]: &#39;NoneType&#39; object is not subscriptable</code> right before calling the other kernel.",
  "id": "5b79d4aa0825690ea2f2450d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 23,
  "sent": "2018-08-19T20:35:54.470Z",
  "text": "I have one quick question about an issue I'm running into: I'm using CUDA and I'm wiring some tests that are supposed to run in the CUDA Simulator, i.e. NUMBA_ENABLE_CUDASIM=1. Is it a bug or a feature that inside the simulator, a kernel cannot invoke another kernel? It errors out with `TypeError: tid=[0, 0, 0] ctaid=[0, 0, 0]: 'NoneType' object is not subscriptable` right before calling the other kernel.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/d53dave",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/3652719?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/3652719?v=4&s=60",
   "displayName": "Dave",
   "gv": "4",
   "id": "5b79d3c1d73408ce4fa51cc8",
   "url": "/d53dave",
   "username": "d53dave",
   "v": 1
  },
  "html": "I can work around by annotating the 2nd kernel (i.e. called from the first kernel) with <code>@cuda.jit(device=True)</code>, but I was wondering if there is anything else I can do, as I&#39;d like to be able to keep the 2nd kernel both <code>__host__</code> and <code>__device__</code>.",
  "id": "5b79d772087c4c20b5066493",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 23,
  "sent": "2018-08-19T20:47:46.961Z",
  "text": "I can work around by annotating the 2nd kernel (i.e. called from the first kernel) with `@cuda.jit(device=True)`, but I was wondering if there is anything else I can do, as I'd like to be able to keep the 2nd kernel both `__host__` and `__device__`.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "we don&#39;t currently support invoking a kernel from another kernel on the device either",
  "id": "5b7ac58fd7901b2c6064286e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 21,
  "sent": "2018-08-20T13:43:43.884Z",
  "text": "we don't currently support invoking a kernel from another kernel on the device either",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "although dynamic parallelism would allow that in the CUDA driver, the backend doesn&#39;t know how to generate the required instructions",
  "id": "5b7ac5b6cda86f5fb27fac1a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 21,
  "sent": "2018-08-20T13:44:22.841Z",
  "text": "although dynamic parallelism would allow that in the CUDA driver, the backend doesn't know how to generate the required instructions",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/anthonytec2",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/11021542?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/11021542?v=4&s=60",
   "displayName": "Anthony Bisulco",
   "gv": "4",
   "id": "5a9417fbd73408ce4f8ee399",
   "url": "/anthonytec2",
   "username": "anthonytec2",
   "v": 9
  },
  "html": "Hi everyone! Recently, I have been trying to play around with CUDA in Numba and when the copy to host method runs, I stay at this function forever with it never finishing, does anyone know what this could be due to? ",
  "id": "5b7cbd5aac25fd11b5777769",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 21,
  "sent": "2018-08-22T01:33:14.385Z",
  "text": "Hi everyone! Recently, I have been trying to play around with CUDA in Numba and when the copy to host method runs, I stay at this function forever with it never finishing, does anyone know what this could be due to? ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-08-22T07:35:19.511Z",
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/d53dave",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/3652719?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/3652719?v=4&s=60",
   "displayName": "Dave",
   "gv": "4",
   "id": "5b79d3c1d73408ce4fa51cc8",
   "url": "/d53dave",
   "username": "d53dave",
   "v": 1
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"seibert\" class=\"mention\">@seibert</span> thanks, good to know. ",
  "id": "5b7d122dcff55e56174362ab",
  "issues": [],
  "mentions": [
   {
    "screenName": "seibert",
    "userId": "55b68af40fc9f982beab2a3c",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 20,
  "sent": "2018-08-22T07:35:09.696Z",
  "text": "@seibert thanks, good to know. ",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"anthonytec2\" class=\"mention\">@anthonytec2</span>: Are you copying to host after launching a CUDA kernel?   The copy will wait until all the preceding kernels finish (unless you are using streams), so it is possible your CUDA kernel is in an infinite loop.",
  "id": "5b7d5f5fff4451561620ee0c",
  "issues": [],
  "mentions": [
   {
    "screenName": "anthonytec2",
    "userId": "5a9417fbd73408ce4f8ee399",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 19,
  "sent": "2018-08-22T13:04:31.886Z",
  "text": "@anthonytec2: Are you copying to host after launching a CUDA kernel?   The copy will wait until all the preceding kernels finish (unless you are using streams), so it is possible your CUDA kernel is in an infinite loop.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/anthonytec2",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/11021542?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/11021542?v=4&s=60",
   "displayName": "Anthony Bisulco",
   "gv": "4",
   "id": "5a9417fbd73408ce4f8ee399",
   "url": "/anthonytec2",
   "username": "anthonytec2",
   "v": 9
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"seibert\" class=\"mention\">@seibert</span> this is currently the <a href=\"https://github.com/anthonytec2/xrayscanner/blob/f3f72d95667bd5a257e51e2534ae20c7c0a8be93/debug-st.py#L112\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">code</a> I am using to perform the copy using steams. Also, I have tested the program using the CUDA simulator with no errors. ",
  "id": "5b7d65cbc53ee54c1888a4f6",
  "issues": [],
  "mentions": [
   {
    "screenName": "seibert",
    "userId": "55b68af40fc9f982beab2a3c",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 19,
  "sent": "2018-08-22T13:31:55.291Z",
  "text": "@seibert this is currently the [code](https://github.com/anthonytec2/xrayscanner/blob/f3f72d95667bd5a257e51e2534ae20c7c0a8be93/debug-st.py#L112) I am using to perform the copy using steams. Also, I have tested the program using the CUDA simulator with no errors. ",
  "unread": false,
  "urls": [
   {
    "url": "https://github.com/anthonytec2/xrayscanner/blob/f3f72d95667bd5a257e51e2534ae20c7c0a8be93/debug-st.py#L112"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/anthonytec2",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/11021542?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/11021542?v=4&s=60",
   "displayName": "Anthony Bisulco",
   "gv": "4",
   "id": "5a9417fbd73408ce4f8ee399",
   "url": "/anthonytec2",
   "username": "anthonytec2",
   "v": 9
  },
  "html": "ops never mind, it does appear that I have an infinite loop when not running in the CUDA sim",
  "id": "5b7d68fb60f9ee7aa4769f56",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-08-22T13:45:31.721Z",
  "text": "ops never mind, it does appear that I have an infinite loop when not running in the CUDA sim",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/anthonytec2",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/11021542?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/11021542?v=4&s=60",
   "displayName": "Anthony Bisulco",
   "gv": "4",
   "id": "5a9417fbd73408ce4f8ee399",
   "url": "/anthonytec2",
   "username": "anthonytec2",
   "v": 9
  },
  "html": "Is there any way to access to epsilon in the floating point numbers from the Numba API? ",
  "id": "5b7d6c40f5402f32aa770e5b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-08-22T13:59:28.841Z",
  "text": "Is there any way to access to epsilon in the floating point numbers from the Numba API? ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<p>These are supported (not as calls etc in CUDA though)</p><pre><code>    numpy.iinfo\n    numpy.finfo (machar attribute <span class=\"keyword\">not</span> supported)\n    numpy.MachAr (<span class=\"keyword\">with</span> no arguments <span class=\"keyword\">to</span> the <span class=\"function\"><span class=\"keyword\">constructor</span>)</span></code></pre><p> does that help?</p>",
  "id": "5b7d6fa1d8d36815e5743b14",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-08-22T14:13:53.067Z",
  "text": "These are supported (not as calls etc in CUDA though)\n```\n    numpy.iinfo\n    numpy.finfo (machar attribute not supported)\n    numpy.MachAr (with no arguments to the constructor)\n```\n does that help?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/anthonytec2",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/11021542?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/11021542?v=4&s=60",
   "displayName": "Anthony Bisulco",
   "gv": "4",
   "id": "5a9417fbd73408ce4f8ee399",
   "url": "/anthonytec2",
   "username": "anthonytec2",
   "v": 9
  },
  "html": "Yes that does help, thank you. Although it appears there is some difference between the CUDA simulator and the actual hardware that is causing my algorithm to go into an infinite loop.",
  "id": "5b7d893b38a12915e4dee158",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 21,
  "sent": "2018-08-22T16:03:07.630Z",
  "text": "Yes that does help, thank you. Although it appears there is some difference between the CUDA simulator and the actual hardware that is causing my algorithm to go into an infinite loop.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "one thing to try is running your program with cuda-memcheck to see if the error is related to out-of-bounds memory access",
  "id": "5b7d898ccff55e5617464b77",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 22,
  "sent": "2018-08-22T16:04:28.303Z",
  "text": "one thing to try is running your program with cuda-memcheck to see if the error is related to out-of-bounds memory access",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "actually, this tutorial notebook has several ideas for debugging that might help: <a href=\"https://github.com/ContinuumIO/gtc2018-numba/blob/master/5%20-%20Troubleshooting%20and%20Debugging.ipynb\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://github.com/ContinuumIO/gtc2018-numba/blob/master/5%20-%20Troubleshooting%20and%20Debugging.ipynb</a>",
  "id": "5b7d89a738a12915e4dee610",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 22,
  "sent": "2018-08-22T16:04:55.941Z",
  "text": "actually, this tutorial notebook has several ideas for debugging that might help: https://github.com/ContinuumIO/gtc2018-numba/blob/master/5%20-%20Troubleshooting%20and%20Debugging.ipynb",
  "unread": false,
  "urls": [
   {
    "url": "https://github.com/ContinuumIO/gtc2018-numba/blob/master/5%20-%20Troubleshooting%20and%20Debugging.ipynb"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/anthonytec2",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/11021542?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/11021542?v=4&s=60",
   "displayName": "Anthony Bisulco",
   "gv": "4",
   "id": "5a9417fbd73408ce4f8ee399",
   "url": "/anthonytec2",
   "username": "anthonytec2",
   "v": 9
  },
  "html": "Yes, I have tried that and memcheck reports no errors",
  "id": "5b7d89e0ac25fd11b57c2110",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 22,
  "sent": "2018-08-22T16:05:52.627Z",
  "text": "Yes, I have tried that and memcheck reports no errors",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-08-22T16:06:44.376Z",
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "hmm, you might need cuda-gdb then.  with <code>cuda.jit(debug=True)</code>, you should be able to see line information in the debugger",
  "id": "5b7d8a05e5b40332abe28afc",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 22,
  "sent": "2018-08-22T16:06:29.925Z",
  "text": "hmm, you might need cuda-gdb then.  with `cuda.jit(debug=True)`, you should be able to see line information in the debugger",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/anthonytec2",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/11021542?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/11021542?v=4&s=60",
   "displayName": "Anthony Bisulco",
   "gv": "4",
   "id": "5a9417fbd73408ce4f8ee399",
   "url": "/anthonytec2",
   "username": "anthonytec2",
   "v": 9
  },
  "html": "Okay I will try that out next! Thanks for the info.",
  "id": "5b7d8b23fd3c641b06f47ec1",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 22,
  "sent": "2018-08-22T16:11:15.848Z",
  "text": "Okay I will try that out next! Thanks for the info.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/anthonytec2",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/11021542?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/11021542?v=4&s=60",
   "displayName": "Anthony Bisulco",
   "gv": "4",
   "id": "5a9417fbd73408ce4f8ee399",
   "url": "/anthonytec2",
   "username": "anthonytec2",
   "v": 9
  },
  "html": "Is there any help link to how you can use cuda-gdb with numba? ",
  "id": "5b7f5d811d3a5711b68d1728",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 22,
  "sent": "2018-08-24T01:21:05.457Z",
  "text": "Is there any help link to how you can use cuda-gdb with numba? ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"anthonytec2\" class=\"mention\">@anthonytec2</span> don&#39;t think that&#39;s been written yet, please could you open a ticket with what it is you&#39;d like to see? thanks.",
  "id": "5b865e4058a3797aa3d0c5d8",
  "issues": [],
  "mentions": [
   {
    "screenName": "anthonytec2",
    "userId": "5a9417fbd73408ce4f8ee399",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 16,
  "sent": "2018-08-29T08:50:08.532Z",
  "text": "@anthonytec2 don't think that's been written yet, please could you open a ticket with what it is you'd like to see? thanks.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/maedoc",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/5189886?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/5189886?v=4&s=60",
   "displayName": "marmaduke woodman",
   "gv": "4",
   "id": "54b7a868db8155e6700eb2ec",
   "url": "/maedoc",
   "username": "maedoc",
   "v": 17
  },
  "html": "hi all, first, thanks for numba.  I&#39;ve been looking at jitclass &amp; the tutorial on adding type classes, but it seems neither allow creating arrays of type instances. how would I go about creating, e.g. arrays of intervals without hitting the boxing/unboxing overhead? would it be possible to use a numpy recarray?",
  "id": "5b885ceaf86b741b05e7643f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-08-30T21:08:58.262Z",
  "text": "hi all, first, thanks for numba.  I've been looking at jitclass & the tutorial on adding type classes, but it seems neither allow creating arrays of type instances. how would I go about creating, e.g. arrays of intervals without hitting the boxing/unboxing overhead? would it be possible to use a numpy recarray?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-08-30T21:14:14.153Z",
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/maedoc",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/5189886?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/5189886?v=4&s=60",
   "displayName": "marmaduke woodman",
   "gv": "4",
   "id": "54b7a868db8155e6700eb2ec",
   "url": "/maedoc",
   "username": "maedoc",
   "v": 17
  },
  "html": "second question, if there  is any roadmap for being able to jit w/ autograd? I saw a few of the devs here on the relevant issue but it seemed (to my naive eye) that a dual number impl would be required in Numba but nothing has moved for two years",
  "id": "5b885e1694f8164c17c2253f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-08-30T21:13:58.410Z",
  "text": "second question, if there  is any roadmap for being able to jit w/ autograd? I saw a few of the devs here on the relevant issue but it seemed (to my naive eye) that a dual number impl would be required in Numba but nothing has moved for two years",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/maedoc",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/5189886?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/5189886?v=4&s=60",
   "displayName": "marmaduke woodman",
   "gv": "4",
   "id": "54b7a868db8155e6700eb2ec",
   "url": "/maedoc",
   "username": "maedoc",
   "v": 17
  },
  "html": "third q: I was <a href=\"https://gist.github.com/maedoc/3417c87bd964378044ad0cb813d3b396\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">checking if loop fusion</a> occurs, and see only certain cases it happens. is there a particular way to encourage/trigger fusion of loops?",
  "id": "5b8866f5e5b40332ab1ffc53",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-08-30T21:51:49.684Z",
  "text": "third q: I was [checking if loop fusion](https://gist.github.com/maedoc/3417c87bd964378044ad0cb813d3b396) occurs, and see only certain cases it happens. is there a particular way to encourage/trigger fusion of loops?",
  "unread": false,
  "urls": [
   {
    "url": "https://gist.github.com/maedoc/3417c87bd964378044ad0cb813d3b396"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/qlandman",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/643288?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/643288?v=4&s=60",
   "displayName": "qlandman",
   "gv": "4",
   "id": "5b892030d73408ce4fa67788",
   "url": "/qlandman",
   "username": "qlandman",
   "v": 5
  },
  "html": "<p>All, first of thanks for this great library. I am just getting started using Numba. I unfortunately run into some problems creating jit functions, and I am not really sure what&#39;s the reason for it not working (the code runs in Python). </p><p>I am building a function to create a ratio matrix from a vector. The resulting vector should be stacked into a 3D matrix using <code>numpy.dstack</code>. The code is found in <a href=\"https://gist.github.com/qlandman/24f61a949139eedaaebf14c2bf6a8eff\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">this notebook</a>. The code from this notebook produces an error:<br><code>TypingError: Failed at nopython (nopython frontend) Cannot unify array(float64, 2d, C) and array(float64, 3d, C) for &#39;result_matrix&#39;, defined at &lt;ipython-input-66-68ddb6b365e2&gt;</code></p><p>Thanks in advance for your help.</p>",
  "id": "5b892a8dc2bd5d117afb6fe8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-08-31T11:46:21.025Z",
  "text": "All, first of thanks for this great library. I am just getting started using Numba. I unfortunately run into some problems creating jit functions, and I am not really sure what's the reason for it not working (the code runs in Python). \n\nI am building a function to create a ratio matrix from a vector. The resulting vector should be stacked into a 3D matrix using `numpy.dstack`. The code is found in [this notebook](https://gist.github.com/qlandman/24f61a949139eedaaebf14c2bf6a8eff). The code from this notebook produces an error:\n`TypingError: Failed at nopython (nopython frontend) Cannot unify array(float64, 2d, C) and array(float64, 3d, C) for 'result_matrix', defined at <ipython-input-66-68ddb6b365e2>`\n\nThanks in advance for your help.",
  "unread": false,
  "urls": [
   {
    "url": "https://gist.github.com/qlandman/24f61a949139eedaaebf14c2bf6a8eff"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"qlandman\" class=\"mention\">@qlandman</span> I hope the error message also contains: <code>For more information about typing errors and how to debug them visit:\nhttp://numba.pydata.org/numba-doc/latest/user/troubleshoot.html#my-code-doesn-t-compile</code> ?",
  "id": "5b892e4c11227d711df56ad8",
  "issues": [],
  "mentions": [
   {
    "screenName": "qlandman",
    "userId": "5b892030d73408ce4fa67788",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 17,
  "sent": "2018-08-31T12:02:20.125Z",
  "text": "@qlandman I hope the error message also contains: `For more information about typing errors and how to debug them visit:\nhttp://numba.pydata.org/numba-doc/latest/user/troubleshoot.html#my-code-doesn-t-compile\n` ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "Your code has a type unification problem <a href=\"http://numba.pydata.org/numba-doc/latest/user/troubleshoot.html#my-code-has-a-type-unification-problem\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://numba.pydata.org/numba-doc/latest/user/troubleshoot.html#my-code-has-a-type-unification-problem</a>",
  "id": "5b892e5bf5402f32aab9820b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-08-31T12:02:35.381Z",
  "text": "Your code has a type unification problem http://numba.pydata.org/numba-doc/latest/user/troubleshoot.html#my-code-has-a-type-unification-problem",
  "unread": false,
  "urls": [
   {
    "url": "http://numba.pydata.org/numba-doc/latest/user/troubleshoot.html#my-code-has-a-type-unification-problem"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<code>result_matrix</code> is defined as both <code>2d</code> and <code>3d</code> and depending on whether the loop executes the returned matrix will be 2d or 3d. Numba has to be able to statically determine the types of all the variables (and return type), types changed based on conditional execution makes this impossible.",
  "id": "5b892efa58a3797aa3e12d0b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-08-31T12:05:14.785Z",
  "text": "`result_matrix` is defined as both `2d` and `3d` and depending on whether the loop executes the returned matrix will be 2d or 3d. Numba has to be able to statically determine the types of all the variables (and return type), types changed based on conditional execution makes this impossible.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "It&#39;s easily fixed:",
  "id": "5b892f2858a3797aa3e12e0e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-08-31T12:06:00.762Z",
  "text": "It's easily fixed:",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<pre><code><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np\n<span class=\"keyword\">from</span> numba <span class=\"keyword\">import</span> jit\n\na = np.array([[<span class=\"number\">10.1</span>,<span class=\"number\">20.3</span>,<span class=\"number\">30.4</span>]])\n\n<span class=\"decorator\">@jit(nopython=True)</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_jit</span><span class=\"params\">(vec, n)</span>:</span>\n\n    tmp = np.empty((<span class=\"number\">3</span>, <span class=\"number\">3</span>))\n\n    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n):\n        <span class=\"comment\">#vec = sp_vec[(i * n_isin):((i+1)*n_isin)]</span>\n        result_data = vec / vec.reshape(-<span class=\"number\">1</span>,<span class=\"number\">1</span>)\n        result_matrix = np.dstack((tmp, result_data))\n\n    <span class=\"keyword\">return</span> result_matrix\n\ntest_jit(a, <span class=\"number\">1000</span>)</code></pre>",
  "id": "5b892f2e60f9ee7aa4b92902",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-08-31T12:06:06.824Z",
  "text": "```\nimport numpy as np\nfrom numba import jit\n\na = np.array([[10.1,20.3,30.4]])\n\n@jit(nopython=True)\ndef test_jit(vec, n):\n    \n    tmp = np.empty((3, 3))\n    \n    for i in range(n):\n        #vec = sp_vec[(i * n_isin):((i+1)*n_isin)]\n        result_data = vec / vec.reshape(-1,1)\n        result_matrix = np.dstack((tmp, result_data))\n\n    return result_matrix\n\ntest_jit(a, 1000)\n```\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-08-31T12:19:13.442Z",
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/qlandman",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/643288?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/643288?v=4&s=60",
   "displayName": "qlandman",
   "gv": "4",
   "id": "5b892030d73408ce4fa67788",
   "url": "/qlandman",
   "username": "qlandman",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span> Wow, thanks for the quick response. Sorry I missed the documentation part, but after reading it it seems logical that it doesn&#39;t work.",
  "id": "5b893235cff55e561788562e",
  "issues": [],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 18,
  "sent": "2018-08-31T12:19:01.734Z",
  "text": "@stuartarchibald Wow, thanks for the quick response. Sorry I missed the documentation part, but after reading it it seems logical that it doesn't work.",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"qlandman\" class=\"mention\">@qlandman</span> no problem, thanks for trying out Numba :)",
  "id": "5b893295ac25fd11b5be5db2",
  "issues": [],
  "mentions": [
   {
    "screenName": "qlandman",
    "userId": "5b892030d73408ce4fa67788",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 18,
  "sent": "2018-08-31T12:20:37.197Z",
  "text": "@qlandman no problem, thanks for trying out Numba :)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/qlandman",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/643288?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/643288?v=4&s=60",
   "displayName": "qlandman",
   "gv": "4",
   "id": "5b892030d73408ce4fa67788",
   "url": "/qlandman",
   "username": "qlandman",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span> There is still one problem with the provided solution. I need to stack the matrix iteratively so that I have a (3, 3, 1000) matrix. The code only returns a (3,3) matrix because it just stacks the new result to the <code>tmp</code> variable. Maybe I should try to solve my problem in a 2D matrix instead of a 3D matrix in order to avoid the data type errors.",
  "id": "5b8933b711227d711df58ae9",
  "issues": [],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 19,
  "sent": "2018-08-31T12:25:27.575Z",
  "text": "@stuartarchibald There is still one problem with the provided solution. I need to stack the matrix iteratively so that I have a (3, 3, 1000) matrix. The code only returns a (3,3) matrix because it just stacks the new result to the `tmp` variable. Maybe I should try to solve my problem in a 2D matrix instead of a 3D matrix in order to avoid the data type errors.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "do you need to stack matrices ?",
  "id": "5b8933d6f5402f32aab9a0b4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-08-31T12:25:58.078Z",
  "text": "do you need to stack matrices ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "Seems like you can determine before the loop the size of the output",
  "id": "5b8933ea1d3a5711b6c44cdd",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 20,
  "sent": "2018-08-31T12:26:18.860Z",
  "text": "Seems like you can determine before the loop the size of the output",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "it&#39;d be a load quicker if you can just assign to a slice of the output (Numba or no Numba)",
  "id": "5b8933f9e5b40332ab245247",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 21,
  "sent": "2018-08-31T12:26:33.028Z",
  "text": "it'd be a load quicker if you can just assign to a slice of the output (Numba or no Numba)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/qlandman",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/643288?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/643288?v=4&s=60",
   "displayName": "qlandman",
   "gv": "4",
   "id": "5b892030d73408ce4fa67788",
   "url": "/qlandman",
   "username": "qlandman",
   "v": 5
  },
  "html": "Yes I know the dimensions beforehand. Seems like a great solution to just polulate a slice every time. I will try that out. Thanks again :)",
  "id": "5b89343b9c71d363c155f5e6",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 21,
  "sent": "2018-08-31T12:27:39.258Z",
  "text": "Yes I know the dimensions beforehand. Seems like a great solution to just polulate a slice every time. I will try that out. Thanks again :)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "no problem",
  "id": "5b893449f5402f32aab9a1fd",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 21,
  "sent": "2018-08-31T12:27:53.045Z",
  "text": "no problem",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "and if you are using Numba, and it&#39;s easier to think about it in terms of loops, writing loops very often has zero performance penalty as the compiler is fine with them... <a href=\"http://numba.pydata.org/numba-doc/dev/user/5minguide.html\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://numba.pydata.org/numba-doc/dev/user/5minguide.html</a> might be worth a read, and <a href=\"http://numba.pydata.org/numba-doc/dev/user/performance-tips.html\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://numba.pydata.org/numba-doc/dev/user/performance-tips.html</a>",
  "id": "5b89348d9c71d363c155f865",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 21,
  "sent": "2018-08-31T12:29:01.837Z",
  "text": "and if you are using Numba, and it's easier to think about it in terms of loops, writing loops very often has zero performance penalty as the compiler is fine with them... http://numba.pydata.org/numba-doc/dev/user/5minguide.html might be worth a read, and http://numba.pydata.org/numba-doc/dev/user/performance-tips.html",
  "unread": false,
  "urls": [
   {
    "url": "http://numba.pydata.org/numba-doc/dev/user/5minguide.html"
   },
   {
    "url": "http://numba.pydata.org/numba-doc/dev/user/performance-tips.html"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/qlandman",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/643288?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/643288?v=4&s=60",
   "displayName": "qlandman",
   "gv": "4",
   "id": "5b892030d73408ce4fa67788",
   "url": "/qlandman",
   "username": "qlandman",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span> thanks so much. I just rewrote the code with slicing and it works perfectly! Will read up on the links you posted.",
  "id": "5b893575c2bd5d117afbb1be",
  "issues": [],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 23,
  "sent": "2018-08-31T12:32:53.610Z",
  "text": "@stuartarchibald thanks so much. I just rewrote the code with slicing and it works perfectly! Will read up on the links you posted.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "No worries, glad you got it working!",
  "id": "5b8935984be56c5918c05c0b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 23,
  "sent": "2018-08-31T12:33:28.178Z",
  "text": "No worries, glad you got it working!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/cdagnino",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/3705969?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/3705969?v=4&s=60",
   "displayName": "cd",
   "gv": "4",
   "id": "54a09311db8155e6700e3863",
   "url": "/cdagnino",
   "username": "cdagnino",
   "v": 15
  },
  "html": "<p>Hi everyone, I have a quick question. I&#39;m trying to speed up my code and jitted some functions to get a 10x speedup! I&#39;m using cProfile now and I see that 30% of the time is spent on <code>__call__</code> from <code>numb.types.abstract._TypeMetaClass</code>. The help of that <code>__call__</code> says:  </p><blockquote>\n<p>Instantiate <em>cls</em> (a Type subclass, presumably) and intern it.<br>If an interned instance already exists, it is returned, otherwise<br>the new instance is returned.</p></blockquote>\n",
  "id": "5b8a9e5f11227d711dfd85a2",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 23,
  "sent": "2018-09-01T14:12:47.671Z",
  "text": "Hi everyone, I have a quick question. I'm trying to speed up my code and jitted some functions to get a 10x speedup! I'm using cProfile now and I see that 30% of the time is spent on `__call__` from `numb.types.abstract._TypeMetaClass`. The help of that `__call__` says:  \n\n>Instantiate *cls* (a Type subclass, presumably) and intern it.\n>If an interned instance already exists, it is returned, otherwise\n>the new instance is returned.\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/cdagnino",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/3705969?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/3705969?v=4&s=60",
   "displayName": "cd",
   "gv": "4",
   "id": "54a09311db8155e6700e3863",
   "url": "/cdagnino",
   "username": "cdagnino",
   "v": 15
  },
  "html": "Is this to be expected if the &quot;jitted&quot; function is called many many times or might there be something wrong going on?",
  "id": "5b8a9e8ccff55e5617905f7e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 23,
  "sent": "2018-09-01T14:13:32.787Z",
  "text": "Is this to be expected if the \"jitted\" function is called many many times or might there be something wrong going on?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 16
  },
  "html": "You may be using lists or other types that need to be boxed into Numba objects. I\u2019m assuming that\u2019s what takes up the time.",
  "id": "5b8b0881d8d36815e5c12a45",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 23,
  "sent": "2018-09-01T21:45:37.148Z",
  "text": "You may be using lists or other types that need to be boxed into Numba objects. I\u2019m assuming that\u2019s what takes up the time.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/cdagnino",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/3705969?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/3705969?v=4&s=60",
   "displayName": "cd",
   "gv": "4",
   "id": "54a09311db8155e6700e3863",
   "url": "/cdagnino",
   "username": "cdagnino",
   "v": 15
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"hameerabbasi\" class=\"mention\">@hameerabbasi</span> thanks for the reply. What do you mean with boxed into?",
  "id": "5b8d7b13f86b741b0503de5d",
  "issues": [],
  "mentions": [
   {
    "screenName": "hameerabbasi",
    "userId": "55b089c90fc9f982beaaa526",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 21,
  "sent": "2018-09-03T18:18:59.217Z",
  "text": "@hameerabbasi thanks for the reply. What do you mean with boxed into?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 16
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"cd\" class=\"mention\">@cd</span> Converted into \u201ccompiled/optimised\u201d versions of the same thing. ",
  "id": "5b8da10b11227d711d0eca01",
  "issues": [],
  "mentions": [
   {
    "screenName": "cd",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 19,
  "sent": "2018-09-03T21:00:59.607Z",
  "text": "@cd Converted into \u201ccompiled/optimised\u201d versions of the same thing. ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/karambaq",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/14233969?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/14233969?v=4&s=60",
   "displayName": "Maxim Lyubiev",
   "gv": "4",
   "id": "5b901a3bd73408ce4fa7082a",
   "url": "/karambaq",
   "username": "karambaq",
   "v": 3
  },
  "html": "hey, what I need to set in specs for jitclass when class constructor arguments contain this class?<br>for example:<pre><code>spec = [ (<span class=\"string\">'_parent'</span>), ?]\n<span class=\"variable\">@jitclass</span>(spec)\n<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">State</span>:</span>\n    <span class=\"function\"><span class=\"keyword\">def</span> </span>__init_<span class=\"number\">_</span>(<span class=\"keyword\">self</span>, parent)<span class=\"symbol\">:</span>\n        <span class=\"keyword\">self</span>._parent = parent</code></pre>",
  "id": "5b901b914be56c5918e89506",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-09-05T18:08:17.670Z",
  "text": "hey, what I need to set in specs for jitclass when class constructor arguments contain this class?\nfor example:\n\n``` \nspec = [ ('_parent'), ?]\n@jitclass(spec)\nclass State:\n    def __init__(self, parent):\n        self._parent = parent\n```\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/maedoc",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/5189886?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/5189886?v=4&s=60",
   "displayName": "marmaduke woodman",
   "gv": "4",
   "id": "54b7a868db8155e6700eb2ec",
   "url": "/maedoc",
   "username": "maedoc",
   "v": 17
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"karambaq\" class=\"mention\">@karambaq</span> there&#39;s an example in the docs or in the repo on deferred types for this, <a href=\"https://github.com/numba/numba/blob/master/examples/linkedlist.py\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://github.com/numba/numba/blob/master/examples/linkedlist.py</a>",
  "id": "5b902689d8d36815e5dfb128",
  "issues": [],
  "mentions": [
   {
    "screenName": "karambaq",
    "userId": "5b901a3bd73408ce4fa7082a",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 18,
  "sent": "2018-09-05T18:55:05.375Z",
  "text": "@karambaq there's an example in the docs or in the repo on deferred types for this, https://github.com/numba/numba/blob/master/examples/linkedlist.py",
  "unread": false,
  "urls": [
   {
    "url": "https://github.com/numba/numba/blob/master/examples/linkedlist.py"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/karambaq",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/14233969?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/14233969?v=4&s=60",
   "displayName": "Maxim Lyubiev",
   "gv": "4",
   "id": "5b901a3bd73408ce4fa7082a",
   "url": "/karambaq",
   "username": "karambaq",
   "v": 3
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"maedoc\" class=\"mention\">@maedoc</span> Thank you!",
  "id": "5b9040351d3a5711b6ed46cc",
  "issues": [],
  "mentions": [
   {
    "screenName": "maedoc",
    "userId": "54b7a868db8155e6700eb2ec",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 18,
  "sent": "2018-09-05T20:44:37.124Z",
  "text": "@maedoc Thank you!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Lomelgande",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/8880982?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/8880982?v=4&s=60",
   "displayName": "Lomelgande",
   "gv": "4",
   "id": "5ab3f0f2d73408ce4f92b317",
   "url": "/Lomelgande",
   "username": "Lomelgande",
   "v": 6
  },
  "html": "I&#39;m trying to work with reflected lists and can&#39;t seem to get the signature correct. How should I edit this to make it work with reflected lists?<pre><code>x = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]\n\n<span class=\"decorator\">@jit([\"void(reflected list(int64))\"], nopython = True) #doesn't like the space</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(x)</span>:</span>\n    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(x)):\n        x[i] += <span class=\"number\">1</span>\n\nprint(typeof(x))\nadd(x)\nprint(x)</code></pre>",
  "id": "5b92b58051a02e2a26f7aca7",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-09-07T17:29:36.354Z",
  "text": "I'm trying to work with reflected lists and can't seem to get the signature correct. How should I edit this to make it work with reflected lists?\n\n    x = [1,2,3,4,5]\n\n    @jit([\"void(reflected list(int64))\"], nopython = True) #doesn't like the space\n    def add(x):\n\t    for i in range(len(x)):\n\t\t    x[i] += 1\n\n    print(typeof(x))\n    add(x)\n    print(x)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/sk1p",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5778?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5778?v=4&s=60",
   "displayName": "Alexander Clausen",
   "gv": "4",
   "id": "5a53bb66d73408ce4f86f68d",
   "url": "/sk1p",
   "username": "sk1p",
   "v": 13
  },
  "html": "<p>I&#39;m trying to optimize the following function: <a href=\"https://github.com/LiberTEM/LiberTEM/blob/c7eee5c3b7846a9b83fb812e61ae9a76f3e22a88/src/libertem/io/dataset/k2is.py#L28\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://github.com/LiberTEM/LiberTEM/blob/c7eee5c3b7846a9b83fb812e61ae9a76f3e22a88/src/libertem/io/dataset/k2is.py#L28</a> - I have a C++ version that is about 4x faster, but I&#39;d like to avoid having to build a Python extension. This is the C++ version: <a href=\"https://github.com/LiberTEM/LiberTEM/blob/c7eee5c3b7846a9b83fb812e61ae9a76f3e22a88/prototypes/k2/uint12-decode/impl/u12decode.cpp#L37\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://github.com/LiberTEM/LiberTEM/blob/c7eee5c3b7846a9b83fb812e61ae9a76f3e22a88/prototypes/k2/uint12-decode/impl/u12decode.cpp#L37</a> </p><p>In the C++ version, the partial unrolling and <strong>restrict</strong> allow the compiler to vectorize the loop, but I can&#39;t seem to get numba to do the same. </p><p>Here is what I currently have, and it is slower than the numba version without unrolling:</p><pre><code class=\"python\"><span class=\"decorator\">@numba.jit(nopython=True)</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decode_uint12_unroll</span><span class=\"params\">(inp, out)</span>:</span>\n    <span class=\"string\">\"\"\"\n    decode bytes from bytestring ``inp`` as 12 bit into ``out``\n    \"\"\"</span>\n    o = <span class=\"number\">0</span>\n    middle = <span class=\"number\">16</span>\n    size_in = len(inp)\n    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>, size_in - (<span class=\"number\">3</span>*middle+<span class=\"number\">1</span>), <span class=\"number\">3</span>*middle):\n        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(middle):\n            base = i + <span class=\"number\">3</span>*j\n            out[o] = (inp[base] &amp; <span class=\"number\">0xff</span>) | ((inp[base+<span class=\"number\">1</span>] &lt;&lt; <span class=\"number\">8</span>) &amp; <span class=\"number\">0xf00</span>)\n            out[o+<span class=\"number\">1</span>] = ((inp[base+<span class=\"number\">1</span>] &gt;&gt; <span class=\"number\">4</span>) &amp; <span class=\"number\">0xf</span>) | ((inp[base+<span class=\"number\">2</span>] &lt;&lt; <span class=\"number\">4</span>) &amp; <span class=\"number\">0xff0</span>)\n            o += <span class=\"number\">2</span>\n\n    rest_start = size_in - (size_in % (<span class=\"number\">3</span>*middle+<span class=\"number\">1</span>))\n    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(rest_start, size_in, <span class=\"number\">3</span>):\n        out[o] = inp[i] | (inp[i + <span class=\"number\">1</span>] &amp; <span class=\"number\">0x0F</span>) &lt;&lt; <span class=\"number\">8</span>\n        out[o + <span class=\"number\">1</span>] = (inp[i + <span class=\"number\">1</span>] &amp; <span class=\"number\">0xF0</span>) &gt;&gt; <span class=\"number\">4</span> | inp[i + <span class=\"number\">2</span>] &lt;&lt; <span class=\"number\">4</span>\n        o += <span class=\"number\">2</span></code></pre>",
  "id": "5b96380df59e0c1555d75806",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-09-10T09:23:25.424Z",
  "text": "I'm trying to optimize the following function: https://github.com/LiberTEM/LiberTEM/blob/c7eee5c3b7846a9b83fb812e61ae9a76f3e22a88/src/libertem/io/dataset/k2is.py#L28 - I have a C++ version that is about 4x faster, but I'd like to avoid having to build a Python extension. This is the C++ version: https://github.com/LiberTEM/LiberTEM/blob/c7eee5c3b7846a9b83fb812e61ae9a76f3e22a88/prototypes/k2/uint12-decode/impl/u12decode.cpp#L37 \n\nIn the C++ version, the partial unrolling and __restrict__ allow the compiler to vectorize the loop, but I can't seem to get numba to do the same. \n\nHere is what I currently have, and it is slower than the numba version without unrolling:\n\n```python\n@numba.jit(nopython=True)\ndef decode_uint12_unroll(inp, out):\n    \"\"\"\n    decode bytes from bytestring ``inp`` as 12 bit into ``out``\n    \"\"\"\n    o = 0\n    middle = 16\n    size_in = len(inp)\n    for i in range(0, size_in - (3*middle+1), 3*middle):\n        for j in range(middle):\n            base = i + 3*j\n            out[o] = (inp[base] & 0xff) | ((inp[base+1] << 8) & 0xf00)\n            out[o+1] = ((inp[base+1] >> 4) & 0xf) | ((inp[base+2] << 4) & 0xff0)\n            o += 2\n\n    rest_start = size_in - (size_in % (3*middle+1))\n    for i in range(rest_start, size_in, 3):\n        out[o] = inp[i] | (inp[i + 1] & 0x0F) << 8\n        out[o + 1] = (inp[i + 1] & 0xF0) >> 4 | inp[i + 2] << 4\n        o += 2\n```",
  "unread": false,
  "urls": [
   {
    "url": "https://github.com/LiberTEM/LiberTEM/blob/c7eee5c3b7846a9b83fb812e61ae9a76f3e22a88/src/libertem/io/dataset/k2is.py#L28"
   },
   {
    "url": "https://github.com/LiberTEM/LiberTEM/blob/c7eee5c3b7846a9b83fb812e61ae9a76f3e22a88/prototypes/k2/uint12-decode/impl/u12decode.cpp#L37"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/albop",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/276777?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/276777?v=4&s=60",
   "displayName": "Pablo Winant",
   "gv": "4",
   "id": "55ef21560fc9f982beb00961",
   "url": "/albop",
   "username": "albop",
   "v": 28
  },
  "html": "Hi everybody! I&#39;m struggling with another little corner case:  I would like to define a function whose behaviour would depend on the value of an integer argument.",
  "id": "5b963ff07ce5f5314f8d5717",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-09-10T09:57:04.722Z",
  "text": "Hi everybody! I'm struggling with another little corner case:  I would like to define a function whose behaviour would depend on the value of an integer argument.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/albop",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/276777?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/276777?v=4&s=60",
   "displayName": "Pablo Winant",
   "gv": "4",
   "id": "55ef21560fc9f982beb00961",
   "url": "/albop",
   "username": "albop",
   "v": 28
  },
  "html": "The solution I found was to predefine a tuple <code>Val</code> where all <code>Val[i]</code> have different types as in <code>Val = tuple([tuple(range(i)) for i in range(max_Val)])</code>.",
  "id": "5b96404645318b2dfe8920b0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-09-10T09:58:30.033Z",
  "text": "The solution I found was to predefine a tuple `Val` where all `Val[i]` have different types as in `Val = tuple([tuple(range(i)) for i in range(max_Val)])`.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/albop",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/276777?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/276777?v=4&s=60",
   "displayName": "Pablo Winant",
   "gv": "4",
   "id": "55ef21560fc9f982beb00961",
   "url": "/albop",
   "username": "albop",
   "v": 28
  },
  "html": "Then I can call a function as <code>myfun(..., Val[i])</code> so that I expect the compiler will choose the right implementation of myfun if it knows the value of <code>i</code> by then. ",
  "id": "5b9640b6550f8808f58a067a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-09-10T10:00:22.266Z",
  "text": "Then I can call a function as `myfun(..., Val[i])` so that I expect the compiler will choose the right implementation of myfun if it knows the value of `i` by then. ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/albop",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/276777?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/276777?v=4&s=60",
   "displayName": "Pablo Winant",
   "gv": "4",
   "id": "55ef21560fc9f982beb00961",
   "url": "/albop",
   "username": "albop",
   "v": 28
  },
  "html": "Is there a better approach? Is it possible to emulate this behaviour without predefining all coordinates of Val (and setting an upper bound on max_Val).",
  "id": "5b96411acddb292dff4fd3b4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-09-10T10:02:02.654Z",
  "text": "Is there a better approach? Is it possible to emulate this behaviour without predefining all coordinates of Val (and setting an upper bound on max_Val).",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 16
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"albop\" class=\"mention\">@albop</span> How about <code>myfun(..., tuple(range(i)))</code>? I&#39;d really recommend you use a list instead of a tuple here though, for Numba lists are a homogenous collection, tuples are heterogenous and so <code>(0, 1)</code> is a different type for Numba then <code>(0,)</code>. Also, you could refactor the code to somehow use <code>range</code> inside the function instead of pre-generating it.",
  "id": "5b964dc933ebb72e37f70280",
  "issues": [],
  "mentions": [
   {
    "screenName": "albop",
    "userId": "55ef21560fc9f982beb00961",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 16,
  "sent": "2018-09-10T10:56:09.650Z",
  "text": "@albop How about `myfun(..., tuple(range(i)))`? I'd really recommend you use a list instead of a tuple here though, for Numba lists are a homogenous collection, tuples are heterogenous and so `(0, 1)` is a different type for Numba then `(0,)`. Also, you could refactor the code to somehow use `range` inside the function instead of pre-generating it.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-09-10T11:24:33.490Z",
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/albop",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/276777?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/276777?v=4&s=60",
   "displayName": "Pablo Winant",
   "gv": "4",
   "id": "55ef21560fc9f982beb00961",
   "url": "/albop",
   "username": "albop",
   "v": 28
  },
  "html": "Thanks, but will the compiler infer the type of <code>tuple(range(i))</code> just by knowing the value of <code>i</code> at compile-time ? That would depends on the type it gives to <code>range</code>. If it&#39;s some kind of iterator type that doesn&#39;t depend on <code>i</code> then it doesn&#39;t work for me. ",
  "id": "5b9654527189ae6fdda2c75e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-09-10T11:24:02.189Z",
  "text": "Thanks, but will the compiler infer the type of `tuple(range(i))` just by knowing the value of `i` at compile-time ? That would depends on the type it gives to `range`. If it's some kind of iterator type that doesn't depend on `i` then it doesn't work for me. ",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/albop",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/276777?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/276777?v=4&s=60",
   "displayName": "Pablo Winant",
   "gv": "4",
   "id": "55ef21560fc9f982beb00961",
   "url": "/albop",
   "username": "albop",
   "v": 28
  },
  "html": "As for list vs tuple, I have noticed that <code>(0,0,0)</code> is a <code>UniTuple</code> precisely a <code>tuple(int64 x 2)</code>, i.e. an homogenous tuple. Is there still a reason to use a list here ?  I would have assumed that since the one I build is a very unmutable structure, it would fit better. This is only tangential though, any collection of types would work here. To avoid ambiguity with tuple I actually have:",
  "id": "5b96557b7189ae6fdda2cf51",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-09-10T11:28:59.604Z",
  "text": "As for list vs tuple, I have noticed that `(0,0,0)` is a `UniTuple` precisely a `tuple(int64 x 2)`, i.e. an homogenous tuple. Is there still a reason to use a list here ?  I would have assumed that since the one I build is a very unmutable structure, it would fit better. This is only tangential though, any collection of types would work here. To avoid ambiguity with tuple I actually have:",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-09-10T11:29:16.996Z",
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/albop",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/276777?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/276777?v=4&s=60",
   "displayName": "Pablo Winant",
   "gv": "4",
   "id": "55ef21560fc9f982beb00961",
   "url": "/albop",
   "username": "albop",
   "v": 28
  },
  "html": "<pre><code><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CVal</span>:</span>\n    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span>\n        <span class=\"keyword\">pass</span>\n\nVal = tuple([(CVal(),tuple(range(i))) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(max_Val)])</code></pre>",
  "id": "5b96557dcddb292dff505580",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-09-10T11:29:01.997Z",
  "text": "```@jitclass([])\nclass CVal:\n    def __init__(self):\n        pass\n\nVal = tuple([(CVal(),tuple(range(i))) for i in range(max_Val)])\n```",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/albop",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/276777?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/276777?v=4&s=60",
   "displayName": "Pablo Winant",
   "gv": "4",
   "id": "55ef21560fc9f982beb00961",
   "url": "/albop",
   "username": "albop",
   "v": 28
  },
  "html": "so that Val[2] is not exactly a tuple.",
  "id": "5b9655a27ce5f5314f8dd8a0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-09-10T11:29:38.062Z",
  "text": "so that Val[2] is not exactly a tuple.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 16
  },
  "html": "As far as I&#39;m aware, Numba treats tuples like in C#, Java or other languages. Or like un-named structs. List would be better. <code>[(CVal(),tuple(range(i))) for i in range(max_Val)]</code> would work fine for your case... As for pre-computation, depends. If you&#39;ll be using a single value many times and don&#39;t care about memory, pre-computation is better.",
  "id": "5b965a70728ddf028288927c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-09-10T11:50:08.537Z",
  "text": "As far as I'm aware, Numba treats tuples like in C#, Java or other languages. Or like un-named structs. List would be better. `[(CVal(),tuple(range(i))) for i in range(max_Val)]` would work fine for your case... As for pre-computation, depends. If you'll be using a single value many times and don't care about memory, pre-computation is better.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 16
  },
  "html": "Sorry, <code>[(CVal(),list(range(i))) for i in range(max_Val)]</code>",
  "id": "5b965a98cddb292dff50798d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-09-10T11:50:48.465Z",
  "text": "Sorry, `[(CVal(),list(range(i))) for i in range(max_Val)]`",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/albop",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/276777?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/276777?v=4&s=60",
   "displayName": "Pablo Winant",
   "gv": "4",
   "id": "55ef21560fc9f982beb00961",
   "url": "/albop",
   "username": "albop",
   "v": 28
  },
  "html": "I&#39;m not sure about that. The problem is, unless I missed something, the type of a list is independent from its number of elements:",
  "id": "5b965b09a2343433d12924ca",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-09-10T11:52:41.891Z",
  "text": "I'm not sure about that. The problem is, unless I missed something, the type of a list is independent from its number of elements:",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-09-10T11:53:39.532Z",
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/albop",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/276777?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/276777?v=4&s=60",
   "displayName": "Pablo Winant",
   "gv": "4",
   "id": "55ef21560fc9f982beb00961",
   "url": "/albop",
   "username": "albop",
   "v": 28
  },
  "html": "<pre><code>In [<span class=\"number\">2</span>]: numba.<span class=\"function\"><span class=\"title\">typeof</span><span class=\"params\">(list(range(<span class=\"number\">2</span>)</span></span>))\nOut[<span class=\"number\">2</span>]: reflected <span class=\"function\"><span class=\"title\">list</span><span class=\"params\">(int64)</span></span>\n\nIn [<span class=\"number\">3</span>]: numba.<span class=\"function\"><span class=\"title\">typeof</span><span class=\"params\">(tuple(range(<span class=\"number\">2</span>)</span></span>))\nOut[<span class=\"number\">3</span>]: <span class=\"function\"><span class=\"title\">tuple</span><span class=\"params\">(int64 x <span class=\"number\">2</span>)</span></span></code></pre>",
  "id": "5b965b35a04db554a7048ad2",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-09-10T11:53:25.852Z",
  "text": "```\nIn [2]: numba.typeof(list(range(2)))\nOut[2]: reflected list(int64)\n\nIn [3]: numba.typeof(tuple(range(2)))\nOut[3]: tuple(int64 x 2)\n```",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/albop",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/276777?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/276777?v=4&s=60",
   "displayName": "Pablo Winant",
   "gv": "4",
   "id": "55ef21560fc9f982beb00961",
   "url": "/albop",
   "username": "albop",
   "v": 28
  },
  "html": "And variable <code>Val</code> itself must be a non-homegenous tuple such that the type of <code>Val[2]</code> and <code>Val[3]</code> for instance will be known to differ.",
  "id": "5b965bb233ebb72e37f75d30",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-09-10T11:55:30.441Z",
  "text": "And variable `Val` itself must be a non-homegenous tuple such that the type of `Val[2]` and `Val[3]` for instance will be known to differ.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 16
  },
  "html": "Ah, my bad then.",
  "id": "5b9661d1f59e0c1555d85c0b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-09-10T12:21:37.296Z",
  "text": "Ah, my bad then.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/albop",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/276777?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/276777?v=4&s=60",
   "displayName": "Pablo Winant",
   "gv": "4",
   "id": "55ef21560fc9f982beb00961",
   "url": "/albop",
   "username": "albop",
   "v": 28
  },
  "html": "No problem <span data-link-type=\"mention\" data-screen-name=\"hameerabbasi\" class=\"mention\">@hameerabbasi</span> . Actually, I&#39;m thinking about the kind of things you are doing in pysparse and wonder whether they might be a connection. One context where I use this kind of approach is to specialize routines for different numbers of dimensions when data is represented by a 2d matrix for instance: each column corresponds to a different dimension, but that information is not included in the type of the arrary so instead of passing the matrix <code>mat</code> alone, I pass <code>(mat, Val[mat.shape[1]])</code> so that the jitted function knows the exact number of dimensions.",
  "id": "5b96ec08550f8808f58e7af9",
  "issues": [],
  "mentions": [
   {
    "screenName": "hameerabbasi",
    "userId": "55b089c90fc9f982beaaa526",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 17,
  "sent": "2018-09-10T22:11:20.799Z",
  "text": "No problem @hameerabbasi . Actually, I'm thinking about the kind of things you are doing in pysparse and wonder whether they might be a connection. One context where I use this kind of approach is to specialize routines for different numbers of dimensions when data is represented by a 2d matrix for instance: each column corresponds to a different dimension, but that information is not included in the type of the arrary so instead of passing the matrix `mat` alone, I pass `(mat, Val[mat.shape[1]])` so that the jitted function knows the exact number of dimensions.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/albop",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/276777?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/276777?v=4&s=60",
   "displayName": "Pablo Winant",
   "gv": "4",
   "id": "55ef21560fc9f982beb00961",
   "url": "/albop",
   "username": "albop",
   "v": 28
  },
  "html": "Which brings me to a connex question:  is there an implementation of static arrays in numba, i.e. arrays, where number of elements is part of the type ?",
  "id": "5b96eca60fb4232e38a57d61",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-09-10T22:13:58.141Z",
  "text": "Which brings me to a connex question:  is there an implementation of static arrays in numba, i.e. arrays, where number of elements is part of the type ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 16
  },
  "html": "Maybe a closure would work for your case?",
  "id": "5b96ed671e2b442a25f22bd3",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-09-10T22:17:11.007Z",
  "text": "Maybe a closure would work for your case?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/albop",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/276777?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/276777?v=4&s=60",
   "displayName": "Pablo Winant",
   "gv": "4",
   "id": "55ef21560fc9f982beb00961",
   "url": "/albop",
   "username": "albop",
   "v": 28
  },
  "html": "How so ?",
  "id": "5b96ed7a33ebb72e37fb3866",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-09-10T22:17:30.935Z",
  "text": "How so ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-09-10T22:22:34.515Z",
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/albop",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/276777?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/276777?v=4&s=60",
   "displayName": "Pablo Winant",
   "gv": "4",
   "id": "55ef21560fc9f982beb00961",
   "url": "/albop",
   "username": "albop",
   "v": 28
  },
  "html": "Let me try to expose a concrete example: suppose you have <code>N=1000; A=random((N,2,2)); A=random((N,2,2))</code> and you want to compute <code>C</code> such that <code>C[i,:,:] == A[i,:,:]@B[i,:,:]</code>. ",
  "id": "5b96ee967189ae6fdda6dbf6",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-09-10T22:22:14.460Z",
  "text": "Let me try to expose a concrete example: suppose you have `N=1000; A=random((N,2,2)); A=random((N,2,2))` and you want to compute `C` such that `C[i,:,:] == A[i,:,:]@B[i,:,:]`. ",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/albop",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/276777?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/276777?v=4&s=60",
   "displayName": "Pablo Winant",
   "gv": "4",
   "id": "55ef21560fc9f982beb00961",
   "url": "/albop",
   "username": "albop",
   "v": 28
  },
  "html": "You can write a loop on <code>i</code> with this instruction : <code>C[i,:,:] == A[i,:,:]@B[i,:,:]</code> . But I have noticed that if you define a function <code>matmul_22_22(a,b)</code> which does this same computation knowing the sizes of <code>a</code> and <code>b</code> you get faster results even with a naive multiplication algorithm (here approx x5)",
  "id": "5b96f287f3c26b08f65a8a5e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-09-10T22:39:03.992Z",
  "text": "You can write a loop on `i` with this instruction : `C[i,:,:] == A[i,:,:]@B[i,:,:]` . But I have noticed that if you define a function `matmul_22_22(a,b)` which does this same computation knowing the sizes of `a` and `b` you get faster results even with a naive multiplication algorithm (here approx x5)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/albop",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/276777?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/276777?v=4&s=60",
   "displayName": "Pablo Winant",
   "gv": "4",
   "id": "55ef21560fc9f982beb00961",
   "url": "/albop",
   "username": "albop",
   "v": 28
  },
  "html": "I wrote a simple example here: <a href=\"https://gist.github.com/albop/98da8acb1d7a301b307e8a9cd63fe8ad\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://gist.github.com/albop/98da8acb1d7a301b307e8a9cd63fe8ad</a>",
  "id": "5b96f295728ddf02828c866a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-09-10T22:39:17.065Z",
  "text": "I wrote a simple example here: https://gist.github.com/albop/98da8acb1d7a301b307e8a9cd63fe8ad",
  "unread": false,
  "urls": [
   {
    "url": "https://gist.github.com/albop/98da8acb1d7a301b307e8a9cd63fe8ad"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/albop",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/276777?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/276777?v=4&s=60",
   "displayName": "Pablo Winant",
   "gv": "4",
   "id": "55ef21560fc9f982beb00961",
   "url": "/albop",
   "username": "albop",
   "v": 28
  },
  "html": "now my idea would be to write a function <code>matmul(a,b,V_a,V_b)</code>where <code>V_a</code> is of type <code>(Val[a.shape], Val[b.shape])</code> same for <code>V_b</code> and call this function matmul instead.",
  "id": "5b96f3b7f59e0c1555dc2bd3",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-09-10T22:44:07.916Z",
  "text": "now my idea would be to write a function `matmul(a,b,V_a,V_b)`where `V_a` is of type `(Val[a.shape], Val[b.shape])` same for `V_b` and call this function matmul instead.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-09-10T23:00:48.109Z",
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/albop",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/276777?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/276777?v=4&s=60",
   "displayName": "Pablo Winant",
   "gv": "4",
   "id": "55ef21560fc9f982beb00961",
   "url": "/albop",
   "username": "albop",
   "v": 28
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"hameerabbasi\" class=\"mention\">@hameerabbasi</span> : I now see how the closure would come up.",
  "id": "5b96f797f59e0c1555dc4038",
  "issues": [],
  "mentions": [
   {
    "screenName": "hameerabbasi",
    "userId": "55b089c90fc9f982beaaa526",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 18,
  "sent": "2018-09-10T23:00:39.726Z",
  "text": "@hameerabbasi : I now see how the closure would come up.",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"sk1p\" class=\"mention\">@sk1p</span>: Speculating, I think the slowdown you see is likely related to <a target=\"_blank\" data-link-type=\"issue\" data-issue=\"3205\" href=\"https://github.com/numba/numba/issues/3205\" data-provider=\"github\" data-issue-repo=\"numba/numba\" class=\"issue\">numba/numba#3205</a>.  Numba is possibly generating code that handles the wrap-around negative indexing that is unnecessary because the index expressions are all non-negative.  We&#39;ve observed this in a few situations, and are trying to come up with a fix.",
  "id": "5b972fed728ddf02828de2dd",
  "issues": [
   {
    "number": "3205",
    "repo": "numba/numba"
   }
  ],
  "mentions": [
   {
    "screenName": "sk1p",
    "userId": "5a53bb66d73408ce4f86f68d",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 17,
  "sent": "2018-09-11T03:01:01.156Z",
  "text": "@sk1p: Speculating, I think the slowdown you see is likely related to https://github.com/numba/numba/issues/3205.  Numba is possibly generating code that handles the wrap-around negative indexing that is unnecessary because the index expressions are all non-negative.  We've observed this in a few situations, and are trying to come up with a fix.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/sk1p",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5778?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5778?v=4&s=60",
   "displayName": "Alexander Clausen",
   "gv": "4",
   "id": "5a53bb66d73408ce4f86f68d",
   "url": "/sk1p",
   "username": "sk1p",
   "v": 13
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"seibert\" class=\"mention\">@seibert</span> thanks. If it helps, here is the generated assembler code: <a href=\"https://dpaste.de/zJKT/raw\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://dpaste.de/zJKT/raw</a>",
  "id": "5b978ace7ce5f5314f9566a4",
  "issues": [],
  "mentions": [
   {
    "screenName": "seibert",
    "userId": "55b68af40fc9f982beab2a3c",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 17,
  "sent": "2018-09-11T09:28:45.994Z",
  "text": "@seibert thanks. If it helps, here is the generated assembler code: https://dpaste.de/zJKT/raw",
  "unread": false,
  "urls": [
   {
    "url": "https://dpaste.de/zJKT/raw"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/sk1p",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5778?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5778?v=4&s=60",
   "displayName": "Alexander Clausen",
   "gv": "4",
   "id": "5a53bb66d73408ce4f86f68d",
   "url": "/sk1p",
   "username": "sk1p",
   "v": 13
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"seibert\" class=\"mention\">@seibert</span> btw. is there an equivalent to <strong>restrict</strong> in numba? To be able to say: my input and output array are not overlapping, you are allowed to optimize.",
  "id": "5b97939a728ddf0282902f73",
  "issues": [],
  "mentions": [
   {
    "screenName": "seibert",
    "userId": "55b68af40fc9f982beab2a3c",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 17,
  "sent": "2018-09-11T10:06:18.793Z",
  "text": "@seibert btw. is there an equivalent to __restrict__ in numba? To be able to say: my input and output array are not overlapping, you are allowed to optimize.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "we do not have that capability at the moment, though that has also come up.",
  "id": "5b97cbb5550f8808f593cbe7",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-09-11T14:05:41.504Z",
  "text": "we do not have that capability at the moment, though that has also come up.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "with ufuncs (where input and output roles are clear)  we could do some of this automatically, but with jit, I think we&#39;ll have to give users the manual control",
  "id": "5b97cc0933ebb72e37004a5e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-09-11T14:07:05.578Z",
  "text": "with ufuncs (where input and output roles are clear)  we could do some of this automatically, but with jit, I think we'll have to give users the manual control",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/saulshanabrook",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1186124?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1186124?v=4&s=60",
   "displayName": "Saul Shanabrook",
   "gv": "4",
   "id": "529c6f2eed5ab0b3bf04e08b",
   "url": "/saulshanabrook",
   "username": "saulshanabrook",
   "v": 202
  },
  "html": "Is it possible to run numba with all the error handling/re-throwing disabled?",
  "id": "5b97d5097ce5f5314f9749d1",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-09-11T14:45:29.892Z",
  "text": "Is it possible to run numba with all the error handling/re-throwing disabled?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/saulshanabrook",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1186124?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1186124?v=4&s=60",
   "displayName": "Saul Shanabrook",
   "gv": "4",
   "id": "529c6f2eed5ab0b3bf04e08b",
   "url": "/saulshanabrook",
   "username": "saulshanabrook",
   "v": 202
  },
  "html": "It would be helpful for debugging just to get the original stack trace, so I can start pdb or something and see whats on the stack",
  "id": "5b97d53aa04db554a70dbe11",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-09-11T14:46:18.846Z",
  "text": "It would be helpful for debugging just to get the original stack trace, so I can start pdb or something and see whats on the stack",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/sk1p",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5778?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5778?v=4&s=60",
   "displayName": "Alexander Clausen",
   "gv": "4",
   "id": "5a53bb66d73408ce4f86f68d",
   "url": "/sk1p",
   "username": "sk1p",
   "v": 13
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"seibert\" class=\"mention\">@seibert</span> ok, good to know that you are aware. I guess ufuncs that change dtype and size are... difficult? :)",
  "id": "5b97db45f59e0c1555e18d1a",
  "issues": [],
  "mentions": [
   {
    "screenName": "seibert",
    "userId": "55b68af40fc9f982beab2a3c",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 16,
  "sent": "2018-09-11T15:12:05.149Z",
  "text": "@seibert ok, good to know that you are aware. I guess ufuncs that change dtype and size are... difficult? :)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"saulshanabrook\" class=\"mention\">@saulshanabrook</span>: <a href=\"http://numba.pydata.org/numba-doc/dev/reference/envvars.html#envvar-NUMBA_DEVELOPER_MODE\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://numba.pydata.org/numba-doc/dev/reference/envvars.html#envvar-NUMBA_DEVELOPER_MODE</a>",
  "id": "5b97dd797189ae6fddac7bd7",
  "issues": [],
  "mentions": [
   {
    "screenName": "saulshanabrook",
    "userId": "529c6f2eed5ab0b3bf04e08b",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 16,
  "sent": "2018-09-11T15:21:29.494Z",
  "text": "@saulshanabrook: http://numba.pydata.org/numba-doc/dev/reference/envvars.html#envvar-NUMBA_DEVELOPER_MODE",
  "unread": false,
  "urls": [
   {
    "url": "http://numba.pydata.org/numba-doc/dev/reference/envvars.html#envvar-NUMBA_DEVELOPER_MODE"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "you can also create a <code>.numba_config.yaml</code> to always have certain Numba options set when you are in a particular directory",
  "id": "5b97ddb251a02e2a26153acb",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-09-11T15:22:26.862Z",
  "text": "you can also create a `.numba_config.yaml` to always have certain Numba options set when you are in a particular directory",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "<a href=\"http://numba.pydata.org/numba-doc/dev/reference/envvars.html#environment-variables\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://numba.pydata.org/numba-doc/dev/reference/envvars.html#environment-variables</a>",
  "id": "5b97ddb5cddb292dff5a2f04",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-09-11T15:22:29.150Z",
  "text": "http://numba.pydata.org/numba-doc/dev/reference/envvars.html#environment-variables",
  "unread": false,
  "urls": [
   {
    "url": "http://numba.pydata.org/numba-doc/dev/reference/envvars.html#environment-variables"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/saulshanabrook",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1186124?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1186124?v=4&s=60",
   "displayName": "Saul Shanabrook",
   "gv": "4",
   "id": "529c6f2eed5ab0b3bf04e08b",
   "url": "/saulshanabrook",
   "username": "saulshanabrook",
   "v": 202
  },
  "html": "Thank you! Guess I should have read the docs :)",
  "id": "5b97df7df3c26b08f6603611",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-09-11T15:30:05.030Z",
  "text": "Thank you! Guess I should have read the docs :)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "Hah, no worries, they change pretty quickly.",
  "id": "5b97e941e481f854a6a26af1",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-09-11T16:11:45.287Z",
  "text": "Hah, no worries, they change pretty quickly.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "Stuart added this feature in 0.39 I think",
  "id": "5b97e94be6e309365e394cbd",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-09-11T16:11:55.590Z",
  "text": "Stuart added this feature in 0.39 I think",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "/all: Numba 0.40 release candidate packages are posted.  Please test, especially if you use any of Numba&#39;s multithreading features: <a href=\"https://groups.google.com/a/continuum.io/forum/#!topic/numba-users/pYAd-kT1mDM\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://groups.google.com/a/continuum.io/forum/#!topic/numba-users/pYAd-kT1mDM</a>",
  "id": "5b99141351a02e2a261c8dd5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-09-12T13:26:43.343Z",
  "text": "/all: Numba 0.40 release candidate packages are posted.  Please test, especially if you use any of Numba's multithreading features: https://groups.google.com/a/continuum.io/forum/#!topic/numba-users/pYAd-kT1mDM",
  "unread": false,
  "urls": [
   {
    "url": "https://groups.google.com/a/continuum.io/forum/#!topic/numba-users/pYAd-kT1mDM"
   }
  ],
  "v": 1
 },
 {
  "editedAt": "2018-09-14T11:30:42.002Z",
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/qlandman",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/643288?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/643288?v=4&s=60",
   "displayName": "qlandman",
   "gv": "4",
   "id": "5b892030d73408ce4fa67788",
   "url": "/qlandman",
   "username": "qlandman",
   "v": 5
  },
  "html": "<p>Hey Guys, I am using Numba to speed up some functions and I must say it works really well. However, when I try to make the function parallel it does not work anymore. </p><ul>\n<li>When I try to parallelise  implicitely I get the following error:<code>AssertionError: Sizes of result_matrix, result_data do not match on &lt;ipython-input-73-9fad01358991&gt; (21)</code></li>\n<li>When I try to parallelise explicit with prange, there is no error message, but the resulting matrix only contains zeroes. </li>\n</ul>\n<p>The workbook with my code can be found <a href=\"https://gist.github.com/qlandman/4cd27a84aeaeb6839c5359ff168961ee\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">here</a>. Thanks in advance for your help, it is really appreciated!</p>",
  "id": "5b9b9badf08bc22dfb56c8ec",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-09-14T11:29:49.770Z",
  "text": "Hey Guys, I am using Numba to speed up some functions and I must say it works really well. However, when I try to make the function parallel it does not work anymore. \n* When I try to parallelise  implicitely I get the following error:`AssertionError: Sizes of result_matrix, result_data do not match on <ipython-input-73-9fad01358991> (21)`\n* When I try to parallelise explicit with prange, there is no error message, but the resulting matrix only contains zeroes. \n\nThe workbook with my code can be found [here](https://gist.github.com/qlandman/4cd27a84aeaeb6839c5359ff168961ee). Thanks in advance for your help, it is really appreciated!",
  "unread": false,
  "urls": [
   {
    "url": "https://gist.github.com/qlandman/4cd27a84aeaeb6839c5359ff168961ee"
   }
  ],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"qlandman\" class=\"mention\">@qlandman</span> thanks for the report, think this is a bug in array analysis for the parallel target, reported it here <a target=\"_blank\" data-link-type=\"issue\" data-issue=\"3314\" href=\"https://github.com/numba/numba/issues/3314\" data-provider=\"github\" data-issue-repo=\"numba/numba\" class=\"issue\">numba/numba#3314</a>",
  "id": "5b9f84eba56b215c974e09aa",
  "issues": [
   {
    "number": "3314",
    "repo": "numba/numba"
   }
  ],
  "mentions": [
   {
    "screenName": "qlandman",
    "userId": "5b892030d73408ce4fa67788",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 11,
  "sent": "2018-09-17T10:41:47.643Z",
  "text": "@qlandman thanks for the report, think this is a bug in array analysis for the parallel target, reported it here https://github.com/numba/numba/issues/3314",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/qlandman",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/643288?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/643288?v=4&s=60",
   "displayName": "qlandman",
   "gv": "4",
   "id": "5b892030d73408ce4fa67788",
   "url": "/qlandman",
   "username": "qlandman",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span> Thanks for the bug report on github!",
  "id": "5b9fbe960cfe7f30f1a972aa",
  "issues": [],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 11,
  "sent": "2018-09-17T14:47:50.568Z",
  "text": "@stuartarchibald Thanks for the bug report on github!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"qlandman\" class=\"mention\">@qlandman</span> no problem.",
  "id": "5b9fbffef4bd1056ac7743bf",
  "issues": [],
  "mentions": [
   {
    "screenName": "qlandman",
    "userId": "5b892030d73408ce4fa67788",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 12,
  "sent": "2018-09-17T14:53:50.362Z",
  "text": "@qlandman no problem.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/chengts95",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6616679?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6616679?v=4&s=60",
   "displayName": "Tianshi Cheng",
   "gv": "4",
   "id": "562a3a7216b6c7089cb80181",
   "url": "/chengts95",
   "username": "chengts95",
   "v": 6
  },
  "html": "Hello, can someone tell me that is it possible to call a list of jitted functions in another jit function? Just like calling function pointers in a array in C/C++.",
  "id": "5ba08f86b4990c30eecfea43",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-09-18T05:39:18.387Z",
  "text": "Hello, can someone tell me that is it possible to call a list of jitted functions in another jit function? Just like calling function pointers in a array in C/C++.\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/chengts95",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6616679?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6616679?v=4&s=60",
   "displayName": "Tianshi Cheng",
   "gv": "4",
   "id": "562a3a7216b6c7089cb80181",
   "url": "/chengts95",
   "username": "chengts95",
   "v": 6
  },
  "html": "<pre><code>x=np.<span class=\"function\"><span class=\"title\">linspace</span><span class=\"params\">(<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">10</span>)</span></span>\ny=np.<span class=\"function\"><span class=\"title\">linspace</span><span class=\"params\">(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">10</span>)</span></span>\n\nfl=[numba.<span class=\"function\"><span class=\"title\">njit</span><span class=\"params\">(lambda x : <span class=\"number\">0</span>-x[i])</span></span> <span class=\"keyword\">for</span> <span class=\"tag\">i</span> <span class=\"keyword\">in</span> <span class=\"function\"><span class=\"title\">range</span><span class=\"params\">(len(x)</span></span>)]\n\n@numba.<span class=\"function\"><span class=\"title\">njit</span><span class=\"params\">()</span></span>\ndef <span class=\"function\"><span class=\"title\">call</span><span class=\"params\">(fl,x,y)</span></span>:\n    <span class=\"keyword\">for</span> <span class=\"tag\">i</span> <span class=\"keyword\">in</span> fl:\n        y[<span class=\"number\">0</span>]=<span class=\"function\"><span class=\"title\">i</span><span class=\"params\">(x)</span></span></code></pre>",
  "id": "5ba08faaa56b215c9754817e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-09-18T05:39:54.123Z",
  "text": "``` \nx=np.linspace(0,1,10)\ny=np.linspace(0,0,10)\n\nfl=[numba.njit(lambda x : 0-x[i]) for i in range(len(x))]\n\n@numba.njit()\ndef call(fl,x,y):\n    for i in fl:\n        y[0]=i(x)\n\n\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/chengts95",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6616679?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6616679?v=4&s=60",
   "displayName": "Tianshi Cheng",
   "gv": "4",
   "id": "562a3a7216b6c7089cb80181",
   "url": "/chengts95",
   "username": "chengts95",
   "v": 6
  },
  "html": "The concept is like the above code.",
  "id": "5ba08fd3e5c2cc56ada6ad0c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-09-18T05:40:35.419Z",
  "text": "The concept is like the above code.\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "Hi, can I embed numba into a c++ project?",
  "id": "5ba0be30a56b215c9755a15e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-09-18T08:58:24.096Z",
  "text": "Hi, can I embed numba into a c++ project?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "and calling c++ functions in python using c abi directly",
  "id": "5ba0be49b9531f2dfa836069",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-09-18T08:58:49.201Z",
  "text": "and calling c++ functions in python using c abi directly",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-09-18T10:58:39.834Z",
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"chengts95\" class=\"mention\">@chengts95</span> don&#39;t think that can be done right now, there&#39;s no polymorphic function type so each function dispatch would be a different type, which means the list type is not homogeneous (unsupported). If the list were changed to a tuple this might work so long as <code>i</code> was a compile time constant, which it&#39;s not. Essentially, you can&#39;t do what you want I&#39;m afraid. However, you can do this:<pre><code>import numba\nimport numpy as np\n\nx=np.<span class=\"function\"><span class=\"title\">linspace</span><span class=\"params\">(<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">10</span>)</span></span>\ny=np.<span class=\"function\"><span class=\"title\">linspace</span><span class=\"params\">(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">10</span>)</span></span>\nfl=[numba.<span class=\"function\"><span class=\"title\">njit</span><span class=\"params\">(lambda x : <span class=\"number\">0</span> - x[i])</span></span> <span class=\"keyword\">for</span> <span class=\"tag\">i</span> <span class=\"keyword\">in</span> <span class=\"function\"><span class=\"title\">range</span><span class=\"params\">(len(x)</span></span>)]\n\ndef <span class=\"function\"><span class=\"title\">compose_func</span><span class=\"params\">(fl, x, y)</span></span>:\n    <span class=\"keyword\">for</span> <span class=\"tag\">i</span> <span class=\"keyword\">in</span> fl:\n        @numba.<span class=\"function\"><span class=\"title\">njit</span><span class=\"params\">()</span></span>\n        def <span class=\"function\"><span class=\"title\">call</span><span class=\"params\">(x, y)</span></span>:\n            y[<span class=\"number\">0</span>] = <span class=\"function\"><span class=\"title\">i</span><span class=\"params\">(x)</span></span>\n        <span class=\"function\"><span class=\"title\">call</span><span class=\"params\">(x, y)</span></span>\n\n<span class=\"function\"><span class=\"title\">compose_func</span><span class=\"params\">(fl, x, y)</span></span>\n<span class=\"function\"><span class=\"title\">print</span><span class=\"params\">(y)</span></span></code></pre>",
  "id": "5ba0da4d3b7e6c2edd347fb5",
  "issues": [],
  "mentions": [
   {
    "screenName": "chengts95",
    "userId": "562a3a7216b6c7089cb80181",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 13,
  "sent": "2018-09-18T10:58:21.516Z",
  "text": "@chengts95 don't think that can be done right now, there's no polymorphic function type so each function dispatch would be a different type, which means the list type is not homogeneous (unsupported). If the list were changed to a tuple this might work so long as `i` was a compile time constant, which it's not. Essentially, you can't do what you want I'm afraid. However, you can do this:\n```\nimport numba\nimport numpy as np\n\nx=np.linspace(0, 1, 10)\ny=np.linspace(0, 0, 10)\nfl=[numba.njit(lambda x : 0 - x[i]) for i in range(len(x))]\n\ndef compose_func(fl, x, y):\n    for i in fl:\n        @numba.njit()\n        def call(x, y):\n            y[0] = i(x)\n        call(x, y)\n\ncompose_func(fl, x, y)\nprint(y)```",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "editedAt": "2018-09-18T14:43:42.669Z",
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/jllanfranchi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6414943?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6414943?v=4&s=60",
   "displayName": "J. L. Lanfranchi",
   "gv": "4",
   "id": "5aa7320ed73408ce4f9115a7",
   "url": "/jllanfranchi",
   "username": "jllanfranchi",
   "v": 30
  },
  "html": "<p><span data-link-type=\"mention\" data-screen-name=\"chengts95\" class=\"mention\">@chengts95</span> Note you can do something (really ugly and hacky) like the following if the time to dispatch functions successively from the interpreter as in the above is &quot;slow&quot; (I haven&#39;t timed this, but this is the only solution I could come up with to allow calling a number of functions without <em>completely</em> hard coding things):</p><pre><code class=\"python\"><span class=\"keyword\">import</span> numba\n<span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np\n\nx = np.linspace(<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">10</span>)\ny = np.linspace(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">10</span>)\n\nfl = tuple(numba.njit(<span class=\"keyword\">lambda</span> x: <span class=\"number\">0</span> - x[i]) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(x)))\n\ncode = <span class=\"string\">\"\"\"@numba.njit()\ndef compose_func(fl, x, y):\n    for i in range(len(fl)):\n        if i == 0:\n            y[0] = fl[0](x)\"\"\"</span>\n\n<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, len(fl) - <span class=\"number\">1</span>):\n    code += <span class=\"string\">\"\"\"\n        elif i == {i}:\n            y[0] = fl[{i}](x)\"\"\"</span>.format(i=i)\n\ncode += <span class=\"string\">\"\"\"\n        else:\n            y[0] = fl[{i}](x)\"\"\"</span>.format(i=len(fl) - <span class=\"number\">1</span>)\nexec(code)\nprint(code)</code></pre><p>which produces</p><pre><code>@numba.<span class=\"function\"><span class=\"title\">njit</span><span class=\"params\">()</span></span>\ndef <span class=\"function\"><span class=\"title\">compose_func</span><span class=\"params\">(fl, x, y)</span></span>:\n    <span class=\"keyword\">for</span> <span class=\"tag\">i</span> <span class=\"keyword\">in</span> <span class=\"function\"><span class=\"title\">range</span><span class=\"params\">(len(fl)</span></span>):\n        <span class=\"keyword\">if</span> <span class=\"tag\">i</span> == <span class=\"number\">0</span>:\n            y[<span class=\"number\">0</span>] = fl[<span class=\"number\">0</span>](x)\n        elif <span class=\"tag\">i</span> == <span class=\"number\">1</span>:\n            y[<span class=\"number\">0</span>] = fl[<span class=\"number\">1</span>](x)\n        elif <span class=\"tag\">i</span> == <span class=\"number\">2</span>:\n            y[<span class=\"number\">0</span>] = fl[<span class=\"number\">2</span>](x)\n        elif <span class=\"tag\">i</span> == <span class=\"number\">3</span>:\n            y[<span class=\"number\">0</span>] = fl[<span class=\"number\">3</span>](x)\n        elif <span class=\"tag\">i</span> == <span class=\"number\">4</span>:\n            y[<span class=\"number\">0</span>] = fl[<span class=\"number\">4</span>](x)\n        elif <span class=\"tag\">i</span> == <span class=\"number\">5</span>:\n            y[<span class=\"number\">0</span>] = fl[<span class=\"number\">5</span>](x)\n        elif <span class=\"tag\">i</span> == <span class=\"number\">6</span>:\n            y[<span class=\"number\">0</span>] = fl[<span class=\"number\">6</span>](x)\n        elif <span class=\"tag\">i</span> == <span class=\"number\">7</span>:\n            y[<span class=\"number\">0</span>] = fl[<span class=\"number\">7</span>](x)\n        elif <span class=\"tag\">i</span> == <span class=\"number\">8</span>:\n            y[<span class=\"number\">0</span>] = fl[<span class=\"number\">8</span>](x)\n        <span class=\"keyword\">else</span>:\n            y[<span class=\"number\">0</span>] = fl[<span class=\"number\">9</span>](x)</code></pre>",
  "id": "5ba10e7f1ee2ca650234b519",
  "issues": [],
  "mentions": [
   {
    "screenName": "chengts95",
    "userId": "562a3a7216b6c7089cb80181",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 13,
  "sent": "2018-09-18T14:41:03.958Z",
  "text": "@chengts95 Note you can do something (really ugly and hacky) like the following if the time to dispatch functions successively from the interpreter as in the above is \"slow\" (I haven't timed this, but this is the only solution I could come up with to allow calling a number of functions without _completely_ hard coding things):\n```python\nimport numba\nimport numpy as np\n\nx = np.linspace(0,1,10)\ny = np.linspace(0,0,10)\n\nfl = tuple(numba.njit(lambda x: 0 - x[i]) for i in range(len(x)))\n\ncode = \"\"\"@numba.njit()\ndef compose_func(fl, x, y):\n    for i in range(len(fl)):\n        if i == 0:\n            y[0] = fl[0](x)\"\"\"\n\nfor i in range(1, len(fl) - 1):\n    code += \"\"\"\n        elif i == {i}:\n            y[0] = fl[{i}](x)\"\"\".format(i=i)\n\ncode += \"\"\"\n        else:\n            y[0] = fl[{i}](x)\"\"\".format(i=len(fl) - 1)\nexec(code)\nprint(code)\n```\nwhich produces\n```\n@numba.njit()\ndef compose_func(fl, x, y):\n    for i in range(len(fl)):\n        if i == 0:\n            y[0] = fl[0](x)\n        elif i == 1:\n            y[0] = fl[1](x)\n        elif i == 2:\n            y[0] = fl[2](x)\n        elif i == 3:\n            y[0] = fl[3](x)\n        elif i == 4:\n            y[0] = fl[4](x)\n        elif i == 5:\n            y[0] = fl[5](x)\n        elif i == 6:\n            y[0] = fl[6](x)\n        elif i == 7:\n            y[0] = fl[7](x)\n        elif i == 8:\n            y[0] = fl[8](x)\n        else:\n            y[0] = fl[9](x)\n```",
  "unread": false,
  "urls": [],
  "v": 3
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "FWIW, as there&#39;s no templating, there&#39;s a fair bit of this sort of thing internally.",
  "id": "5ba110ceb4990c30eed326be",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-09-18T14:50:54.347Z",
  "text": "FWIW, as there's no templating, there's a fair bit of this sort of thing internally.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "hmm, why can&#39;t this be jitted?<pre><code class=\"python\"><span class=\"decorator\">@jit(nopython=True, nogil=True, cache=True, parallel=True)</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">a</span><span class=\"params\">(data_out, degrees_out, offsets_out)</span>:</span>\n    flags = numpy.full((degrees_out.size,), <span class=\"keyword\">False</span>)\n    q = numba.uint32[::<span class=\"number\">1</span>]\n    q.append(<span class=\"number\">1</span>)\n    flags[<span class=\"number\">1</span>] = <span class=\"keyword\">True</span>\n    <span class=\"keyword\">while</span> len(q) &gt; <span class=\"number\">0</span>:\n        q2 = numba.uint32[::<span class=\"number\">1</span>]\n        <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> numpy.nditer(q):\n            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(offsets_out[v] - degrees_out[v], offsets_out[v]):\n                <span class=\"keyword\">if</span> flags[i]:\n                    <span class=\"keyword\">continue</span>\n                flags[i] = <span class=\"keyword\">True</span>\n                q2.append(i)\n        q = q2</code></pre>",
  "id": "5ba11387fcba1254fad43a10",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-09-18T15:02:31.833Z",
  "text": "hmm, why can't this be jitted?\n```python\n@jit(nopython=True, nogil=True, cache=True, parallel=True)\ndef a(data_out, degrees_out, offsets_out):\n    flags = numpy.full((degrees_out.size,), False)\n    q = numba.uint32[::1]\n    q.append(1)\n    flags[1] = True\n    while len(q) > 0:\n        q2 = numba.uint32[::1]\n        for v in numpy.nditer(q):\n            for i in range(offsets_out[v] - degrees_out[v], offsets_out[v]):\n                if flags[i]:\n                    continue\n                flags[i] = True\n                q2.append(i)\n        q = q2\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"amosbird\" class=\"mention\">@amosbird</span> does it work without the jit decorator ?",
  "id": "5ba1147fe5c2cc56adaa1d24",
  "issues": [],
  "mentions": [
   {
    "screenName": "amosbird",
    "userId": "54e48ded15522ed4b3dc26b7",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 11,
  "sent": "2018-09-18T15:06:39.651Z",
  "text": "@amosbird does it work without the jit decorator ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "what are the input types, and what is the error?",
  "id": "5ba1148af7e1580625ec6938",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-09-18T15:06:50.636Z",
  "text": "what are the input types, and what is the error?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "I&#39;m also fairly sure that <code>numba.uint32[::1]</code> is invalid here as it  just creates an array type, not an instance.",
  "id": "5ba114d3d655361f761a1983",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-09-18T15:08:03.190Z",
  "text": "I'm also fairly sure that `numba.uint32[::1]` is invalid here as it  just creates an array type, not an instance.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "oh..",
  "id": "5ba11671fcba1254fad44ea0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-09-18T15:14:57.606Z",
  "text": "oh..",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "the inputs are three numpy array",
  "id": "5ba1167bfcba1254fad44efa",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-09-18T15:15:07.512Z",
  "text": "the inputs are three numpy array",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/max9111",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/8729846?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/8729846?v=4&s=60",
   "displayName": "max9111",
   "gv": "4",
   "id": "5a940f4cd73408ce4f8ee242",
   "url": "/max9111",
   "username": "max9111",
   "v": 2
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"sk1p\" class=\"mention\">@sk1p</span>  Maybe this helps? <a href=\"https://stackoverflow.com/questions/44735756/python-reading-12-bit-binary-files/45070947#45070947\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://stackoverflow.com/questions/44735756/python-reading-12-bit-binary-files/45070947#45070947</a> Without the parallelization SIMD-vectorization is possible and with allocation of the output array outside the function, this gives about 3,3 GB/s.",
  "id": "5ba1167ba56b215c9757d89d",
  "issues": [],
  "mentions": [
   {
    "screenName": "sk1p",
    "userId": "5a53bb66d73408ce4f86f68d",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 12,
  "sent": "2018-09-18T15:15:07.989Z",
  "text": "@sk1p  Maybe this helps? https://stackoverflow.com/questions/44735756/python-reading-12-bit-binary-files/45070947#45070947 Without the parallelization SIMD-vectorization is possible and with allocation of the output array outside the function, this gives about 3,3 GB/s.",
  "unread": false,
  "urls": [
   {
    "url": "https://stackoverflow.com/questions/44735756/python-reading-12-bit-binary-files/45070947#45070947"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span> so what&#39;s the correct way to create a typed numpy array ?",
  "id": "5ba116aff7e1580625ec79c6",
  "issues": [],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 11,
  "sent": "2018-09-18T15:15:59.390Z",
  "text": "@stuartarchibald so what's the correct way to create a typed numpy array ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "and make it jitable",
  "id": "5ba116b48909f71f75f11de9",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-09-18T15:16:04.428Z",
  "text": "and make it jitable",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "<pre><code>Invalid usage <span class=\"keyword\">of</span> getitem <span class=\"keyword\">with</span> parameters (<span class=\"keyword\">class</span>(uint32), slice&lt;a:b:c&gt;)\n * parameterized\n[<span class=\"number\">1</span>] During: typing <span class=\"keyword\">of</span> intrinsic-call at /home/amos/pymodules/t.py (<span class=\"number\">19</span>)\n[<span class=\"number\">2</span>] During: typing <span class=\"keyword\">of</span> <span class=\"keyword\">static</span>-get-item at /home/amos/pymodules/t.py (<span class=\"number\">19</span>)\n\nFile <span class=\"string\">\"../../../pymodules/t.py\"</span>, line <span class=\"number\">19</span>:\ndef a(data_out, degrees_out, offsets_out):\n    &lt;source elided&gt;\n    flags = numpy.full((degrees_out.size,), False)\n    q = numba.uint32[::<span class=\"number\">1</span>]()\n    ^\n\nThis is not usually a problem <span class=\"keyword\">with</span> Numba itself but instead often caused by\nthe <span class=\"keyword\">use</span> <span class=\"keyword\">of</span> unsupported features <span class=\"keyword\">or</span> an issue <span class=\"keyword\">in</span> resolving types.\n\nTo see Python/NumPy features supported by the latest release <span class=\"keyword\">of</span> Numba visit:\nhttp:<span class=\"comment\">//numba.pydata.org/numba-doc/dev/reference/pysupported.html</span>\n<span class=\"keyword\">and</span>\nhttp:<span class=\"comment\">//numba.pydata.org/numba-doc/dev/reference/numpysupported.html</span>\n\nFor more information about typing errors <span class=\"keyword\">and</span> how <span class=\"keyword\">to</span> debug them visit:\nhttp:<span class=\"comment\">//numba.pydata.org/numba-doc/latest/user/troubleshoot.html#my-code-doesn-t-compile</span>\n\nIf you think your code should work <span class=\"keyword\">with</span> Numba, please report the error message\n<span class=\"keyword\">and</span> traceback, along <span class=\"keyword\">with</span> a minimal reproducer at:\nhttps:<span class=\"comment\">//github.com/numba/numba/issues/new</span></code></pre>",
  "id": "5ba116e9fcba1254fad45267",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-09-18T15:16:57.663Z",
  "text": "```\nInvalid usage of getitem with parameters (class(uint32), slice<a:b:c>)\n * parameterized\n[1] During: typing of intrinsic-call at /home/amos/pymodules/t.py (19)\n[2] During: typing of static-get-item at /home/amos/pymodules/t.py (19)\n\nFile \"../../../pymodules/t.py\", line 19:\ndef a(data_out, degrees_out, offsets_out):\n    <source elided>\n    flags = numpy.full((degrees_out.size,), False)\n    q = numba.uint32[::1]()\n    ^\n\nThis is not usually a problem with Numba itself but instead often caused by\nthe use of unsupported features or an issue in resolving types.\n\nTo see Python/NumPy features supported by the latest release of Numba visit:\nhttp://numba.pydata.org/numba-doc/dev/reference/pysupported.html\nand\nhttp://numba.pydata.org/numba-doc/dev/reference/numpysupported.html\n\nFor more information about typing errors and how to debug them visit:\nhttp://numba.pydata.org/numba-doc/latest/user/troubleshoot.html#my-code-doesn-t-compile\n\nIf you think your code should work with Numba, please report the error message\nand traceback, along with a minimal reproducer at:\nhttps://github.com/numba/numba/issues/new\n\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "if that&#39;s a type, why can&#39;t I instantiate an instance",
  "id": "5ba116f91ee2ca650234ec09",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-09-18T15:17:13.260Z",
  "text": "if that's a type, why can't I instantiate an instance",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "you can just write normal NumPy, e.g. <code>np.zeros(10, dtype=np.uint32)</code> for a 10 element uint32 array",
  "id": "5ba1172e913ba7799b0b56ba",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-09-18T15:18:06.375Z",
  "text": "you can just write normal NumPy, e.g. `np.zeros(10, dtype=np.uint32)` for a 10 element uint32 array",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "hmm",
  "id": "5ba117b60cfe7f30f1b1d9e4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-09-18T15:20:22.729Z",
  "text": "hmm",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "<pre><code>Unknown attribute <span class=\"string\">'append'</span> of type Module(&lt;module <span class=\"string\">'numpy'</span> <span class=\"keyword\">from</span> <span class=\"string\">'/home/amos/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'</span>&gt;)\n\nFile <span class=\"string\">\"../../../pymodules/t.py\"</span>, line <span class=\"number\">28</span>:\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">a</span><span class=\"params\">(data_out, degrees_out, offsets_out)</span>:</span>\n    &lt;source elided&gt;\n                flags[i] = <span class=\"keyword\">True</span>\n                numpy.append(q2, i)\n                ^\n\n[<span class=\"number\">1</span>] During: typing of get attribute at /home/amos/pymodules/t.py (<span class=\"number\">28</span>)\n\nFile <span class=\"string\">\"../../../pymodules/t.py\"</span>, line <span class=\"number\">28</span>:\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">a</span><span class=\"params\">(data_out, degrees_out, offsets_out)</span>:</span>\n    &lt;source elided&gt;\n                flags[i] = <span class=\"keyword\">True</span>\n                numpy.append(q2, i)\n                ^\n\nThis <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> usually a problem <span class=\"keyword\">with</span> Numba itself but instead often caused by\nthe use of unsupported features <span class=\"keyword\">or</span> an issue <span class=\"keyword\">in</span> resolving types.\n\nTo see Python/NumPy features supported by the latest release of Numba visit:\nhttp://numba.pydata.org/numba-doc/dev/reference/pysupported.html\n<span class=\"keyword\">and</span>\nhttp://numba.pydata.org/numba-doc/dev/reference/numpysupported.html\n\nFor more information about typing errors <span class=\"keyword\">and</span> how to debug them visit:\nhttp://numba.pydata.org/numba-doc/latest/user/troubleshoot.html<span class=\"comment\">#my-code-doesn-t-compile</span>\n\nIf you think your code should work <span class=\"keyword\">with</span> Numba, please report the error message\n<span class=\"keyword\">and</span> traceback, along <span class=\"keyword\">with</span> a minimal reproducer at:\nhttps://github.com/numba/numba/issues/new</code></pre>",
  "id": "5ba117bd0cfe7f30f1b1da40",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-09-18T15:20:29.596Z",
  "text": "```\nUnknown attribute 'append' of type Module(<module 'numpy' from '/home/amos/miniconda3/lib/python3.7/site-packages/numpy/__init__.py'>)\n\nFile \"../../../pymodules/t.py\", line 28:\ndef a(data_out, degrees_out, offsets_out):\n    <source elided>\n                flags[i] = True\n                numpy.append(q2, i)\n                ^\n\n[1] During: typing of get attribute at /home/amos/pymodules/t.py (28)\n\nFile \"../../../pymodules/t.py\", line 28:\ndef a(data_out, degrees_out, offsets_out):\n    <source elided>\n                flags[i] = True\n                numpy.append(q2, i)\n                ^\n\nThis is not usually a problem with Numba itself but instead often caused by\nthe use of unsupported features or an issue in resolving types.\n\nTo see Python/NumPy features supported by the latest release of Numba visit:\nhttp://numba.pydata.org/numba-doc/dev/reference/pysupported.html\nand\nhttp://numba.pydata.org/numba-doc/dev/reference/numpysupported.html\n\nFor more information about typing errors and how to debug them visit:\nhttp://numba.pydata.org/numba-doc/latest/user/troubleshoot.html#my-code-doesn-t-compile\n\nIf you think your code should work with Numba, please report the error message\nand traceback, along with a minimal reproducer at:\nhttps://github.com/numba/numba/issues/new\n\n\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "Perhaps write your function using NumPy first and make sure it produces the right answer, then apply the <code>@jit</code> decorator and see what happens",
  "id": "5ba117c28909f71f75f124da",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-09-18T15:20:34.910Z",
  "text": "Perhaps write your function using NumPy first and make sure it produces the right answer, then apply the `@jit` decorator and see what happens",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "ok..",
  "id": "5ba117cbfcba1254fad45770",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-09-18T15:20:43.311Z",
  "text": "ok..",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "btw, what&#39;s the difference between njit and jit?",
  "id": "5ba117eb0cfe7f30f1b1db08",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-09-18T15:21:15.420Z",
  "text": "btw, what's the difference between njit and jit?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "njit is just an alias for <code>jit(nopython=True)</code>",
  "id": "5ba117fab4990c30eed3566e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-09-18T15:21:30.903Z",
  "text": "njit is just an alias for `jit(nopython=True)`",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "if you&#39;ve got 5 minutes this is a good place to start <a href=\"http://numba.pydata.org/numba-doc/dev/user/5minguide.html\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://numba.pydata.org/numba-doc/dev/user/5minguide.html</a>",
  "id": "5ba1180ef4bd1056ac7f8cb8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-09-18T15:21:50.072Z",
  "text": "if you've got 5 minutes this is a good place to start http://numba.pydata.org/numba-doc/dev/user/5minguide.html",
  "unread": false,
  "urls": [
   {
    "url": "http://numba.pydata.org/numba-doc/dev/user/5minguide.html"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "I did read docs for some hours...",
  "id": "5ba11855b4990c30eed3588d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-09-18T15:23:01.421Z",
  "text": "I did read docs for some hours...",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "is it the right way to create empty typed array?         q2 = numpy.ones(0, dtype=numpy.uint32)",
  "id": "5ba118c6fcba1254fad45d72",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-09-18T15:24:54.264Z",
  "text": "is it the right way to create empty typed array?         q2 = numpy.ones(0, dtype=numpy.uint32)\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "By empty do you mean backed by uninitialised memory, if so you can use <code>numpy.empty</code> and then the <code>dtype</code> kwarg as noted.",
  "id": "5ba118f1f4bd1056ac7f9205",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-09-18T15:25:37.671Z",
  "text": "By empty do you mean backed by uninitialised memory, if so you can use `numpy.empty` and then the `dtype` kwarg as noted.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "weird, nonjit version works fine, which jit version fails as numpy.append not defined",
  "id": "5ba11907913ba7799b0b646a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-09-18T15:25:59.217Z",
  "text": "weird, nonjit version works fine, which jit version fails as numpy.append not defined\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "that&#39;ll result in faster code as its just a malloc opposed to a calloc or a malloc+memset",
  "id": "5ba1190be6046343f37e414a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-09-18T15:26:03.480Z",
  "text": "that'll result in faster code as its just a malloc opposed to a calloc or a malloc+memset",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "right, so you are aware the Numba supports a subset of Python and NumPy ?",
  "id": "5ba1191da56b215c9757ea52",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-09-18T15:26:21.302Z",
  "text": "right, so you are aware the Numba supports a subset of Python and NumPy ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "ok..",
  "id": "5ba11926f7e1580625ec8b9c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-09-18T15:26:30.067Z",
  "text": "ok..",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<a href=\"http://numba.pydata.org/numba-doc/dev/reference/numpysupported.html\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://numba.pydata.org/numba-doc/dev/reference/numpysupported.html</a>",
  "id": "5ba1192cb9531f2dfa85b70c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-09-18T15:26:36.817Z",
  "text": "http://numba.pydata.org/numba-doc/dev/reference/numpysupported.html",
  "unread": false,
  "urls": [
   {
    "url": "http://numba.pydata.org/numba-doc/dev/reference/numpysupported.html"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<a href=\"http://numba.pydata.org/numba-doc/dev/reference/pysupported.html\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://numba.pydata.org/numba-doc/dev/reference/pysupported.html</a>",
  "id": "5ba1194be6046343f37e42d1",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-09-18T15:27:07.040Z",
  "text": "http://numba.pydata.org/numba-doc/dev/reference/pysupported.html",
  "unread": false,
  "urls": [
   {
    "url": "http://numba.pydata.org/numba-doc/dev/reference/pysupported.html"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "So there is no <code>push_back</code> like ability in jitted code?",
  "id": "5ba1196da56b215c9757eae9",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-09-18T15:27:41.945Z",
  "text": "So there is no `push_back` like ability in jitted code?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "well, you could use a list",
  "id": "5ba119cba56b215c9757edc6",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-09-18T15:29:15.783Z",
  "text": "well, you could use a list",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<pre><code>from numba import njit\n\n@njit\ndef <span class=\"function\"><span class=\"title\">foo</span><span class=\"params\">(l, x)</span></span>:\n    <span class=\"keyword\">for</span> <span class=\"tag\">i</span> <span class=\"keyword\">in</span> <span class=\"function\"><span class=\"title\">range</span><span class=\"params\">(<span class=\"number\">10</span>)</span></span>:\n        l.<span class=\"function\"><span class=\"title\">append</span><span class=\"params\">(i)</span></span>\n    l.<span class=\"function\"><span class=\"title\">append</span><span class=\"params\">(x)</span></span>\n\nl = [<span class=\"number\">100</span>, <span class=\"number\">200</span>]\n<span class=\"function\"><span class=\"title\">foo</span><span class=\"params\">(l, <span class=\"number\">55</span>)</span></span>\n<span class=\"function\"><span class=\"title\">print</span><span class=\"params\">(l)</span></span></code></pre>",
  "id": "5ba119cff4bd1056ac7f9813",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-09-18T15:29:19.812Z",
  "text": "```\nfrom numba import njit\n\n@njit\ndef foo(l, x):\n    for i in range(10):\n        l.append(i)\n    l.append(x)\n\nl = [100, 200]\nfoo(l, 55)\nprint(l)\n```\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "The use of <code>append</code> for NumPy arrays isn&#39;t typical behaviour because the performance isn&#39;t great, its like doing a realloc",
  "id": "5ba11a1f7dca3065031c4e9c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-09-18T15:30:39.203Z",
  "text": "The use of `append` for NumPy arrays isn't typical behaviour because the performance isn't great, its like doing a realloc",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "<pre><code>numba.errors.InternalError: unsupported array index type float64 <span class=\"keyword\">in</span> [float64]\n[<span class=\"number\">1</span>] During: typing of intrinsic-call at /home/amos/pymodules/t.py (<span class=\"number\">24</span>)\n--%&lt;----------------------------------------------------------------------------\n\n\nFile <span class=\"string\">\"../../../pymodules/t.py\"</span>, line <span class=\"number\">24</span>:\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">a</span><span class=\"params\">(data_out, degrees_out, offsets_out)</span>:</span>\n    &lt;source elided&gt;\n        <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> q:\n            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(offsets_out[v] - degrees_out[v], offsets_out[v]):\n            ^\n\nThis <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> usually a problem <span class=\"keyword\">with</span> Numba itself but instead often caused by\nthe use of unsupported features <span class=\"keyword\">or</span> an issue <span class=\"keyword\">in</span> resolving types.</code></pre>",
  "id": "5ba11a76b9531f2dfa85c2a6",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-09-18T15:32:06.496Z",
  "text": "```\nnumba.errors.InternalError: unsupported array index type float64 in [float64]\n[1] During: typing of intrinsic-call at /home/amos/pymodules/t.py (24)\n--%<----------------------------------------------------------------------------\n\n\nFile \"../../../pymodules/t.py\", line 24:\ndef a(data_out, degrees_out, offsets_out):\n    <source elided>\n        for v in q:\n            for i in range(offsets_out[v] - degrees_out[v], offsets_out[v]):\n            ^\n\nThis is not usually a problem with Numba itself but instead often caused by\nthe use of unsupported features or an issue in resolving types.\n\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "can I specify the type for list?",
  "id": "5ba11a7de5c2cc56adaa4975",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-09-18T15:32:13.931Z",
  "text": "can I specify the type for list?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "it somehow uses double",
  "id": "5ba11a823b7e6c2edd36202a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-09-18T15:32:18.236Z",
  "text": "it somehow uses double",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "its because you are using <code>q</code> as a float64",
  "id": "5ba11aab8909f71f75f1366f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-09-18T15:32:59.275Z",
  "text": "its because you are using `q` as a float64",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "which means <code>v</code> is a float64",
  "id": "5ba11ab4913ba7799b0b6eef",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-09-18T15:33:08.181Z",
  "text": "which means `v` is a float64",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "<pre><code class=\"python\"><span class=\"decorator\">@njit(nogil=True, cache=True, parallel=True)</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">a</span><span class=\"params\">(data_out, degrees_out, offsets_out)</span>:</span>\n    flags = numpy.full((degrees_out.size,), <span class=\"keyword\">False</span>)\n    q = [<span class=\"number\">1</span>]\n    flags[<span class=\"number\">1</span>] = <span class=\"keyword\">True</span>\n    <span class=\"keyword\">while</span> len(q) &gt; <span class=\"number\">0</span>:\n        q2 = []\n        <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> q:\n            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(offsets_out[v] - degrees_out[v], offsets_out[v]):\n                <span class=\"keyword\">if</span> flags[i]:\n                    <span class=\"keyword\">continue</span>\n                flags[i] = <span class=\"keyword\">True</span>\n                q2.append(i)\n        q = q2</code></pre>",
  "id": "5ba11abf3b7e6c2edd36216f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-09-18T15:33:19.830Z",
  "text": "```python\n@njit(nogil=True, cache=True, parallel=True)\ndef a(data_out, degrees_out, offsets_out):\n    flags = numpy.full((degrees_out.size,), False)\n    q = [1]\n    flags[1] = True\n    while len(q) > 0:\n        q2 = []\n        for v in q:\n            for i in range(offsets_out[v] - degrees_out[v], offsets_out[v]):\n                if flags[i]:\n                    continue\n                flags[i] = True\n                q2.append(i)\n        q = q2\n\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "how is that happening",
  "id": "5ba11ac38909f71f75f13741",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-09-18T15:33:23.024Z",
  "text": "how is that happening",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "what are you inputs",
  "id": "5ba11bc1b9531f2dfa85cc30",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-09-18T15:37:37.926Z",
  "text": "what are you inputs",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "numba determines the types of everything based on the input types ",
  "id": "5ba11bd0a56b215c9757f98f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-09-18T15:37:52.482Z",
  "text": "numba determines the types of everything based on the input types ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "(and a lot of rules!)",
  "id": "5ba11bdce5c2cc56adaa52d6",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-09-18T15:38:04.250Z",
  "text": "(and a lot of rules!)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "  uint32t",
  "id": "5ba11bdeb4990c30eed36fb3",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-09-18T15:38:06.120Z",
  "text": "  uint32t",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "right, uint32_t arrays? lists? tuples of ?",
  "id": "5ba11bebbe4f300626b15ed1",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-09-18T15:38:19.972Z",
  "text": "right, uint32_t arrays? lists? tuples of ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "I mean, why does q become a float64 list",
  "id": "5ba11becfcba1254fad472a5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-09-18T15:38:20.663Z",
  "text": "I mean, why does q become a float64 list",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "it doesn&#39;t rely on the argument at all",
  "id": "5ba11bf9a56b215c9757fa94",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-09-18T15:38:33.891Z",
  "text": "it doesn't rely on the argument at all",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "it&#39;s numpy array uint32t",
  "id": "5ba11c168909f71f75f13e8a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-09-18T15:39:02.239Z",
  "text": "it's numpy array uint32t",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "hmmm, might be a typing rule gone awry, you could explicitly make it uint32 like <code>q=[np.uint32(1)]</code>",
  "id": "5ba11d757dca3065031c65ca",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-09-18T15:44:53.088Z",
  "text": "hmmm, might be a typing rule gone awry, you could explicitly make it uint32 like `q=[np.uint32(1)]`",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "wtf!...<pre><code>\n\n<span class=\"fsharp\">File <span class=\"string\">\"../../../pymodules/t.py\"</span>, line <span class=\"number\">19</span>:\ndef a(data_out, degrees_out, offsets_out):\n    &lt;source elided&gt;\n    flags = numpy.full((degrees_out.size,), False)\n    q = [numpy.uint32(<span class=\"number\">1</span>)]\n    ^\n[<span class=\"number\">1</span>] During: lowering <span class=\"string\">\"q = $0.12\"</span> at /home/amos/pymodules/t.py (<span class=\"number\">19</span>)\n-------------------------------------------------------------------------------\nThis should not have happened, a problem has occurred <span class=\"keyword\">in</span> Numba's internals.\n\nPlease report the error message <span class=\"keyword\">and</span> traceback, along <span class=\"keyword\">with</span> a minimal reproducer\nat: https:<span class=\"comment\">//github.com/numba/numba/issues/new</span>\n\nIf more help is needed please feel free <span class=\"keyword\">to</span> speak <span class=\"keyword\">to</span> the Numba core developers\ndirectly at: https:<span class=\"comment\">//gitter.im/numba/numba</span>\n\nThanks <span class=\"keyword\">in</span> advance <span class=\"keyword\">for</span> your help <span class=\"keyword\">in</span> improving Numba!</span></code></pre>",
  "id": "5ba11dc81ee2ca6502351e31",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-09-18T15:46:16.840Z",
  "text": "wtf!...\n```\n\n\nFile \"../../../pymodules/t.py\", line 19:\ndef a(data_out, degrees_out, offsets_out):\n    <source elided>\n    flags = numpy.full((degrees_out.size,), False)\n    q = [numpy.uint32(1)]\n    ^\n[1] During: lowering \"q = $0.12\" at /home/amos/pymodules/t.py (19)\n-------------------------------------------------------------------------------\nThis should not have happened, a problem has occurred in Numba's internals.\n\nPlease report the error message and traceback, along with a minimal reproducer\nat: https://github.com/numba/numba/issues/new\n\nIf more help is needed please feel free to speak to the Numba core developers\ndirectly at: https://gitter.im/numba/numba\n\nThanks in advance for your help in improving Numba!\n\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "where does that 0.12 come from..",
  "id": "5ba11dd0b9531f2dfa85d852",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-09-18T15:46:24.514Z",
  "text": "where does that 0.12 come from..",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "LLVM IR",
  "id": "5ba11dd8e5c2cc56adaa5fa8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-09-18T15:46:32.768Z",
  "text": "LLVM IR",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "oh, ok",
  "id": "5ba11de3e6046343f37e642c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-09-18T15:46:43.191Z",
  "text": "oh, ok",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "i thought some float number... ",
  "id": "5ba11de9f7e1580625ecad19",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-09-18T15:46:49.467Z",
  "text": "i thought some float number... ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "actually it&#39;s still numba IR there, but yeah, its numba internals",
  "id": "5ba11e1c7dca3065031c6b37",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-09-18T15:47:40.305Z",
  "text": "actually it's still numba IR there, but yeah, its numba internals",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "so what can I do now",
  "id": "5ba11e27a56b215c97580b08",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-09-18T15:47:51.123Z",
  "text": "so what can I do now",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "hmm",
  "id": "5ba11e29d655361f761a536f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-09-18T15:47:53.052Z",
  "text": "hmm",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "do <code>q2.append(np.uint32(i))</code>",
  "id": "5ba11e78f7e1580625ecb09a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-09-18T15:49:12.654Z",
  "text": "do `q2.append(np.uint32(i))`",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "ah, it jits",
  "id": "5ba11ec2a56b215c97580f26",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-09-18T15:50:26.097Z",
  "text": "ah, it jits",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "that was a type unification problem",
  "id": "5ba11ed6913ba7799b0b89c7",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-09-18T15:50:46.747Z",
  "text": "that was a type unification problem",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "Thanks!",
  "id": "5ba11f66f7e1580625ecb55c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-09-18T15:53:10.362Z",
  "text": "Thanks!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "btw, I&#39;m using pybind11 with numba. When invoking nogil functions from c++ land, does it guarantee no locking?",
  "id": "5ba11f8dfcba1254fad48a96",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-09-18T15:53:49.886Z",
  "text": "btw, I'm using pybind11 with numba. When invoking nogil functions from c++ land, does it guarantee no locking?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "it&#39;s very important as the c++ server is multi-threaded....  ",
  "id": "5ba11fb17dca3065031c73eb",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-09-18T15:54:25.785Z",
  "text": "it's very important as the c++ server is multi-threaded....  ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/chengts95",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6616679?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6616679?v=4&s=60",
   "displayName": "Tianshi Cheng",
   "gv": "4",
   "id": "562a3a7216b6c7089cb80181",
   "url": "/chengts95",
   "username": "chengts95",
   "v": 6
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span>  <span data-link-type=\"mention\" data-screen-name=\"jllanfranchi\" class=\"mention\">@jllanfranchi</span> So there is no function pointer way for python, thank you very much!",
  "id": "5ba11fdd3b7e6c2edd36468d",
  "issues": [],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   },
   {
    "screenName": "jllanfranchi",
    "userId": "5aa7320ed73408ce4f9115a7",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 18,
  "sent": "2018-09-18T15:55:09.171Z",
  "text": "@stuartarchibald  @jllanfranchi So there is no function pointer way for python, thank you very much!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "<pre><code> \u276f ls ~/pymodules/__pycache__/\nt<span class=\"class\">.a-16</span><span class=\"class\">.py37m</span>.<span class=\"number\">1</span><span class=\"class\">.nbc</span>  t<span class=\"class\">.a-16</span><span class=\"class\">.py37m</span><span class=\"class\">.nbi</span>  t<span class=\"class\">.cpython-37</span><span class=\"class\">.pyc</span></code></pre>are these jit cache files?",
  "id": "5ba120c03b7e6c2edd364d54",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-09-18T15:58:56.945Z",
  "text": "```\n \u276f ls ~/pymodules/__pycache__/\nt.a-16.py37m.1.nbc  t.a-16.py37m.nbi  t.cpython-37.pyc\n```\nare these jit cache files?\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"amosbird\" class=\"mention\">@amosbird</span> <a href=\"http://numba.pydata.org/numba-doc/dev/user/jit.html?highlight=nogil#nogil\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://numba.pydata.org/numba-doc/dev/user/jit.html?highlight=nogil#nogil</a>",
  "id": "5ba127ebb4990c30eed3c0ec",
  "issues": [],
  "mentions": [
   {
    "screenName": "amosbird",
    "userId": "54e48ded15522ed4b3dc26b7",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 18,
  "sent": "2018-09-18T16:29:31.658Z",
  "text": "@amosbird http://numba.pydata.org/numba-doc/dev/user/jit.html?highlight=nogil#nogil",
  "unread": false,
  "urls": [
   {
    "url": "http://numba.pydata.org/numba-doc/dev/user/jit.html?highlight=nogil#nogil"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "and yes, those are cache files",
  "id": "5ba1285ab4990c30eed3c4f5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-09-18T16:31:22.969Z",
  "text": "and yes, those are cache files",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "cool",
  "id": "5ba1328de5c2cc56adaaf04e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-09-18T17:14:53.781Z",
  "text": "cool",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "can I have a parallel loop with thread_id? That helps concurrently collecting results into different arrays ",
  "id": "5ba132bce5c2cc56adaaf1df",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-09-18T17:15:40.522Z",
  "text": "can I have a parallel loop with thread_id? That helps concurrently collecting results into different arrays ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "And is there any plan for string operation jit?",
  "id": "5ba13ad1e6046343f37f303b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-09-18T17:50:09.257Z",
  "text": "And is there any plan for string operation jit?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "string support is actually planned for the next development cycle, with 0.41.0 release candidate in mid November",
  "id": "5ba13ba2be4f300626b23b21",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-09-18T17:53:38.761Z",
  "text": "string support is actually planned for the next development cycle, with 0.41.0 release candidate in mid November",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "(creating a meta-issue to discuss the string stuff... will post here shortly)",
  "id": "5ba13d3eb4990c30eed4495d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-09-18T18:00:30.001Z",
  "text": "(creating a meta-issue to discuss the string stuff... will post here shortly)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "great!",
  "id": "5ba13d5bb9531f2dfa86a82b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-09-18T18:00:59.910Z",
  "text": "great!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "regarding thread ids, this is an open request, but we haven&#39;t solved it yet.  You&#39;ll want to subscribe to this issue to know when we do add that ability: <a target=\"_blank\" data-link-type=\"issue\" data-issue=\"3130\" href=\"https://github.com/numba/numba/issues/3130\" data-provider=\"github\" data-issue-repo=\"numba/numba\" class=\"issue\">numba/numba#3130</a>",
  "id": "5ba13f5d3b7e6c2edd37237c",
  "issues": [
   {
    "number": "3130",
    "repo": "numba/numba"
   }
  ],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-09-18T18:09:33.725Z",
  "text": "regarding thread ids, this is an open request, but we haven't solved it yet.  You'll want to subscribe to this issue to know when we do add that ability: https://github.com/numba/numba/issues/3130",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "nice",
  "id": "5ba13fd4b4990c30eed458d5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-09-18T18:11:32.686Z",
  "text": "nice",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-09-18T18:16:16.827Z",
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "Is there a way to pass an user defined type into <code>@njit</code> annotated function ? that type is defined in c++ using pybind11 and only contains a bunch of one dimensional numpy arrays",
  "id": "5ba140d31ee2ca6502361774",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-09-18T18:15:47.260Z",
  "text": "Is there a way to pass an user defined type into `@njit` annotated function ? that type is defined in c++ using pybind11 and only contains a bunch of one dimensional numpy arrays",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "not an easy way.  You would have to define your own boxing/unboxing code for that type.  If you can hack around by unpacking the object into a namedtuple, that will work better with Numba for now.",
  "id": "5ba14f4ef4bd1056ac810085",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-09-18T19:17:34.224Z",
  "text": "not an easy way.  You would have to define your own boxing/unboxing code for that type.  If you can hack around by unpacking the object into a namedtuple, that will work better with Numba for now.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "btw, string issue is here: <a target=\"_blank\" data-link-type=\"issue\" data-issue=\"3323\" href=\"https://github.com/numba/numba/issues/3323\" data-provider=\"github\" data-issue-repo=\"numba/numba\" class=\"issue\">numba/numba#3323</a>  Feel free to add comments for what you would need from string support to be useful for your use case.",
  "id": "5ba14f6efcba1254fad5c917",
  "issues": [
   {
    "number": "3323",
    "repo": "numba/numba"
   }
  ],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-09-18T19:18:06.436Z",
  "text": "btw, string issue is here: https://github.com/numba/numba/issues/3323  Feel free to add comments for what you would need from string support to be useful for your use case.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "<blockquote>\nIf you can hack around by unpacking the object into a namedtuple</blockquote>\n",
  "id": "5ba151e1d655361f761bab85",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-09-18T19:28:33.029Z",
  "text": "> If you can hack around by unpacking the object into a namedtuple",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "is there any example for that?",
  "id": "5ba151e5f4bd1056ac811432",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-09-18T19:28:37.358Z",
  "text": "is there any example for that?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "I can&#39;t think of any good examples for you case.  Most people use namedtuples directly, but if you have a list of attributes on the pybind11 class, you could image creating a namedtuple with that attribute list (outside of Numba) and then instantiating the namedtuple with values from the pybind11 class.",
  "id": "5ba1549ea56b215c9759800d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-09-18T19:40:14.679Z",
  "text": "I can't think of any good examples for you case.  Most people use namedtuples directly, but if you have a list of attributes on the pybind11 class, you could image creating a namedtuple with that attribute list (outside of Numba) and then instantiating the namedtuple with values from the pybind11 class.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "Do namedtuples get correctly jitted?",
  "id": "5ba156f2e5c2cc56adabe11f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-09-18T19:50:10.200Z",
  "text": "Do namedtuples get correctly jitted?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "In fact, can I explicitly define the namedtuple type signature in jit annotation ?",
  "id": "5ba15724e5c2cc56adabe2c7",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-09-18T19:51:00.345Z",
  "text": "In fact, can I explicitly define the namedtuple type signature in jit annotation ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "namedtuples work in nopython mode just like regular tuples (plus you can access by attribute name), but writing the type signature is hard.  Better to let Numba autodetect it if possible.",
  "id": "5ba158355df5194734db7e03",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-09-18T19:55:33.336Z",
  "text": "namedtuples work in nopython mode just like regular tuples (plus you can access by attribute name), but writing the type signature is hard.  Better to let Numba autodetect it if possible.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "if you have to get the Numba type for it, the <code>numba.special.typeof()</code> function can take a Python value and return the Numba type.",
  "id": "5ba158cfe5c2cc56adabee87",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-09-18T19:58:07.045Z",
  "text": "if you have to get the Numba type for it, the `numba.special.typeof()` function can take a Python value and return the Numba type.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "thanks!",
  "id": "5ba15a7e913ba7799b0d10a3",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-09-18T20:05:18.718Z",
  "text": "thanks!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"seibert\" class=\"mention\">@seibert</span> hmm, the namedtuple trick doesn&#39;t cacheable",
  "id": "5ba1b53c7dca306503200b09",
  "issues": [],
  "mentions": [
   {
    "screenName": "seibert",
    "userId": "55b68af40fc9f982beab2a3c",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 17,
  "sent": "2018-09-19T02:32:28.378Z",
  "text": "@seibert hmm, the namedtuple trick doesn't cacheable",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "I got <code>PicklingError: Can&#39;t pickle &lt;class &#39;collections.Source&#39;&gt;: attribute lookup Source on collections failed</code>",
  "id": "5ba1b548e6046343f3820481",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-09-19T02:32:40.482Z",
  "text": "I got `PicklingError: Can't pickle <class 'collections.Source'>: attribute lookup Source on collections failed`",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "Is it possible that numba can inline a c++ function pointer when jitting?",
  "id": "5ba203608909f71f75f6cd92",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-09-19T08:05:52.117Z",
  "text": "Is it possible that numba can inline a c++ function pointer when jitting?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "C function pointers yes, calling C++ code in general is not possible (but you can create C wrappers around C++ code)",
  "id": "5ba248971ee2ca65023c2f05",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-09-19T13:01:11.081Z",
  "text": "C function pointers yes, calling C++ code in general is not possible (but you can create C wrappers around C++ code)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "if you wrap the C function with ctypes or cffi and call it inside your Python function, when Numba compiles it, it will remove all the ctypes/cffi wrapping and call the function directly",
  "id": "5ba248ed7dca3065032385a9",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-09-19T13:02:37.596Z",
  "text": "if you wrap the C function with ctypes or cffi and call it inside your Python function, when Numba compiles it, it will remove all the ctypes/cffi wrapping and call the function directly",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "with some limitations: <a href=\"http://numba.pydata.org/numba-doc/latest/reference/pysupported.html?highlight=cffi#ctypes\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://numba.pydata.org/numba-doc/latest/reference/pysupported.html?highlight=cffi#ctypes</a> ",
  "id": "5ba248f7a56b215c975f2e4d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-09-19T13:02:47.712Z",
  "text": "with some limitations: http://numba.pydata.org/numba-doc/latest/reference/pysupported.html?highlight=cffi#ctypes ",
  "unread": false,
  "urls": [
   {
    "url": "http://numba.pydata.org/numba-doc/latest/reference/pysupported.html?highlight=cffi#ctypes"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "hmm yeah, I wonder if that applies to std::function",
  "id": "5ba248fd1ee2ca65023c3115",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-09-19T13:02:53.767Z",
  "text": "hmm yeah, I wonder if that applies to std::function",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "if it could inline that, it makes writing code much easier",
  "id": "5ba2491d913ba7799b1285bb",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-09-19T13:03:25.654Z",
  "text": "if it could inline that, it makes writing code much easier",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "no, that won&#39;t work directly since that is a template.",
  "id": "5ba24932d655361f7621930f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-09-19T13:03:46.347Z",
  "text": "no, that won't work directly since that is a template.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "if you instantiate the template and wrap it in a regular C function, it should wor",
  "id": "5ba2493de5c2cc56adb191ef",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-09-19T13:03:57.495Z",
  "text": "if you instantiate the template and wrap it in a regular C function, it should wor",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "yeah, I think so too..",
  "id": "5ba2493db9531f2dfa8d098e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-09-19T13:03:57.548Z",
  "text": "yeah, I think so too..",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "<blockquote>\n<pre><code>    wrap it <span class=\"type\">in</span> a regular C <span class=\"function\"><span class=\"keyword\">function</span></span>   </code></pre></blockquote>\n",
  "id": "5ba24955b4990c30eeda704c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-09-19T13:04:21.184Z",
  "text": ">         wrap it in a regular C function   \n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "At some point, it would be great for Numba to interoperate with cling/cppyy, but that is a ways off",
  "id": "5ba24960be4f300626b87faf",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-09-19T13:04:32.489Z",
  "text": "At some point, it would be great for Numba to interoperate with cling/cppyy, but that is a ways off",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "you mean inside the C wrap invoke the function pointer?",
  "id": "5ba24967fcba1254fadbb299",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-09-19T13:04:39.886Z",
  "text": "you mean inside the C wrap invoke the function pointer?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "yes, exactly",
  "id": "5ba24975be4f300626b87ffa",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-09-19T13:04:53.265Z",
  "text": "yes, exactly",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "that will inline both ?",
  "id": "5ba2497e7dca30650323897e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-09-19T13:05:02.524Z",
  "text": "that will inline both ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "that surprises me",
  "id": "5ba249895df5194734e1261a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-09-19T13:05:13.223Z",
  "text": "that surprises me",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "no inlining, but Numba can call the function without Python overhead",
  "id": "5ba2498fe5c2cc56adb1955b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-09-19T13:05:19.701Z",
  "text": "no inlining, but Numba can call the function without Python overhead",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "inlining code from an externally compiled library would require link-time optimization, which Numba doesn&#39;t do",
  "id": "5ba249ae5df5194734e12652",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-09-19T13:05:50.476Z",
  "text": "inlining code from an externally compiled library would require link-time optimization, which Numba doesn't do",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "ok...",
  "id": "5ba249c7f7e1580625f3caf0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-09-19T13:06:15.020Z",
  "text": "ok...",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "Numba can only inline code from other Numba-compiled functions",
  "id": "5ba249de8909f71f75f8a7ed",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-09-19T13:06:38.547Z",
  "text": "Numba can only inline code from other Numba-compiled functions",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "btw, I just found that multiple for loops with the same var is problematic ",
  "id": "5ba24a28f7e1580625f3cd02",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-09-19T13:07:52.736Z",
  "text": "btw, I just found that multiple for loops with the same var is problematic ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "?",
  "id": "5ba24a30b9531f2dfa8d108b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-09-19T13:08:00.647Z",
  "text": "?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "type confliction happens",
  "id": "5ba24a32be4f300626b8843f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-09-19T13:08:02.596Z",
  "text": "type confliction happens",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "ah, if you have a small example, can you open an issue?",
  "id": "5ba24a4af7e1580625f3cd47",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-09-19T13:08:26.361Z",
  "text": "ah, if you have a small example, can you open an issue?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "<pre><code>    <span class=\"keyword\">for</span> <span class=\"tag\">a</span> <span class=\"keyword\">in</span> numpy.<span class=\"function\"><span class=\"title\">nditer</span><span class=\"params\">(graph.data_out)</span></span>:\n        <span class=\"function\"><span class=\"title\">print</span><span class=\"params\">(a)</span></span>\n    <span class=\"keyword\">for</span> <span class=\"tag\">a</span> <span class=\"keyword\">in</span> numpy.<span class=\"function\"><span class=\"title\">nditer</span><span class=\"params\">(graph.degrees_out)</span></span>:\n        <span class=\"function\"><span class=\"title\">print</span><span class=\"params\">(a)</span></span></code></pre>",
  "id": "5ba24a541ee2ca65023c390b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-09-19T13:08:36.416Z",
  "text": "```\n    for a in numpy.nditer(graph.data_out):\n        print(a)\n    for a in numpy.nditer(graph.degrees_out):\n        print(a)\n\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "however I&#39;m on 0.39",
  "id": "5ba24a68f4bd1056ac86cee5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-09-19T13:08:56.282Z",
  "text": "however I'm on 0.39",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "Siu is going to be working on cleaning up some type inference problems, and that sounds like one to throw on his list.",
  "id": "5ba24a6c1ee2ca65023c398c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-09-19T13:09:00.393Z",
  "text": "Siu is going to be working on cleaning up some type inference problems, and that sounds like one to throw on his list.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "I&#39;m not sure if that&#39;s valid",
  "id": "5ba24a6d0cfe7f30f1b9159f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-09-19T13:09:01.912Z",
  "text": "I'm not sure if that's valid",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "It is a bug, because the type inference ideally would realize the second <code>a</code> isn&#39;t really the same variable as the first <code>a</code>, and so not require them to have the same type.",
  "id": "5ba24ab2e5c2cc56adb19d9e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-09-19T13:10:10.148Z",
  "text": "It is a bug, because the type inference ideally would realize the second `a` isn't really the same variable as the first `a`, and so not require them to have the same type.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "the workaround is fortunately easy: rename the variable in the second loop :)",
  "id": "5ba24ac6f7e1580625f3d0fb",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-09-19T13:10:30.375Z",
  "text": "the workaround is fortunately easy: rename the variable in the second loop :)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "yeah..",
  "id": "5ba24b225df5194734e12fb0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-09-19T13:12:02.198Z",
  "text": "yeah..",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "If I return a list of numpy array from a jitted function, will it incur any boxing?",
  "id": "5ba24f5c8909f71f75f8ca99",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-09-19T13:30:04.380Z",
  "text": "If I return a list of numpy array from a jitted function, will it incur any boxing?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "Um, any plan to support this <a href=\"https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csc_matrix.html\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csc_matrix.html</a> ?",
  "id": "5ba25bb9913ba7799b12fc54",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-09-19T14:22:49.195Z",
  "text": "Um, any plan to support this https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csc_matrix.html ?",
  "unread": false,
  "urls": [
   {
    "url": "https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csc_matrix.html"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "There&#39;s a few tickets requesting SciPy functionality, but there&#39;s no support at present. What it is you wanted to do with a CSC matrix ?",
  "id": "5ba25dea8909f71f75f92dc5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-09-19T14:32:10.789Z",
  "text": "There's a few tickets requesting SciPy functionality, but there's no support at present. What it is you wanted to do with a CSC matrix ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "It&#39;s for graph computing. My graph data is stored in a CSC array in c++ and I&#39;d like to map that data directly into numba jitted function",
  "id": "5ba26477b4990c30eedb1ad9",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-09-19T15:00:07.606Z",
  "text": "It's for graph computing. My graph data is stored in a CSC array in c++ and I'd like to map that data directly into numba jitted function",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "right, well I think you&#39;ll have to pass the indptr, idx, value parts separately",
  "id": "5ba264c8f7e1580625f47ca6",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-09-19T15:01:28.619Z",
  "text": "right, well I think you'll have to pass the indptr, idx, value parts separately",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "ok...",
  "id": "5ba264ddfcba1254fadc6f68",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-09-19T15:01:49.964Z",
  "text": "ok...",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "or create a jitclass that holds ref to them as POD",
  "id": "5ba264e9d655361f762260ce",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-09-19T15:02:01.905Z",
  "text": "or create a jitclass that holds ref to them as POD",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "Um, if I create some numpy arrays in a jitted function and returning them into c++ land, how does the ownership work?",
  "id": "5ba270f55df5194734e231e1",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-09-19T15:53:25.872Z",
  "text": "Um, if I create some numpy arrays in a jitted function and returning them into c++ land, how does the ownership work?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "it is going to copy something or return dangling pointers or just work as expected?",
  "id": "5ba27118f4bd1056ac87dc7a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-09-19T15:54:00.981Z",
  "text": "it is going to copy something or return dangling pointers or just work as expected?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/sk1p",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5778?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5778?v=4&s=60",
   "displayName": "Alexander Clausen",
   "gv": "4",
   "id": "5a53bb66d73408ce4f86f68d",
   "url": "/sk1p",
   "username": "sk1p",
   "v": 13
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"max9111\" class=\"mention\">@max9111</span> I&#39;ll have a look, thanks!",
  "id": "5ba2772c913ba7799b13b8f8",
  "issues": [],
  "mentions": [
   {
    "screenName": "max9111",
    "userId": "5a940f4cd73408ce4f8ee242",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 19,
  "sent": "2018-09-19T16:19:56.948Z",
  "text": "@max9111 I'll have a look, thanks!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "Hi, what&#39;s wrong with this usage?<pre><code class=\"python\"><span class=\"decorator\">@overload('take', jit_options=dict(nopython=True))</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">array_take</span><span class=\"params\">(arr, i)</span>:</span>\n   <span class=\"keyword\">if</span> isinstance(arr, types.Array):\n       <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">take_impl</span><span class=\"params\">(arr, i)</span>:</span>\n           <span class=\"keyword\">return</span> arr[i]\n       <span class=\"keyword\">return</span> take_impl\n   <span class=\"keyword\">elif</span> isinstance(arr, types.BaseTuple):\n       <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">take_impl</span><span class=\"params\">(arr, i)</span>:</span>\n           <span class=\"keyword\">return</span> arr[<span class=\"number\">0</span>][arr[<span class=\"number\">1</span>][i]]\n       <span class=\"keyword\">return</span> take_impl\n\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">take</span><span class=\"params\">(arr, i)</span>:</span>\n    <span class=\"keyword\">return</span>\n\n<span class=\"decorator\">@njit(nogil=True)</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(graph)</span>:</span>\n    <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> range(numpy.uint32(<span class=\"number\">0</span>), numpy.uint32(<span class=\"number\">4</span>)):\n        print(array_take(graph.eps.x, c))</code></pre>",
  "id": "5ba313ac5df5194734e5e78b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-09-20T03:27:40.323Z",
  "text": "Hi, what's wrong with this usage?\n```python\n@overload('take', jit_options=dict(nopython=True))\ndef array_take(arr, i):\n   if isinstance(arr, types.Array):\n       def take_impl(arr, i):\n           return arr[i]\n       return take_impl\n   elif isinstance(arr, types.BaseTuple):\n       def take_impl(arr, i):\n           return arr[0][arr[1][i]]\n       return take_impl\n\ndef take(arr, i):\n    return\n\n@njit(nogil=True)\ndef run(graph):\n    for c in range(numpy.uint32(0), numpy.uint32(4)):\n        print(array_take(graph.eps.x, c))\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "Can I be confident that this is gonna be inlined correctly? ```python",
  "id": "5ba33e92d655361f762760de",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-09-20T06:30:42.709Z",
  "text": "Can I be confident that this is gonna be inlined correctly? ```python",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "<pre><code class=\"python\"><span class=\"decorator\">@generated_jit(nopython=True)</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">xxx</span><span class=\"params\">(x, i)</span>:</span>\n    <span class=\"string\">\"\"\"\n    Return True if the value is missing, False otherwise.\n    \"\"\"</span>\n    <span class=\"keyword\">if</span> isinstance(x, types.BaseTuple):\n        <span class=\"keyword\">return</span> <span class=\"keyword\">lambda</span> x, i : x[<span class=\"number\">0</span>][x[<span class=\"number\">1</span>][i]]\n    <span class=\"keyword\">elif</span> isinstance(x, types.Array):\n        <span class=\"keyword\">return</span> <span class=\"keyword\">lambda</span> x, i : x[i]\n\n<span class=\"decorator\">@njit(nogil=True)</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(graph)</span>:</span>\n    <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> range(numpy.uint32(<span class=\"number\">0</span>), numpy.uint32(<span class=\"number\">4</span>)):\n        print(xxx(graph.eps.x, c))</code></pre>",
  "id": "5ba33e9ad655361f762760ea",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-09-20T06:30:50.009Z",
  "text": "```python\n@generated_jit(nopython=True)\ndef xxx(x, i):\n    \"\"\"\n    Return True if the value is missing, False otherwise.\n    \"\"\"\n    if isinstance(x, types.BaseTuple):\n        return lambda x, i : x[0][x[1][i]]\n    elif isinstance(x, types.Array):\n        return lambda x, i : x[i]\n\n@njit(nogil=True)\ndef run(graph):\n    for c in range(numpy.uint32(0), numpy.uint32(4)):\n        print(xxx(graph.eps.x, c))\n\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "Here is the related IR <code>#   $26.8 = call $26.3($26.6, c, func=$26.3, args=[Var($26.6, /home/amos/pymodules/t.py (16)), Var(c, /home/amos/pymodules/t.py (15))], kws=(), vararg=None)  :: ((array(uint32, 1d, C), array(uint64, 1d, C)), uint64) -&gt; uint32</code>",
  "id": "5ba3404f913ba7799b185223",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-09-20T06:38:07.439Z",
  "text": "Here is the related IR `        #   $26.8 = call $26.3($26.6, c, func=$26.3, args=[Var($26.6, /home/amos/pymodules/t.py (16)), Var(c, /home/amos/pymodules/t.py (15))], kws=(), vararg=None)  :: ((array(uint32, 1d, C), array(uint64, 1d, C)), uint64) -> uint32`",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "Can I return jitted python List directly to c++ land as numpy array? Is List internally implemented using vector?",
  "id": "5ba34ce21043315947ba7a7f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-09-20T07:31:46.460Z",
  "text": "Can I return jitted python List directly to c++ land as numpy array? Is List internally implemented using vector?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-09-20T07:33:14.628Z",
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "Is <code>return numpy.array([1,2,3])</code> gonna incur memcpy in jitted context?",
  "id": "5ba34d28913ba7799b18ab5e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-09-20T07:32:56.829Z",
  "text": "Is `    return numpy.array([1,2,3])` gonna incur memcpy in jitted context?",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "Or do I need to wait for this <a target=\"_blank\" data-link-type=\"issue\" data-issue=\"3114\" href=\"https://github.com/numba/numba/issues/3114\" data-provider=\"github\" data-issue-repo=\"numba/numba\" class=\"issue\">numba/numba#3114</a>   ?",
  "id": "5ba36643e6046343f38c5b75",
  "issues": [
   {
    "number": "3114",
    "repo": "numba/numba"
   }
  ],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-09-20T09:20:03.580Z",
  "text": "Or do I need to wait for this https://github.com/numba/numba/issues/3114   ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "LLVM does the inlining, so you&#39;ll need to look at the IR/Assembler.",
  "id": "5ba4d0e37dca30650332cfa9",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-09-21T11:07:15.364Z",
  "text": "LLVM does the inlining, so you'll need to look at the IR/Assembler.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/epifanio",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/18949?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/18949?v=4&s=60",
   "displayName": "epifanio",
   "gv": "4",
   "id": "531e6e9c5e986b0712efdca9",
   "url": "/epifanio",
   "username": "epifanio",
   "v": 57
  },
  "html": "Hi I just posted a question on #dask on how to use multi cores to run a numba function .. and they made me realize that numba supports multi threading out of the box",
  "id": "5ba596128909f71f750ca597",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-09-22T01:08:34.955Z",
  "text": "Hi I just posted a question on #dask on how to use multi cores to run a numba function .. and they made me realize that numba supports multi threading out of the box",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/epifanio",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/18949?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/18949?v=4&s=60",
   "displayName": "epifanio",
   "gv": "4",
   "id": "531e6e9c5e986b0712efdca9",
   "url": "/epifanio",
   "username": "epifanio",
   "v": 57
  },
  "html": "I&#39;m looking at the example <a href=\"https://numba.pydata.org/numba-doc/dev/user/examples.html#multi-threading\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">here</a> ",
  "id": "5ba59638f7e158062507bc2d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-09-22T01:09:12.795Z",
  "text": "I'm looking at the example [here](https://numba.pydata.org/numba-doc/dev/user/examples.html#multi-threading) ",
  "unread": false,
  "urls": [
   {
    "url": "https://numba.pydata.org/numba-doc/dev/user/examples.html#multi-threading"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/epifanio",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/18949?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/18949?v=4&s=60",
   "displayName": "epifanio",
   "gv": "4",
   "id": "531e6e9c5e986b0712efdca9",
   "url": "/epifanio",
   "username": "epifanio",
   "v": 57
  },
  "html": "while my code looks like:",
  "id": "5ba59642f7e158062507bcb9",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-09-22T01:09:22.764Z",
  "text": "while my code looks like:",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/epifanio",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/18949?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/18949?v=4&s=60",
   "displayName": "epifanio",
   "gv": "4",
   "id": "531e6e9c5e986b0712efdca9",
   "url": "/epifanio",
   "username": "epifanio",
   "v": 57
  },
  "html": "<code>numba</code> src code:  <pre><code class=\"python\"><span class=\"keyword\">from</span> numba <span class=\"keyword\">import</span> jit\n<span class=\"keyword\">from</span> numba.pycc <span class=\"keyword\">import</span> CC\ncc = CC(<span class=\"string\">'nbspatial'</span>)\n\n\n<span class=\"decorator\">@cc.export('ray_tracing',  'b1(f8, f8, f8[:,:])')</span>\n<span class=\"decorator\">@jit(nopython=True, nogil=True)</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">ray_tracing</span><span class=\"params\">(x,y,poly)</span>:</span>\n    n = len(poly)\n    inside = <span class=\"keyword\">False</span>\n    p2x = <span class=\"number\">0.0</span>\n    p2y = <span class=\"number\">0.0</span>\n    xints = <span class=\"number\">0.0</span>\n    p1x,p1y = poly[<span class=\"number\">0</span>]\n    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n+<span class=\"number\">1</span>):\n        p2x,p2y = poly[i % n]\n        <span class=\"keyword\">if</span> y &gt; min(p1y,p2y):\n            <span class=\"keyword\">if</span> y &lt;= max(p1y,p2y):\n                <span class=\"keyword\">if</span> x &lt;= max(p1x,p2x):\n                    <span class=\"keyword\">if</span> p1y != p2y:\n                        xints = (y-p1y)*(p2x-p1x)/(p2y-p1y)+p1x\n                    <span class=\"keyword\">if</span> p1x == p2x <span class=\"keyword\">or</span> x &lt;= xints:\n                        inside = <span class=\"keyword\">not</span> inside\n        p1x,p1y = p2x,p2y\n\n    <span class=\"keyword\">return</span> inside\n\n\n<span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:\n    cc.compile()</code></pre>",
  "id": "5ba5966d5df5194734f532f1",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-09-22T01:10:05.081Z",
  "text": "`numba` src code:  \n```python\nfrom numba import jit\nfrom numba.pycc import CC\ncc = CC('nbspatial')\n\n\n@cc.export('ray_tracing',  'b1(f8, f8, f8[:,:])')\n@jit(nopython=True, nogil=True)\ndef ray_tracing(x,y,poly):\n    n = len(poly)\n    inside = False\n    p2x = 0.0\n    p2y = 0.0\n    xints = 0.0\n    p1x,p1y = poly[0]\n    for i in range(n+1):\n        p2x,p2y = poly[i % n]\n        if y > min(p1y,p2y):\n            if y <= max(p1y,p2y):\n                if x <= max(p1x,p2x):\n                    if p1y != p2y:\n                        xints = (y-p1y)*(p2x-p1x)/(p2y-p1y)+p1x\n                    if p1x == p2x or x <= xints:\n                        inside = not inside\n        p1x,p1y = p2x,p2y\n\n    return inside\n\n\nif __name__ == \"__main__\":\n    cc.compile()\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/epifanio",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/18949?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/18949?v=4&s=60",
   "displayName": "epifanio",
   "gv": "4",
   "id": "531e6e9c5e986b0712efdca9",
   "url": "/epifanio",
   "username": "epifanio",
   "v": 57
  },
  "html": "once compiled <code>python3.7 nbspatial_src.py</code> I test it with:<pre><code class=\"python\"><span class=\"keyword\">import</span> nbspatial\n<span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np\nlenpoly = <span class=\"number\">10000</span>\npolygon = np.array([[np.sin(x)+<span class=\"number\">0.5</span>,np.cos(x)+<span class=\"number\">0.5</span>] <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> np.linspace(<span class=\"number\">0</span>,<span class=\"number\">2</span>*np.pi,lenpoly)[:-<span class=\"number\">1</span>]])\nN = <span class=\"number\">1000000</span>\npoints = zip(np.random.random(N),np.random.random(N))\n\nresult = [nbspatial.ray_tracing(point[<span class=\"number\">0</span>], point[<span class=\"number\">1</span>], polygon) <span class=\"keyword\">for</span> point <span class=\"keyword\">in</span> points]</code></pre>",
  "id": "5ba596b50cfe7f30f1cd2139",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-09-22T01:11:17.073Z",
  "text": "once compiled `python3.7 nbspatial_src.py` I test it with:\n```python\nimport nbspatial\nimport numpy as np\nlenpoly = 10000\npolygon = np.array([[np.sin(x)+0.5,np.cos(x)+0.5] for x in np.linspace(0,2*np.pi,lenpoly)[:-1]])\nN = 1000000\npoints = zip(np.random.random(N),np.random.random(N))\n\nresult = [nbspatial.ray_tracing(point[0], point[1], polygon) for point in points]\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/epifanio",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/18949?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/18949?v=4&s=60",
   "displayName": "epifanio",
   "gv": "4",
   "id": "531e6e9c5e986b0712efdca9",
   "url": "/epifanio",
   "username": "epifanio",
   "v": 57
  },
  "html": "where results is a list on <code>N</code> boolean elements",
  "id": "5ba596cd8909f71f750caa3a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-09-22T01:11:41.176Z",
  "text": "where results is a list on `N` boolean elements",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/epifanio",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/18949?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/18949?v=4&s=60",
   "displayName": "epifanio",
   "gv": "4",
   "id": "531e6e9c5e986b0712efdca9",
   "url": "/epifanio",
   "username": "epifanio",
   "v": 57
  },
  "html": "I&#39;m trying to get this function running across all my CPU cores .. but I&#39;m faling  i followin the example in the documentation",
  "id": "5ba59a105df5194734f54775",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-09-22T01:25:36.364Z",
  "text": "I'm trying to get this function running across all my CPU cores .. but I'm faling  i followin the example in the documentation",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/epifanio",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/18949?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/18949?v=4&s=60",
   "displayName": "epifanio",
   "gv": "4",
   "id": "531e6e9c5e986b0712efdca9",
   "url": "/epifanio",
   "username": "epifanio",
   "v": 57
  },
  "html": "I&#39;m hing problem in understandi this lie:  <code>args = (result,) + args</code>",
  "id": "5ba59db8d655361f7635cc17",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-09-22T01:41:12.500Z",
  "text": "I'm hing problem in understandi this lie:  `args = (result,) + args`",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/epifanio",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/18949?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/18949?v=4&s=60",
   "displayName": "epifanio",
   "gv": "4",
   "id": "531e6e9c5e986b0712efdca9",
   "url": "/epifanio",
   "username": "epifanio",
   "v": 57
  },
  "html": "from the numba doc in <a href=\"https://numba.pydata.org/numba-doc/dev/user/examples.html#multi-threading\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">make_multithread</a>",
  "id": "5ba59decb4990c30eeee8b05",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-09-22T01:42:04.178Z",
  "text": "from the numba doc in [make_multithread](https://numba.pydata.org/numba-doc/dev/user/examples.html#multi-threading)",
  "unread": false,
  "urls": [
   {
    "url": "https://numba.pydata.org/numba-doc/dev/user/examples.html#multi-threading"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/epifanio",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/18949?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/18949?v=4&s=60",
   "displayName": "epifanio",
   "gv": "4",
   "id": "531e6e9c5e986b0712efdca9",
   "url": "/epifanio",
   "username": "epifanio",
   "v": 57
  },
  "html": "to facilitate this task I should probably write an additional nuba function that will take as input an array (instead of single points) and use <code>nbspatial. ray_tracing</code> on it with just 2 arguments <code>(points_array, polygon_boundary)</code>, run such a function in <code>N</code> separate processes, and then try to merge the results",
  "id": "5ba60430f4bd1056ac9cffa5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-09-22T08:58:24.418Z",
  "text": "to facilitate this task I should probably write an additional nuba function that will take as input an array (instead of single points) and use `nbspatial. ray_tracing ` on it with just 2 arguments `(points_array, polygon_boundary)`, run such a function in `N` separate processes, and then try to merge the results",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/epifanio",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/18949?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/18949?v=4&s=60",
   "displayName": "epifanio",
   "gv": "4",
   "id": "531e6e9c5e986b0712efdca9",
   "url": "/epifanio",
   "username": "epifanio",
   "v": 57
  },
  "html": "I&#39;m, really streuggling .. need help to convert a function to use arrays as  input, instead of single values",
  "id": "5ba82065e5c2cc56add34d2b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-09-23T23:23:17.058Z",
  "text": "I'm, really streuggling .. need help to convert a function to use arrays as  input, instead of single values",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/epifanio",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/18949?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/18949?v=4&s=60",
   "displayName": "epifanio",
   "gv": "4",
   "id": "531e6e9c5e986b0712efdca9",
   "url": "/epifanio",
   "username": "epifanio",
   "v": 57
  },
  "html": "so that I can run the function over multiple points",
  "id": "5ba82074b9531f2dfaaeab04",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-09-23T23:23:32.646Z",
  "text": "so that I can run the function over multiple points",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-09-23T23:25:49.753Z",
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/epifanio",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/18949?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/18949?v=4&s=60",
   "displayName": "epifanio",
   "gv": "4",
   "id": "531e6e9c5e986b0712efdca9",
   "url": "/epifanio",
   "username": "epifanio",
   "v": 57
  },
  "html": "the code is:<pre><code class=\"python\"><span class=\"keyword\">from</span> numba <span class=\"keyword\">import</span> jit\n<span class=\"keyword\">from</span> numba.pycc <span class=\"keyword\">import</span> CC\ncc = CC(<span class=\"string\">'nbspatial'</span>)\n\n<span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np\n\n<span class=\"decorator\">@cc.export('ray_tracing',  'b1(f8, f8, f8[:,:])')</span>\n<span class=\"decorator\">@jit(nopython=True)</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">ray_tracing</span><span class=\"params\">(x,y,poly)</span>:</span>\n    n = len(poly)\n    inside = <span class=\"keyword\">False</span>\n    p2x = <span class=\"number\">0.0</span>\n    p2y = <span class=\"number\">0.0</span>\n    xints = <span class=\"number\">0.0</span>\n    p1x,p1y = poly[<span class=\"number\">0</span>]\n    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n+<span class=\"number\">1</span>):\n        p2x,p2y = poly[i % n]\n        <span class=\"keyword\">if</span> y &gt; min(p1y,p2y):\n            <span class=\"keyword\">if</span> y &lt;= max(p1y,p2y):\n                <span class=\"keyword\">if</span> x &lt;= max(p1x,p2x):\n                    <span class=\"keyword\">if</span> p1y != p2y:\n                        xints = (y-p1y)*(p2x-p1x)/(p2y-p1y)+p1x\n                    <span class=\"keyword\">if</span> p1x == p2x <span class=\"keyword\">or</span> x &lt;= xints:\n                        inside = <span class=\"keyword\">not</span> inside\n        p1x,p1y = p2x,p2y\n\n    <span class=\"keyword\">return</span> inside\n\n<span class=\"decorator\">@cc.export('array_tracing', 'u2[:](f8[:], f8[:], f8[:,:])')</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">array_tracing</span><span class=\"params\">(xx, yy, poly)</span>:</span>\n    D = np.empty(len(xx), dtype=np.uint16)\n    n = len(poly)\n    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, len(D) - <span class=\"number\">1</span>):\n        inside = <span class=\"keyword\">False</span>\n        p2x = <span class=\"number\">0.0</span>\n        p2y = <span class=\"number\">0.0</span>\n        xints = <span class=\"number\">0.0</span>\n        p1x,p1y = poly[<span class=\"number\">0</span>]\n        x = xx[i]\n        y = yy[i]\n        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n+<span class=\"number\">1</span>):\n            p2x,p2y = poly[i % n]\n            <span class=\"keyword\">if</span> y &gt; min(p1y,p2y):\n                <span class=\"keyword\">if</span> y &lt;= max(p1y,p2y):\n                    <span class=\"keyword\">if</span> x &lt;= max(p1x,p2x):\n                        <span class=\"keyword\">if</span> p1y != p2y:\n                            xints = (y-p1y)*(p2x-p1x)/(p2y-p1y)+p1x\n                        <span class=\"keyword\">if</span> p1x == p2x <span class=\"keyword\">or</span> x &lt;= xints:\n                            inside = <span class=\"keyword\">not</span> inside\n            p1x,p1y = p2x,p2y\n        <span class=\"keyword\">if</span> inside:\n            D[i] = <span class=\"number\">1</span>\n        <span class=\"keyword\">else</span>:\n            D[i] = <span class=\"number\">0</span>\n    <span class=\"keyword\">return</span> D\n\n\n<span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:\n    cc.compile()</code></pre>",
  "id": "5ba820ecb9531f2dfaaead9d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-09-23T23:25:32.883Z",
  "text": "the code is:\n```python\nfrom numba import jit\nfrom numba.pycc import CC\ncc = CC('nbspatial')\n\nimport numpy as np\n\n@cc.export('ray_tracing',  'b1(f8, f8, f8[:,:])')\n@jit(nopython=True)\ndef ray_tracing(x,y,poly):\n    n = len(poly)\n    inside = False\n    p2x = 0.0\n    p2y = 0.0\n    xints = 0.0\n    p1x,p1y = poly[0]\n    for i in range(n+1):\n        p2x,p2y = poly[i % n]\n        if y > min(p1y,p2y):\n            if y <= max(p1y,p2y):\n                if x <= max(p1x,p2x):\n                    if p1y != p2y:\n                        xints = (y-p1y)*(p2x-p1x)/(p2y-p1y)+p1x\n                    if p1x == p2x or x <= xints:\n                        inside = not inside\n        p1x,p1y = p2x,p2y\n\n    return inside\n\n@cc.export('array_tracing', 'u2[:](f8[:], f8[:], f8[:,:])')\ndef array_tracing(xx, yy, poly):\n    D = np.empty(len(xx), dtype=np.uint16)\n    n = len(poly)\n    for i in range(1, len(D) - 1):\n        inside = False\n        p2x = 0.0\n        p2y = 0.0\n        xints = 0.0\n        p1x,p1y = poly[0]\n        x = xx[i]\n        y = yy[i]\n        for i in range(n+1):\n            p2x,p2y = poly[i % n]\n            if y > min(p1y,p2y):\n                if y <= max(p1y,p2y):\n                    if x <= max(p1x,p2x):\n                        if p1y != p2y:\n                            xints = (y-p1y)*(p2x-p1x)/(p2y-p1y)+p1x\n                        if p1x == p2x or x <= xints:\n                            inside = not inside\n            p1x,p1y = p2x,p2y\n        if inside:\n            D[i] = 1\n        else:\n            D[i] = 0\n    return D\n\n\nif __name__ == \"__main__\":\n    cc.compile()\n```",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/epifanio",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/18949?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/18949?v=4&s=60",
   "displayName": "epifanio",
   "gv": "4",
   "id": "531e6e9c5e986b0712efdca9",
   "url": "/epifanio",
   "username": "epifanio",
   "v": 57
  },
  "html": "the first function works as expected",
  "id": "5ba8210fb9531f2dfaaeaebc",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-09-23T23:26:07.532Z",
  "text": "the first function works as expected",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/epifanio",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/18949?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/18949?v=4&s=60",
   "displayName": "epifanio",
   "gv": "4",
   "id": "531e6e9c5e986b0712efdca9",
   "url": "/epifanio",
   "username": "epifanio",
   "v": 57
  },
  "html": "the second one does not",
  "id": "5ba82116f4bd1056aca878f7",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-09-23T23:26:14.543Z",
  "text": "the second one does not",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/epifanio",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/18949?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/18949?v=4&s=60",
   "displayName": "epifanio",
   "gv": "4",
   "id": "531e6e9c5e986b0712efdca9",
   "url": "/epifanio",
   "username": "epifanio",
   "v": 57
  },
  "html": "I failed in using booleans .. so I hacked the code using <code>0,1</code> instead",
  "id": "5ba82134e5c2cc56add35147",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-09-23T23:26:44.299Z",
  "text": "I failed in using booleans .. so I hacked the code using `0,1` instead",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-09-23T23:35:13.032Z",
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/epifanio",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/18949?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/18949?v=4&s=60",
   "displayName": "epifanio",
   "gv": "4",
   "id": "531e6e9c5e986b0712efdca9",
   "url": "/epifanio",
   "username": "epifanio",
   "v": 57
  },
  "html": "<p>the problem is that using this test code:</p><ul>\n<li>generate input data</li>\n</ul>\n<pre><code>import numpy as np\n# regular polygon <span class=\"keyword\">for</span> testing\nlenpoly = <span class=\"number\">10000</span>\npolygon = np.<span class=\"keyword\">array</span>([[np.sin(x)+<span class=\"number\">0.5</span>,np.cos(x)+<span class=\"number\">0.5</span>] <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> np.linspace(<span class=\"number\">0</span>,<span class=\"number\">2</span>*np.pi,lenpoly)[:-<span class=\"number\">1</span>]])\n\n# random points <span class=\"keyword\">set</span> <span class=\"keyword\">of</span> points <span class=\"keyword\">to</span> test \nN = <span class=\"number\">10000</span>\n# making a list instead <span class=\"keyword\">of</span> a generator <span class=\"keyword\">to</span> help debug\npoints = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> zip(np.random.random(N),np.random.random(N))]</code></pre><ul>\n<li>test the function <code>ray_tracing</code> with the first two points</li>\n</ul>\n<pre><code>import nbspatial\nnbspatial.ray_tracing(points[<span class=\"link_label\">0</span>][<span class=\"link_reference\">0</span>], points[<span class=\"link_label\">0</span>][<span class=\"link_reference\">1</span>], polygon)</code></pre><p><strong> returns <code>True</code></strong></p><pre><code>nbspatial.ray_tracing(points[<span class=\"link_label\">1</span>][<span class=\"link_reference\">0</span>], points[<span class=\"link_label\">1</span>][<span class=\"link_reference\">1</span>], polygon)</code></pre><p><strong> returns <code>True</code></strong></p><ul>\n<li>Now, test the function <code>array_tracing</code> using the same two points as before, but this time stored as array:</li>\n</ul>\n<pre><code>xx = np.array([<span class=\"link_label\">points[0</span>][<span class=\"link_reference\">0</span>], points[<span class=\"link_label\">1</span>][<span class=\"link_reference\">0</span>]])\nyy = np.array([<span class=\"link_label\">points[0</span>][<span class=\"link_reference\">1</span>], points[<span class=\"link_label\">1</span>][<span class=\"link_reference\">1</span>]])</code></pre><p>This was supposed to return <code>[1,1]</code> instead i got:</p><pre><code><span class=\"built_in\">array</span>([<span class=\"number\">52171</span>, <span class=\"number\">52171</span>], dtype=uint16)</code></pre>",
  "id": "5ba8224c1ee2ca65025dff60",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-09-23T23:31:23.998Z",
  "text": "the problem is that using this test code:\n* generate input data\n\n```\nimport numpy as np\n# regular polygon for testing\nlenpoly = 10000\npolygon = np.array([[np.sin(x)+0.5,np.cos(x)+0.5] for x in np.linspace(0,2*np.pi,lenpoly)[:-1]])\n\n# random points set of points to test \nN = 10000\n# making a list instead of a generator to help debug\npoints = [i for i in zip(np.random.random(N),np.random.random(N))]\n```\n\n\n* test the function `ray_tracing` with the first two points\n\n```\nimport nbspatial\nnbspatial.ray_tracing(points[0][0], points[0][1], polygon) \n```\n\n** returns `True`**\n\n```\nnbspatial.ray_tracing(points[1][0], points[1][1], polygon) \n```\n\n** returns `True`**\n\n* Now, test the function `array_tracing` using the same two points as before, but this time stored as array:\n\n```\nxx = np.array([points[0][0], points[1][0]])\nyy = np.array([points[0][1], points[1][1]])\n```\n\nThis was supposed to return `[1,1]` instead i got:\n\n```\narray([52171, 52171], dtype=uint16)\n```\n",
  "unread": false,
  "urls": [],
  "v": 4
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/epifanio",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/18949?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/18949?v=4&s=60",
   "displayName": "epifanio",
   "gv": "4",
   "id": "531e6e9c5e986b0712efdca9",
   "url": "/epifanio",
   "username": "epifanio",
   "v": 57
  },
  "html": "me idiot .. I should have used &#39;numba.bool&#39; from the start",
  "id": "5ba828010cfe7f30f1db01fb",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-09-23T23:55:45.831Z",
  "text": "me idiot .. I should have used 'numba.bool' from the start",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/epifanio",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/18949?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/18949?v=4&s=60",
   "displayName": "epifanio",
   "gv": "4",
   "id": "531e6e9c5e986b0712efdca9",
   "url": "/epifanio",
   "username": "epifanio",
   "v": 57
  },
  "html": "sorry for all the noise here .. this seems to work<pre><code class=\"python\"><span class=\"decorator\">@cc.export('array_tracing', 'b1[:](f8[:], f8[:], f8[:,:])')</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">array_tracing</span><span class=\"params\">(xx, yy, poly)</span>:</span>\n    D = np.empty(len(xx), dtype=numba.boolean)\n    n = len(poly)\n    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, len(D) - <span class=\"number\">1</span>):\n        inside = <span class=\"keyword\">False</span>\n        p2x = <span class=\"number\">0.0</span>\n        p2y = <span class=\"number\">0.0</span>\n        xints = <span class=\"number\">0.0</span>\n        p1x,p1y = poly[<span class=\"number\">0</span>]\n        x = xx[i]\n        y = yy[i]\n        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n+<span class=\"number\">1</span>):\n            p2x,p2y = poly[i % n]\n            <span class=\"keyword\">if</span> y &gt; min(p1y,p2y):\n                <span class=\"keyword\">if</span> y &lt;= max(p1y,p2y):\n                    <span class=\"keyword\">if</span> x &lt;= max(p1x,p2x):\n                        <span class=\"keyword\">if</span> p1y != p2y:\n                            xints = (y-p1y)*(p2x-p1x)/(p2y-p1y)+p1x\n                        <span class=\"keyword\">if</span> p1x == p2x <span class=\"keyword\">or</span> x &lt;= xints:\n                            inside = <span class=\"keyword\">not</span> inside\n            p1x,p1y = p2x,p2y\n        D[i] = inside\n    <span class=\"keyword\">return</span> D</code></pre>",
  "id": "5ba8282cf7e1580625158772",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-09-23T23:56:28.544Z",
  "text": "sorry for all the noise here .. this seems to work\n```python\n@cc.export('array_tracing', 'b1[:](f8[:], f8[:], f8[:,:])')\ndef array_tracing(xx, yy, poly):\n    D = np.empty(len(xx), dtype=numba.boolean)\n    n = len(poly)\n    for i in range(1, len(D) - 1):\n        inside = False\n        p2x = 0.0\n        p2y = 0.0\n        xints = 0.0\n        p1x,p1y = poly[0]\n        x = xx[i]\n        y = yy[i]\n        for i in range(n+1):\n            p2x,p2y = poly[i % n]\n            if y > min(p1y,p2y):\n                if y <= max(p1y,p2y):\n                    if x <= max(p1x,p2x):\n                        if p1y != p2y:\n                            xints = (y-p1y)*(p2x-p1x)/(p2y-p1y)+p1x\n                        if p1x == p2x or x <= xints:\n                            inside = not inside\n            p1x,p1y = p2x,p2y\n        D[i] = inside\n    return D\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/epifanio",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/18949?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/18949?v=4&s=60",
   "displayName": "epifanio",
   "gv": "4",
   "id": "531e6e9c5e986b0712efdca9",
   "url": "/epifanio",
   "username": "epifanio",
   "v": 57
  },
  "html": "I posted a question on SO on how to try to speed up this calcuation across CPUs",
  "id": "5ba838207dca306503459b76",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-09-24T01:04:32.313Z",
  "text": "I posted a question on SO on how to try to speed up this calcuation across CPUs",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/epifanio",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/18949?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/18949?v=4&s=60",
   "displayName": "epifanio",
   "gv": "4",
   "id": "531e6e9c5e986b0712efdca9",
   "url": "/epifanio",
   "username": "epifanio",
   "v": 57
  },
  "html": "<a href=\"https://stackoverflow.com/questions/52471590/use-multithreading-in-numba\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://stackoverflow.com/questions/52471590/use-multithreading-in-numba</a>",
  "id": "5ba8382533da0f649e4387e5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-09-24T01:04:37.794Z",
  "text": "https://stackoverflow.com/questions/52471590/use-multithreading-in-numba",
  "unread": false,
  "urls": [
   {
    "url": "https://stackoverflow.com/questions/52471590/use-multithreading-in-numba"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/pocandraspoc",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/28604570?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/28604570?v=4&s=60",
   "displayName": "pocandraspoc",
   "gv": "4",
   "id": "592499b7d73408ce4f61c0a0",
   "url": "/pocandraspoc",
   "username": "pocandraspoc",
   "v": 8
  },
  "html": "Just to say hello :)",
  "id": "5ba88e545df5194734053837",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-09-24T07:12:20.427Z",
  "text": "Just to say hello :)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-09-24T12:13:30.723Z",
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/boustrephon",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/14007454?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/14007454?v=4&s=60",
   "displayName": "boustrephon",
   "gv": "4",
   "id": "5ba8d2f0d73408ce4fa92cfb",
   "url": "/boustrephon",
   "username": "boustrephon",
   "v": 7
  },
  "html": "I am wondering if there is any way to use numba to speed up this code. I suspect that the problem is that it involves a closure, but I am not experienced enough to know exactly what that means and what the implications are. If, as it appears, it is not currently supported, is there any plan to support it, or is there a recommended work-around, or recommended alternative?<pre><code class=\"python\"><span class=\"decorator\">@jit(nopython=True)</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">stress</span><span class=\"params\">(strain, E_mod, yld)</span>:</span>\n    <span class=\"keyword\">return</span> max(-yld, min(yld, E_mod * strain))\n\n<span class=\"comment\"># first time without closure (works fine)</span>\nprint(<span class=\"string\">\"-2.0\"</span>, stress(-<span class=\"number\">2.0</span>, <span class=\"number\">2.0</span>, <span class=\"number\">3.0</span>))\nprint(<span class=\"string\">\"-1.5\"</span>, stress(-<span class=\"number\">1.5</span>, <span class=\"number\">2.0</span>, <span class=\"number\">3.0</span>))\nprint(<span class=\"string\">\"-1.0\"</span>, stress(-<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>, <span class=\"number\">3.0</span>))\nprint(<span class=\"string\">\"0.0\"</span>, stress(<span class=\"number\">0.0</span>, <span class=\"number\">2.0</span>, <span class=\"number\">3.0</span>))\nprint(<span class=\"string\">\"1.0\"</span>, stress(<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>, <span class=\"number\">3.0</span>))\nprint(<span class=\"string\">\"1.5\"</span>, stress(<span class=\"number\">1.5</span>, <span class=\"number\">2.0</span>, <span class=\"number\">3.0</span>))\nprint(<span class=\"string\">\"2.0\"</span>, stress(<span class=\"number\">2.0</span>, <span class=\"number\">2.0</span>, <span class=\"number\">3.0</span>))\n\n<span class=\"comment\"># This function does not work with numba</span>\n<span class=\"comment\">#@jit(nopython=True)</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_stress_func</span><span class=\"params\">(E_mod, yld)</span>:</span>\n    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">stress1</span><span class=\"params\">(strain1)</span>:</span>\n        <span class=\"keyword\">return</span> stress(strain1, E_mod, yld)\n    <span class=\"keyword\">return</span> stress1\n\n<span class=\"comment\"># this time with closure</span>\nstress3 = get_stress_func(<span class=\"number\">2.0</span>, <span class=\"number\">3.0</span>)\nprint(<span class=\"string\">\"get_stress_func:\"</span>, get_stress_func)\nprint(<span class=\"string\">\"stress3:\"</span>, stress3)\nprint(<span class=\"string\">\"-2.0\"</span>, stress3(-<span class=\"number\">2.0</span>))\nprint(<span class=\"string\">\"-1.5\"</span>, stress3(-<span class=\"number\">1.5</span>))\nprint(<span class=\"string\">\"-1.0\"</span>, stress3(-<span class=\"number\">1.0</span>))\nprint(<span class=\"string\">\"0.0\"</span>, stress3(<span class=\"number\">0.0</span>))\nprint(<span class=\"string\">\"1.0\"</span>, stress3(<span class=\"number\">1.0</span>))\nprint(<span class=\"string\">\"1.5\"</span>, stress3(<span class=\"number\">1.5</span>))\nprint(<span class=\"string\">\"2.0\"</span>, stress3(<span class=\"number\">2.0</span>))</code></pre>",
  "id": "5ba8d39de6046343f3ab4a56",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-09-24T12:07:57.303Z",
  "text": "I am wondering if there is any way to use numba to speed up this code. I suspect that the problem is that it involves a closure, but I am not experienced enough to know exactly what that means and what the implications are. If, as it appears, it is not currently supported, is there any plan to support it, or is there a recommended work-around, or recommended alternative?\n```python\n@jit(nopython=True)\ndef stress(strain, E_mod, yld):\n    return max(-yld, min(yld, E_mod * strain))\n\n# first time without closure (works fine)\nprint(\"-2.0\", stress(-2.0, 2.0, 3.0))\nprint(\"-1.5\", stress(-1.5, 2.0, 3.0))\nprint(\"-1.0\", stress(-1.0, 2.0, 3.0))\nprint(\"0.0\", stress(0.0, 2.0, 3.0))\nprint(\"1.0\", stress(1.0, 2.0, 3.0))\nprint(\"1.5\", stress(1.5, 2.0, 3.0))\nprint(\"2.0\", stress(2.0, 2.0, 3.0))\n \n# This function does not work with numba\n#@jit(nopython=True)\ndef get_stress_func(E_mod, yld):\n    def stress1(strain1):\n        return stress(strain1, E_mod, yld)\n    return stress1\n\n# this time with closure\nstress3 = get_stress_func(2.0, 3.0)\nprint(\"get_stress_func:\", get_stress_func)\nprint(\"stress3:\", stress3)\nprint(\"-2.0\", stress3(-2.0))\nprint(\"-1.5\", stress3(-1.5))\nprint(\"-1.0\", stress3(-1.0))\nprint(\"0.0\", stress3(0.0))\nprint(\"1.0\", stress3(1.0))\nprint(\"1.5\", stress3(1.5))\nprint(\"2.0\", stress3(2.0))\n```\n",
  "unread": false,
  "urls": [],
  "v": 3
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"boustrephon\" class=\"mention\">@boustrephon</span> if you move the second <code>@jit</code> decorator inside the <code>get_stress_func</code> it&#39;ll work fine.",
  "id": "5ba8de6de5c2cc56add77a4b",
  "issues": [],
  "mentions": [
   {
    "screenName": "boustrephon",
    "userId": "5ba8d2f0d73408ce4fa92cfb",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 17,
  "sent": "2018-09-24T12:54:05.150Z",
  "text": "@boustrephon if you move the second `@jit` decorator inside the `get_stress_func` it'll work fine.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<p>Like:</p><pre><code><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_stress_func</span><span class=\"params\">(E_mod, yld)</span>:</span>\n<span class=\"decorator\">    @jit(nopython=True)</span>\n    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">stress1</span><span class=\"params\">(strain1)</span>:</span>\n        <span class=\"keyword\">return</span> stress(strain1, E_mod, yld)\n    <span class=\"keyword\">return</span> stress1</code></pre><p>the elastic mod and yield will be captured and the <code>stress1</code> function will just depend on <code>strain1</code>. For future, in general, Numba does not support returning functions (expect you saw this error: <code>Numba encountered the use of a language feature it does not support in this context: &lt;creating a function from a closure&gt; (op code: make_function not supported). If the feature is explicitly supported it is likely that the result of the expression is being used in an unsupported manner.</code>).</p>",
  "id": "5ba8df7e7dca306503495e9f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-09-24T12:58:38.875Z",
  "text": "Like:\n```\ndef get_stress_func(E_mod, yld):\n    @jit(nopython=True)\n    def stress1(strain1):\n        return stress(strain1, E_mod, yld)\n    return stress1\n```\nthe elastic mod and yield will be captured and the `stress1` function will just depend on `strain1`. For future, in general, Numba does not support returning functions (expect you saw this error: `Numba encountered the use of a language feature it does not support in this context: <creating a function from a closure> (op code: make_function not supported). If the feature is explicitly supported it is likely that the result of the expression is being used in an unsupported manner.`).",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/boustrephon",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/14007454?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/14007454?v=4&s=60",
   "displayName": "boustrephon",
   "gv": "4",
   "id": "5ba8d2f0d73408ce4fa92cfb",
   "url": "/boustrephon",
   "username": "boustrephon",
   "v": 7
  },
  "html": "<p><span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span>  - thanks for the swift response. This is clearly an improvement on my code which is great. Presumably it still means that you can&#39;t get any numba improvement on the use of the derived functions (closures?) based on your comment about numba not supporting returning functions.</p><p>Incidentally, I got the following error rather than the one you mention, </p><pre><code>TypingError: cannot determine Numba <span class=\"keyword\">type</span> <span class=\"keyword\">of</span> &lt;<span class=\"keyword\">class</span> <span class=\"string\">'function'</span>&gt;</code></pre><p>This is one reason why I was wondering whether I was really creating closures. Would one option be to create a class that returns the stress for a material object that has e_mod and yield properties that can be set and then referenced? Presumably there would be some way to use the numba class approach on that?</p><p>The reason I am keen to be able to speed this up is that my code  references the stress-strain relationship a lot, and I was hoping to get it all optimised as much as possible.</p>",
  "id": "5ba8e30cb4990c30ee002b32",
  "issues": [],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 17,
  "sent": "2018-09-24T13:13:48.788Z",
  "text": "@stuartarchibald  - thanks for the swift response. This is clearly an improvement on my code which is great. Presumably it still means that you can't get any numba improvement on the use of the derived functions (closures?) based on your comment about numba not supporting returning functions.\n\nIncidentally, I got the following error rather than the one you mention, \n```\nTypingError: cannot determine Numba type of <class 'function'>\n```\nThis is one reason why I was wondering whether I was really creating closures. Would one option be to create a class that returns the stress for a material object that has e_mod and yield properties that can be set and then referenced? Presumably there would be some way to use the numba class approach on that?\n\nThe reason I am keen to be able to speed this up is that my code  references the stress-strain relationship a lot, and I was hoping to get it all optimised as much as possible.\n\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/extraymond",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/707176?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/707176?v=4&s=60",
   "displayName": "extraymond",
   "gv": "4",
   "id": "5669689c16b6c7089cbe2cb4",
   "url": "/extraymond",
   "username": "extraymond",
   "v": 18
  },
  "html": "<p>Hi! Congrats on the 0.4 release.</p><p>Is there anyway to install roctools with pypi? I was trying to build my app with poetry, and roctools can only be installed via conda right now.</p>",
  "id": "5ba8e3765df51947340746e4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-09-24T13:15:34.998Z",
  "text": "Hi! Congrats on the 0.4 release.\n\nIs there anyway to install roctools with pypi? I was trying to build my app with poetry, and roctools can only be installed via conda right now.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"extraymond\" class=\"mention\">@extraymond</span> thanks. Unfortunately roctools is conda only at present. It involves building a special version of LLVM and LLD first and then linking the rocmlite library against that, then getting a load of bitcode etc and assembling that in a specific way. Work to get this to work anywhere other than from conda hasn&#39;t been done yet.",
  "id": "5ba8e48d1ee2ca6502626b91",
  "issues": [],
  "mentions": [
   {
    "screenName": "extraymond",
    "userId": "5669689c16b6c7089cbe2cb4",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 17,
  "sent": "2018-09-24T13:20:13.500Z",
  "text": "@extraymond thanks. Unfortunately roctools is conda only at present. It involves building a special version of LLVM and LLD first and then linking the rocmlite library against that, then getting a load of bitcode etc and assembling that in a specific way. Work to get this to work anywhere other than from conda hasn't been done yet.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/extraymond",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/707176?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/707176?v=4&s=60",
   "displayName": "extraymond",
   "gv": "4",
   "id": "5669689c16b6c7089cbe2cb4",
   "url": "/extraymond",
   "username": "extraymond",
   "v": 18
  },
  "html": "Thx!! Would be nice to install it though.",
  "id": "5ba8e51ab9531f2dfab30323",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-09-24T13:22:34.971Z",
  "text": "Thx!! Would be nice to install it though.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<p><span data-link-type=\"mention\" data-screen-name=\"boustrephon\" class=\"mention\">@boustrephon</span> I&#39;m not sure what you mean, the <code>get_stress_func</code> in your case is just going to return the jitted <code>stress1</code> function. You can have nopython mode functions that call other nopython mode functions. If you don&#39;t declare the called function as nopython mode you&#39;ll get the error you note, is that what happened?</p><p>Numba often gives the best performance when working on plain data and loops/numpy functions. This might be a useful read <a href=\"http://numba.pydata.org/numba-doc/latest/user/5minguide.html\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://numba.pydata.org/numba-doc/latest/user/5minguide.html</a>, then this, <a href=\"http://numba.pydata.org/numba-doc/latest/user/performance-tips.html\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://numba.pydata.org/numba-doc/latest/user/performance-tips.html</a></p>",
  "id": "5ba8e6528909f71f751ece7c",
  "issues": [],
  "mentions": [
   {
    "screenName": "boustrephon",
    "userId": "5ba8d2f0d73408ce4fa92cfb",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 17,
  "sent": "2018-09-24T13:27:46.561Z",
  "text": "@boustrephon I'm not sure what you mean, the `get_stress_func` in your case is just going to return the jitted `stress1` function. You can have nopython mode functions that call other nopython mode functions. If you don't declare the called function as nopython mode you'll get the error you note, is that what happened?\n\nNumba often gives the best performance when working on plain data and loops/numpy functions. This might be a useful read http://numba.pydata.org/numba-doc/latest/user/5minguide.html, then this, http://numba.pydata.org/numba-doc/latest/user/performance-tips.html",
  "unread": false,
  "urls": [
   {
    "url": "http://numba.pydata.org/numba-doc/latest/user/5minguide.html"
   },
   {
    "url": "http://numba.pydata.org/numba-doc/latest/user/performance-tips.html"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"extraymond\" class=\"mention\">@extraymond</span> whilst entirely <em>not</em> recommended, the roctools package can be downloaded as  a bzip2 and you could unzip it and put the various bits in the right places assuming you have compatible runtime libraries (like libstdc++ etc). The other option is just to go and build everything from source, the instructions can be gleaned from the conda-build recipes <a href=\"https://github.com/numba/roctools/tree/master/conda-recipes\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://github.com/numba/roctools/tree/master/conda-recipes</a>",
  "id": "5ba8e7d9f7e158062519cc84",
  "issues": [],
  "mentions": [
   {
    "screenName": "extraymond",
    "userId": "5669689c16b6c7089cbe2cb4",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 18,
  "sent": "2018-09-24T13:34:17.083Z",
  "text": "@extraymond whilst entirely *not* recommended, the roctools package can be downloaded as  a bzip2 and you could unzip it and put the various bits in the right places assuming you have compatible runtime libraries (like libstdc++ etc). The other option is just to go and build everything from source, the instructions can be gleaned from the conda-build recipes https://github.com/numba/roctools/tree/master/conda-recipes",
  "unread": false,
  "urls": [
   {
    "url": "https://github.com/numba/roctools/tree/master/conda-recipes"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/extraymond",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/707176?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/707176?v=4&s=60",
   "displayName": "extraymond",
   "gv": "4",
   "id": "5669689c16b6c7089cbe2cb4",
   "url": "/extraymond",
   "username": "extraymond",
   "v": 18
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span>  Thx for your suggestion, I may try compiling it this weekend.",
  "id": "5ba8e82c0cfe7f30f1df4b01",
  "issues": [],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 18,
  "sent": "2018-09-24T13:35:40.823Z",
  "text": "@stuartarchibald  Thx for your suggestion, I may try compiling it this weekend.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/boustrephon",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/14007454?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/14007454?v=4&s=60",
   "displayName": "boustrephon",
   "gv": "4",
   "id": "5ba8d2f0d73408ce4fa92cfb",
   "url": "/boustrephon",
   "username": "boustrephon",
   "v": 7
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span> Thanks - both for the explanation and for the additional references. It is all clear now when you explain it as returning a jitted function. I have done some timing checks and it delivers the speed-up.",
  "id": "5ba8eb465df5194734077549",
  "issues": [],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 18,
  "sent": "2018-09-24T13:48:54.361Z",
  "text": "@stuartarchibald Thanks - both for the explanation and for the additional references. It is all clear now when you explain it as returning a jitted function. I have done some timing checks and it delivers the speed-up.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"boustrephon\" class=\"mention\">@boustrephon</span> no problem.",
  "id": "5ba8eca4b4990c30ee006a63",
  "issues": [],
  "mentions": [
   {
    "screenName": "boustrephon",
    "userId": "5ba8d2f0d73408ce4fa92cfb",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 17,
  "sent": "2018-09-24T13:54:44.393Z",
  "text": "@boustrephon no problem.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "Thanks for using Numba :)",
  "id": "5ba8ecb1d655361f7647f171",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-09-24T13:54:57.580Z",
  "text": "Thanks for using Numba :)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-09-24T14:54:00.773Z",
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/boustrephon",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/14007454?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/14007454?v=4&s=60",
   "displayName": "boustrephon",
   "gv": "4",
   "id": "5ba8d2f0d73408ce4fa92cfb",
   "url": "/boustrephon",
   "username": "boustrephon",
   "v": 7
  },
  "html": "I am writing some code that I am using under CPython (where I can use Numba) and under IronPython (where I can&#39;t), and would also like to cover computers without Numba installed. I am thinking that I can put in a try-except on the import numba, but then I still have the issue of the jit decorators. Would it make sense to define a pass-through definition of the jit decorator in the except section? If so, what would that look like (including accounting for parameters such as nopython), and would it cause any kind of a slowdown?",
  "id": "5ba8fa5ce6046343f3ac43a0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-09-24T14:53:16.357Z",
  "text": "I am writing some code that I am using under CPython (where I can use Numba) and under IronPython (where I can't), and would also like to cover computers without Numba installed. I am thinking that I can put in a try-except on the import numba, but then I still have the issue of the jit decorators. Would it make sense to define a pass-through definition of the jit decorator in the except section? If so, what would that look like (including accounting for parameters such as nopython), and would it cause any kind of a slowdown?",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<p>You could use:</p><pre><code><span class=\"keyword\">try</span>:\n  <span class=\"keyword\">from</span> numba <span class=\"keyword\">import</span> jit\n<span class=\"keyword\">except</span> ImportError:\n  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">jit</span><span class=\"params\">(*args, **kwargs)</span>:</span>\n      <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(func)</span>:</span>\n          <span class=\"keyword\">return</span> func\n      <span class=\"keyword\">return</span> wrapper</code></pre><p>(sorry for the edit/delete, the thing freezes edits after a few minutes and I was working on something else in the middle!)</p>",
  "id": "5ba90488e6046343f3ac87b1",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-09-24T15:36:40.333Z",
  "text": "You could use:\n```\ntry:\n  from numba import jit\nexcept ImportError:\n  def jit(*args, **kwargs):\n      def wrapper(func):\n          return func\n      return wrapper\n```\n(sorry for the edit/delete, the thing freezes edits after a few minutes and I was working on something else in the middle!)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "Or set <a href=\"http://numba.pydata.org/numba-doc/dev/reference/envvars.html#envvar-NUMBA_DISABLE_JIT\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://numba.pydata.org/numba-doc/dev/reference/envvars.html#envvar-NUMBA_DISABLE_JIT</a>",
  "id": "5ba904945df5194734082293",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-09-24T15:36:52.869Z",
  "text": "Or set http://numba.pydata.org/numba-doc/dev/reference/envvars.html#envvar-NUMBA_DISABLE_JIT",
  "unread": false,
  "urls": [
   {
    "url": "http://numba.pydata.org/numba-doc/dev/reference/envvars.html#envvar-NUMBA_DISABLE_JIT"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/sk1p",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5778?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5778?v=4&s=60",
   "displayName": "Alexander Clausen",
   "gv": "4",
   "id": "5a53bb66d73408ce4f86f68d",
   "url": "/sk1p",
   "username": "sk1p",
   "v": 13
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"max9111\" class=\"mention\">@max9111</span> thanks again for the link to your stackoverflow answer regarding uint12 decoding, it indeed vectorizes well and is almost as fast as the C++ version! Our data is encoded a bit differently, see <a href=\"https://github.com/LiberTEM/LiberTEM/blob/20591691780725ddfb7a2f7181351d9babd44f63/src/libertem/io/dataset/k2is.py#L30\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://github.com/LiberTEM/LiberTEM/blob/20591691780725ddfb7a2f7181351d9babd44f63/src/libertem/io/dataset/k2is.py#L30</a> for the concrete implementation we are now using. Note the <code>out</code> parameter - that way we can decode into an existing buffer and get rid of allocation/initialization/... for each decode invocation. In the context of our software, we can now process ~9GB/s using the new decoding routine, up from ~5.9GB/s before (on a nice 18 core machine, using multiple processes).",
  "id": "5ba90977b4990c30ee0133c6",
  "issues": [],
  "mentions": [
   {
    "screenName": "max9111",
    "userId": "5a940f4cd73408ce4f8ee242",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 18,
  "sent": "2018-09-24T15:57:43.835Z",
  "text": "@max9111 thanks again for the link to your stackoverflow answer regarding uint12 decoding, it indeed vectorizes well and is almost as fast as the C++ version! Our data is encoded a bit differently, see https://github.com/LiberTEM/LiberTEM/blob/20591691780725ddfb7a2f7181351d9babd44f63/src/libertem/io/dataset/k2is.py#L30 for the concrete implementation we are now using. Note the `out` parameter - that way we can decode into an existing buffer and get rid of allocation/initialization/... for each decode invocation. In the context of our software, we can now process ~9GB/s using the new decoding routine, up from ~5.9GB/s before (on a nice 18 core machine, using multiple processes).",
  "unread": false,
  "urls": [
   {
    "url": "https://github.com/LiberTEM/LiberTEM/blob/20591691780725ddfb7a2f7181351d9babd44f63/src/libertem/io/dataset/k2is.py#L30"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/boustrephon",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/14007454?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/14007454?v=4&s=60",
   "displayName": "boustrephon",
   "gv": "4",
   "id": "5ba8d2f0d73408ce4fa92cfb",
   "url": "/boustrephon",
   "username": "boustrephon",
   "v": 7
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span> Thank you so much - that is just what I was looking for. No problem with the edits - it was night over here and I was asleep and awoke to the final answer. Thank you also for the DISABLE_JIT reference which I didn&#39;t know, but will definitely find useful.",
  "id": "5ba95ac0aedb375b9c3f30e5",
  "issues": [],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 18,
  "sent": "2018-09-24T21:44:32.051Z",
  "text": "@stuartarchibald Thank you so much - that is just what I was looking for. No problem with the edits - it was night over here and I was asleep and awoke to the final answer. Thank you also for the DISABLE_JIT reference which I didn't know, but will definitely find useful.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-09-24T22:32:05.487Z",
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/boustrephon",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/14007454?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/14007454?v=4&s=60",
   "displayName": "boustrephon",
   "gv": "4",
   "id": "5ba8d2f0d73408ce4fa92cfb",
   "url": "/boustrephon",
   "username": "boustrephon",
   "v": 7
  },
  "html": "<p><span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span> In conclusion:<br>For my algorithm and my setup (Jupyter on Win10 on a laptop), reporting time relative to plain (no jit)</p><ul>\n<li>60% - jitted stress function (no closure)</li>\n<li>72% - jitted stress function with unjitted closure</li>\n<li>52% - jitted stress function with jitted closure</li>\n<li>101% - inactive jitted stress function with inactive jitted closure</li>\n</ul>\n<p>My conclusion is that numba provides a significant benefit for this algorithm, and that providing the fake decoration as a failover only results in a minimal penalty. Therefore adding numba to this algorithm with the failover for code that does not support numba is a definite win. Thanks!</p>",
  "id": "5ba9650053c31c11115c714a",
  "issues": [],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 18,
  "sent": "2018-09-24T22:28:16.141Z",
  "text": "@stuartarchibald In conclusion:\nFor my algorithm and my setup (Jupyter on Win10 on a laptop), reporting time relative to plain (no jit)\n* 60% - jitted stress function (no closure)\n* 72% - jitted stress function with unjitted closure\n* 52% - jitted stress function with jitted closure\n* 101% - inactive jitted stress function with inactive jitted closure\n\nMy conclusion is that numba provides a significant benefit for this algorithm, and that providing the fake decoration as a failover only results in a minimal penalty. Therefore adding numba to this algorithm with the failover for code that does not support numba is a definite win. Thanks!",
  "unread": false,
  "urls": [],
  "v": 3
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"boustrephon\" class=\"mention\">@boustrephon</span> no problem, glad you got the result you were looking for :)",
  "id": "5ba96738fe37781110f11a4a",
  "issues": [],
  "mentions": [
   {
    "screenName": "boustrephon",
    "userId": "5ba8d2f0d73408ce4fa92cfb",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 19,
  "sent": "2018-09-24T22:37:44.302Z",
  "text": "@boustrephon no problem, glad you got the result you were looking for :)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/gavinpotter",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/41059217?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/41059217?v=4&s=60",
   "displayName": "gavinpotter",
   "gv": "4",
   "id": "5b44a52bd73408ce4fa04912",
   "url": "/gavinpotter",
   "username": "gavinpotter",
   "v": 2
  },
  "html": "Very nice job enabling the use of cupy - works perfectly on my Windows 10 64 machine.  Thanks.",
  "id": "5ba9ea3d4d320a463bedbd00",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-09-25T07:56:45.715Z",
  "text": "Very nice job enabling the use of cupy - works perfectly on my Windows 10 64 machine.  Thanks.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/gavinpotter",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/41059217?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/41059217?v=4&s=60",
   "displayName": "gavinpotter",
   "gv": "4",
   "id": "5b44a52bd73408ce4fa04912",
   "url": "/gavinpotter",
   "username": "gavinpotter",
   "v": 2
  },
  "html": "I have an algorithm that partly benefits from speedup on the gpu.  However, I want the ability to call the algorithm from a number of different threads in parallel.  I seem to be able to do either.  I can <span data-link-type=\"mention\" data-screen-name=\"njit\" class=\"mention\">@njit</span> the whole algorithm and run a number of different threads in parallel, or I can call (from python) the cuda enabled parts of the algorithm.  Is there any way to mix the two.  i.e. call a cuda jitted function from a algorithm that has been jitted on the cpu?  I&#39;ve tried various methods but can&#39;t find one that works.",
  "id": "5ba9eb6298245f4ae07dbb97",
  "issues": [],
  "mentions": [
   {
    "screenName": "njit",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 18,
  "sent": "2018-09-25T08:01:38.452Z",
  "text": "I have an algorithm that partly benefits from speedup on the gpu.  However, I want the ability to call the algorithm from a number of different threads in parallel.  I seem to be able to do either.  I can @njit the whole algorithm and run a number of different threads in parallel, or I can call (from python) the cuda enabled parts of the algorithm.  Is there any way to mix the two.  i.e. call a cuda jitted function from a algorithm that has been jitted on the cpu?  I've tried various methods but can't find one that works.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/gavinpotter",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/41059217?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/41059217?v=4&s=60",
   "displayName": "gavinpotter",
   "gv": "4",
   "id": "5b44a52bd73408ce4fa04912",
   "url": "/gavinpotter",
   "username": "gavinpotter",
   "v": 2
  },
  "html": "I&#39;ve explained myself badly.  Here is the minimal code to show you what I&#39;m trying to do.",
  "id": "5ba9eb887bd81c5b9dad8e19",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-09-25T08:02:16.128Z",
  "text": "I've explained myself badly.  Here is the minimal code to show you what I'm trying to do.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/gavinpotter",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/41059217?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/41059217?v=4&s=60",
   "displayName": "gavinpotter",
   "gv": "4",
   "id": "5b44a52bd73408ce4fa04912",
   "url": "/gavinpotter",
   "username": "gavinpotter",
   "v": 2
  },
  "html": "<p>import numba as nb<br>from numba import vectorize,cuda<br>import numpy as np</p><p><span data-link-type=\"mention\" data-screen-name=\"vectorize\" class=\"mention\">@vectorize</span>([&#39;float32,float32&#39;],target=&#39;cuda&#39;)<br>def TestCuda(a,b):<br>    return( a + b)</p><p><span data-link-type=\"mention\" data-screen-name=\"nb\" class=\"mention\">@nb</span>.njit()<br>def Test(a,b):<br>    return TestCuda(a,b)</p><p>a = np.ones(10,dtype = np.float32)<br>b = np.ones(10,dtype = np.float32)</p><p>c = Test(a,b)<br>print(c)</p>",
  "id": "5ba9eb90691dc567db9d5f75",
  "issues": [],
  "mentions": [
   {
    "screenName": "vectorize",
    "userIds": []
   },
   {
    "screenName": "nb",
    "userId": "531daee75e986b0712efdb58",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 18,
  "sent": "2018-09-25T08:02:24.369Z",
  "text": "import numba as nb\nfrom numba import vectorize,cuda\nimport numpy as np\n\n@vectorize(['float32,float32'],target='cuda')\ndef TestCuda(a,b):\n    return( a + b)\n\n@nb.njit()\ndef Test(a,b):\n    return TestCuda(a,b)\n\na = np.ones(10,dtype = np.float32)\nb = np.ones(10,dtype = np.float32)\n\nc = Test(a,b)\nprint(c)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/gavinpotter",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/41059217?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/41059217?v=4&s=60",
   "displayName": "gavinpotter",
   "gv": "4",
   "id": "5b44a52bd73408ce4fa04912",
   "url": "/gavinpotter",
   "username": "gavinpotter",
   "v": 2
  },
  "html": "<p>Finally, I&#39;m not sure whether this is a bug or a feature, but the np.where function doesn&#39;t broadcast scalars:<br>&#39;&#39;&#39;<br>import numba as nb<br>import numpy as np</p><p><span data-link-type=\"mention\" data-screen-name=\"nb\" class=\"mention\">@nb</span>.njit()<br>def Test(a):<br>    return np.where(a&lt;5,1,0)</p><p>a = np.arange(10)<br>print(np.where(a&lt;5,1,0))<br>b = Test(a)<br>print(b)</p>",
  "id": "5ba9ee72691dc567db9d7572",
  "issues": [],
  "mentions": [
   {
    "screenName": "nb",
    "userId": "531daee75e986b0712efdb58",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 19,
  "sent": "2018-09-25T08:14:42.855Z",
  "text": "Finally, I'm not sure whether this is a bug or a feature, but the np.where function doesn't broadcast scalars:\n'''\nimport numba as nb\nimport numpy as np\n\n@nb.njit()\ndef Test(a):\n    return np.where(a<5,1,0)\n\na = np.arange(10)\nprint(np.where(a<5,1,0))\nb = Test(a)\nprint(b)\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/gavinpotter",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/41059217?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/41059217?v=4&s=60",
   "displayName": "gavinpotter",
   "gv": "4",
   "id": "5b44a52bd73408ce4fa04912",
   "url": "/gavinpotter",
   "username": "gavinpotter",
   "v": 2
  },
  "html": "The call to test produces an error, but using where within python works fine.  Apologies, I can&#39;t seem to get the handle on the markdown to format the code.",
  "id": "5ba9eeb0691dc567db9d7755",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 20,
  "sent": "2018-09-25T08:15:44.886Z",
  "text": "The call to test produces an error, but using where within python works fine.  Apologies, I can't seem to get the handle on the markdown to format the code.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"gavinpotter\" class=\"mention\">@gavinpotter</span>, thanks <a target=\"_blank\" data-link-type=\"issue\" data-issue=\"3339\" href=\"https://github.com/numba/numba/issues/3339\" data-provider=\"github\" data-issue-repo=\"numba/numba\" class=\"issue\">numba/numba#3339</a>",
  "id": "5baa220f01fb5f4ae11d5c31",
  "issues": [
   {
    "number": "3339",
    "repo": "numba/numba"
   }
  ],
  "mentions": [
   {
    "screenName": "gavinpotter",
    "userId": "5b44a52bd73408ce4fa04912",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 20,
  "sent": "2018-09-25T11:54:55.958Z",
  "text": "@gavinpotter, thanks https://github.com/numba/numba/issues/3339",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"gavinpotter\" class=\"mention\">@gavinpotter</span> to get formatting to work, use triple backtick &#39;```&#39; ",
  "id": "5baa22252d1198709346f9b4",
  "issues": [],
  "mentions": [
   {
    "screenName": "gavinpotter",
    "userId": "5b44a52bd73408ce4fa04912",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 20,
  "sent": "2018-09-25T11:55:17.754Z",
  "text": "@gavinpotter to get formatting to work, use triple backtick '```' ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "as the start and end markers",
  "id": "5baa223141177e0bc7a3b54c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 20,
  "sent": "2018-09-25T11:55:29.668Z",
  "text": "as the start and end markers",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "Your question about njit and cuda made me think...",
  "id": "5baa2496aedb375b9c43bb9c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 21,
  "sent": "2018-09-25T12:05:42.751Z",
  "text": "Your question about njit and cuda made me think...",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "I don&#39;t think you can launch CUDA from njit <em>but</em> because Numba 0.40.0 has <code>with objmode</code> to allow jumping back into object mode, the launch could come from there.",
  "id": "5baa24f153c31c111160b189",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 22,
  "sent": "2018-09-25T12:07:13.103Z",
  "text": "I don't think you can launch CUDA from njit *but* because Numba 0.40.0 has `with objmode` to allow jumping back into object mode, the launch could come from there.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "I need to convince myself this does the right thing, but was thinking of something like this:<pre><code>import numpy as np\nfrom numba import vectorize, njit, objmode, prange\n\n@<span class=\"function\"><span class=\"title\">vectorize</span><span class=\"params\">([<span class=\"string\">'float32,float32'</span>],target=<span class=\"string\">'cuda'</span>)</span></span>\ndef <span class=\"function\"><span class=\"title\">TestCuda</span><span class=\"params\">(a,b)</span></span>:\n    <span class=\"function\"><span class=\"title\">return</span><span class=\"params\">( a + b)</span></span>\n\n@<span class=\"function\"><span class=\"title\">njit</span><span class=\"params\">(parallel=True, nogil=True)</span></span>\ndef <span class=\"function\"><span class=\"title\">Test</span><span class=\"params\">(a,b)</span></span>:\n    ret = [np.<span class=\"function\"><span class=\"title\">empty</span><span class=\"params\">(<span class=\"number\">0</span>, np.float32)</span></span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"function\"><span class=\"title\">range</span><span class=\"params\">(<span class=\"number\">10</span>)</span></span>]\n    <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"function\"><span class=\"title\">prange</span><span class=\"params\">(<span class=\"number\">10</span>)</span></span>:\n        with <span class=\"function\"><span class=\"title\">objmode</span><span class=\"params\">(tmp=<span class=\"string\">'float32[:]'</span>)</span></span>:\n            tmp = <span class=\"function\"><span class=\"title\">TestCuda</span><span class=\"params\">(a, b)</span></span>\n        ret[x] = np.<span class=\"function\"><span class=\"title\">ascontiguousarray</span><span class=\"params\">(tmp)</span></span>\n    return ret\n\n<span class=\"tag\">a</span> = np.<span class=\"function\"><span class=\"title\">ones</span><span class=\"params\">(<span class=\"number\">10</span>,dtype = np.float32)</span></span>\n<span class=\"tag\">b</span> = np.<span class=\"function\"><span class=\"title\">ones</span><span class=\"params\">(<span class=\"number\">10</span>,dtype = np.float32)</span></span>\n\nc = <span class=\"function\"><span class=\"title\">Test</span><span class=\"params\">(a,b)</span></span>\n<span class=\"function\"><span class=\"title\">print</span><span class=\"params\">(c)</span></span></code></pre>",
  "id": "5baa252a7bd81c5b9daeff65",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 22,
  "sent": "2018-09-25T12:08:10.737Z",
  "text": "I need to convince myself this does the right thing, but was thinking of something like this:\n```\nimport numpy as np\nfrom numba import vectorize, njit, objmode, prange\n\n@vectorize(['float32,float32'],target='cuda')\ndef TestCuda(a,b):\n    return( a + b)\n\n@njit(parallel=True, nogil=True)\ndef Test(a,b):\n    ret = [np.empty(0, np.float32) for x in range(10)]\n    for x in prange(10):\n        with objmode(tmp='float32[:]'):\n            tmp = TestCuda(a, b)\n        ret[x] = np.ascontiguousarray(tmp)\n    return ret\n\na = np.ones(10,dtype = np.float32)\nb = np.ones(10,dtype = np.float32)\n\nc = Test(a,b)\nprint(c)\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "But the GIL might be reacquired in the objmode block, ping <span data-link-type=\"mention\" data-screen-name=\"sklam\" class=\"mention\">@sklam</span> ?",
  "id": "5baa28927bd81c5b9daf1492",
  "issues": [],
  "mentions": [
   {
    "screenName": "sklam",
    "userId": "55b689f50fc9f982beab2a24",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 22,
  "sent": "2018-09-25T12:22:42.889Z",
  "text": "But the GIL might be reacquired in the objmode block, ping @sklam ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 7
  },
  "html": "Yes, it acquires the GIL. I need to try this myself",
  "id": "5baa3ed44d320a463befc853",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 22,
  "sent": "2018-09-25T13:57:40.754Z",
  "text": "Yes, it acquires the GIL. I need to try this myself",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "I was quite surprised it worked at all.",
  "id": "5baa43c88ddf5867dc703b83",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 22,
  "sent": "2018-09-25T14:18:48.984Z",
  "text": "I was quite surprised it worked at all.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/gavinpotter",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/41059217?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/41059217?v=4&s=60",
   "displayName": "gavinpotter",
   "gv": "4",
   "id": "5b44a52bd73408ce4fa04912",
   "url": "/gavinpotter",
   "username": "gavinpotter",
   "v": 2
  },
  "html": "I guess if the GIL is re-acquired then I lose the benefits of the parallel working.  Pity, that was looking very close to what I needed.  Thanks.",
  "id": "5baa4df97bd81c5b9db009fd",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 22,
  "sent": "2018-09-25T15:02:17.391Z",
  "text": "I guess if the GIL is re-acquired then I lose the benefits of the parallel working.  Pity, that was looking very close to what I needed.  Thanks.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/fschlimb",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1215821?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1215821?v=4&s=60",
   "displayName": "Frank Schlimbach",
   "gv": "4",
   "id": "5a8a99f7d73408ce4f8dbfb7",
   "url": "/fschlimb",
   "username": "fschlimb",
   "v": 4
  },
  "html": "Q: For my boxing function I need to convert a native pointer type (opaque model) to a Python integer. What&#39;s the best way to do this?",
  "id": "5badf77b8196693171c9a106",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 21,
  "sent": "2018-09-28T09:42:19.697Z",
  "text": "Q: For my boxing function I need to convert a native pointer type (opaque model) to a Python integer. What's the best way to do this?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/fschlimb",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/1215821?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/1215821?v=4&s=60",
   "displayName": "Frank Schlimbach",
   "gv": "4",
   "id": "5a8a99f7d73408ce4f8dbfb7",
   "url": "/fschlimb",
   "username": "fschlimb",
   "v": 4
  },
  "html": "Don&#39;t bother, found it.",
  "id": "5bae1bc74d320a463b08ec6e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 21,
  "sent": "2018-09-28T12:17:11.111Z",
  "text": "Don't bother, found it.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "Hmm, this doc says <a href=\"https://numba.pydata.org/numba-doc/dev/reference/numpysupported.html\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://numba.pydata.org/numba-doc/dev/reference/numpysupported.html</a>   <code>sort</code> is only supported without any argument. How can I do DESC sorting?   ",
  "id": "5baee5df271506518d8ca2fd",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 21,
  "sent": "2018-09-29T02:39:27.187Z",
  "text": "Hmm, this doc says https://numba.pydata.org/numba-doc/dev/reference/numpysupported.html   `sort` is only supported without any argument. How can I do DESC sorting?   ",
  "unread": false,
  "urls": [
   {
    "url": "https://numba.pydata.org/numba-doc/dev/reference/numpysupported.html"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/albop",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/276777?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/276777?v=4&s=60",
   "displayName": "Pablo Winant",
   "gv": "4",
   "id": "55ef21560fc9f982beb00961",
   "url": "/albop",
   "username": "albop",
   "v": 28
  },
  "html": "Hi!",
  "id": "5bba56aee65a6343369a8190",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-10-07T18:55:42.817Z",
  "text": "Hi!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/albop",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/276777?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/276777?v=4&s=60",
   "displayName": "Pablo Winant",
   "gv": "4",
   "id": "55ef21560fc9f982beb00961",
   "url": "/albop",
   "username": "albop",
   "v": 28
  },
  "html": "I have a njitable function <code>interp(x,extrap)</code> which is fairly computationally intensive. extrap is meant to be a constant governing several conditional statements in the function. It is an option which is typically known at compile time. I&#39;m really scratching my head around what extrap should be. Should it be a constant string? Should each value of extrap have different types? Using <code>@generated_jit</code> to implement different versions of interp doesn&#39;t work very well as it would imply a lot of code duplications.",
  "id": "5bba5ebc1c100a4f29469d52",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-10-07T19:30:04.936Z",
  "text": "I have a njitable function `interp(x,extrap)` which is fairly computationally intensive. extrap is meant to be a constant governing several conditional statements in the function. It is an option which is typically known at compile time. I'm really scratching my head around what extrap should be. Should it be a constant string? Should each value of extrap have different types? Using `@generated_jit` to implement different versions of interp doesn't work very well as it would imply a lot of code duplications.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/albop",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/276777?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/276777?v=4&s=60",
   "displayName": "Pablo Winant",
   "gv": "4",
   "id": "55ef21560fc9f982beb00961",
   "url": "/albop",
   "username": "albop",
   "v": 28
  },
  "html": "Do you know which approach I should follow?",
  "id": "5bba5ed3435c2a518e67eb6e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-10-07T19:30:27.395Z",
  "text": "Do you know which approach I should follow?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/whiletruelearn",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/1977850?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/1977850?v=4&s=60",
   "displayName": "Krishna Sangeeth",
   "gv": "4",
   "id": "54fdd51a15522ed4b3dd04b7",
   "url": "/whiletruelearn",
   "username": "whiletruelearn",
   "v": 7
  },
  "html": "<p><span data-link-type=\"mention\" data-screen-name=\"here\" class=\"mention\">@here</span> Is it possible to use  <code>ufunc</code> feature to vectorize a function that takes string as input and does some operation on it. </p><p>I am trying to do something like this.</p><pre><code><span class=\"decorator\">@vectorize</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">vectorized_preprocessor</span><span class=\"params\">(x)</span>:</span>\n    <span class=\"keyword\">return</span> pp.preprocess(x)</code></pre><p>Currently it complains about <code>TypeError: return type must be specified for object mode</code> . Couldn&#39;t see much in docs to see how return types can be specified.</p>",
  "id": "5bbd9a536e5a401c2d4686fa",
  "issues": [],
  "mentions": [
   {
    "screenName": "here",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 13,
  "sent": "2018-10-10T06:21:07.142Z",
  "text": "@here Is it possible to use  `ufunc` feature to vectorize a function that takes string as input and does some operation on it. \n\nI am trying to do something like this.\n\n```\n@vectorize\ndef vectorized_preprocessor(x):\n    return pp.preprocess(x)\n```\n\nCurrently it complains about `TypeError: return type must be specified for object mode` . Couldn't see much in docs to see how return types can be specified.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "vectorize is designed to work with NumPy arrays.  It isn&#39;t going to be useful for string processing.  (String support is also currently very limited in Numba)",
  "id": "5bbe3074c7bf7c3662ea507f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-10-10T17:01:40.777Z",
  "text": "vectorize is designed to work with NumPy arrays.  It isn't going to be useful for string processing.  (String support is also currently very limited in Numba)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "The perf result looks a bit confusing  <a href=\"https://la.wentropy.com/w-ER.html\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://la.wentropy.com/w-ER.html</a>",
  "id": "5bbf0474600c5f64238c5ca0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2018-10-11T08:06:12.111Z",
  "text": "The perf result looks a bit confusing  https://la.wentropy.com/w-ER.html\n",
  "unread": false,
  "urls": [
   {
    "url": "https://la.wentropy.com/w-ER.html"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "It&#39;s a simple loop over a jitted function. I wonder why it takes 200% cpu and all those <code>mkl_blas_avx2_xdcopy</code> stuff come from",
  "id": "5bbf04a3bbdc0b2505202b2d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2018-10-11T08:06:59.572Z",
  "text": "It's a simple loop over a jitted function. I wonder why it takes 200% cpu and all those `mkl_blas_avx2_xdcopy` stuff come from",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"albop\" class=\"mention\">@albop</span> could you just use a closure to generate specialisations?",
  "id": "5bbf164882893a2f3bc9ce5e",
  "issues": [],
  "mentions": [
   {
    "screenName": "albop",
    "userId": "55ef21560fc9f982beb00961",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 4,
  "sent": "2018-10-11T09:22:16.822Z",
  "text": "@albop could you just use a closure to generate specialisations?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"amosbird\" class=\"mention\">@amosbird</span> can you share your function? Numba uses SciPy&#39;s cython bindings to LAPACK for anything involving <code>np.linalg</code>, which is one potential source of MKL calls (Anaconda SciPy is linked against MKL). Also, Anaconda NumPy is backed by MKL for <code>ufuncs</code>, <code>np.linalg</code>, FFTs, RNG calls and a few other things . MKL is multithreaded and dispatches based on your CPU architecture, so it looks like something you were running was copying some memory (xdcopy), your CPU supports avx2, and there was enough work to keep 2 cores busy.",
  "id": "5bbf17c21c100a4f29684a89",
  "issues": [],
  "mentions": [
   {
    "screenName": "amosbird",
    "userId": "54e48ded15522ed4b3dc26b7",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 4,
  "sent": "2018-10-11T09:28:34.605Z",
  "text": "@amosbird can you share your function? Numba uses SciPy's cython bindings to LAPACK for anything involving `np.linalg`, which is one potential source of MKL calls (Anaconda SciPy is linked against MKL). Also, Anaconda NumPy is backed by MKL for `ufuncs`, `np.linalg`, FFTs, RNG calls and a few other things . MKL is multithreaded and dispatches based on your CPU architecture, so it looks like something you were running was copying some memory (xdcopy), your CPU supports avx2, and there was enough work to keep 2 cores busy.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/albop",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/276777?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/276777?v=4&s=60",
   "displayName": "Pablo Winant",
   "gv": "4",
   "id": "55ef21560fc9f982beb00961",
   "url": "/albop",
   "username": "albop",
   "v": 28
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span> : I don&#39;t get it. Maybe I don&#39;t understand, maybe I wasn&#39;t precise enough. The function I have looks something like ",
  "id": "5bbf1d9dc7bf7c3662f0c450",
  "issues": [],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 4,
  "sent": "2018-10-11T09:53:33.950Z",
  "text": "@stuartarchibald : I don't get it. Maybe I don't understand, maybe I wasn't precise enough. The function I have looks something like ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/albop",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/276777?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/276777?v=4&s=60",
   "displayName": "Pablo Winant",
   "gv": "4",
   "id": "55ef21560fc9f982beb00961",
   "url": "/albop",
   "username": "albop",
   "v": 28
  },
  "html": "<pre><code><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">interp</span><span class=\"params\">(x, c, extrap)</span>:</span>\n\n  <span class=\"comment\"># done only for certain types of extrap</span>\n  <span class=\"keyword\">if</span> isinstance(extrap, Constant):\n    project(x)\n\n  barycenter = get_barycenters(x, extrap)\n  coefs = extract_coefs(c, extrap)\n\n  res = combine(barycenter, coefs)\n  ...</code></pre>",
  "id": "5bbf1da6c08b8b3067fe82f6",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 8,
  "sent": "2018-10-11T09:53:42.140Z",
  "text": "```\ndef interp(x, c, extrap):\n\n  # done only for certain types of extrap\n  if isinstance(extrap, Constant):\n    project(x)\n\n  barycenter = get_barycenters(x, extrap)\n  coefs = extract_coefs(c, extrap)\n  \n  res = combine(barycenter, coefs)\n  ...\n\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/albop",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/276777?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/276777?v=4&s=60",
   "displayName": "Pablo Winant",
   "gv": "4",
   "id": "55ef21560fc9f982beb00961",
   "url": "/albop",
   "username": "albop",
   "v": 28
  },
  "html": "it calls many subfunctions, where some of them have a different behaviour depending on the type of extrap. There are lots of branches which could be written liek the isinstance if. Of course that doesn&#39;t run so I ended up generating different versions of each of the functions to allow for additional argument extrap but it became a bit tedious.",
  "id": "5bbf1e6c38449236611e1472",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 8,
  "sent": "2018-10-11T09:57:00.911Z",
  "text": "it calls many subfunctions, where some of them have a different behaviour depending on the type of extrap. There are lots of branches which could be written liek the isinstance if. Of course that doesn't run so I ended up generating different versions of each of the functions to allow for additional argument extrap but it became a bit tedious.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/albop",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/276777?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/276777?v=4&s=60",
   "displayName": "Pablo Winant",
   "gv": "4",
   "id": "55ef21560fc9f982beb00961",
   "url": "/albop",
   "username": "albop",
   "v": 28
  },
  "html": "I also tried to generate a function <code>sameclass(obj1, obj2)</code> which always returns true when the objects are in the same class. That way the isinstance check can be replaced by <code>if sameclass(extrap, Constant): project(x)</code> and it becomes somewhat equivalent to  <code>if (lambda x,y: True)(extrap, Constant): project(x)</code>. But I saw that this kind of branch is not optimized away and incurs a performance cost.",
  "id": "5bbf1f1de65a634336bc7d1f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 8,
  "sent": "2018-10-11T09:59:57.417Z",
  "text": "I also tried to generate a function `sameclass(obj1, obj2)` which always returns true when the objects are in the same class. That way the isinstance check can be replaced by `if sameclass(extrap, Constant): project(x)` and it becomes somewhat equivalent to  `if (lambda x,y: True)(extrap, Constant): project(x)`. But I saw that this kind of branch is not optimized away and incurs a performance cost.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/albop",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/276777?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/276777?v=4&s=60",
   "displayName": "Pablo Winant",
   "gv": "4",
   "id": "55ef21560fc9f982beb00961",
   "url": "/albop",
   "username": "albop",
   "v": 28
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span> : How would you proceed with closures ?",
  "id": "5bbf1f60c7bf7c3662f0d0e8",
  "issues": [],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 8,
  "sent": "2018-10-11T10:01:04.615Z",
  "text": "@stuartarchibald : How would you proceed with closures ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"albop\" class=\"mention\">@albop</span> thanks for the extra info, so you are trying to <code>@jit</code> the <code>interp</code> function? What type is <code>extrap</code> and <code>Constant</code> ?",
  "id": "5bbf2022f659e6777298a817",
  "issues": [],
  "mentions": [
   {
    "screenName": "albop",
    "userId": "55ef21560fc9f982beb00961",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 8,
  "sent": "2018-10-11T10:04:18.191Z",
  "text": "@albop thanks for the extra info, so you are trying to `@jit` the `interp` function? What type is `extrap` and `Constant` ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-10-11T10:16:43.345Z",
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/albop",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/276777?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/276777?v=4&s=60",
   "displayName": "Pablo Winant",
   "gv": "4",
   "id": "55ef21560fc9f982beb00961",
   "url": "/albop",
   "username": "albop",
   "v": 28
  },
  "html": "Yes, interp must be njitted and will be called from njitted loops. I can choose what extrap is: I&#39;m trying to give user options.  I think a string option, wouldn&#39;t work here, so I thought about creating dummy types, just to help the type dispatch. I could create a set of option types like <code>Constant</code>, <code>Linear</code>or something like that so that users would call <code>interp(x,c,Linear())</code>",
  "id": "5bbf22e938449236611e35ed",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 8,
  "sent": "2018-10-11T10:16:09.729Z",
  "text": "Yes, interp must be njitted and will be called from njitted loops. I can choose what extrap is: I'm trying to give user options.  I think a string option, wouldn't work here, so I thought about creating dummy types, just to help the type dispatch. I could create a set of option types like `Constant`, `Linear`or something like that so that users would call `interp(x,c,Linear())`",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "hmmm, is <code>extrap</code> just being used to select something, i.e.  its just a flag?",
  "id": "5bbf2564435c2a518e89ff80",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 8,
  "sent": "2018-10-11T10:26:44.892Z",
  "text": "hmmm, is `extrap` just being used to select something, i.e.  its just a flag?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"albop\" class=\"mention\">@albop</span> does this sort of thing help:<pre><code><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np\n<span class=\"keyword\">from</span> numba <span class=\"keyword\">import</span> njit\n\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_barycenters_generator</span><span class=\"params\">(extrap)</span>:</span>\n    <span class=\"keyword\">if</span> <span class=\"string\">'extrap'</span> == <span class=\"string\">'linear'</span>:\n<span class=\"decorator\">        @njit</span>\n        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">impl</span><span class=\"params\">(x)</span>:</span>\n            <span class=\"keyword\">return</span> x + <span class=\"number\">1</span>\n    <span class=\"keyword\">else</span>:\n<span class=\"decorator\">        @njit</span>\n        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">impl</span><span class=\"params\">(x)</span>:</span>\n            <span class=\"keyword\">return</span> np.sqrt(x)\n    <span class=\"keyword\">return</span> impl\n\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">extract_coefs_generator</span><span class=\"params\">(extrap)</span>:</span>\n    <span class=\"keyword\">if</span> <span class=\"string\">'extrap'</span> == <span class=\"string\">'linear'</span>:\n<span class=\"decorator\">        @njit</span>\n        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">impl</span><span class=\"params\">(c)</span>:</span>\n            <span class=\"keyword\">return</span> <span class=\"number\">19</span> + c\n    <span class=\"keyword\">else</span>:\n<span class=\"decorator\">        @njit</span>\n        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">impl</span><span class=\"params\">(c)</span>:</span>\n            <span class=\"keyword\">return</span> <span class=\"number\">23</span> + c\n    <span class=\"keyword\">return</span> impl\n\n<span class=\"decorator\">@njit</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">combine</span><span class=\"params\">(x, c)</span>:</span>\n    <span class=\"keyword\">return</span> x + c\n\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">interp_generator</span><span class=\"params\">(x, c, extrap)</span>:</span>\n    get_barycenters = get_barycenters_generator(extrap)\n    extract_coefs = extract_coefs_generator(extrap)\n\n    <span class=\"comment\"># this function is the implementation</span>\n<span class=\"decorator\">    @njit</span>\n    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">impl</span><span class=\"params\">(x, c)</span>:</span>\n        barycenter = get_barycenters(x)\n        coefs = extract_coefs(c)\n\n        res = combine(barycenter, coefs)\n        <span class=\"keyword\">return</span> res\n    <span class=\"keyword\">return</span> impl\n\n\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">outer_loop_func</span><span class=\"params\">(n, x, c, extrap)</span>:</span>\n    interp = interp_generator(x, c, extrap)\n<span class=\"decorator\">    @njit</span>\n    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">impl</span><span class=\"params\">(n, x, c)</span>:</span>\n        acc = <span class=\"number\">0.</span>\n        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n):\n            acc += interp(x, c).sum()\n    <span class=\"keyword\">return</span> impl(n, x, c)\n\n\nn = <span class=\"number\">3</span>\nx = np.zeros(<span class=\"number\">4</span>)\nc = <span class=\"number\">7.</span>\nextrap = <span class=\"string\">'linear'</span>\nouter_loop_func(n, x, c, extrap)</code></pre>",
  "id": "5bbf27e7271506518df247e2",
  "issues": [],
  "mentions": [
   {
    "screenName": "albop",
    "userId": "55ef21560fc9f982beb00961",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 8,
  "sent": "2018-10-11T10:37:27.735Z",
  "text": "@albop does this sort of thing help:\n```\nimport numpy as np\nfrom numba import njit\n\ndef get_barycenters_generator(extrap):\n    if 'extrap' == 'linear':\n        @njit\n        def impl(x):\n            return x + 1\n    else:\n        @njit\n        def impl(x):\n            return np.sqrt(x)\n    return impl\n\ndef extract_coefs_generator(extrap):\n    if 'extrap' == 'linear':\n        @njit\n        def impl(c):\n            return 19 + c\n    else:\n        @njit\n        def impl(c):\n            return 23 + c\n    return impl\n\n@njit\ndef combine(x, c):\n    return x + c\n\ndef interp_generator(x, c, extrap):\n    get_barycenters = get_barycenters_generator(extrap)\n    extract_coefs = extract_coefs_generator(extrap)\n\n    # this function is the implementation\n    @njit\n    def impl(x, c):\n        barycenter = get_barycenters(x)\n        coefs = extract_coefs(c)\n\n        res = combine(barycenter, coefs)\n        return res\n    return impl\n\n\ndef outer_loop_func(n, x, c, extrap):\n    interp = interp_generator(x, c, extrap)\n    @njit\n    def impl(n, x, c):\n        acc = 0.\n        for i in range(n):\n            acc += interp(x, c).sum()\n    return impl(n, x, c)\n\n\nn = 3\nx = np.zeros(4)\nc = 7.\nextrap = 'linear'\nouter_loop_func(n, x, c, extrap)\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span> sure",
  "id": "5bbf2d97271506518df27138",
  "issues": [],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 8,
  "sent": "2018-10-11T11:01:43.633Z",
  "text": "@stuartarchibald sure",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "<pre><code class=\"python\"><span class=\"decorator\">@njit(nogil=True, cache=True)</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(graph, s)</span>:</span>\n    flags = numpy.full((graph.vertex_num,), numpy.uint8(<span class=\"number\">0</span>))\n    q = [numpy.uint32(s)]\n    flags[<span class=\"number\">1</span>] = <span class=\"number\">1</span>\n    cnt = numpy.uint32(<span class=\"number\">0</span>)\n    <span class=\"keyword\">while</span> len(q) &gt; <span class=\"number\">0</span>:\n        q2 = []\n        <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> q:\n            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(graph.gout.offsets[v] - graph.gout.degrees[v], graph.gout.offsets[v]):\n                v2 = graph.gout.data[i]\n                <span class=\"keyword\">if</span> flags[v2]:\n                    <span class=\"keyword\">continue</span>\n                flags[v2] = <span class=\"number\">1</span>\n                q2.append(v2)\n        q = q2\n        cnt += <span class=\"number\">1</span>\n    print(cnt)\n    <span class=\"keyword\">return</span> flags</code></pre>",
  "id": "5bbf2d9bef4afc4f28559513",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 8,
  "sent": "2018-10-11T11:01:47.527Z",
  "text": "```python\n@njit(nogil=True, cache=True)\ndef run(graph, s):\n    flags = numpy.full((graph.vertex_num,), numpy.uint8(0))\n    q = [numpy.uint32(s)]\n    flags[1] = 1\n    cnt = numpy.uint32(0)\n    while len(q) > 0:\n        q2 = []\n        for v in q:\n            for i in range(graph.gout.offsets[v] - graph.gout.degrees[v], graph.gout.offsets[v]):\n                v2 = graph.gout.data[i]\n                if flags[v2]:\n                    continue\n                flags[v2] = 1\n                q2.append(v2)\n        q = q2\n        cnt += 1\n    print(cnt)\n    return flags\n\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "btw, <code>nogil</code> doesn&#39;t release the GIL holded in c++ code",
  "id": "5bbf2dc382893a2f3bca3550",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 8,
  "sent": "2018-10-11T11:02:27.896Z",
  "text": "btw, `nogil` doesn't release the GIL holded in c++ code",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"amosbird\" class=\"mention\">@amosbird</span> hmmm, nothing there that jumps out as a MKL call. If you profile your code without the <code>njit</code> function running does it still have the call present?",
  "id": "5bbf2f4e271506518df27e99",
  "issues": [],
  "mentions": [
   {
    "screenName": "amosbird",
    "userId": "54e48ded15522ed4b3dc26b7",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 8,
  "sent": "2018-10-11T11:09:02.035Z",
  "text": "@amosbird hmmm, nothing there that jumps out as a MKL call. If you profile your code without the `njit` function running does it still have the call present?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "hmm, lemme see",
  "id": "5bbf2fc9bbdc0b2505217426",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2018-10-11T11:11:05.450Z",
  "text": "hmm, lemme see",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "The thing is, the <code>njit</code> function is the only python function ",
  "id": "5bbf307de65a634336bd026f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2018-10-11T11:14:05.068Z",
  "text": "The thing is, the `njit` function is the only python function ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "I&#39;m invoking it in c++",
  "id": "5bbf3082ef4afc4f2855aecc",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2018-10-11T11:14:10.289Z",
  "text": "I'm invoking it in c++",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "right, so you&#39;ve nothing else that links to MKL ?",
  "id": "5bbf309ee65a634336bd03e2",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2018-10-11T11:14:38.253Z",
  "text": "right, so you've nothing else that links to MKL ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "I just commented <code>run</code>&#39;s body out",
  "id": "5bbf30a2ae7be940163a7f08",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2018-10-11T11:14:42.370Z",
  "text": "I just commented `run`'s body out",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "now it&#39;s  weirder",
  "id": "5bbf30b0271506518df28a4b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2018-10-11T11:14:56.140Z",
  "text": "now it's  weirder",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "it now takes 2000% cpu",
  "id": "5bbf30ce38449236611e9eb8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-10-11T11:15:26.044Z",
  "text": "it now takes 2000% cpu",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "<a href=\"https://la.wentropy.com/Wvnu.png\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://la.wentropy.com/Wvnu.png</a>",
  "id": "5bbf30d21c100a4f29690347",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-10-11T11:15:30.100Z",
  "text": "https://la.wentropy.com/Wvnu.png",
  "unread": false,
  "urls": [
   {
    "url": "https://la.wentropy.com/Wvnu.png"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "and flamegraph <a href=\"http://la.wentropy.com/1KMb.html\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://la.wentropy.com/1KMb.html</a>",
  "id": "5bbf30e7c7bf7c3662f156ab",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-10-11T11:15:51.931Z",
  "text": "and flamegraph http://la.wentropy.com/1KMb.html\n",
  "unread": false,
  "urls": [
   {
    "url": "http://la.wentropy.com/1KMb.html"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "sounds like something is broken",
  "id": "5bbf30eb435c2a518e8a6589",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-10-11T11:15:55.576Z",
  "text": "sounds like something is broken",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "the c++ side only has one thread",
  "id": "5bbf3103f659e677729927da",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-10-11T11:16:19.345Z",
  "text": "the c++ side only has one thread",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "looping this <code>njit</code> function ",
  "id": "5bbf310c271506518df28ce8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-10-11T11:16:28.629Z",
  "text": "looping this `njit` function ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "if you get rid of the cache,and return a constant, do you get the same behaviour ?",
  "id": "5bbf3159271506518df28fc5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-10-11T11:17:45.269Z",
  "text": "if you get rid of the cache,and return a constant, do you get the same behaviour ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "removing cache doesn&#39;t change the behavior",
  "id": "5bbf324138449236611eae46",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-10-11T11:21:37.866Z",
  "text": "removing cache doesn't change the behavior",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "lemme try returning a constant",
  "id": "5bbf3247ef4afc4f2855bbc4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-10-11T11:21:43.921Z",
  "text": "lemme try returning a constant",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "nope, still the same",
  "id": "5bbf32d6e65a634336bd1389",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-10-11T11:24:06.295Z",
  "text": "nope, still the same",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "How are you generating the data to go into the function?",
  "id": "5bbf3342600c5f64238dc1f1",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-10-11T11:25:54.331Z",
  "text": "How are you generating the data to go into the function?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "Is NumPy involved?",
  "id": "5bbf334fae7be940163a94c1",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-10-11T11:26:07.076Z",
  "text": "Is NumPy involved?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "namedtuple",
  "id": "5bbf3351ef4afc4f2855c200",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-10-11T11:26:09.614Z",
  "text": "namedtuple",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "yea",
  "id": "5bbf3353600c5f64238dc213",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-10-11T11:26:11.430Z",
  "text": "yea",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "hmm...",
  "id": "5bbf335a6e5a401c2d522c61",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-10-11T11:26:18.456Z",
  "text": "hmm...",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "it&#39;s a bunch of numpy array",
  "id": "5bbf336638449236611eb78f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-10-11T11:26:30.855Z",
  "text": "it's a bunch of numpy array",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "I thought it&#39;s passing by reference",
  "id": "5bbf3377c7bf7c3662f16901",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-10-11T11:26:47.354Z",
  "text": "I thought it's passing by reference",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/albop",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/276777?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/276777?v=4&s=60",
   "displayName": "Pablo Winant",
   "gv": "4",
   "id": "55ef21560fc9f982beb00961",
   "url": "/albop",
   "username": "albop",
   "v": 28
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span> this would indeed work. But it still look a bit tedious to me. The <code>get_function</code> approach allows you two use strings instead of dispatch types but forces you to write two lines instaed of one in the end code (to select the function and then to apply it). By constrast, passing a type instead let you use the <code>generated_jit</code> keyword instead, which in my view produces more transparent code overall. For instance the first function would just be:",
  "id": "5bbf3396ae7be940163a9721",
  "issues": [],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 11,
  "sent": "2018-10-11T11:27:18.590Z",
  "text": "@stuartarchibald this would indeed work. But it still look a bit tedious to me. The `get_function` approach allows you two use strings instead of dispatch types but forces you to write two lines instaed of one in the end code (to select the function and then to apply it). By constrast, passing a type instead let you use the `generated_jit` keyword instead, which in my view produces more transparent code overall. For instance the first function would just be:",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/albop",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/276777?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/276777?v=4&s=60",
   "displayName": "Pablo Winant",
   "gv": "4",
   "id": "55ef21560fc9f982beb00961",
   "url": "/albop",
   "username": "albop",
   "v": 28
  },
  "html": "<pre><code><span class=\"decorator\">@generated_jit</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">barycenters_generator</span><span class=\"params\">(extrap)</span>:</span>\n    <span class=\"keyword\">if</span> isinstance(extrap, Llinear:\n        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">impl</span><span class=\"params\">(x)</span>:</span>\n            <span class=\"keyword\">return</span> x + <span class=\"number\">1</span>\n    <span class=\"keyword\">else</span>:\n        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">impl</span><span class=\"params\">(x)</span>:</span>\n            <span class=\"keyword\">return</span> np.sqrt(x)\n    <span class=\"keyword\">return</span> impl</code></pre>",
  "id": "5bbf33d6c7bf7c3662f16e59",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-10-11T11:28:22.002Z",
  "text": "```\n@generated_jit\ndef barycenters_generator(extrap):\n    if isinstance(extrap, Llinear:\n        def impl(x):\n            return x + 1\n    else:\n        def impl(x):\n            return np.sqrt(x)\n    return impl\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"amosbird\" class=\"mention\">@amosbird</span> right, well Anaconda NumPy is backed by MKL, so I&#39;d guess the perf is picking up a call to BLAS dcopy() during the creation of the arrays, which ends up as the MKL AVX call.",
  "id": "5bbf33e9f659e67772993e23",
  "issues": [],
  "mentions": [
   {
    "screenName": "amosbird",
    "userId": "54e48ded15522ed4b3dc26b7",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 11,
  "sent": "2018-10-11T11:28:41.505Z",
  "text": "@amosbird right, well Anaconda NumPy is backed by MKL, so I'd guess the perf is picking up a call to BLAS dcopy() during the creation of the arrays, which ends up as the MKL AVX call.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "i see.. how can I avoid that? as those numpy arrays are just pointer wrappers",
  "id": "5bbf3405c7bf7c3662f17013",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-10-11T11:29:09.334Z",
  "text": "i see.. how can I avoid that? as those numpy arrays are just pointer wrappers",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "I&#39;d like to pass pointers from c++ directly into <code>njit</code> functions",
  "id": "5bbf34171c100a4f29691cfa",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-10-11T11:29:27.362Z",
  "text": "I'd like to pass pointers from c++ directly into `njit` functions",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"amosbird\" class=\"mention\">@amosbird</span> are they wrapping, or are they copying for ownership /",
  "id": "5bbf3444bbdc0b25052194f7",
  "issues": [],
  "mentions": [
   {
    "screenName": "amosbird",
    "userId": "54e48ded15522ed4b3dc26b7",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 11,
  "sent": "2018-10-11T11:30:12.378Z",
  "text": "@amosbird are they wrapping, or are they copying for ownership /",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "wrapping",
  "id": "5bbf344d271506518df2a468",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-10-11T11:30:21.941Z",
  "text": "wrapping",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/albop",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/276777?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/276777?v=4&s=60",
   "displayName": "Pablo Winant",
   "gv": "4",
   "id": "55ef21560fc9f982beb00961",
   "url": "/albop",
   "username": "albop",
   "v": 28
  },
  "html": "and it makes things complicated everytime you want to include your function in another one. For isntance, with your version, what if I want to define another function which reuses outer_loop_fun ? Then I need to redefine another version, which I will then need to call twice ",
  "id": "5bbf34556e5a401c2d52324f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-10-11T11:30:29.761Z",
  "text": "and it makes things complicated everytime you want to include your function in another one. For isntance, with your version, what if I want to define another function which reuses outer_loop_fun ? Then I need to redefine another version, which I will then need to call twice ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"amosbird\" class=\"mention\">@amosbird</span> perhaps launch in gdb, break on the MKL function and backtrace",
  "id": "5bbf346a435c2a518e8a8088",
  "issues": [],
  "mentions": [
   {
    "screenName": "amosbird",
    "userId": "54e48ded15522ed4b3dc26b7",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 11,
  "sent": "2018-10-11T11:30:50.432Z",
  "text": "@amosbird perhaps launch in gdb, break on the MKL function and backtrace",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/albop",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/276777?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/276777?v=4&s=60",
   "displayName": "Pablo Winant",
   "gv": "4",
   "id": "55ef21560fc9f982beb00961",
   "url": "/albop",
   "username": "albop",
   "v": 28
  },
  "html": "(much much easier, if somebody tells me how to enter a new line without sending the comment...)",
  "id": "5bbf3482271506518df2a6a4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-10-11T11:31:14.832Z",
  "text": "(much much easier, if somebody tells me how to enter a new line without sending the comment...)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"albop\" class=\"mention\">@albop</span> CTRL+Enter",
  "id": "5bbf3492271506518df2a6b7",
  "issues": [],
  "mentions": [
   {
    "screenName": "albop",
    "userId": "55ef21560fc9f982beb00961",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 11,
  "sent": "2018-10-11T11:31:30.512Z",
  "text": "@albop CTRL+Enter",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/albop",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/276777?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/276777?v=4&s=60",
   "displayName": "Pablo Winant",
   "gv": "4",
   "id": "55ef21560fc9f982beb00961",
   "url": "/albop",
   "username": "albop",
   "v": 28
  },
  "html": "thx",
  "id": "5bbf349ae65a634336bd2238",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-10-11T11:31:38.472Z",
  "text": "thx",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/albop",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/276777?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/276777?v=4&s=60",
   "displayName": "Pablo Winant",
   "gv": "4",
   "id": "55ef21560fc9f982beb00961",
   "url": "/albop",
   "username": "albop",
   "v": 28
  },
  "html": "it doesn&#39;t work ;-)",
  "id": "5bbf34a1c7bf7c3662f179af",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-10-11T11:31:45.636Z",
  "text": "it doesn't work ;-)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "a",
  "id": "5bbf34a7435c2a518e8a8175",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-10-11T11:31:51.234Z",
  "text": "a",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "oh, shift+Enter",
  "id": "5bbf34ae6e5a401c2d5237e5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-10-11T11:31:58.879Z",
  "text": "oh, shift+Enter",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "on the web thingy",
  "id": "5bbf34bce65a634336bd23bb",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-10-11T11:32:12.181Z",
  "text": "on the web thingy",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/albop",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/276777?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/276777?v=4&s=60",
   "displayName": "Pablo Winant",
   "gv": "4",
   "id": "55ef21560fc9f982beb00961",
   "url": "/albop",
   "username": "albop",
   "v": 28
  },
  "html": "that one does. thanks",
  "id": "5bbf34c3ae7be940163a9e76",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-10-11T11:32:19.953Z",
  "text": "that one does. thanks\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "hmm, this is hard",
  "id": "5bbf34d9600c5f64238dd362",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-10-11T11:32:41.731Z",
  "text": "hmm, this is hard",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span> are there other ways to pass data into <code>njit</code> functions from c++ without incurring copy?",
  "id": "5bbf34f16e5a401c2d5239ab",
  "issues": [],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 11,
  "sent": "2018-10-11T11:33:05.397Z",
  "text": "@stuartarchibald are there other ways to pass data into `njit` functions from c++ without incurring copy?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "i thought it wasn&#39;t copying!?",
  "id": "5bbf356f1c100a4f296927ce",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-10-11T11:35:11.455Z",
  "text": "i thought it wasn't copying!?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "<code>-_-</code>",
  "id": "5bbf35fee65a634336bd2cc8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-10-11T11:37:34.387Z",
  "text": "`-_-`",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "those copy aren&#39;t related to array data at all ",
  "id": "5bbf36d6bbdc0b250521a889",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-10-11T11:41:10.965Z",
  "text": "those copy aren't related to array data at all ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "I just make all the arrays to empty and the profile looks exactly the same",
  "id": "5bbf36eef659e677729953a4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-10-11T11:41:34.072Z",
  "text": "I just make all the arrays to empty and the profile looks exactly the same",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "I really would suggest hooking the call with gdb and seeing where its coming from.",
  "id": "5bbf3703ae7be940163ab46c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-10-11T11:41:55.589Z",
  "text": "I really would suggest hooking the call with gdb and seeing where its coming from.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "oh, found the cause...",
  "id": "5bbf374a6e5a401c2d5250ac",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-10-11T11:43:06.982Z",
  "text": "oh, found the cause...",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "yeah, gdb helps",
  "id": "5bbf374def4afc4f2855e896",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-10-11T11:43:09.524Z",
  "text": "yeah, gdb helps",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "pybind11 does copy...",
  "id": "5bbf375e271506518df2bb01",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-10-11T11:43:26.877Z",
  "text": "pybind11 does copy...",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "right, so Numba not involved :) well, at least that&#39;s cleared up.",
  "id": "5bbf3788435c2a518e8a994d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-10-11T11:44:08.312Z",
  "text": "right, so Numba not involved :) well, at least that's cleared up.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "great!",
  "id": "5bbf3791c7bf7c3662f1939a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-10-11T11:44:17.879Z",
  "text": "great!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "can you help me with the nogil thing?",
  "id": "5bbf3799e65a634336bd3a25",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-10-11T11:44:25.743Z",
  "text": "can you help me with the nogil thing?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "two c++ threads calling the same <code>nojit</code> function blocks each other",
  "id": "5bbf37aac7bf7c3662f19491",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-10-11T11:44:42.992Z",
  "text": "two c++ threads calling the same `nojit` function blocks each other",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "are you sure its Numba holding the GIL and not some pybind11 thing ?",
  "id": "5bbf3aef1c100a4f29695d2c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-10-11T11:58:39.085Z",
  "text": "are you sure its Numba holding the GIL and not some pybind11 thing ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-10-11T12:07:44.260Z",
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "If you look at the asm for the Numba function you&#39;ll note that there&#39;s  <code>PyEval_SaveThread/PyEval_RestoreThread</code> in a <code>nogil</code> compiled function.",
  "id": "5bbf3c1f64cfc273f9bb54f8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-10-11T12:03:43.758Z",
  "text": "If you look at the asm for the Numba function you'll note that there's  `PyEval_SaveThread/PyEval_RestoreThread` in a `nogil` compiled function.",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span> pybind11 is holding the GIL before calling the <code>njit</code> function (if not, segfaults). Isn&#39;t subsequent <code>PyEval_SaveThread</code> gonna release the GIL holded in the same thread?",
  "id": "5bbf42c9600c5f64238e4835",
  "issues": [],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 11,
  "sent": "2018-10-11T12:32:09.767Z",
  "text": "@stuartarchibald pybind11 is holding the GIL before calling the `njit` function (if not, segfaults). Isn't subsequent `PyEval_SaveThread` gonna release the GIL holded in the same thread?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "and after examing the assembly code, I don&#39;t see those functions",
  "id": "5bbf44e66e5a401c2d52c277",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-10-11T12:41:10.960Z",
  "text": "and after examing the assembly code, I don't see those functions",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "which call frame will they be?",
  "id": "5bbf4503bbdc0b2505222249",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-10-11T12:41:39.790Z",
  "text": "which call frame will they be?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"amosbird\" class=\"mention\">@amosbird</span> probably one above the <code>call i32 @&quot;_ZN8__main__7&lt;your function&gt;&quot;</code>",
  "id": "5bbf473e38449236611f4800",
  "issues": [],
  "mentions": [
   {
    "screenName": "amosbird",
    "userId": "54e48ded15522ed4b3dc26b7",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 11,
  "sent": "2018-10-11T12:51:10.890Z",
  "text": "@amosbird probably one above the `call i32 @\"_ZN8__main__7<your function>\"`",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "if you are just grabbing a pointer to that function then the GIL release will be bypassed",
  "id": "5bbf4765600c5f64238e6c4a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-10-11T12:51:49.008Z",
  "text": "if you are just grabbing a pointer to that function then the GIL release will be bypassed",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"albop\" class=\"mention\">@albop</span> if you really want to dispatch on custom types then there&#39;s some documentation/an example here: <a href=\"http://numba.pydata.org/numba-doc/dev/extending/interval-example.html\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://numba.pydata.org/numba-doc/dev/extending/interval-example.html</a>",
  "id": "5bbf47c8f659e6777299dafc",
  "issues": [],
  "mentions": [
   {
    "screenName": "albop",
    "userId": "55ef21560fc9f982beb00961",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 11,
  "sent": "2018-10-11T12:53:28.541Z",
  "text": "@albop if you really want to dispatch on custom types then there's some documentation/an example here: http://numba.pydata.org/numba-doc/dev/extending/interval-example.html",
  "unread": false,
  "urls": [
   {
    "url": "http://numba.pydata.org/numba-doc/dev/extending/interval-example.html"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span> hmm, you mean the IR?",
  "id": "5bbf4a0eae7be940163b520c",
  "issues": [],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 11,
  "sent": "2018-10-11T13:03:10.110Z",
  "text": "@stuartarchibald hmm, you mean the IR?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "the bt is   <code>PyObject_Call ()  -&gt;  Dispatcher_call () -&gt;  call_cfunc () -&gt; myfunc ()</code>",
  "id": "5bbf4a8b6e5a401c2d52f2db",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-10-11T13:05:15.124Z",
  "text": "the bt is   `PyObject_Call ()  ->  Dispatcher_call () ->  call_cfunc () -> myfunc () `",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "none of these have gil release calls",
  "id": "5bbf4a99ef4afc4f28568aa5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-10-11T13:05:29.395Z",
  "text": "none of these have gil release calls",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "It&#39;ll be in both the IR and the asm.",
  "id": "5bbf4c1d600c5f64238e9738",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-10-11T13:11:57.269Z",
  "text": "It'll be in both the IR and the asm.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<pre><code>movabsq $PyEval_SaveThread, %<span class=\"literal\">rax</span>\ncallq   *%<span class=\"literal\">rax</span>\nmovabsq $<span class=\"string\">.LCPI1</span>_0, %<span class=\"literal\">rcx</span>\n<span class=\"keyword\">movsd</span>   (%<span class=\"literal\">rsp</span>), %<span class=\"literal\">xmm0</span>\n<span class=\"keyword\">addsd</span>   (%<span class=\"literal\">rcx</span>), %<span class=\"literal\">xmm0</span>\n<span class=\"keyword\">movsd</span>   %<span class=\"literal\">xmm0</span>, (%<span class=\"literal\">rsp</span>)\nmovabsq $PyEval_RestoreThread, %<span class=\"literal\">rcx</span></code></pre>where <code>%rax</code> contains the function that does work, like <code>_ZN8__main__7&lt;your function&gt;</code>",
  "id": "5bbf4c4a435c2a518e8b3fe9",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-10-11T13:12:42.068Z",
  "text": "```\nmovabsq $PyEval_SaveThread, %rax\ncallq   *%rax\nmovabsq $.LCPI1_0, %rcx\nmovsd   (%rsp), %xmm0\naddsd   (%rcx), %xmm0\nmovsd   %xmm0, (%rsp)\nmovabsq $PyEval_RestoreThread, %rcx\n```\nwhere `%rax` contains the function that does work, like `_ZN8__main__7<your function>`",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "in IR it might look something like:",
  "id": "5bbf4c741c100a4f2969f092",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-10-11T13:13:24.984Z",
  "text": "in IR it might look something like:",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<pre><code><span class=\"tag\">%<span class=\"value\">.29</span></span> = call i8* @PyEval_SaveThread()\nstore double 0.000000e+00, double* %.30\n<span class=\"tag\">%<span class=\"value\">.32</span></span> = call i32 @\"_ZN8__main__7&lt;your function&gt;(some args)\n<span class=\"tag\">%<span class=\"value\">.33</span></span> = load { i8*, i32 }*, { i8*, i32 }** %excinfo\n<span class=\"tag\">%<span class=\"value\">.34</span></span> = icmp eq i32 %.32, 0\n<span class=\"tag\">%<span class=\"value\">.35</span></span> = icmp eq i32 %.32, -2\n<span class=\"tag\">%<span class=\"value\">.38</span></span> = or i1 %.34, %.35\n<span class=\"tag\">%<span class=\"value\">.40</span></span> = icmp sge i32 %.32, 1\n<span class=\"tag\">%<span class=\"value\">.42</span></span> = load double, double* %.30\ncall void @PyEval_RestoreThread(i8* %.29)</code></pre>",
  "id": "5bbf4c8f1e23486b93aff28b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-10-11T13:13:51.715Z",
  "text": "```\n%.29 = call i8* @PyEval_SaveThread()\nstore double 0.000000e+00, double* %.30\n%.32 = call i32 @\"_ZN8__main__7<your function>(some args)\n%.33 = load { i8*, i32 }*, { i8*, i32 }** %excinfo\n%.34 = icmp eq i32 %.32, 0\n%.35 = icmp eq i32 %.32, -2\n%.38 = or i1 %.34, %.35\n%.40 = icmp sge i32 %.32, 1\n%.42 = load double, double* %.30\ncall void @PyEval_RestoreThread(i8* %.29)\n```\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "hmm",
  "id": "5bbf4d471c100a4f2969f7e7",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-10-11T13:16:55.736Z",
  "text": "hmm",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "can I separate the compile and run in <code>@njit</code> ?",
  "id": "5bbf4d7864cfc273f9bb77ab",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-10-11T13:17:44.234Z",
  "text": "can I separate the compile and run in `@njit` ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "using compile to get the raw function pointer with gil, and then calling the function directly",
  "id": "5bbf4d91bbdc0b25052272d7",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-10-11T13:18:09.284Z",
  "text": "using compile to get the raw function pointer with gil, and then calling the function directly",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "I&#39;m not sure what you mean",
  "id": "5bbf4e3b1c100a4f2969ff5b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-10-11T13:20:59.599Z",
  "text": "I'm not sure what you mean",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "Numba will by default create a cpython wrapper around the jitted code, it&#39;s in this wrapper the GIL can be switched off.",
  "id": "5bbf4e5ee65a634336bde817",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-10-11T13:21:34.970Z",
  "text": "Numba will by default create a cpython wrapper around the jitted code, it's in this wrapper the GIL can be switched off.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<code>@njit(no_cpython_wrapper=True)</code> will create just the function with no wrapper.",
  "id": "5bbf4ea2435c2a518e8b51cc",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-10-11T13:22:42.140Z",
  "text": "`@njit(no_cpython_wrapper=True)` will create just the function with no wrapper.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": " I mean something like <code>@cfunc</code>",
  "id": "5bbf4ef8ef4afc4f2856b07c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-10-11T13:24:08.347Z",
  "text": " I mean something like `@cfunc`",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "btw, how do you get the full IR code? I only know how to dump the jitted function&#39;s body ",
  "id": "5bbf4f241c100a4f296a09ec",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-10-11T13:24:52.254Z",
  "text": "btw, how do you get the full IR code? I only know how to dump the jitted function's body ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "set env vars to your liking <a href=\"http://numba.pydata.org/numba-doc/dev/reference/envvars.html#debugging\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://numba.pydata.org/numba-doc/dev/reference/envvars.html#debugging</a>",
  "id": "5bbf4fd338449236611f9104",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-10-11T13:27:47.567Z",
  "text": "set env vars to your liking http://numba.pydata.org/numba-doc/dev/reference/envvars.html#debugging",
  "unread": false,
  "urls": [
   {
    "url": "http://numba.pydata.org/numba-doc/dev/reference/envvars.html#debugging"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "hmm, setting <code>NUMBA_DUMP_IR=1</code> doesn&#39;t print anything",
  "id": "5bbf52e2ae7be940163b946a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-10-11T13:40:50.108Z",
  "text": "hmm, setting `NUMBA_DUMP_IR=1` doesn't print anything",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "what are you compiling?",
  "id": "5bbf52f4e65a634336be10a6",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-10-11T13:41:08.074Z",
  "text": "what are you compiling?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "(as in, which decorator?)",
  "id": "5bbf53b2ae7be940163b9bdc",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-10-11T13:44:18.384Z",
  "text": "(as in, which decorator?)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/albop",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/276777?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/276777?v=4&s=60",
   "displayName": "Pablo Winant",
   "gv": "4",
   "id": "55ef21560fc9f982beb00961",
   "url": "/albop",
   "username": "albop",
   "v": 28
  },
  "html": "<blockquote>\n<span data-link-type=\"mention\" data-screen-name=\"albop\" class=\"mention\">@albop</span> if you really want to dispatch on custom types then there&#39;s some documentation/an example here: <a href=\"http://numba.pydata.org/numba-doc/dev/extending/interval-example.html\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://numba.pydata.org/numba-doc/dev/extending/interval-example.html</a></blockquote>\n",
  "id": "5bbf552c6e5a401c2d534cbe",
  "issues": [],
  "mentions": [
   {
    "screenName": "albop",
    "userId": "55ef21560fc9f982beb00961",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 12,
  "sent": "2018-10-11T13:50:36.150Z",
  "text": "> @albop if you really want to dispatch on custom types then there's some documentation/an example here: http://numba.pydata.org/numba-doc/dev/extending/interval-example.html",
  "unread": false,
  "urls": [
   {
    "url": "http://numba.pydata.org/numba-doc/dev/extending/interval-example.html"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/albop",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/276777?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/276777?v=4&s=60",
   "displayName": "Pablo Winant",
   "gv": "4",
   "id": "55ef21560fc9f982beb00961",
   "url": "/albop",
   "username": "albop",
   "v": 28
  },
  "html": "Thanks I&quot;ll have a look",
  "id": "5bbf5534bbdc0b250522b513",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-10-11T13:50:44.008Z",
  "text": "Thanks I\"ll have a look",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "<code>@njit(nogil=True, cache=True)</code>",
  "id": "5bbf571ec7bf7c3662f28c66",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-10-11T13:58:54.652Z",
  "text": "`@njit(nogil=True, cache=True)`",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "if its loading from cache you won&#39;t see the IR because it won&#39;t go down a compilation path?",
  "id": "5bbf576c82893a2f3bcae080",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-10-11T14:00:12.571Z",
  "text": "if its loading from cache you won't see the IR because it won't go down a compilation path?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "oh",
  "id": "5bbf6ba61e23486b93b03d3d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-10-11T15:26:30.696Z",
  "text": "oh",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "exactly, thanks!",
  "id": "5bbf6bc264cfc273f9bbbdaa",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-10-11T15:26:58.597Z",
  "text": "exactly, thanks!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "though the dumped ir still doesn&#39;t contain any save restore",
  "id": "5bbf6c23271506518df48823",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-10-11T15:28:35.505Z",
  "text": "though the dumped ir still doesn't contain any save restore",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"amosbird\" class=\"mention\">@amosbird</span> <code>NUMBA_DUMP_IR=1</code> dumps the Numba IR, for GIL stuff  you want to look at the LLVM IR or assembler (same link on environment variables applies ) <a href=\"http://numba.pydata.org/numba-doc/dev/reference/envvars.html#envvar-NUMBA_DUMP_OPTIMIZED\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://numba.pydata.org/numba-doc/dev/reference/envvars.html#envvar-NUMBA_DUMP_OPTIMIZED</a> for LLVM IR, <a href=\"http://numba.pydata.org/numba-doc/dev/reference/envvars.html#envvar-NUMBA_DUMP_ASSEMBLY\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://numba.pydata.org/numba-doc/dev/reference/envvars.html#envvar-NUMBA_DUMP_ASSEMBLY</a> for assembly.",
  "id": "5bc0ed14600c5f64239b292e",
  "issues": [],
  "mentions": [
   {
    "screenName": "amosbird",
    "userId": "54e48ded15522ed4b3dc26b7",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 10,
  "sent": "2018-10-12T18:51:00.387Z",
  "text": "@amosbird `NUMBA_DUMP_IR=1` dumps the Numba IR, for GIL stuff  you want to look at the LLVM IR or assembler (same link on environment variables applies ) http://numba.pydata.org/numba-doc/dev/reference/envvars.html#envvar-NUMBA_DUMP_OPTIMIZED for LLVM IR, http://numba.pydata.org/numba-doc/dev/reference/envvars.html#envvar-NUMBA_DUMP_ASSEMBLY for assembly.",
  "unread": false,
  "urls": [
   {
    "url": "http://numba.pydata.org/numba-doc/dev/reference/envvars.html#envvar-NUMBA_DUMP_OPTIMIZED"
   },
   {
    "url": "http://numba.pydata.org/numba-doc/dev/reference/envvars.html#envvar-NUMBA_DUMP_ASSEMBLY"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/graffaner",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/18703079?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/18703079?v=4&s=60",
   "displayName": "Lei Chen",
   "gv": "4",
   "id": "5bc10193d73408ce4fab47d2",
   "url": "/graffaner",
   "username": "graffaner",
   "v": 1
  },
  "html": "<p>Hi, I&#39;m having trouble finding the right path for the env. var. NUMBAPRO_CUDA_DRIVER on Windows 7 so that numba can find CUDA driver.  Any idea where I should point it to?</p><pre><code>pip <span class=\"built_in\">list</span>\nenum34  = <span class=\"number\">1.1</span><span class=\"number\">.6</span>\nfuncsigs = <span class=\"number\">1.0</span><span class=\"number\">.2</span>\nllvmlite = <span class=\"number\">0.25</span><span class=\"number\">.0</span>\nnumba = <span class=\"number\">0.40</span><span class=\"number\">.0</span>\nnumpy = <span class=\"number\">1.15</span><span class=\"number\">.2</span> + mkl\npip = <span class=\"number\">18.1</span>\nscipy = <span class=\"number\">1.1</span><span class=\"number\">.0</span>\nsetuptools = <span class=\"number\">40.4</span><span class=\"number\">.3</span>\nsingledispatch = <span class=\"number\">3.4</span><span class=\"number\">.0</span><span class=\"number\">.3</span>\nsix = <span class=\"number\">1.11</span><span class=\"number\">.0</span>\nwheel = <span class=\"number\">0.32</span><span class=\"number\">.1</span></code></pre><p>I dowloaded CUDA 9.1.85 from Nvidia and installed it.  Also installed graphic card driver 411.70.  Thanks.</p>",
  "id": "5bc104856e5a401c2d5fedc3",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-10-12T20:31:01.800Z",
  "text": "Hi, I'm having trouble finding the right path for the env. var. NUMBAPRO_CUDA_DRIVER on Windows 7 so that numba can find CUDA driver.  Any idea where I should point it to?\n```\npip list\nenum34  = 1.1.6\nfuncsigs = 1.0.2\nllvmlite = 0.25.0\nnumba = 0.40.0\nnumpy = 1.15.2 + mkl\npip = 18.1\nscipy = 1.1.0\nsetuptools = 40.4.3\nsingledispatch = 3.4.0.3\nsix = 1.11.0\nwheel = 0.32.1\n```\nI dowloaded CUDA 9.1.85 from Nvidia and installed it.  Also installed graphic card driver 411.70.  Thanks.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span> thanks!",
  "id": "5bc19cfcae7be940164c3d78",
  "issues": [],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 11,
  "sent": "2018-10-13T07:21:32.962Z",
  "text": "@stuartarchibald thanks!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "um, numba cannot jit this code correctly <code>ret = numpy.arange(graph.vertex_num, dtype=numpy.uint32)</code>",
  "id": "5bc19d20c08b8b306709adc4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-10-13T07:22:08.209Z",
  "text": "um, numba cannot jit this code correctly `         ret = numpy.arange(graph.vertex_num, dtype=numpy.uint32)`\n  ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "type mismatch",
  "id": "5bc19d2bef4afc4f286744e7",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-10-13T07:22:19.781Z",
  "text": "type mismatch",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "ok, this works <code>ret = numpy.arange(0, 10, 1, numpy.uint32)</code>",
  "id": "5bc19f40bbdc0b2505333dfe",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-10-13T07:31:12.784Z",
  "text": "ok, this works `        ret = numpy.arange(0, 10, 1, numpy.uint32)`",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "is there any plan to support keyword arguments ? ",
  "id": "5bc1a5b5435c2a518e9c24e2",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-10-13T07:58:45.127Z",
  "text": "is there any plan to support keyword arguments ? ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "hmm, when trying to <code>numba.cffi_support.register_module(amos)</code>, I got module &#39;amos&#39; has no attribute &#39;lib&#39;",
  "id": "5bc1afd3384492366130746e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-10-13T08:41:55.565Z",
  "text": "hmm, when trying to `numba.cffi_support.register_module(amos)`, I got module 'amos' has no attribute 'lib'",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "what might be the cause of that?",
  "id": "5bc1afdc600c5f6423a00c51",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-10-13T08:42:04.352Z",
  "text": "what might be the cause of that?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "Is there a way to specify type for empty list?",
  "id": "5bc28c801e23486b93b94d57",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-10-14T00:23:28.873Z",
  "text": "Is there a way to specify type for empty list?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "this code fails to jit",
  "id": "5bc28c8c64cfc273f9c4c627",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-10-14T00:23:40.838Z",
  "text": "this code fails to jit",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-10-14T00:55:32.364Z",
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "<pre><code>\n@njit(nogil=True, <span class=\"operator\"><span class=\"keyword\">cache</span>=<span class=\"literal\">True</span>)\n<span class=\"keyword\">def</span> run(graph, s, j):\n    src = []\n    dst = []\n    wgh = []\n    q = [uint32(s)]\n    q2 = []\n    cnt = <span class=\"number\">0</span>\n    <span class=\"keyword\">while</span> <span class=\"keyword\">len</span>(q) &gt; <span class=\"number\">0</span>:\n        <span class=\"keyword\">for</span> s2 <span class=\"keyword\">in</span> q:\n            <span class=\"keyword\">for</span> <span class=\"keyword\">i</span> <span class=\"keyword\">in</span> <span class=\"keyword\">range</span>(graph.gin.offsets[s2] - graph.gin.<span class=\"keyword\">degrees</span>[s2], graph.gin.offsets[s2]):\n                <span class=\"keyword\">d</span> = graph.gin.v[<span class=\"keyword\">i</span>]\n                src.append(<span class=\"keyword\">d</span>)\n                q2.append(<span class=\"keyword\">d</span>)\n                dst.append(s2)\n                wgh.append(graph.eps.w[<span class=\"keyword\">i</span>])\n        q = q2\n        q2 = []   # this line <span class=\"keyword\">is</span> problematic\n        cnt += <span class=\"number\">1</span>\n        <span class=\"keyword\">if</span> cnt &gt; j:\n            break\n    <span class=\"keyword\">return</span> (<span class=\"built_in\">array</span>(src), <span class=\"built_in\">array</span>(dst), <span class=\"built_in\">array</span>(wgh))</span></code></pre>",
  "id": "5bc293edc7bf7c3662094db3",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-10-14T00:55:09.390Z",
  "text": "```\n\n@njit(nogil=True, cache=True)\ndef run(graph, s, j):\n    src = []\n    dst = []\n    wgh = []\n    q = [uint32(s)]\n    q2 = []\n    cnt = 0\n    while len(q) > 0:\n        for s2 in q:\n            for i in range(graph.gin.offsets[s2] - graph.gin.degrees[s2], graph.gin.offsets[s2]):\n                d = graph.gin.v[i]\n                src.append(d)\n                q2.append(d)\n                dst.append(s2)\n                wgh.append(graph.eps.w[i])\n        q = q2\n        q2 = []   # this line is problematic\n        cnt += 1\n        if cnt > j:\n            break\n    return (array(src), array(dst), array(wgh))\n\n```",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "So numpy&#39;s array functions don&#39;t have type inferences. I have to use <code>full(10, dt, uint16)</code> ",
  "id": "5bc2a315f659e67772b11239",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-10-14T01:59:49.693Z",
  "text": "So numpy's array functions don't have type inferences. I have to use `full(10, dt, uint16)` ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/jprob",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/5693983?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/5693983?v=4&s=60",
   "displayName": "jprob",
   "gv": "4",
   "id": "550aa60b15522ed4b3dd7e67",
   "url": "/jprob",
   "username": "jprob",
   "v": 3
  },
  "html": "Hi, I have some code here with a big fat function that takes a lot of list(list(array)) and I already rewrote everything s.t. numba will copile, only one thing doesn&#39;t work:",
  "id": "5bc3ab9582893a2f3be039c1",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2018-10-14T20:48:21.514Z",
  "text": "Hi, I have some code here with a big fat function that takes a lot of list(list(array)) and I already rewrote everything s.t. numba will copile, only one thing doesn't work:",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/jprob",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/5693983?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/5693983?v=4&s=60",
   "displayName": "jprob",
   "gv": "4",
   "id": "550aa60b15522ed4b3dd7e67",
   "url": "/jprob",
   "username": "jprob",
   "v": 3
  },
  "html": "it can&#39;t compile as it can&#39;t reflect back the reflected list ( reflected list(array)) stuff",
  "id": "5bc3aba664cfc273f9c8b9ed",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2018-10-14T20:48:38.361Z",
  "text": "it can't compile as it can't reflect back the reflected list ( reflected list(array)) stuff",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/jprob",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/5693983?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/5693983?v=4&s=60",
   "displayName": "jprob",
   "gv": "4",
   "id": "550aa60b15522ed4b3dd7e67",
   "url": "/jprob",
   "username": "jprob",
   "v": 3
  },
  "html": "is there any way I can circumvent this?",
  "id": "5bc3abb082893a2f3be03a42",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2018-10-14T20:48:48.388Z",
  "text": "is there any way I can circumvent this?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/jprob",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/5693983?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/5693983?v=4&s=60",
   "displayName": "jprob",
   "gv": "4",
   "id": "550aa60b15522ed4b3dd7e67",
   "url": "/jprob",
   "username": "jprob",
   "v": 3
  },
  "html": "I mean I would even be ok with copying all my inputs worst case to not need the reflection",
  "id": "5bc3abd41e23486b93bd587f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2018-10-14T20:49:24.634Z",
  "text": "I mean I would even be ok with copying all my inputs worst case to not need the reflection",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/jprob",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/5693983?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/5693983?v=4&s=60",
   "displayName": "jprob",
   "gv": "4",
   "id": "550aa60b15522ed4b3dd7e67",
   "url": "/jprob",
   "username": "jprob",
   "v": 3
  },
  "html": "most of them are actually constant",
  "id": "5bc3abdd64cfc273f9c8ba87",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2018-10-14T20:49:33.647Z",
  "text": "most of them are actually constant",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"amosbird\" class=\"mention\">@amosbird</span> RE <code>ret = numpy.arange(graph.vertex_num, dtype=numpy.uint32)</code> is <code>graph.vertex_num</code> of a type representable by a <code>uint32_t</code>?",
  "id": "5bc450c7c08b8b306718b980",
  "issues": [],
  "mentions": [
   {
    "screenName": "amosbird",
    "userId": "54e48ded15522ed4b3dc26b7",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 5,
  "sent": "2018-10-15T08:33:11.457Z",
  "text": "@amosbird RE `ret = numpy.arange(graph.vertex_num, dtype=numpy.uint32)` is `graph.vertex_num` of a type representable by a `uint32_t`?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "yes",
  "id": "5bc45120384492366140c784",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T08:34:40.036Z",
  "text": "yes",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "oh, no  uint64_t",
  "id": "5bc4512682893a2f3be3f693",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T08:34:46.708Z",
  "text": "oh, no  uint64_t",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "right, well that&#39;ll be the problem",
  "id": "5bc4513064cfc273f9cc89a8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T08:34:56.136Z",
  "text": "right, well that'll be the problem",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "hmm, wait lemme double check",
  "id": "5bc45133e65a634336df61fb",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T08:34:59.173Z",
  "text": "hmm, wait lemme double check",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "RE kwargs, not sure what you mean:<pre><code><span class=\"keyword\">from</span> numba <span class=\"keyword\">import</span> njit\n<span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np\n\n<span class=\"decorator\">@njit</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">(x, this_is_a_kwarg=<span class=\"number\">10</span>)</span>:</span>\n    <span class=\"keyword\">return</span> x + this_is_a_kwarg\n\nprint(foo(<span class=\"number\">10</span>))\nprint(foo(<span class=\"number\">10</span>, <span class=\"number\">40</span>))\nprint(foo(<span class=\"number\">10</span>, this_is_a_kwarg=<span class=\"number\">70</span>))</code></pre>",
  "id": "5bc4514564cfc273f9cc8b08",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T08:35:17.422Z",
  "text": "RE kwargs, not sure what you mean:\n```\nfrom numba import njit\nimport numpy as np\n\n@njit\ndef foo(x, this_is_a_kwarg=10):\n    return x + this_is_a_kwarg\n\nprint(foo(10))\nprint(foo(10, 40))\nprint(foo(10, this_is_a_kwarg=70))\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "^ works fine",
  "id": "5bc4514fef4afc4f287815ec",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T08:35:27.888Z",
  "text": "^ works fine",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span> I see",
  "id": "5bc45151f659e67772bb6160",
  "issues": [],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T08:35:29.100Z",
  "text": "@stuartarchibald I see",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "<pre><code><span class=\"title\">UInt32</span> vertex_num;</code></pre>",
  "id": "5bc4515264cfc273f9cc8b69",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T08:35:30.951Z",
  "text": "    UInt32 vertex_num;\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "it&#39;s uint32 in c++ but I need to convert to numpy&#39;s uint32 first",
  "id": "5bc45161e65a634336df62be",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T08:35:45.021Z",
  "text": "it's uint32 in c++ but I need to convert to numpy's uint32 first",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "I&#39;ve no idea what the binding layer you are using will do",
  "id": "5bc45176ef4afc4f287816b2",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T08:36:06.843Z",
  "text": "I've no idea what the binding layer you are using will do",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-10-15T08:40:22.790Z",
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<blockquote>\n<p>numba.cffi_support.register_module(amos), I got module &#39;amos&#39; has no attribute &#39;lib&#39;</p></blockquote>\n<p>I think your library should have that</p>",
  "id": "5bc45268e65a634336df68ce",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2018-10-15T08:40:08.581Z",
  "text": "> numba.cffi_support.register_module(amos), I got module 'amos' has no attribute 'lib'\n\nI think your library should have that",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "um, pybind11 seems no",
  "id": "5bc452891e23486b93c12f29",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2018-10-15T08:40:41.509Z",
  "text": "um, pybind11 seems no",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "no module defined in c++ can be found in numba jit",
  "id": "5bc4529cc08b8b306718c557",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2018-10-15T08:41:00.652Z",
  "text": "no module defined in c++ can be found in numba jit",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "<pre><code>@<span class=\"function\"><span class=\"title\">njit</span><span class=\"params\">(parallel=True, nogil=True, cache=True)</span></span>\ndef <span class=\"function\"><span class=\"title\">run</span><span class=\"params\">(graph)</span></span>:\n    cnt = <span class=\"function\"><span class=\"title\">uint64</span><span class=\"params\">(<span class=\"number\">0</span>)</span></span>\n    <span class=\"keyword\">for</span> <span class=\"tag\">i</span> <span class=\"keyword\">in</span> <span class=\"function\"><span class=\"title\">prange</span><span class=\"params\">(graph.vertex_num)</span></span>:\n        <span class=\"keyword\">for</span> e <span class=\"keyword\">in</span> <span class=\"function\"><span class=\"title\">range</span><span class=\"params\">(graph.gout.offsets[i]-graph.gout.degrees[i], graph.gout.offsets[i])</span></span>:\n            <span class=\"tag\">a</span> = <span class=\"tag\">i</span>\n            <span class=\"tag\">b</span> = graph<span class=\"class\">.gout</span><span class=\"class\">.v</span>[e]\n\n            nA = graph<span class=\"class\">.gout</span><span class=\"class\">.degrees</span>[a]\n            a_offset = graph<span class=\"class\">.gout</span><span class=\"class\">.offsets</span>[a]\n            nghA = graph<span class=\"class\">.gout</span><span class=\"class\">.v</span>[a_offset-nA:a_offset]\n\n            nB = graph<span class=\"class\">.gout</span><span class=\"class\">.degrees</span>[b]\n            b_offset = graph<span class=\"class\">.gout</span><span class=\"class\">.offsets</span>[b]\n            nghB = graph<span class=\"class\">.gout</span><span class=\"class\">.v</span>[b_offset-nB:b_offset]\n\n            a_i = <span class=\"number\">0</span>\n            b_j = <span class=\"number\">0</span>\n            while a_i &lt; nA and b_j &lt; nB and <span class=\"tag\">a</span> &lt; nghA[a_i] and <span class=\"tag\">b</span> &lt; nghB[b_j]:\n                <span class=\"keyword\">if</span> nghA[a_i] == nghB[b_j]:\n                    a_i += <span class=\"number\">1</span>\n                    b_j += <span class=\"number\">1</span>\n                    cnt += <span class=\"number\">1</span>\n                elif nghA[a_i] &lt; nghB[b_j]:\n                    a_i += <span class=\"number\">1</span>\n                <span class=\"keyword\">else</span>:\n                    b_j += <span class=\"number\">1</span>\n\n    return <span class=\"function\"><span class=\"title\">array</span><span class=\"params\">(uint64(cnt)</span></span>)</code></pre>",
  "id": "5bc452b4f659e67772bb6d69",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2018-10-15T08:41:24.356Z",
  "text": "```\n@njit(parallel=True, nogil=True, cache=True)\ndef run(graph):\n    cnt = uint64(0)\n    for i in prange(graph.vertex_num):\n        for e in range(graph.gout.offsets[i]-graph.gout.degrees[i], graph.gout.offsets[i]):\n            a = i\n            b = graph.gout.v[e]\n\n            nA = graph.gout.degrees[a]\n            a_offset = graph.gout.offsets[a]\n            nghA = graph.gout.v[a_offset-nA:a_offset]\n\n            nB = graph.gout.degrees[b]\n            b_offset = graph.gout.offsets[b]\n            nghB = graph.gout.v[b_offset-nB:b_offset]\n\n            a_i = 0\n            b_j = 0\n            while a_i < nA and b_j < nB and a < nghA[a_i] and b < nghB[b_j]:\n                if nghA[a_i] == nghB[b_j]:\n                    a_i += 1\n                    b_j += 1\n                    cnt += 1\n                elif nghA[a_i] < nghB[b_j]:\n                    a_i += 1\n                else:\n                    b_j += 1\n\n    return array(uint64(cnt))\n\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "Can it by found by python ?",
  "id": "5bc452ba82893a2f3be402a0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2018-10-15T08:41:30.847Z",
  "text": "Can it by found by python ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "this code breaks pfor",
  "id": "5bc452bc64cfc273f9cc97c2",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2018-10-15T08:41:32.603Z",
  "text": "this code breaks pfor",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "yes",
  "id": "5bc452bf6e5a401c2d7489d1",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2018-10-15T08:41:35.164Z",
  "text": "yes",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "stacktrace   <a href=\"https://la.wentropy.com/xS9G\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://la.wentropy.com/xS9G</a>",
  "id": "5bc452cbae7be940165d503a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2018-10-15T08:41:47.201Z",
  "text": "stacktrace   https://la.wentropy.com/xS9G",
  "unread": false,
  "urls": [
   {
    "url": "https://la.wentropy.com/xS9G"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "ok, please open a ticket for that",
  "id": "5bc452e8ef4afc4f28782219",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2018-10-15T08:42:16.225Z",
  "text": "ok, please open a ticket for that",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "cool",
  "id": "5bc452ed384492366140d57b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2018-10-15T08:42:21.732Z",
  "text": "cool",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "RE: <code>q2 = []   # this line is problematic</code>, you can&#39;t have untyped empty lists, remember that Numba has to compile the python source, first step work out all the types. Sometimes it can figure out what the type of an empty list is if you do something obvious with it (like start appending <code>int64</code>s).",
  "id": "5bc4531fc7bf7c366214093d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2018-10-15T08:43:11.793Z",
  "text": "RE: ` q2 = []   # this line is problematic`, you can't have untyped empty lists, remember that Numba has to compile the python source, first step work out all the types. Sometimes it can figure out what the type of an empty list is if you do something obvious with it (like start appending `int64`s).",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "so in practice is there a way to work around this?",
  "id": "5bc4535864cfc273f9cc9984",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2018-10-15T08:44:08.531Z",
  "text": "so in practice is there a way to work around this?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "I&#39;ve been doing some work on identifying and explaining this better, some docs are here: <a href=\"https://github.com/numba/numba/pull/3373/files#diff-b10e8c9490d26a6ebd9e5773a293024eR164\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://github.com/numba/numba/pull/3373/files#diff-b10e8c9490d26a6ebd9e5773a293024eR164</a>",
  "id": "5bc4535af659e67772bb70c6",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2018-10-15T08:44:10.919Z",
  "text": "I've been doing some work on identifying and explaining this better, some docs are here: https://github.com/numba/numba/pull/3373/files#diff-b10e8c9490d26a6ebd9e5773a293024eR164",
  "unread": false,
  "urls": [
   {
    "url": "https://github.com/numba/numba/pull/3373/files#diff-b10e8c9490d26a6ebd9e5773a293024eR164"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "along with a workaround",
  "id": "5bc4536182893a2f3be4075a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2018-10-15T08:44:17.309Z",
  "text": "along with a workaround",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "great!",
  "id": "5bc45366600c5f6423b0a5ef",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2018-10-15T08:44:22.390Z",
  "text": "great!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "yesterday I started reading numba&#39;s code and for ten minutes I gave up.... it&#39;s too dark  ",
  "id": "5bc4538f600c5f6423b0a6fd",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2018-10-15T08:45:03.117Z",
  "text": "yesterday I started reading numba's code and for ten minutes I gave up.... it's too dark  ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "the parfor.py beats me out haha",
  "id": "5bc4539f64cfc273f9cc9b01",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2018-10-15T08:45:19.124Z",
  "text": "the parfor.py beats me out haha",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "It is a steep learning curve",
  "id": "5bc453a31c100a4f298bd07b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2018-10-15T08:45:23.743Z",
  "text": "It is a steep learning curve",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "parfor.py is not the place to start looking :)",
  "id": "5bc453b082893a2f3be40a0a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T08:45:36.835Z",
  "text": "parfor.py is not the place to start looking :)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "is there anything for new comers? I&#39;d very like to do some contributions",
  "id": "5bc453c1bbdc0b250544122f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T08:45:53.763Z",
  "text": "is there anything for new comers? I'd very like to do some contributions",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "First thing to do would be to become familiar with the extension API",
  "id": "5bc453d31e23486b93c13684",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T08:46:11.347Z",
  "text": "First thing to do would be to become familiar with the extension API",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<a href=\"http://numba.pydata.org/numba-doc/latest/extending/high-level.html\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://numba.pydata.org/numba-doc/latest/extending/high-level.html</a>",
  "id": "5bc453eb1c100a4f298bd167",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T08:46:35.599Z",
  "text": "http://numba.pydata.org/numba-doc/latest/extending/high-level.html",
  "unread": false,
  "urls": [
   {
    "url": "http://numba.pydata.org/numba-doc/latest/extending/high-level.html"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "A lot of stuff can be written using that. This is a PR from another user/contributor adding support for <code>np.partition</code><a target=\"_blank\" data-link-type=\"pr\" data-issue=\"3320\" href=\"https://github.com/numba/numba/pull/3320\" data-provider=\"github\" data-issue-repo=\"numba/numba\" class=\"pr\">numba/numba#3320</a>, which demonstrates using the higher level extension APIs to add feature support to Numba.",
  "id": "5bc4546182893a2f3be40fe9",
  "issues": [
   {
    "number": "3320",
    "repo": "numba/numba"
   }
  ],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T08:48:33.556Z",
  "text": "A lot of stuff can be written using that. This is a PR from another user/contributor adding support for `np.partition`https://github.com/numba/numba/pull/3320, which demonstrates using the higher level extension APIs to add feature support to Numba.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "sounds great. I&#39;ll try to add some stuff. Is there any good first issue for that?",
  "id": "5bc4548664cfc273f9cca071",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T08:49:10.650Z",
  "text": "sounds great. I'll try to add some stuff. Is there any good first issue for that?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "Perhaps pick some simply NumPy function that isn&#39;t supported and try implementing it ?",
  "id": "5bc454a9bbdc0b2505441a2a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T08:49:45.495Z",
  "text": "Perhaps pick some simply NumPy function that isn't supported and try implementing it ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "ok!",
  "id": "5bc454b31c100a4f298bd7d2",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T08:49:55.535Z",
  "text": "ok!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "thanks :) great to hear you want to help, it&#39;s much appreciated.",
  "id": "5bc454c0384492366140dfe6",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T08:50:08.709Z",
  "text": "thanks :) great to hear you want to help, it's much appreciated.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "thank you for the kind help :)",
  "id": "5bc454dc1e23486b93c13ca4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T08:50:36.689Z",
  "text": "thank you for the kind help :)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "so do we ever need to implement functions in c++?",
  "id": "5bc454f81e23486b93c13ccc",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T08:51:04.660Z",
  "text": "so do we ever need to implement functions in c++?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "it looks like <code>@overload</code> is enough",
  "id": "5bc45505384492366140e19c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T08:51:17.588Z",
  "text": "it looks like `@overload` is enough",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "No problem :)",
  "id": "5bc45506e65a634336df792a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T08:51:18.045Z",
  "text": "No problem :)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "I&#39;ll go have a look myself and see if I can see something suitable. There&#39;s a bunch of spectral windowing functions that are probably quite easy and self contained, like <code>blackman</code>, <code>bartlett</code>, <code>hamming</code>",
  "id": "5bc4557d600c5f6423b0b4c5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T08:53:17.429Z",
  "text": "I'll go have a look myself and see if I can see something suitable. There's a bunch of spectral windowing functions that are probably quite easy and self contained, like `blackman`, `bartlett`, `hamming`",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "if nothing else it&#39;ll get you familiar with working with the extension API",
  "id": "5bc4558c64cfc273f9cca7f4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T08:53:32.764Z",
  "text": "if nothing else it'll get you familiar with working with the extension API",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "It is exceedingly rare to need to use C++, and if it is used it needs wrapping in C to create a <code>ctypes</code> accessible API.",
  "id": "5bc455b61e23486b93c142a5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T08:54:14.816Z",
  "text": "It is exceedingly rare to need to use C++, and if it is used it needs wrapping in C to create a `ctypes` accessible API.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "If you need to do advanced things we use <code>llvmlite</code> to generate LLVM IR directly (or occasionally inline assembly with it if we have no choice), and also rarely we add C helper functions to the Numba helper library (needed to do this for <code>np.linalg</code> and <code>np.random</code> support).",
  "id": "5bc45606bbdc0b25054421ae",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T08:55:34.947Z",
  "text": "If you need to do advanced things we use `llvmlite` to generate LLVM IR directly (or occasionally inline assembly with it if we have no choice), and also rarely we add C helper functions to the Numba helper library (needed to do this for `np.linalg` and `np.random` support).",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "ok, it seems I should get familiar with python first ... haha",
  "id": "5bc456b7bbdc0b250544258a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T08:58:31.313Z",
  "text": "ok, it seems I should get familiar with python first ... haha",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "btw, what&#39;s the status of the string feature?  I&#39;m curious if my StringRef struct can be used in nopython code",
  "id": "5bc456d3435c2a518eacf94e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T08:58:59.802Z",
  "text": "btw, what's the status of the string feature?  I'm curious if my StringRef struct can be used in nopython code",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "StringRef is a pointer + size ",
  "id": "5bc456e01e23486b93c149d0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T08:59:12.383Z",
  "text": "StringRef is a pointer + size ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "strings are, errr, complicated and WIP, you can track progress here  <a target=\"_blank\" data-link-type=\"pr\" data-issue=\"3363\" href=\"https://github.com/numba/numba/pull/3363\" data-provider=\"github\" data-issue-repo=\"numba/numba\" class=\"pr\">numba/numba#3363</a>",
  "id": "5bc457351c100a4f298be639",
  "issues": [
   {
    "number": "3363",
    "repo": "numba/numba"
   }
  ],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T09:00:37.261Z",
  "text": "strings are, errr, complicated and WIP, you can track progress here  https://github.com/numba/numba/pull/3363",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "what do you want to use your struct for ?",
  "id": "5bc4573dbbdc0b250544284a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T09:00:45.603Z",
  "text": "what do you want to use your struct for ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "There is an array of StringRef in c++ and I need a way to use that array in python so that I can compare strings, query strings via index , etc",
  "id": "5bc45799384492366140f36c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T09:02:17.308Z",
  "text": "There is an array of StringRef in c++ and I need a way to use that array in python so that I can compare strings, query strings via index , etc",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "I can&#39;t afford transforming it to some dedicated string array representation. It&#39;s farely large 2-5 GB   ",
  "id": "5bc457cbbbdc0b2505442ab3",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T09:03:07.987Z",
  "text": "I can't afford transforming it to some dedicated string array representation. It's farely large 2-5 GB   ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "I think that we&#39;re quite some way off supporting that sort of thing.",
  "id": "5bc457fc384492366140f606",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T09:03:56.105Z",
  "text": "I think that we're quite some way off supporting that sort of thing.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "I thought there might be a chance to extending numba for custom struct?",
  "id": "5bc45800435c2a518ead0031",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T09:04:00.103Z",
  "text": "I thought there might be a chance to extending numba for custom struct?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "yeah, I&#39;ve watched the numpy&#39;s talk about the next generation of dtype system. I think that might be the ultimate solution",
  "id": "5bc45845e65a634336df8d8c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T09:05:09.790Z",
  "text": "yeah, I've watched the numpy's talk about the next generation of dtype system. I think that might be the ultimate solution",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "It <em>might</em> be possible once string support is more working, but is probably going to be v. challenging.",
  "id": "5bc45852c08b8b306718edae",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T09:05:22.394Z",
  "text": "It *might* be possible once string support is more working, but is probably going to be v. challenging.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "um, is there any example I can follow to make a c++ class working in nopython function?",
  "id": "5bc458b1c7bf7c3662142a52",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T09:06:57.900Z",
  "text": "um, is there any example I can follow to make a c++ class working in nopython function?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "To make anything work in Numba you have to tell Numba how to figure out what type everything is (data and operations), and then have to tell Numba how to convert the thing (data/operations/whatever) into LLVM IR.",
  "id": "5bc458baae7be940165d71c3",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T09:07:06.708Z",
  "text": "To make anything work in Numba you have to tell Numba how to figure out what type everything is (data and operations), and then have to tell Numba how to convert the thing (data/operations/whatever) into LLVM IR.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "I don&#39;t think you&#39;ll be able to just pass a C++ class to Numba",
  "id": "5bc458de435c2a518ead06ba",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T09:07:42.016Z",
  "text": "I don't think you'll be able to just pass a C++ class to Numba",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "um.... there is still one way I can think of",
  "id": "5bc4594aae7be940165d7550",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T09:09:30.558Z",
  "text": "um.... there is still one way I can think of",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "I could have two numpy arrays storing the string in a CSC like format (offsets, chars)",
  "id": "5bc45966c7bf7c3662142fc4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T09:09:58.723Z",
  "text": "I could have two numpy arrays storing the string in a CSC like format (offsets, chars)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "and build a bunch of helpers ",
  "id": "5bc4597b6e5a401c2d74b823",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T09:10:19.447Z",
  "text": "and build a bunch of helpers ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "yeah, you&#39;d need to basically make the data accessible as POD",
  "id": "5bc4599b1c100a4f298bf48f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T09:10:51.067Z",
  "text": "yeah, you'd need to basically make the data accessible as POD",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "so how can I build those helpers and make them proper inlined?",
  "id": "5bc459ddae7be940165d78c3",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T09:11:57.511Z",
  "text": "so how can I build those helpers and make them proper inlined?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "I assume I cannot write them in c++ and numba cannot see them      ",
  "id": "5bc459fcae7be940165d79a0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T09:12:28.160Z",
  "text": "I assume I cannot write them in c++ and numba cannot see them      ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "you could write a c library and bind to it with ctypes",
  "id": "5bc45a1438449236614105db",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T09:12:52.027Z",
  "text": "you could write a c library and bind to it with ctypes",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "numba can understand that",
  "id": "5bc45a1b3844923661410601",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T09:12:59.955Z",
  "text": "numba can understand that",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "do you mean this <a href=\"https://numba.pydata.org/numba-doc/dev/user/cfunc.html\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://numba.pydata.org/numba-doc/dev/user/cfunc.html</a>   ?",
  "id": "5bc45a5438449236614106c9",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T09:13:56.253Z",
  "text": "do you mean this https://numba.pydata.org/numba-doc/dev/user/cfunc.html   ?",
  "unread": false,
  "urls": [
   {
    "url": "https://numba.pydata.org/numba-doc/dev/user/cfunc.html"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "I mean Python ctypes.",
  "id": "5bc45ab9e65a634336df9e2f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T09:15:37.906Z",
  "text": "I mean Python ctypes.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "Once you&#39;ve got a binding to some DSO, you can then grab the symbol addresses and create <code>ctypes.CFUNCTYPE</code> functions instantiated using the address and then just freely use those functions inside Numba functions",
  "id": "5bc45b803844923661410d8e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T09:18:56.772Z",
  "text": "Once you've got a binding to some DSO, you can then grab the symbol addresses and create `ctypes.CFUNCTYPE` functions instantiated using the address and then just freely use those functions inside Numba functions",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "Ok, I&#39;ll try it out. Not sure if I can create those ctype functions directly using pybind11 :)",
  "id": "5bc45bc51e23486b93c169c3",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T09:20:05.877Z",
  "text": "Ok, I'll try it out. Not sure if I can create those ctype functions directly using pybind11 :)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "Is there a specific reason why you are doing all this ?",
  "id": "5bc45c0c600c5f6423b0daa6",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T09:21:16.182Z",
  "text": "Is there a specific reason why you are doing all this ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "I&#39;m embeding python into a database",
  "id": "5bc45c376e5a401c2d74caac",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T09:21:59.187Z",
  "text": "I'm embeding python into a database",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "so it&#39;s the opposite of common use cases",
  "id": "5bc45c4c82893a2f3be44800",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T09:22:20.805Z",
  "text": "so it's the opposite of common use cases",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "<a href=\"https://docs.python.org/3/library/ctypes.html\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://docs.python.org/3/library/ctypes.html</a>  sounds exactly what I need. I may export some db functions using this ",
  "id": "5bc45cdcae7be940165d8e29",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T09:24:44.982Z",
  "text": "https://docs.python.org/3/library/ctypes.html  sounds exactly what I need. I may export some db functions using this ",
  "unread": false,
  "urls": [
   {
    "url": "https://docs.python.org/3/library/ctypes.html"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "do ctype functions support overloading ?  Or can I use the <code>@overload</code> decorator  to generate wrappers",
  "id": "5bc45d29e65a634336dfafe4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T09:26:01.040Z",
  "text": "do ctype functions support overloading ?  Or can I use the `@overload` decorator  to generate wrappers",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "the <code>@overload</code> thing is to generate the implementation of another function, for example:<pre><code><span class=\"decorator\">@overload(np.arange)</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">np_arange</span><span class=\"params\">(args)</span>:</span>\n  <span class=\"comment\"># typing context</span>\n  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">impl</span><span class=\"params\">(args)</span>:</span> <span class=\"comment\"># the implementation</span>\n    <span class=\"comment\"># impl details</span>\n  <span class=\"keyword\">return</span> impl</code></pre>",
  "id": "5bc45da6600c5f6423b0e39a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T09:28:06.185Z",
  "text": "the `@overload` thing is to generate the implementation of another function, for example:\n```\n@overload(np.arange)\ndef np_arange(args):\n  # typing context\n  def impl(args): # the implementation\n    # impl details\n  return impl\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "you can use the ctypes wrappers inside the <code>impl</code>",
  "id": "5bc45dbc64cfc273f9ccdabd",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 7,
  "sent": "2018-10-15T09:28:28.564Z",
  "text": "you can use the ctypes wrappers inside the `impl`",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "cool, sounds like template specialization to me",
  "id": "5bc45e8f600c5f6423b0e96e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 7,
  "sent": "2018-10-15T09:31:59.019Z",
  "text": "cool, sounds like template specialization to me",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "it&#39;s a tiny bit like that",
  "id": "5bc45edb64cfc273f9cce07b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 7,
  "sent": "2018-10-15T09:33:15.839Z",
  "text": "it's a tiny bit like that",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "can those ctypes function pointers be inlined by numba?",
  "id": "5bc4a2171c100a4f298dc4d1",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 3,
  "sent": "2018-10-15T14:20:07.897Z",
  "text": "can those ctypes function pointers be inlined by numba?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "inline a pointer?",
  "id": "5bc4a250600c5f6423b2bdf8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 3,
  "sent": "2018-10-15T14:21:04.337Z",
  "text": "inline a pointer?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "or you mean, inline the source of the pointee  ?",
  "id": "5bc4a26182893a2f3be62800",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 3,
  "sent": "2018-10-15T14:21:21.065Z",
  "text": "or you mean, inline the source of the pointee  ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "assuming the latter, no, the ctypes bindings are just wrappers to the addresses in the compiled DSO ",
  "id": "5bc4a2771e23486b93c348aa",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 3,
  "sent": "2018-10-15T14:21:43.326Z",
  "text": "assuming the latter, no, the ctypes bindings are just wrappers to the addresses in the compiled DSO ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"graffaner\" class=\"mention\">@graffaner</span> <a href=\"http://numba.pydata.org/numba-doc/latest/user/installing.html?highlight=numbapro_cuda_driver#installing-using-pip-on-x86-x86-64-platforms\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://numba.pydata.org/numba-doc/latest/user/installing.html?highlight=numbapro_cuda_driver#installing-using-pip-on-x86-x86-64-platforms</a>, but if you are using conda then <code>cudatoolkit</code> should just work, assuming you&#39;ve installed suitable drivers etc <a href=\"http://numba.pydata.org/numba-doc/latest/user/installing.html?highlight=numbapro_cuda_driver#installing-using-conda-on-x86-x86-64-power-platforms\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://numba.pydata.org/numba-doc/latest/user/installing.html?highlight=numbapro_cuda_driver#installing-using-conda-on-x86-x86-64-power-platforms</a>",
  "id": "5bc4a2e81e23486b93c34ac7",
  "issues": [],
  "mentions": [
   {
    "screenName": "graffaner",
    "userId": "5bc10193d73408ce4fab47d2",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 3,
  "sent": "2018-10-15T14:23:36.856Z",
  "text": "@graffaner http://numba.pydata.org/numba-doc/latest/user/installing.html?highlight=numbapro_cuda_driver#installing-using-pip-on-x86-x86-64-platforms, but if you are using conda then `cudatoolkit` should just work, assuming you've installed suitable drivers etc http://numba.pydata.org/numba-doc/latest/user/installing.html?highlight=numbapro_cuda_driver#installing-using-conda-on-x86-x86-64-power-platforms",
  "unread": false,
  "urls": [
   {
    "url": "http://numba.pydata.org/numba-doc/latest/user/installing.html?highlight=numbapro_cuda_driver#installing-using-pip-on-x86-x86-64-platforms"
   },
   {
    "url": "http://numba.pydata.org/numba-doc/latest/user/installing.html?highlight=numbapro_cuda_driver#installing-using-conda-on-x86-x86-64-power-platforms"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "hmm...",
  "id": "5bc4a3a4ae7be940165f7787",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 3,
  "sent": "2018-10-15T14:26:44.333Z",
  "text": "hmm...",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "<ul>\n<li>argument 0: cannot determine Numba type of &lt;class &#39;builtin_function_or_method&#39;&gt;</li>\n</ul>\n",
  "id": "5bc4a3b5271506518d171d5a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 3,
  "sent": "2018-10-15T14:27:01.447Z",
  "text": "- argument 0: cannot determine Numba type of <class 'builtin_function_or_method'>",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "this is what happened when passing functions defined in c++ using pybind11 to numba :)",
  "id": "5bc4a3d1ef4afc4f287a40d5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 3,
  "sent": "2018-10-15T14:27:29.297Z",
  "text": "this is what happened when passing functions defined in c++ using pybind11 to numba :)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "so about function inlining , how can I build a set of helper functions that numba can inline when jitting?",
  "id": "5bc4a3f3c7bf7c36621622a0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 3,
  "sent": "2018-10-15T14:28:03.320Z",
  "text": "so about function inlining , how can I build a set of helper functions that numba can inline when jitting?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "I also tried using functions with  <code>@generated_jit</code> , but getting <code>TypeError: None is not a callable object</code>  ",
  "id": "5bc4a5f3ef4afc4f287a5032",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 3,
  "sent": "2018-10-15T14:36:35.439Z",
  "text": "I also tried using functions with  `@generated_jit` , but getting `TypeError: None is not a callable object\n`  ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "holy sh*t it works!",
  "id": "5bc4a71fc7bf7c3662163871",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 3,
  "sent": "2018-10-15T14:41:35.974Z",
  "text": "holy sh*t it works!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "If you think about how Numba is a compiler, how would a compiler inline pointers from libraries ? If you call the LAPACK library <code>dgemv</code> function via a function pointer in some compiled code, the compiler can&#39;t inline the LAPACK source, Numba can&#39;t do this either. Numba can inline code objects its compiled because the LLVM backend knows about them, so if you defined a <code>foo</code> function and call it from <code>bar</code>, there&#39;s a good chance <code>foo</code> will get inlined in <code>bar</code>.",
  "id": "5bc4a77664cfc273f9cedaf2",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 3,
  "sent": "2018-10-15T14:43:02.436Z",
  "text": "If you think about how Numba is a compiler, how would a compiler inline pointers from libraries ? If you call the LAPACK library `dgemv` function via a function pointer in some compiled code, the compiler can't inline the LAPACK source, Numba can't do this either. Numba can inline code objects its compiled because the LLVM backend knows about them, so if you defined a `foo` function and call it from `bar`, there's a good chance `foo` will get inlined in `bar`.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "And good, glad it works for you :)",
  "id": "5bc4a787ae7be940165f9482",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 3,
  "sent": "2018-10-15T14:43:19.175Z",
  "text": "And good, glad it works for you :)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "```python",
  "id": "5bc4a91be65a634336e1a577",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2018-10-15T14:50:03.508Z",
  "text": "```python",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "<pre><code class=\"python\"><span class=\"decorator\">@njit(nogil=True)</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(func)</span>:</span>\n    <span class=\"keyword\">return</span> func(<span class=\"number\">3.2</span>) + func(<span class=\"number\">3.4</span>)</code></pre>",
  "id": "5bc4a9213844923661431a47",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2018-10-15T14:50:09.575Z",
  "text": "```python\n@njit(nogil=True)\ndef run(func):\n    return func(3.2) + func(3.4)\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "can I tell from the assembly that the func is inlined?   <a href=\"https://la.wentropy.com/BbN1\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://la.wentropy.com/BbN1</a>",
  "id": "5bc4a931600c5f6423b2f2f3",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2018-10-15T14:50:25.947Z",
  "text": "can I tell from the assembly that the func is inlined?   https://la.wentropy.com/BbN1",
  "unread": false,
  "urls": [
   {
    "url": "https://la.wentropy.com/BbN1"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "this looks a bit obscure for me",
  "id": "5bc4a9391e23486b93c37c96",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2018-10-15T14:50:33.407Z",
  "text": "this looks a bit obscure for me",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "though there are a bunch of <code>callq    *%rax</code>",
  "id": "5bc4a94df659e67772bdbf48",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2018-10-15T14:50:53.074Z",
  "text": "though there are a bunch of `\tcallq\t*%rax`",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "i&#39;m a bit worried",
  "id": "5bc4a951c08b8b30671b0e9a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2018-10-15T14:50:57.246Z",
  "text": "i'm a bit worried",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "but again, the func is a <code>@generated_jit</code>",
  "id": "5bc4a95d6e5a401c2d76d6e4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2018-10-15T14:51:09.641Z",
  "text": "but again, the func is a `@generated_jit`",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "put a pointless sqrt or something in your function, it&#39;ll make it easier to track",
  "id": "5bc4a9a5c7bf7c3662164c4f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2018-10-15T14:52:21.233Z",
  "text": "put a pointless sqrt or something in your function, it'll make it easier to track",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "<a href=\"https://la.wentropy.com/1QXH\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://la.wentropy.com/1QXH</a>",
  "id": "5bc4a9e41c100a4f298df893",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2018-10-15T14:53:24.547Z",
  "text": "https://la.wentropy.com/1QXH",
  "unread": false,
  "urls": [
   {
    "url": "https://la.wentropy.com/1QXH"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "hmm, asm doesn&#39;t contain sqrt",
  "id": "5bc4a9ea600c5f6423b2f6af",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2018-10-15T14:53:30.600Z",
  "text": "hmm, asm doesn't contain sqrt",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "what should I search for",
  "id": "5bc4a9ed271506518d174939",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2018-10-15T14:53:33.878Z",
  "text": "what should I search for",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "did you create a side effect?",
  "id": "5bc4a9f33844923661431f89",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2018-10-15T14:53:39.348Z",
  "text": "did you create a side effect?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "um",
  "id": "5bc4a9f7c08b8b30671b13a5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2018-10-15T14:53:43.957Z",
  "text": "um",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "else it&#39;ll just get optimised out",
  "id": "5bc4a9fac08b8b30671b13ad",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2018-10-15T14:53:46.077Z",
  "text": "else it'll just get optimised out",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "<code>-_-</code> how can I correctly do this?",
  "id": "5bc4aa0e64cfc273f9ceee21",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2018-10-15T14:54:06.281Z",
  "text": "`-_-` how can I correctly do this?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "ouch, after jitting  I can&#39;t think of a way to generate side effect",
  "id": "5bc4aa57c7bf7c366216526f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2018-10-15T14:55:19.958Z",
  "text": "ouch, after jitting  I can't think of a way to generate side effect",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "could you just do <code>arg=np.sqrt(arg)</code> on the first line of <code>func</code>?",
  "id": "5bc4ab21e65a634336e1b268",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2018-10-15T14:58:41.121Z",
  "text": "could you just do `arg=np.sqrt(arg)` on the first line of `func`?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "```",
  "id": "5bc4ac0d271506518d175c32",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2018-10-15T15:02:37.404Z",
  "text": "```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "<pre><code>terminate called after throwing an instance of <span class=\"string\">'pybind11::error_already_set'</span>\n  <span class=\"function\"><span class=\"title\">what</span><span class=\"params\">()</span></span>:  TypingError: Failed <span class=\"keyword\">in</span> nopython mode pipeline (step: nopython frontend)\nUntyped global name <span class=\"string\">'np'</span>: cannot determine Numba type of &lt;class <span class=\"string\">'numba.ir.UndefinedType'</span>&gt;\n\nFile <span class=\"string\">\"amostest.py\"</span>, line <span class=\"number\">9</span>:\ndef <span class=\"function\"><span class=\"title\">run</span><span class=\"params\">(func, arg)</span></span>:\n    arg=np.<span class=\"function\"><span class=\"title\">sqrt</span><span class=\"params\">(arg)</span></span>\n    ^</code></pre>",
  "id": "5bc4ac10ef4afc4f287a7dd6",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2018-10-15T15:02:40.846Z",
  "text": "```\nterminate called after throwing an instance of 'pybind11::error_already_set'\n  what():  TypingError: Failed in nopython mode pipeline (step: nopython frontend)\nUntyped global name 'np': cannot determine Numba type of <class 'numba.ir.UndefinedType'>\n\nFile \"amostest.py\", line 9:\ndef run(func, arg):\n    arg=np.sqrt(arg)\n    ^\n\n\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "oh",
  "id": "5bc4ac163844923661432f83",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2018-10-15T15:02:46.438Z",
  "text": "oh",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "...",
  "id": "5bc4ac17ef4afc4f287a7de5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2018-10-15T15:02:47.245Z",
  "text": "...",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "sorry",
  "id": "5bc4ac196e5a401c2d76e8ee",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2018-10-15T15:02:49.051Z",
  "text": "sorry",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "did youimport numpy ?",
  "id": "5bc4ac1bae7be940165fb5c7",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2018-10-15T15:02:51.021Z",
  "text": "did youimport numpy ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "(as np)",
  "id": "5bc4ac226e5a401c2d76e912",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2018-10-15T15:02:58.940Z",
  "text": "(as np)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "<pre><code>    <span class=\"title\">vsqrtsd    8</span><span class=\"comment\">(%rsp)</span>, <span class=\"preprocessor\">%</span>xm<span class=\"title\">m0</span>, <span class=\"preprocessor\">%</span>xm<span class=\"title\">m0</span>\n    vmo<span class=\"title\">vsd    %xmm0</span>, <span class=\"number\">8</span><span class=\"comment\">(%rsp)</span>\n    movabsq    $PyEval_RestoreThread, <span class=\"preprocessor\">%</span>rcx\n    movq    <span class=\"preprocessor\">%</span>rax, <span class=\"preprocessor\">%</span>rdi\n    callq    *<span class=\"preprocessor\">%</span>rcx\n    movabsq    $PyFloat_FromDouble, <span class=\"preprocessor\">%</span>rax\n    vmo<span class=\"title\">vsd    8</span><span class=\"comment\">(%rsp)</span>, <span class=\"preprocessor\">%</span>xm<span class=\"title\">m0</span>\n    callq    *<span class=\"preprocessor\">%</span>rax\n    addq    $<span class=\"number\">32</span>, <span class=\"preprocessor\">%</span>rsp\n    popq    <span class=\"preprocessor\">%</span>rbx</code></pre>",
  "id": "5bc4ac3c3844923661433035",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2018-10-15T15:03:24.768Z",
  "text": "```\n\tvsqrtsd\t8(%rsp), %xmm0, %xmm0\n\tvmovsd\t%xmm0, 8(%rsp)\n\tmovabsq\t$PyEval_RestoreThread, %rcx\n\tmovq\t%rax, %rdi\n\tcallq\t*%rcx\n\tmovabsq\t$PyFloat_FromDouble, %rax\n\tvmovsd\t8(%rsp), %xmm0\n\tcallq\t*%rax\n\taddq\t$32, %rsp\n\tpopq\t%rbx\n\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "hmm, still not inlined",
  "id": "5bc4ac436e5a401c2d76e9f5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2018-10-15T15:03:31.070Z",
  "text": "hmm, still not inlined",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "those <code>callq</code> are calling the python API ",
  "id": "5bc4ac71271506518d175eaa",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2018-10-15T15:04:17.395Z",
  "text": "those `callq` are calling the python API ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "oh",
  "id": "5bc4ac75c08b8b30671b27c7",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2018-10-15T15:04:21.159Z",
  "text": "oh",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "!",
  "id": "5bc4ac786e5a401c2d76eabc",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2018-10-15T15:04:24.529Z",
  "text": "!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "<a href=\"https://la.wentropy.com/dRnj\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://la.wentropy.com/dRnj</a>",
  "id": "5bc4ac7ac08b8b30671b27d4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2018-10-15T15:04:26.240Z",
  "text": "https://la.wentropy.com/dRnj",
  "unread": false,
  "urls": [
   {
    "url": "https://la.wentropy.com/dRnj"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "so it&#39;s inlined?",
  "id": "5bc4ac7fe65a634336e1bcc4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2018-10-15T15:04:31.027Z",
  "text": "so it's inlined?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "omg, this is sick",
  "id": "5bc4acd982893a2f3be678a3",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2018-10-15T15:06:01.991Z",
  "text": "omg, this is sick",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "&lt;3 numba",
  "id": "5bc4acde600c5f6423b313d9",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2018-10-15T15:06:06.184Z",
  "text": "<3 numba",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "<pre><code># @njit(nogil=True, cache=True)\n@njit(nogil=True)\ndef run(func, arg):\n    for i <span class=\"keyword\">in</span> range(<span class=\"number\">10000</span>):\n        arg=func(numpy.sqrt(arg))\n    return arg\n\n\n    <span class=\"keyword\">vsqrtsd</span>    %<span class=\"literal\">xmm0</span>, %<span class=\"literal\">xmm0</span>, %<span class=\"literal\">xmm0</span>\n    <span class=\"keyword\">vsqrtsd</span>    %<span class=\"literal\">xmm0</span>, %<span class=\"literal\">xmm0</span>, %<span class=\"literal\">xmm0</span>\n    <span class=\"keyword\">vsqrtsd</span>    %<span class=\"literal\">xmm0</span>, %<span class=\"literal\">xmm0</span>, %<span class=\"literal\">xmm0</span>\n    <span class=\"keyword\">vsqrtsd</span>    %<span class=\"literal\">xmm0</span>, %<span class=\"literal\">xmm0</span>, %<span class=\"literal\">xmm0</span>\n    <span class=\"keyword\">vsqrtsd</span>    %<span class=\"literal\">xmm0</span>, %<span class=\"literal\">xmm0</span>, %<span class=\"literal\">xmm0</span>\n    <span class=\"keyword\">vsqrtsd</span>    %<span class=\"literal\">xmm0</span>, %<span class=\"literal\">xmm0</span>, %<span class=\"literal\">xmm0</span>\n    <span class=\"keyword\">vsqrtsd</span>    %<span class=\"literal\">xmm0</span>, %<span class=\"literal\">xmm0</span>, %<span class=\"literal\">xmm0</span>\n    <span class=\"keyword\">vsqrtsd</span>    %<span class=\"literal\">xmm0</span>, %<span class=\"literal\">xmm0</span>, %<span class=\"literal\">xmm0</span>\n    <span class=\"keyword\">vsqrtsd</span>    %<span class=\"literal\">xmm0</span>, %<span class=\"literal\">xmm0</span>, %<span class=\"literal\">xmm0</span>\n    <span class=\"keyword\">vsqrtsd</span>    %<span class=\"literal\">xmm0</span>, %<span class=\"literal\">xmm0</span>, %<span class=\"literal\">xmm0</span>\n    <span class=\"keyword\">vsqrtsd</span>    %<span class=\"literal\">xmm0</span>, %<span class=\"literal\">xmm0</span>, %<span class=\"literal\">xmm0</span>\n    <span class=\"keyword\">vsqrtsd</span>    %<span class=\"literal\">xmm0</span>, %<span class=\"literal\">xmm0</span>, %<span class=\"literal\">xmm0</span>\n    <span class=\"keyword\">vsqrtsd</span>    %<span class=\"literal\">xmm0</span>, %<span class=\"literal\">xmm0</span>, %<span class=\"literal\">xmm0</span>\n    <span class=\"keyword\">vsqrtsd</span>    %<span class=\"literal\">xmm0</span>, %<span class=\"literal\">xmm0</span>, %<span class=\"literal\">xmm0</span>\n    <span class=\"keyword\">vsqrtsd</span>    %<span class=\"literal\">xmm0</span>, %<span class=\"literal\">xmm0</span>, %<span class=\"literal\">xmm0</span>\n    <span class=\"keyword\">vsqrtsd</span>    %<span class=\"literal\">xmm0</span>, %<span class=\"literal\">xmm0</span>, %<span class=\"literal\">xmm0</span>\n    <span class=\"keyword\">vsqrtsd</span>    %<span class=\"literal\">xmm0</span>, %<span class=\"literal\">xmm0</span>, %<span class=\"literal\">xmm0</span>\n    <span class=\"keyword\">vsqrtsd</span>    %<span class=\"literal\">xmm0</span>, %<span class=\"literal\">xmm0</span>, %<span class=\"literal\">xmm0</span>\n    <span class=\"keyword\">vsqrtsd</span>    %<span class=\"literal\">xmm0</span>, %<span class=\"literal\">xmm0</span>, %<span class=\"literal\">xmm0</span>\n    <span class=\"keyword\">vsqrtsd</span>    %<span class=\"literal\">xmm0</span>, %<span class=\"literal\">xmm0</span>, %<span class=\"literal\">xmm0</span>\n    addq    <span class=\"number\">$20</span>, %<span class=\"literal\">rax</span>\n    <span class=\"keyword\">jne</span>    <span class=\"string\">.LBB0</span>_1\n    <span class=\"keyword\">vmovsd</span>    %<span class=\"literal\">xmm0</span>, (%<span class=\"literal\">rdi</span>)\n    xorl    %<span class=\"literal\">eax</span>, %<span class=\"literal\">eax</span>\n    retq</code></pre>",
  "id": "5bc4acf564cfc273f9cf02da",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2018-10-15T15:06:29.051Z",
  "text": "```\n# @njit(nogil=True, cache=True)\n@njit(nogil=True)\ndef run(func, arg):\n    for i in range(10000):\n        arg=func(numpy.sqrt(arg))\n    return arg\n\n\n\tvsqrtsd\t%xmm0, %xmm0, %xmm0\n\tvsqrtsd\t%xmm0, %xmm0, %xmm0\n\tvsqrtsd\t%xmm0, %xmm0, %xmm0\n\tvsqrtsd\t%xmm0, %xmm0, %xmm0\n\tvsqrtsd\t%xmm0, %xmm0, %xmm0\n\tvsqrtsd\t%xmm0, %xmm0, %xmm0\n\tvsqrtsd\t%xmm0, %xmm0, %xmm0\n\tvsqrtsd\t%xmm0, %xmm0, %xmm0\n\tvsqrtsd\t%xmm0, %xmm0, %xmm0\n\tvsqrtsd\t%xmm0, %xmm0, %xmm0\n\tvsqrtsd\t%xmm0, %xmm0, %xmm0\n\tvsqrtsd\t%xmm0, %xmm0, %xmm0\n\tvsqrtsd\t%xmm0, %xmm0, %xmm0\n\tvsqrtsd\t%xmm0, %xmm0, %xmm0\n\tvsqrtsd\t%xmm0, %xmm0, %xmm0\n\tvsqrtsd\t%xmm0, %xmm0, %xmm0\n\tvsqrtsd\t%xmm0, %xmm0, %xmm0\n\tvsqrtsd\t%xmm0, %xmm0, %xmm0\n\tvsqrtsd\t%xmm0, %xmm0, %xmm0\n\tvsqrtsd\t%xmm0, %xmm0, %xmm0\n\taddq\t$20, %rax\n\tjne\t.LBB0_1\n\tvmovsd\t%xmm0, (%rdi)\n\txorl\t%eax, %eax\n\tretq\n\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": ":)",
  "id": "5bc4ad2c82893a2f3be67bf5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2018-10-15T15:07:24.861Z",
  "text": ":)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "install SVML and add <code>fastmath=True</code> to the decorator",
  "id": "5bc4ad3eae7be940165fbe33",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2018-10-15T15:07:42.668Z",
  "text": "install SVML and add `fastmath=True` to the decorator",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "I can&#39;t easily tell if what you&#39;ve written is inlined without seeing the caller and callee",
  "id": "5bc4ad59bbdc0b2505467a45",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2018-10-15T15:08:09.470Z",
  "text": "I can't easily tell if what you've written is inlined without seeing the caller and callee",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "huh? you mean the above isn&#39;t enough to approve the call is inlined?",
  "id": "5bc4ad951c100a4f298e1287",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2018-10-15T15:09:09.426Z",
  "text": "huh? you mean the above isn't enough to approve the call is inlined?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-10-15T15:10:34.359Z",
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "errr, the sqrt call is being made in the caller",
  "id": "5bc4ade16e5a401c2d76f2eb",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2018-10-15T15:10:25.968Z",
  "text": "errr, the sqrt call is being made in the caller",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "does <code>func</code> also contain a sqrt()?",
  "id": "5bc4adf9e65a634336e1c993",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2018-10-15T15:10:49.401Z",
  "text": "does `func` also contain a sqrt()?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "nope",
  "id": "5bc4ae111c100a4f298e1527",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2018-10-15T15:11:13.877Z",
  "text": "nope",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "it&#39;s `lambda x : x",
  "id": "5bc4ae1cae7be940165fc78d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2018-10-15T15:11:24.674Z",
  "text": "it's `lambda x : x",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "<pre><code><span class=\"decorator\">@generated_jit(nopython=True)</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">epq</span><span class=\"params\">(x)</span>:</span>\n    <span class=\"keyword\">return</span> <span class=\"keyword\">lambda</span> x : x</code></pre>",
  "id": "5bc4ae37f659e67772bde313",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2018-10-15T15:11:51.577Z",
  "text": "```\n@generated_jit(nopython=True)\ndef epq(x):\n    return lambda x : x\n\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "perhaps make that <code>lambda x: np.sqrt(x)</code> or something",
  "id": "5bc4ae6bae7be940165fca8d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2018-10-15T15:12:43.369Z",
  "text": "perhaps make that `lambda x: np.sqrt(x)` or something",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "chances are it&#39;ll manage to inline it anyway",
  "id": "5bc4ae761c100a4f298e19be",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2018-10-15T15:12:54.367Z",
  "text": "chances are it'll manage to inline it anyway",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "the issue will be for your real code whether it&#39;ll manage (and whether it really matters)",
  "id": "5bc4ae90435c2a518eaf4957",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2018-10-15T15:13:20.092Z",
  "text": "the issue will be for your real code whether it'll manage (and whether it really matters)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "yeah, well I need to make sure it&#39;s at least trying to inline something",
  "id": "5bc4aea71e23486b93c3a821",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2018-10-15T15:13:43.332Z",
  "text": "yeah, well I need to make sure it's at least trying to inline something",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "which is nice :)",
  "id": "5bc4aeb0f659e67772bde789",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2018-10-15T15:13:52.661Z",
  "text": "which is nice :)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "does it only support returning lambdas? or can I return a real function?",
  "id": "5bc4aecc1e23486b93c3a93a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2018-10-15T15:14:20.841Z",
  "text": "does it only support returning lambdas? or can I return a real function?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "you can return any valid function",
  "id": "5bc4aef8c7bf7c36621677a5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2018-10-15T15:15:04.131Z",
  "text": "you can return any valid function",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "that&#39;s great",
  "id": "5bc4af0c64cfc273f9cf0fec",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2018-10-15T15:15:24.899Z",
  "text": "that's great",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "by valid you mean the same argument list of the meta function?",
  "id": "5bc4af79600c5f6423b326de",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2018-10-15T15:17:13.587Z",
  "text": "by valid you mean the same argument list of the meta function?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "I mean valid as in, it will actually JIT",
  "id": "5bc4b0031e23486b93c3b2a8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 2,
  "sent": "2018-10-15T15:19:31.257Z",
  "text": "I mean valid as in, it will actually JIT",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "ok, but the argument list should have the same number for making correct forwarding..",
  "id": "5bc4b08fae7be940165fdd15",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 3,
  "sent": "2018-10-15T15:21:51.694Z",
  "text": "ok, but the argument list should have the same number for making correct forwarding..",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "yeah, the function has to be valid at the call site, args etc have to line up",
  "id": "5bc4b0c9271506518d177cf2",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 3,
  "sent": "2018-10-15T15:22:49.201Z",
  "text": "yeah, the function has to be valid at the call site, args etc have to line up",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "all generated_jit is doing is allowing specialisation of function selection at compile time based on type",
  "id": "5bc4b0e86e5a401c2d7708d6",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 3,
  "sent": "2018-10-15T15:23:20.505Z",
  "text": "all generated_jit is doing is allowing specialisation of function selection at compile time based on type",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "that&#39;s exactly what I need.",
  "id": "5bc4b127ae7be940165fe329",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 3,
  "sent": "2018-10-15T15:24:23.064Z",
  "text": "that's exactly what I need.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "Hmm, things go a  bit wild now.",
  "id": "5bc4b21c271506518d17855f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 4,
  "sent": "2018-10-15T15:28:28.214Z",
  "text": "Hmm, things go a  bit wild now.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "<pre><code class=\"python\"><span class=\"decorator\">@njit(parallel=True, nogil=True, cache=True)</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(graph, s)</span>:</span>\n    print(graph.category)\n    print(graph.cat(graph, s))</code></pre>",
  "id": "5bc4b21fc08b8b30671b53f0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 4,
  "sent": "2018-10-15T15:28:31.627Z",
  "text": "```python\n@njit(parallel=True, nogil=True, cache=True)\ndef run(graph, s):\n    print(graph.category)\n    print(graph.cat(graph, s))\n\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "the graph object has the category attribute and successfully printed, but when passing into the <code>@generated_jit</code> function : graph.cat,  numba errors saying graph doesn&#39;t have the category attr",
  "id": "5bc4b24bbbdc0b250546991e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 4,
  "sent": "2018-10-15T15:29:15.889Z",
  "text": "the graph object has the category attribute and successfully printed, but when passing into the `@generated_jit` function : graph.cat,  numba errors saying graph doesn't have the category attr",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "it seems the jitter cannot seem the definition in <code>@generated_jit</code> env",
  "id": "5bc4b2b1435c2a518eaf614a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 4,
  "sent": "2018-10-15T15:30:57.133Z",
  "text": "it seems the jitter cannot seem the definition in `@generated_jit` env",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "```",
  "id": "5bc4b2b3600c5f6423b33fcd",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 4,
  "sent": "2018-10-15T15:30:59.813Z",
  "text": "```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "<pre><code>numba<span class=\"class\">.errors</span><span class=\"class\">.InternalError</span>: <span class=\"string\">'NamedTuple'</span> <span class=\"tag\">object</span> has no attribute <span class=\"string\">'category'</span></code></pre>",
  "id": "5bc4b2b83844923661436395",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 4,
  "sent": "2018-10-15T15:31:04.362Z",
  "text": "```\nnumba.errors.InternalError: 'NamedTuple' object has no attribute 'category'\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "almost there, just seeing the last weird error <code>&#39;&gt;&#39; not supported between instances of &#39;int&#39; and &#39;Integer&#39;</code>",
  "id": "5bc4bb9f1e23486b93c4010e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 4,
  "sent": "2018-10-15T16:09:03.194Z",
  "text": "almost there, just seeing the last weird error `'>' not supported between instances of 'int' and 'Integer'`",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "<pre><code><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cat2</span><span class=\"params\">(label)</span>:</span>\n<span class=\"decorator\">    @generated_jit(nopython=True)</span>\n    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cat2impl</span><span class=\"params\">(v)</span>:</span>\n        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(label)):\n            <span class=\"keyword\">if</span> v &lt; label[i]:\n                <span class=\"keyword\">return</span> uint32(i)\n    <span class=\"keyword\">return</span> cat2impl</code></pre>",
  "id": "5bc4bba6c7bf7c366216cedd",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 4,
  "sent": "2018-10-15T16:09:10.478Z",
  "text": "```\ndef cat2(label):\n    @generated_jit(nopython=True)\n    def cat2impl(v):\n        for i in range(len(label)):\n            if v < label[i]:\n                return uint32(i)\n    return cat2impl\n\n\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "I don&#39;t even use the <code>&gt;</code> operator here",
  "id": "5bc4bbb664cfc273f9cf6e4d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 4,
  "sent": "2018-10-15T16:09:26.280Z",
  "text": "I don't even use the `>` operator here",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "you are probably mixing up Types and values",
  "id": "5bc4bd641e23486b93c40e7e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 4,
  "sent": "2018-10-15T16:16:36.863Z",
  "text": "you are probably mixing up Types and values",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "what&#39;s <code>v</code> ?",
  "id": "5bc4bd76bbdc0b250546e4e0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 4,
  "sent": "2018-10-15T16:16:54.789Z",
  "text": "what's `v` ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "I expect <code>label[i]</code> is the source of the <code>int</code>",
  "id": "5bc4bd8b384492366143b4c9",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 4,
  "sent": "2018-10-15T16:17:15.144Z",
  "text": "I expect `label[i]` is the source of the `int`",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "um, I&#39;ve fixed that type issue<pre><code><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cat2</span><span class=\"params\">(label)</span>:</span>\n<span class=\"decorator\">    @generated_jit(nopython=True, nogil=True)</span>\n    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cat2impl</span><span class=\"params\">(v)</span>:</span>\n        v2 = uint32(v)\n        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(label.size):\n            <span class=\"keyword\">if</span> v2 &lt; label[i]:\n                <span class=\"keyword\">return</span> uint32(i)\n    <span class=\"keyword\">return</span> cat2impl</code></pre>",
  "id": "5bc4bf51ef4afc4f287b016c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 4,
  "sent": "2018-10-15T16:24:49.712Z",
  "text": "um, I've fixed that type issue\n```\ndef cat2(label):\n    @generated_jit(nopython=True, nogil=True)\n    def cat2impl(v):\n        v2 = uint32(v)\n        for i in range(label.size):\n            if v2 < label[i]:\n                return uint32(i)\n    return cat2impl\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "the label is of type  numpy.array_t&lt;uint32_t&gt;",
  "id": "5bc4bf5bc08b8b30671bb725",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 4,
  "sent": "2018-10-15T16:24:59.926Z",
  "text": "the label is of type  numpy.array_t<uint32_t>",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "but now I&#39;m seeing this    :  setting an array element with a sequence.",
  "id": "5bc4bf6ac7bf7c366216e9d6",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 4,
  "sent": "2018-10-15T16:25:14.904Z",
  "text": "but now I'm seeing this    :  setting an array element with a sequence.\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "the callsite of this generated_jit func is  :   <pre><code><span class=\"decorator\">@njit(parallel=True, nogil=True)</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(graph, s)</span>:</span>\n    print(graph.cat(s))</code></pre>",
  "id": "5bc4bf85271506518d17e5c7",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 4,
  "sent": "2018-10-15T16:25:41.131Z",
  "text": "the callsite of this generated_jit func is  :   \n```\n@njit(parallel=True, nogil=True)\ndef run(graph, s):\n    print(graph.cat(s))\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "graph.cat is an instance of <code>cat2impl</code>",
  "id": "5bc4bf9764cfc273f9cf8838",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 4,
  "sent": "2018-10-15T16:25:59.035Z",
  "text": "graph.cat is an instance of `cat2impl`",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "are you setting an array element with a sequence ?",
  "id": "5bc4c0ac82893a2f3be708d8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2018-10-15T16:30:36.170Z",
  "text": "are you setting an array element with a sequence ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "nope, that&#39;s all the code I&#39;ve wrote",
  "id": "5bc4c0d8384492366143c7ab",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T16:31:20.996Z",
  "text": "nope, that's all the code I've wrote",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "here is the stacktrace of numba",
  "id": "5bc4c0ffc7bf7c366216f37d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T16:31:59.216Z",
  "text": "here is the stacktrace of numba",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "<a href=\"https://la.wentropy.com/5_RV\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://la.wentropy.com/5_RV</a>",
  "id": "5bc4c100ae7be94016605578",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T16:32:00.411Z",
  "text": "https://la.wentropy.com/5_RV",
  "unread": false,
  "urls": [
   {
    "url": "https://la.wentropy.com/5_RV"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "it erros at the print call",
  "id": "5bc4c107e65a634336e2510c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T16:32:07.435Z",
  "text": "it erros at the print call",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "there isn&#39;t any array element modification calls",
  "id": "5bc4c141271506518d17f3fc",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T16:33:05.687Z",
  "text": "there isn't any array element modification calls",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "that error is probably coming from numpy somewhere",
  "id": "5bc4c22f1c100a4f298ea85a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T16:37:03.290Z",
  "text": "that error is probably coming from numpy somewhere",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "hmm",
  "id": "5bc4c23582893a2f3be7142f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T16:37:09.504Z",
  "text": "hmm",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "non-jitted run function:<pre><code><span class=\"number\">2018.10</span><span class=\"number\">.16</span> <span class=\"number\">00</span>:<span class=\"number\">39</span>:<span class=\"number\">27.319000</span> [ <span class=\"number\">22</span> ] {<span class=\"number\">9</span>a5f3283-b476-<span class=\"number\">4408</span>-adc0-<span class=\"number\">706</span>f5fc8b077} &lt;Error&gt; <span class=\"string\">executeQuery:</span> <span class=\"string\">Code:</span> <span class=\"number\">36</span>, e.displayText() = <span class=\"string\">DB:</span>:<span class=\"string\">Exception:</span> Runtime error <span class=\"keyword\">for</span> python graph <span class=\"string\">function:</span>\n<span class=\"string\">ValueError:</span> setting an array element with a sequence.\n<span class=\"label\">\nAt:</span>\n  &lt;string&gt;(<span class=\"number\">21</span>): cat2impl\n  <span class=\"regexp\">/home/</span>amos<span class=\"regexp\">/git/</span>ClickHouse<span class=\"regexp\">/miniconda3/</span>lib<span class=\"regexp\">/python3.7/</span>site-packages<span class=\"regexp\">/numba/</span>dispatcher.py(<span class=\"number\">112</span>): _get_implementation\n  <span class=\"regexp\">/home/</span>amos<span class=\"regexp\">/git/</span>ClickHouse<span class=\"regexp\">/miniconda3/</span>lib<span class=\"regexp\">/python3.7/</span>site-packages<span class=\"regexp\">/numba/</span>dispatcher.py(<span class=\"number\">76</span>): compile\n  <span class=\"regexp\">/home/</span>amos<span class=\"regexp\">/git/</span>ClickHouse<span class=\"regexp\">/miniconda3/</span>lib<span class=\"regexp\">/python3.7/</span>site-packages<span class=\"regexp\">/numba/</span>dispatcher.py(<span class=\"number\">658</span>): compile\n  <span class=\"regexp\">/home/</span>amos<span class=\"regexp\">/git/</span>ClickHouse<span class=\"regexp\">/miniconda3/</span>lib<span class=\"regexp\">/python3.7/</span>site-packages<span class=\"regexp\">/numba/</span>compiler_lock.py(<span class=\"number\">32</span>): _acquire_compile_lock\n  <span class=\"regexp\">/home/</span>amos<span class=\"regexp\">/git/</span>ClickHouse<span class=\"regexp\">/miniconda3/</span>lib<span class=\"regexp\">/python3.7/</span>site-packages<span class=\"regexp\">/numba/</span>dispatcher.py(<span class=\"number\">367</span>): _compile_for_args\n  data<span class=\"regexp\">/python/</span>cx.py(<span class=\"number\">14</span>): run</code></pre>",
  "id": "5bc4c2ecc7bf7c366216ffba",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T16:40:12.736Z",
  "text": "non-jitted run function:\n\n```\n2018.10.16 00:39:27.319000 [ 22 ] {9a5f3283-b476-4408-adc0-706f5fc8b077} <Error> executeQuery: Code: 36, e.displayText() = DB::Exception: Runtime error for python graph function:\nValueError: setting an array element with a sequence.\n\nAt:\n  <string>(21): cat2impl\n  /home/amos/git/ClickHouse/miniconda3/lib/python3.7/site-packages/numba/dispatcher.py(112): _get_implementation\n  /home/amos/git/ClickHouse/miniconda3/lib/python3.7/site-packages/numba/dispatcher.py(76): compile\n  /home/amos/git/ClickHouse/miniconda3/lib/python3.7/site-packages/numba/dispatcher.py(658): compile\n  /home/amos/git/ClickHouse/miniconda3/lib/python3.7/site-packages/numba/compiler_lock.py(32): _acquire_compile_lock\n  /home/amos/git/ClickHouse/miniconda3/lib/python3.7/site-packages/numba/dispatcher.py(367): _compile_for_args\n  data/python/cx.py(14): run\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "weird",
  "id": "5bc4c2f56e5a401c2d77815c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T16:40:21.559Z",
  "text": "weird",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "it seems arguments that passed into <code>@generated_jit</code> functions get converted to type <code>Float</code>, <code>Integer</code> instead of uint32_t ",
  "id": "5bc4c4051c100a4f298eb541",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T16:44:53.542Z",
  "text": "it seems arguments that passed into `@generated_jit` functions get converted to type `Float`, `Integer` instead of uint32_t ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "the <code>setting an array element with a sequence.</code> comes from this line <code>if v2 &lt; label[i]:</code> bizarre...",
  "id": "5bc4c4b3384492366143de90",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T16:47:47.248Z",
  "text": "the `setting an array element with a sequence.` comes from this line `            if v2 < label[i]: ` bizarre...",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "ok, so I think the problem here is that the difference between the typing and the implementation is not being acknowledged",
  "id": "5bc4c725c7bf7c3662171e99",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T16:58:13.553Z",
  "text": "ok, so I think the problem here is that the difference between the typing and the implementation is not being acknowledged",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "changing to this doesn&#39;t work either<pre><code><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cat2</span><span class=\"params\">(label)</span>:</span>\n<span class=\"decorator\">    @generated_jit(nopython=True, nogil=True)</span>\n    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cat2impl</span><span class=\"params\">(v)</span>:</span>\n        v2 = uint32(v)\n        <span class=\"keyword\">for</span> i, l <span class=\"keyword\">in</span> enumerate(label):\n            <span class=\"keyword\">if</span> v2 &lt; l:\n                <span class=\"keyword\">return</span> uint32(i)\n    <span class=\"keyword\">return</span> cat2impl</code></pre>",
  "id": "5bc4c726c08b8b30671bee5c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T16:58:14.167Z",
  "text": "changing to this doesn't work either\n```\ndef cat2(label):\n    @generated_jit(nopython=True, nogil=True)\n    def cat2impl(v):\n        v2 = uint32(v)\n        for i, l in enumerate(label):\n            if v2 < l:\n                return uint32(i)\n    return cat2impl\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "um, so how can  I work around this",
  "id": "5bc4c735271506518d181c52",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 7,
  "sent": "2018-10-15T16:58:29.517Z",
  "text": "um, so how can  I work around this",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "this is basically the last step ...",
  "id": "5bc4c73eef4afc4f287b3a19",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 7,
  "sent": "2018-10-15T16:58:38.443Z",
  "text": "this is basically the last step ...",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "in fact, having actually read this properly, I should have spotted this a while back",
  "id": "5bc4c74a271506518d181c94",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 7,
  "sent": "2018-10-15T16:58:50.539Z",
  "text": "in fact, having actually read this properly, I should have spotted this a while back",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "hmm, what do you mean",
  "id": "5bc4c7596e5a401c2d77a455",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 7,
  "sent": "2018-10-15T16:59:05.992Z",
  "text": "hmm, what do you mean",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "your generated jit decorated function needs to return a function",
  "id": "5bc4c784600c5f6423b3cb9a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 7,
  "sent": "2018-10-15T16:59:48.755Z",
  "text": "your generated jit decorated function needs to return a function",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "this is the implementation based on the type specialization you have chosen",
  "id": "5bc4c793bbdc0b2505472cc7",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 7,
  "sent": "2018-10-15T17:00:03.202Z",
  "text": "this is the implementation based on the type specialization you have chosen",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "oh ",
  "id": "5bc4c79ac7bf7c3662172027",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 7,
  "sent": "2018-10-15T17:00:10.339Z",
  "text": "oh ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "oh!",
  "id": "5bc4c7a6384492366143f57b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 7,
  "sent": "2018-10-15T17:00:22.441Z",
  "text": "oh!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "like this ?<pre><code><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cat2</span><span class=\"params\">(label)</span>:</span>\n<span class=\"decorator\">    @generated_jit(nopython=True, nogil=True)</span>\n    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cat2impl</span><span class=\"params\">(v)</span>:</span>\n        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">ret</span><span class=\"params\">(v)</span>:</span>\n            v2 = uint32(v)\n            <span class=\"keyword\">for</span> i, l <span class=\"keyword\">in</span> enumerate(label):\n                <span class=\"keyword\">if</span> v2 &lt; l:\n                    <span class=\"keyword\">return</span> uint32(i)\n        <span class=\"keyword\">return</span> ret\n    <span class=\"keyword\">return</span> cat2impl</code></pre>",
  "id": "5bc4c7e482893a2f3be73af9",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 7,
  "sent": "2018-10-15T17:01:24.949Z",
  "text": "like this ?\n```\ndef cat2(label):\n    @generated_jit(nopython=True, nogil=True)\n    def cat2impl(v):\n        def ret(v):\n            v2 = uint32(v)\n            for i, l in enumerate(label):\n                if v2 < l:\n                    return uint32(i)\n        return ret\n    return cat2impl\n```\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<pre><code><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np\n\n<span class=\"keyword\">from</span> numba <span class=\"keyword\">import</span> generated_jit, types\n\n<span class=\"decorator\">@generated_jit(nopython=True)</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">is_missing</span><span class=\"params\">(x)</span>:</span>\n    <span class=\"comment\"># HERE `x` is a Numba Type, this part of the function is used for type inference.</span>\n    <span class=\"keyword\">if</span> isinstance(x, types.Float):\n        <span class=\"keyword\">return</span> <span class=\"keyword\">lambda</span> x: np.isnan(x) <span class=\"comment\"># &lt;--  this lambda is an actual implementation, based on the decision to specialize on a numba types.Float type.</span>\n    <span class=\"keyword\">else</span>:\n      <span class=\"keyword\">raise</span> RuntimeError(<span class=\"string\">\"rejecting all other types\"</span>)</code></pre>",
  "id": "5bc4c80abbdc0b2505473174",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 7,
  "sent": "2018-10-15T17:02:02.714Z",
  "text": "```\nimport numpy as np\n\nfrom numba import generated_jit, types\n\n@generated_jit(nopython=True)\ndef is_missing(x):\n    # HERE `x` is a Numba Type, this part of the function is used for type inference.\n    if isinstance(x, types.Float):\n        return lambda x: np.isnan(x) # <--  this lambda is an actual implementation, based on the decision to specialize on a numba types.Float type.\n    else:\n      raise RuntimeError(\"rejecting all other types\")\n```\n\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "^ there&#39;s an example with me scribbling on it",
  "id": "5bc4c81d82893a2f3be73ba8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 7,
  "sent": "2018-10-15T17:02:21.318Z",
  "text": "^ there's an example with me scribbling on it",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "yay!!! it works",
  "id": "5bc4c820384492366143fa26",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 7,
  "sent": "2018-10-15T17:02:24.866Z",
  "text": "yay!!! it works",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "so about the generate_jit decoration",
  "id": "5bc4c82f271506518d182381",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 7,
  "sent": "2018-10-15T17:02:39.230Z",
  "text": "so about the generate_jit decoration",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "does it have ammorgated types?",
  "id": "5bc4c83682893a2f3be73c27",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 7,
  "sent": "2018-10-15T17:02:46.398Z",
  "text": "does it have ammorgated types?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "<code>types.Float</code> looks like 32, 64 ",
  "id": "5bc4c83e6e5a401c2d77ab43",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 7,
  "sent": "2018-10-15T17:02:54.543Z",
  "text": "`types.Float` looks like 32, 64 ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "apologies, had I been not doing about 10 things at once I might have spotted that earlier :)",
  "id": "5bc4c83f6e5a401c2d77ab47",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 7,
  "sent": "2018-10-15T17:02:55.900Z",
  "text": "apologies, had I been not doing about 10 things at once I might have spotted that earlier :)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "If you <code>from numba import types; print(dir(types))</code> you&#39;ll see all the types",
  "id": "5bc4c8ac435c2a518eaff15c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T17:04:44.905Z",
  "text": "If you `from numba import types; print(dir(types))` you'll see all the types",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "thanks",
  "id": "5bc4c8b7435c2a518eaff1c2",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T17:04:55.609Z",
  "text": "thanks",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "often, we just want some broad type class",
  "id": "5bc4c8bb435c2a518eaff258",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T17:04:59.469Z",
  "text": "often, we just want some broad type class",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "hmm, in fact it still doesn&#39;t work",
  "id": "5bc4c8bef659e67772be9e9f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T17:05:02.570Z",
  "text": "hmm, in fact it still doesn't work",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "<pre><code><span class=\"attribute\">NotImplementedError</span>: <span class=\"string\">?uint32 cannot be represented as a Numpy dtype</span></code></pre>",
  "id": "5bc4c8cfe65a634336e2870f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T17:05:19.875Z",
  "text": "    NotImplementedError: ?uint32 cannot be represented as a Numpy dtype\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "and in general, type inference does a load better if you let it pick the types as there&#39;s so many rules to navigate",
  "id": "5bc4c8d2c7bf7c36621729ea",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T17:05:22.865Z",
  "text": "and in general, type inference does a load better if you let it pick the types as there's so many rules to navigate",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "where is your <code>uint32</code> from",
  "id": "5bc4c8e782893a2f3be73fd6",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T17:05:43.635Z",
  "text": "where is your `uint32` from",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "numpy.uint32(i)  ",
  "id": "5bc4c8eef659e67772be9fba",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T17:05:50.271Z",
  "text": "numpy.uint32(i)  ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "<pre><code><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cat2</span><span class=\"params\">(label)</span>:</span>\n<span class=\"decorator\">    @generated_jit(nopython=True, nogil=True)</span>\n    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cat2impl</span><span class=\"params\">(v)</span>:</span>\n        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">ret</span><span class=\"params\">(v)</span>:</span>\n            v2 = uint32(v)\n            <span class=\"keyword\">for</span> i, l <span class=\"keyword\">in</span> enumerate(label):\n                <span class=\"keyword\">if</span> v2 &lt; l:\n                    <span class=\"keyword\">return</span> uint32(i)\n        <span class=\"keyword\">return</span> ret\n    <span class=\"keyword\">return</span> cat2impl</code></pre>",
  "id": "5bc4c8f8c08b8b30671bfbf6",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T17:06:00.927Z",
  "text": "```\ndef cat2(label):\n    @generated_jit(nopython=True, nogil=True)\n    def cat2impl(v):\n        def ret(v):\n            v2 = uint32(v)\n            for i, l in enumerate(label):\n                if v2 < l:\n                    return uint32(i)\n        return ret\n    return cat2impl\n\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "oh your function can return a <code>unit32</code> but it could also return <code>None</code>",
  "id": "5bc4c922bbdc0b2505473ac8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2018-10-15T17:06:42.008Z",
  "text": "oh your function can return a `unit32` but it could also return `None`",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "hmm, ",
  "id": "5bc4c92e384492366144029f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2018-10-15T17:06:54.134Z",
  "text": "hmm, ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "can I have an exception?",
  "id": "5bc4c942c08b8b30671bfdf5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2018-10-15T17:07:14.690Z",
  "text": "can I have an exception?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "like unreachable",
  "id": "5bc4c956e65a634336e2894c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2018-10-15T17:07:34.433Z",
  "text": "like unreachable",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-10-15T17:08:39.951Z",
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "try:<pre><code><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cat2</span><span class=\"params\">(label)</span>:</span>\n<span class=\"decorator\">    @generated_jit(nopython=True, nogil=True)</span>\n    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cat2impl</span><span class=\"params\">(v)</span>:</span>\n        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">ret</span><span class=\"params\">(v)</span>:</span>\n            v2 = uint32(v)\n            default_ret = uint32(<span class=\"number\">0</span>)\n            <span class=\"keyword\">for</span> i, l <span class=\"keyword\">in</span> enumerate(label):\n                <span class=\"keyword\">if</span> v2 &lt; l:\n                    <span class=\"keyword\">return</span> uint32(i)\n          <span class=\"keyword\">raise</span> RuntimeError(<span class=\"string\">\"unreachable\"</span>)\n          <span class=\"keyword\">return</span> default_ret \n        <span class=\"keyword\">return</span> ret\n    <span class=\"keyword\">return</span> cat2impl</code></pre>",
  "id": "5bc4c9741e23486b93c465c6",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2018-10-15T17:08:04.006Z",
  "text": "try:\n```\ndef cat2(label):\n    @generated_jit(nopython=True, nogil=True)\n    def cat2impl(v):\n        def ret(v):\n            v2 = uint32(v)\n            default_ret = uint32(0)\n            for i, l in enumerate(label):\n                if v2 < l:\n                    return uint32(i)\n          raise RuntimeError(\"unreachable\")\n          return default_ret \n        return ret\n    return cat2impl\n\n```",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "hmm, the detault_ret is a reserved word?",
  "id": "5bc4c98d600c5f6423b3d78c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 8,
  "sent": "2018-10-15T17:08:29.278Z",
  "text": "hmm, the detault_ret is a reserved word?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "i just did this <pre><code><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cat2</span><span class=\"params\">(label)</span>:</span>\n<span class=\"decorator\">    @generated_jit(nopython=True, nogil=True)</span>\n    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cat2impl</span><span class=\"params\">(v)</span>:</span>\n        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">ret</span><span class=\"params\">(v)</span>:</span>\n            v2 = uint32(v)\n            <span class=\"keyword\">for</span> i, l <span class=\"keyword\">in</span> enumerate(label):\n                <span class=\"keyword\">if</span> v2 &lt; l:\n                    <span class=\"keyword\">return</span> uint32(i)\n            <span class=\"keyword\">return</span> uint32(<span class=\"number\">0</span>)\n        <span class=\"keyword\">return</span> ret\n    <span class=\"keyword\">return</span> cat2impl</code></pre>",
  "id": "5bc4c996ae7be94016609030",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 8,
  "sent": "2018-10-15T17:08:38.509Z",
  "text": "i just did this \n```\ndef cat2(label):\n    @generated_jit(nopython=True, nogil=True)\n    def cat2impl(v):\n        def ret(v):\n            v2 = uint32(v)\n            for i, l in enumerate(label):\n                if v2 < l:\n                    return uint32(i)\n            return uint32(0)\n        return ret\n    return cat2impl\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "and it works",
  "id": "5bc4c99882893a2f3be74571",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 8,
  "sent": "2018-10-15T17:08:40.585Z",
  "text": "and it works",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-10-15T17:09:10.899Z",
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "try:<pre><code><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cat2</span><span class=\"params\">(label)</span>:</span>\n<span class=\"decorator\">    @generated_jit(nopython=True, nogil=True)</span>\n    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cat2impl</span><span class=\"params\">(v)</span>:</span>\n        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">ret</span><span class=\"params\">(v)</span>:</span>\n            v2 = uint32(v)\n            default_ret = uint32(<span class=\"number\">0</span>)\n            <span class=\"keyword\">for</span> i, l <span class=\"keyword\">in</span> enumerate(label):\n                <span class=\"keyword\">if</span> v2 &lt; l:\n                    <span class=\"keyword\">return</span> uint32(i)\n              <span class=\"keyword\">raise</span> RuntimeError(<span class=\"string\">\"unreachable\"</span>)\n              <span class=\"keyword\">return</span> default_ret \n        <span class=\"keyword\">return</span> ret\n    <span class=\"keyword\">return</span> cat2impl</code></pre>",
  "id": "5bc4c9ae271506518d1830c2",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 8,
  "sent": "2018-10-15T17:09:02.208Z",
  "text": "try:\n```\ndef cat2(label):\n    @generated_jit(nopython=True, nogil=True)\n    def cat2impl(v):\n        def ret(v):\n            v2 = uint32(v)\n            default_ret = uint32(0)\n            for i, l in enumerate(label):\n                if v2 < l:\n                    return uint32(i)\n              raise RuntimeError(\"unreachable\")\n              return default_ret \n        return ret\n    return cat2impl\n\n```",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "oh, so I still need the return statement when specifying that error?",
  "id": "5bc4c9ae1e23486b93c4672c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2018-10-15T17:09:02.678Z",
  "text": "oh, so I still need the return statement when specifying that error?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "this editor is infuriating",
  "id": "5bc4c9bde65a634336e28bdd",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2018-10-15T17:09:17.829Z",
  "text": "this editor is infuriating",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "yes",
  "id": "5bc4c9c01c100a4f298eda34",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2018-10-15T17:09:20.720Z",
  "text": "yes",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": ":)",
  "id": "5bc4c9c1600c5f6423b3d949",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2018-10-15T17:09:21.200Z",
  "text": ":)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "gitter sucks",
  "id": "5bc4c9c3c7bf7c36621731e9",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2018-10-15T17:09:23.495Z",
  "text": "gitter sucks",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "It has its good points, I just need to get less clumsy with pressing CTRL+Enter :)",
  "id": "5bc4c9f51c100a4f298edbcf",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2018-10-15T17:10:13.795Z",
  "text": "It has its good points, I just need to get less clumsy with pressing CTRL+Enter :)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "ok",
  "id": "5bc4ca0382893a2f3be7484f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2018-10-15T17:10:27.711Z",
  "text": "ok",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "lemme try with the exception only",
  "id": "5bc4ca0b1e23486b93c46931",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2018-10-15T17:10:35.556Z",
  "text": "lemme try with the exception only",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "But yes, type inference will unlikely get over it, I&#39;m just guessing as I can&#39;t see yuor code :)",
  "id": "5bc4ca0d6e5a401c2d77b5b9",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2018-10-15T17:10:37.629Z",
  "text": "But yes, type inference will unlikely get over it, I'm just guessing as I can't see yuor code :)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "RuntimeError",
  "id": "5bc4ca21435c2a518eaffb84",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-10-15T17:10:57.241Z",
  "text": "RuntimeError",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "where does that come from",
  "id": "5bc4ca27600c5f6423b3dd2c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-10-15T17:11:03.641Z",
  "text": "where does that come from",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "Python ?",
  "id": "5bc4ca4382893a2f3be7497d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-10-15T17:11:31.362Z",
  "text": "Python ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "ohoh, never mind, misused c++ comments in python",
  "id": "5bc4ca4c600c5f6423b3dd8a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-10-15T17:11:40.516Z",
  "text": "ohoh, never mind, misused c++ comments in python",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "yes",
  "id": "5bc4ca626e5a401c2d77b7ca",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-10-15T17:12:02.347Z",
  "text": "yes",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "without the default return",
  "id": "5bc4ca66ef4afc4f287b4d2b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-10-15T17:12:06.375Z",
  "text": "without the default return",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "it still works",
  "id": "5bc4ca6882893a2f3be74ae8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-10-15T17:12:08.477Z",
  "text": "it still works",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "oh cool, that&#39;s good",
  "id": "5bc4ca6f600c5f6423b3de24",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-10-15T17:12:15.402Z",
  "text": "oh cool, that's good",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "hmm, there is one thing",
  "id": "5bc4ca793844923661440d15",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-10-15T17:12:25.460Z",
  "text": "hmm, there is one thing",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "guess it spots the return is dead",
  "id": "5bc4ca7b3844923661440d22",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-10-15T17:12:27.672Z",
  "text": "guess it spots the return is dead",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "can I have this doubly generated  function cached?",
  "id": "5bc4ca881e23486b93c46cd1",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-10-15T17:12:40.334Z",
  "text": "can I have this doubly generated  function cached?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "should work",
  "id": "5bc4ca9b1e23486b93c46de8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-10-15T17:12:59.894Z",
  "text": "should work",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "just add the <code>cache=True</code> kwarg in the decorator",
  "id": "5bc4caaa1c100a4f298ee1d1",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-10-15T17:13:14.033Z",
  "text": "just add the `cache=True` kwarg in the decorator",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "how does it check when the closure env changes ",
  "id": "5bc4caac3844923661440f2d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-10-15T17:13:16.651Z",
  "text": "how does it check when the closure env changes ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "rror: cannot cache function &#39;cat2.&lt;locals&gt;.cat2impl&#39;: no locator available for file &#39;&lt;string&gt;&#39;",
  "id": "5bc4cae9f659e67772beae4f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-10-15T17:14:17.088Z",
  "text": "rror: cannot cache function 'cat2.<locals>.cat2impl': no locator available for file '<string>'\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "haha it won&#39;t work",
  "id": "5bc4caedc7bf7c366217398d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-10-15T17:14:21.325Z",
  "text": "haha it won't work",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "the source code is embedded in c++",
  "id": "5bc4caf4435c2a518eaffffa",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-10-15T17:14:28.082Z",
  "text": "the source code is embedded in c++",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "well, kinda stretching the bounds of designed for usecases",
  "id": "5bc4cb05f659e67772beaf0c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-10-15T17:14:45.832Z",
  "text": "well, kinda stretching the bounds of designed for usecases",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "thank you very much !  Have to sleep now. I&#39;ve finally finished this project",
  "id": "5bc4cb2ac08b8b30671c0b1a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-10-15T17:15:22.181Z",
  "text": "thank you very much !  Have to sleep now. I've finally finished this project",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "next time I&#39;ll start learning extend api and try contributions",
  "id": "5bc4cb39435c2a518eb001b7",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-10-15T17:15:37.590Z",
  "text": "next time I'll start learning extend api and try contributions",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": ":) awesome, well done, glad you got it to work",
  "id": "5bc4cb47ae7be94016609949",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-10-15T17:15:51.057Z",
  "text": ":) awesome, well done, glad you got it to work",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "I look forward to your first pull request :)",
  "id": "5bc4cb56ef4afc4f287b53d3",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-10-15T17:16:06.312Z",
  "text": "I look forward to your first pull request :)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "  <span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span> Hi I just tested my db for a while, so far so good. But there is one thing that bothers me.",
  "id": "5bc54670c08b8b30671efc9c",
  "issues": [],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 12,
  "sent": "2018-10-16T02:01:20.419Z",
  "text": "  @stuartarchibald Hi I just tested my db for a while, so far so good. But there is one thing that bothers me.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "<pre><code><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cat2</span><span class=\"params\">(label)</span>:</span>\n<span class=\"decorator\">    @generated_jit(nopython=True, nogil=True)</span>\n    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cat2impl</span><span class=\"params\">(v)</span>:</span>\n        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">ret</span><span class=\"params\">(v)</span>:</span>\n            v2 = uint32(v)\n            default_ret = uint32(<span class=\"number\">0</span>)\n            <span class=\"keyword\">for</span> i, l <span class=\"keyword\">in</span> enumerate(label):\n                <span class=\"keyword\">if</span> v2 &lt; l:\n                    <span class=\"keyword\">return</span> uint32(i)\n              <span class=\"keyword\">raise</span> RuntimeError(<span class=\"string\">\"unreachable\"</span>)\n              <span class=\"keyword\">return</span> default_ret \n        <span class=\"keyword\">return</span> ret\n    <span class=\"keyword\">return</span> cat2impl</code></pre>",
  "id": "5bc5467482893a2f3bea5e84",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-10-16T02:01:24.771Z",
  "text": "```\ndef cat2(label):\n    @generated_jit(nopython=True, nogil=True)\n    def cat2impl(v):\n        def ret(v):\n            v2 = uint32(v)\n            default_ret = uint32(0)\n            for i, l in enumerate(label):\n                if v2 < l:\n                    return uint32(i)\n              raise RuntimeError(\"unreachable\")\n              return default_ret \n        return ret\n    return cat2impl\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "so for <code>@generated_jit</code> closures like this, is there any way to have jit cache? Currently it always takes 0.3-0.5 sec latency ",
  "id": "5bc5469ff659e67772c1a4b7",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-10-16T02:02:07.590Z",
  "text": "so for `@generated_jit` closures like this, is there any way to have jit cache? Currently it always takes 0.3-0.5 sec latency ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "<pre><code><span class=\"attribute\">TypeError</span>: <span class=\"string\">can't pickle weakref objects</span>\n\n<span class=\"gradle\">At:\n  <span class=\"regexp\">/home/</span>amos<span class=\"regexp\">/git/</span>ClickHouse<span class=\"regexp\">/miniconda3/</span>lib<span class=\"regexp\">/python3.7/</span>site-packages<span class=\"regexp\">/numba/</span>caching.py(<span class=\"number\">565</span>): _dump\n  <span class=\"regexp\">/home/</span>amos<span class=\"regexp\">/git/</span>ClickHouse<span class=\"regexp\">/miniconda3/</span>lib<span class=\"regexp\">/python3.7/</span>site-packages<span class=\"regexp\">/numba/</span>caching.py(<span class=\"number\">537</span>): _save_index\n  <span class=\"regexp\">/home/</span>amos<span class=\"regexp\">/git/</span>ClickHouse<span class=\"regexp\">/miniconda3/</span>lib<span class=\"regexp\">/python3.7/</span>site-packages<span class=\"regexp\">/numba/</span>caching.py(<span class=\"number\">491</span>): save\n  <span class=\"regexp\">/home/</span>amos<span class=\"regexp\">/git/</span>ClickHouse<span class=\"regexp\">/miniconda3/</span>lib<span class=\"regexp\">/python3.7/</span>site-packages<span class=\"regexp\">/numba/</span>caching.py(<span class=\"number\">675</span>): _save_overload\n  <span class=\"regexp\">/home/</span>amos<span class=\"regexp\">/git/</span>ClickHouse<span class=\"regexp\">/miniconda3/</span>lib<span class=\"regexp\">/python3.7/</span>site-packages<span class=\"regexp\">/numba/</span>caching.py(<span class=\"number\">665</span>): save_overload\n  <span class=\"regexp\">/home/</span>amos<span class=\"regexp\">/git/</span>ClickHouse<span class=\"regexp\">/miniconda3/</span>lib<span class=\"regexp\">/python3.7/</span>site-packages<span class=\"regexp\">/numba/</span>dispatcher.py(<span class=\"number\">658</span>): <span class=\"keyword\">compile</span>\n  <span class=\"regexp\">/home/</span>amos<span class=\"regexp\">/git/</span>ClickHouse<span class=\"regexp\">/miniconda3/</span>lib<span class=\"regexp\">/python3.7/</span>site-packages<span class=\"regexp\">/numba/</span>compiler_lock.py(<span class=\"number\">32</span>): _acquire_compile_lock\n  <span class=\"regexp\">/home/</span>amos<span class=\"regexp\">/git/</span>ClickHouse<span class=\"regexp\">/miniconda3/</span>lib<span class=\"regexp\">/python3.7/</span>site-packages<span class=\"regexp\">/numba/</span>dispatcher.py(<span class=\"number\">367</span>): _compile_for_args</span></code></pre>",
  "id": "5bc54cab64cfc273f9d2fce2",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-10-16T02:27:55.372Z",
  "text": "```\nTypeError: can't pickle weakref objects\n\nAt:\n  /home/amos/git/ClickHouse/miniconda3/lib/python3.7/site-packages/numba/caching.py(565): _dump\n  /home/amos/git/ClickHouse/miniconda3/lib/python3.7/site-packages/numba/caching.py(537): _save_index\n  /home/amos/git/ClickHouse/miniconda3/lib/python3.7/site-packages/numba/caching.py(491): save\n  /home/amos/git/ClickHouse/miniconda3/lib/python3.7/site-packages/numba/caching.py(675): _save_overload\n  /home/amos/git/ClickHouse/miniconda3/lib/python3.7/site-packages/numba/caching.py(665): save_overload\n  /home/amos/git/ClickHouse/miniconda3/lib/python3.7/site-packages/numba/dispatcher.py(658): compile\n  /home/amos/git/ClickHouse/miniconda3/lib/python3.7/site-packages/numba/compiler_lock.py(32): _acquire_compile_lock\n  /home/amos/git/ClickHouse/miniconda3/lib/python3.7/site-packages/numba/dispatcher.py(367): _compile_for_args\n\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"amosbird\" class=\"mention\">@amosbird</span> remind me again why this needs to be generated jit please...",
  "id": "5bc5a5c51e23486b93c9b258",
  "issues": [],
  "mentions": [
   {
    "screenName": "amosbird",
    "userId": "54e48ded15522ed4b3dc26b7",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 12,
  "sent": "2018-10-16T08:48:05.847Z",
  "text": "@amosbird remind me again why this needs to be generated jit please...",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span> it needs to be inlined",
  "id": "5bc5aca51c100a4f29944a17",
  "issues": [],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 12,
  "sent": "2018-10-16T09:17:25.177Z",
  "text": "@stuartarchibald it needs to be inlined",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "oh, isn&#39;t that THE purpose of generated_jit?",
  "id": "5bc5acd0271506518d1dcd53",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-10-16T09:18:08.306Z",
  "text": "oh, isn't that THE purpose of generated_jit?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "do I use it wrongly?",
  "id": "5bc5acd6e65a634336e8002f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-10-16T09:18:14.157Z",
  "text": "do I use it wrongly?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "LLVM is the inliner, it makes the decision",
  "id": "5bc5af24ef4afc4f2880d6c0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-10-16T09:28:04.270Z",
  "text": "LLVM is the inliner, it makes the decision",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "the purpose of generated_jit is to have jitted function specialisation based on type",
  "id": "5bc5af3f1e23486b93c9ef1b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-10-16T09:28:31.775Z",
  "text": "the purpose of generated_jit is to have jitted function specialisation based on type",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "if you just compile one njit function that calls another njit function, chances are LLVM will inline one in the other",
  "id": "5bc5af5864cfc273f9d54484",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-10-16T09:28:56.717Z",
  "text": "if you just compile one njit function that calls another njit function, chances are LLVM will inline one in the other",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "hmm... lemme try without generated_jit then",
  "id": "5bc5b013271506518d1de811",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-10-16T09:32:03.547Z",
  "text": "hmm... lemme try without generated_jit then",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span> yay, it also works with njit",
  "id": "5bc5b0c61c100a4f29946315",
  "issues": [],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 15,
  "sent": "2018-10-16T09:35:02.791Z",
  "text": "@stuartarchibald yay, it also works with njit",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "however the cache still doesn&#39;t work ",
  "id": "5bc5b0ce6e5a401c2d7d48b5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-10-16T09:35:10.284Z",
  "text": "however the cache still doesn't work ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "TypeError: can&#39;t pickle weakref objects",
  "id": "5bc5b0cf384492366149a140",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-10-16T09:35:11.370Z",
  "text": "TypeError: can't pickle weakref objects\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "it seems there is no way to cache the jitted closure with runtime data",
  "id": "5bc5b0e182893a2f3beceb98",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-10-16T09:35:29.067Z",
  "text": "it seems there is no way to cache the jitted closure with runtime data",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "why&#39;s it in a closure ?",
  "id": "5bc5b1e7ae7be94016663c64",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-10-16T09:39:51.000Z",
  "text": "why's it in a closure ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "and numba sees the contents of closures as unique for each execution, there&#39;s a ticket about this <a target=\"_blank\" data-link-type=\"issue\" data-issue=\"3184\" href=\"https://github.com/numba/numba/issues/3184\" data-provider=\"github\" data-issue-repo=\"numba/numba\" class=\"issue\">numba/numba#3184</a> and related <a target=\"_blank\" data-link-type=\"issue\" data-issue=\"3267\" href=\"https://github.com/numba/numba/issues/3267\" data-provider=\"github\" data-issue-repo=\"numba/numba\" class=\"issue\">numba/numba#3267</a>",
  "id": "5bc5b2aef659e67772c4425a",
  "issues": [
   {
    "number": "3184",
    "repo": "numba/numba"
   },
   {
    "number": "3267",
    "repo": "numba/numba"
   }
  ],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-10-16T09:43:10.686Z",
  "text": "and numba sees the contents of closures as unique for each execution, there's a ticket about this https://github.com/numba/numba/issues/3184 and related https://github.com/numba/numba/issues/3267",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "<blockquote>\n<p>why&#39;s it in a closure ?</p></blockquote>\n<p>because it makes the API cleaner as users won&#39;t need to pass tons of internal data structures to a helper function</p>",
  "id": "5bc5bae764cfc273f9d59616",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-10-16T10:18:15.949Z",
  "text": "> why's it in a closure ?\n\nbecause it makes the API cleaner as users won't need to pass tons of internal data structures to a helper function",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "for example",
  "id": "5bc5bafc1c100a4f2994a8fc",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-10-16T10:18:36.156Z",
  "text": "for example",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "<pre><code><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">edgelist</span><span class=\"params\">(vs, offsets, degrees)</span>:</span>\n<span class=\"decorator\">    @njit(nogil=True)</span>\n    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">edgelistimpl</span><span class=\"params\">(v)</span>:</span>\n        v2 = uint32(v)\n        <span class=\"keyword\">return</span> vs[offsets[v2] - degrees[v2] : offsets[v2]]\n    <span class=\"keyword\">return</span> edgelistimpl</code></pre>",
  "id": "5bc5bafd271506518d1e2de1",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-10-16T10:18:37.900Z",
  "text": "```\ndef edgelist(vs, offsets, degrees):\n    @njit(nogil=True)\n    def edgelistimpl(v):\n        v2 = uint32(v)\n        return vs[offsets[v2] - degrees[v2] : offsets[v2]]\n    return edgelistimpl\n\n\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "Hello guys, a fast question, are 3D stencil supported?",
  "id": "5bc8ad23c7bf7c3662305b75",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-10-18T15:56:19.889Z",
  "text": "Hello guys, a fast question, are 3D stencil supported?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "I don&#39;t see any reccomandation on that, and it compiles without problem, so at the moment i don&#39;t know if my problem is related to this or something else",
  "id": "5bc8adc7600c5f6423ccca71",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-10-18T15:59:03.888Z",
  "text": "I don't see any reccomandation on that, and it compiles without problem, so at the moment i don't know if my problem is related to this or something else",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"lpuglia\" class=\"mention\">@lpuglia</span> yes",
  "id": "5bc8b2b5ef4afc4f28944c36",
  "issues": [],
  "mentions": [
   {
    "screenName": "lpuglia",
    "userId": "5bc8acc0d73408ce4fabe62d",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 10,
  "sent": "2018-10-18T16:20:05.781Z",
  "text": "@lpuglia yes",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "that is nice, i was getting error for a totally different reason, thank you!",
  "id": "5bc8b31cbbdc0b2505601f63",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-10-18T16:21:48.434Z",
  "text": "that is nice, i was getting error for a totally different reason, thank you!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "no problem",
  "id": "5bc8b32464cfc273f9e8f99a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-10-18T16:21:56.775Z",
  "text": "no problem",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "IIRC it can handle arbitrarily high dimensions",
  "id": "5bc8b337bbdc0b2505601f9d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-10-18T16:22:15.501Z",
  "text": "IIRC it can handle arbitrarily high dimensions",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"lpuglia\" class=\"mention\">@lpuglia</span> have you solved your problem ?",
  "id": "5bc8b4c5271506518d3160a6",
  "issues": [],
  "mentions": [
   {
    "screenName": "lpuglia",
    "userId": "5bc8acc0d73408ce4fabe62d",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 10,
  "sent": "2018-10-18T16:28:53.331Z",
  "text": "@lpuglia have you solved your problem ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "i&#39;m not entirely sure since i&#39;m still learning",
  "id": "5bc8b7df82893a2f3b00a3dd",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-10-18T16:42:07.567Z",
  "text": "i'm not entirely sure since i'm still learning",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "but it had to do on how i called the function itself",
  "id": "5bc8b7e9435c2a518ec91329",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-10-18T16:42:17.839Z",
  "text": "but it had to do on how i called the function itself",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"lpuglia\" class=\"mention\">@lpuglia</span> ah, you may have been trying to call the stencil kernel directly opposed to calling it from inside an <code>@jit(nopython=True)</code> function ?",
  "id": "5bc8fb75ae7be940167bf46c",
  "issues": [],
  "mentions": [
   {
    "screenName": "lpuglia",
    "userId": "5bc8acc0d73408ce4fabe62d",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 10,
  "sent": "2018-10-18T21:30:29.344Z",
  "text": "@lpuglia ah, you may have been trying to call the stencil kernel directly opposed to calling it from inside an `@jit(nopython=True)` function ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "Hi, it seems numba uses cached source file when yielding error messages. How can I make it fresh the source file while dumping the error log?",
  "id": "5bc933e21e23486b93e08f73",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-10-19T01:31:14.479Z",
  "text": "Hi, it seems numba uses cached source file when yielding error messages. How can I make it fresh the source file while dumping the error log?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"amosbird\" class=\"mention\">@amosbird</span> not sure what you mean, do you have an example?",
  "id": "5bc9912dbbdc0b250565a5be",
  "issues": [],
  "mentions": [
   {
    "screenName": "amosbird",
    "userId": "54e48ded15522ed4b3dc26b7",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 10,
  "sent": "2018-10-19T08:09:17.913Z",
  "text": "@amosbird not sure what you mean, do you have an example?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "What sort of error messages are you talking about? One raised in your code or ones from the compiler itself?",
  "id": "5bc99154bbdc0b250565a6d0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-10-19T08:09:56.207Z",
  "text": "What sort of error messages are you talking about? One raised in your code or ones from the compiler itself?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span> hi, errors like this",
  "id": "5bc99bafc08b8b30673a901f",
  "issues": [],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 11,
  "sent": "2018-10-19T08:54:07.618Z",
  "text": "@stuartarchibald hi, errors like this",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "<pre><code>numba.errors.InternalError: Failed in nopython mode pipeline (step: analyzing bytecode)\n<span class=\"operator\"><span class=\"keyword\">Use</span> <span class=\"keyword\">of</span> <span class=\"keyword\">unknown</span> opcode IMPORT_NAME <span class=\"keyword\">at</span> line <span class=\"number\">56</span> <span class=\"keyword\">of</span> &lt;<span class=\"keyword\">string</span>&gt;\n[<span class=\"number\">1</span>] During: resolving callee <span class=\"keyword\">type</span>: <span class=\"keyword\">type</span>(CPUDispatcher(&lt;<span class=\"keyword\">function</span> propertyn.&lt;locals&gt;.propertyimpl <span class=\"keyword\">at</span> <span class=\"number\">0x7f272fa92950</span>&gt;))\n[<span class=\"number\">2</span>] During: typing <span class=\"keyword\">of</span> <span class=\"keyword\">call</span> <span class=\"keyword\">at</span> <span class=\"keyword\">data</span>/python/vp.py (<span class=\"number\">13</span>)\n\n<span class=\"comment\">--%&lt;----------------------------------------------------------------------------</span>\n\n\n<span class=\"keyword\">File</span> <span class=\"string\">\"data/python/vp.py\"</span>, line <span class=\"number\">13</span>:\n<span class=\"keyword\">def</span> run(graph, v):\n    <span class=\"keyword\">if</span> graph.vps.j(v) <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:\n    ^</span></code></pre>",
  "id": "5bc99bb1069fca52a55d1b95",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-10-19T08:54:09.514Z",
  "text": "```\nnumba.errors.InternalError: Failed in nopython mode pipeline (step: analyzing bytecode)\nUse of unknown opcode IMPORT_NAME at line 56 of <string>\n[1] During: resolving callee type: type(CPUDispatcher(<function propertyn.<locals>.propertyimpl at 0x7f272fa92950>))\n[2] During: typing of call at data/python/vp.py (13)\n\n--%<----------------------------------------------------------------------------\n\n\nFile \"data/python/vp.py\", line 13:\ndef run(graph, v):\n    if graph.vps.j(v) is None:\n    ^\n\n\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "the file pos info is stale",
  "id": "5bc99bb864cfc273f9eebd8f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-10-19T08:54:16.803Z",
  "text": "the file pos info is stale",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "hmm, its just coming from the line cache IIRC",
  "id": "5bc99c21435c2a518ece9e04",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-10-19T08:56:01.114Z",
  "text": "hmm, its just coming from the line cache IIRC",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "um, can I get rid of that cache?",
  "id": "5bc99c701c100a4f29ad381d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-10-19T08:57:20.891Z",
  "text": "um, can I get rid of that cache?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "linecache.clearcache()",
  "id": "5bc99caeab17df2631b6fb9d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-10-19T08:58:22.093Z",
  "text": "linecache.clearcache()",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "Is your function cached too ?",
  "id": "5bc99cbb069fca52a55d23bb",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-10-19T08:58:35.166Z",
  "text": "Is your function cached too ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "not, it&#39;s only <code>njit</code>",
  "id": "5bc99cec1c100a4f29ad3b61",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-10-19T08:59:24.841Z",
  "text": "not, it's only `njit`",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "hmmm, that&#39;s a bit strange",
  "id": "5bc99d11ef4afc4f2899efe5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-10-19T09:00:01.681Z",
  "text": "hmmm, that's a bit strange",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "though I&#39;ve heavily relied on CPython&#39;s module reload",
  "id": "5bc99d2f82893a2f3b062c89",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-10-19T09:00:31.216Z",
  "text": "though I've heavily relied on CPython's module reload",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "I suspect that might be involved",
  "id": "5bc99d381c100a4f29ad3c22",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-10-19T09:00:40.316Z",
  "text": "I suspect that might be involved",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "ah",
  "id": "5bc99d3bc08b8b30673a9b20",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-10-19T09:00:43.226Z",
  "text": "ah",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "probably",
  "id": "5bc99d46271506518d372042",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-10-19T09:00:54.719Z",
  "text": "probably",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "yeah, so how does numba fetch the error message?",
  "id": "5bc99d5a435c2a518ecea50a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-10-19T09:01:14.018Z",
  "text": "yeah, so how does numba fetch the error message?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "for that internal error?",
  "id": "5bc99d70271506518d37213c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-10-19T09:01:36.671Z",
  "text": "for that internal error?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "or generally?",
  "id": "5bc99d73c7bf7c3662364209",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-10-19T09:01:39.346Z",
  "text": "or generally?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "generally, to make numba fetch the latest file info",
  "id": "5bc99d81ab17df2631b7016b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-10-19T09:01:53.079Z",
  "text": "generally, to make numba fetch the latest file info",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "as the file is already modified",
  "id": "5bc99d901e23486b93e31641",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-10-19T09:02:08.164Z",
  "text": "as the file is already modified",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "I suppose numba might have a way to read it directly?",
  "id": "5bc99d9bae7be940167fc652",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-10-19T09:02:19.715Z",
  "text": "I suppose numba might have a way to read it directly?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "well numba just uses the line cache for most compile time errors",
  "id": "5bc99dbb600c5f6423d2b812",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-10-19T09:02:51.874Z",
  "text": "well numba just uses the line cache for most compile time errors",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "the <code>ir.Loc</code> class has a <code>strformat()</code> method which is used to generate the thing that prints out some source and a line number",
  "id": "5bc99de4c7bf7c36623643aa",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-10-19T09:03:32.714Z",
  "text": "the `ir.Loc` class has a `strformat()` method which is used to generate the thing that prints out some source and a line number",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "that first looks in the linecache",
  "id": "5bc99dfa1c100a4f29ad4103",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-10-19T09:03:54.659Z",
  "text": "that first looks in the linecache",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "then there&#39;s a tonne of rewriting that goes on to try and add context above what was going on to the error message, but none of that should really impact source location as its all read only",
  "id": "5bc99e261c100a4f29ad427d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-10-19T09:04:38.447Z",
  "text": "then there's a tonne of rewriting that goes on to try and add context above what was going on to the error message, but none of that should really impact source location as its all read only",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "ok, lemme try linecache.clear first :)",
  "id": "5bc99e45ae7be940167fcb0b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-10-19T09:05:09.755Z",
  "text": "ok, lemme try linecache.clear first :)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "yay, it works. Not sure if that is a good solution though.",
  "id": "5bc9a3111e23486b93e33c66",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-10-19T09:25:37.686Z",
  "text": "yay, it works. Not sure if that is a good solution though.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "hmmm, without being able to see your code its quite hard to guess what might be going on",
  "id": "5bc9a4651c100a4f29ad69c6",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-10-19T09:31:17.235Z",
  "text": "hmmm, without being able to see your code its quite hard to guess what might be going on",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "I would think a load of reimporting might confuse the linecache behaviour",
  "id": "5bc9a474c08b8b30673ac9ac",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-10-19T09:31:32.007Z",
  "text": "I would think a load of reimporting might confuse the linecache behaviour",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "is your project open source ?",
  "id": "5bc9a883069fca52a55d6843",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-10-19T09:48:51.144Z",
  "text": "is your project open source ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "being able to point to actual code would probably help in these situations :)",
  "id": "5bc9a8983844923661633610",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-10-19T09:49:12.362Z",
  "text": "being able to point to actual code would probably help in these situations :)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "no it&#39;s not open sourced (it&#39;s an embeded project in my company&#39;s codebase)  .  actually     linecache.checkcache(pathname) works fine :)",
  "id": "5bc9b066c08b8b30673b1148",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-10-19T10:22:30.072Z",
  "text": "no it's not open sourced (it's an embeded project in my company's codebase)  .  actually     linecache.checkcache(pathname) works fine :)\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/Goorman",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/3996740?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/3996740?v=4&s=60",
   "displayName": "Guryanov Alexey",
   "gv": "4",
   "id": "57c6b25d40f3a6eec062585b",
   "url": "/Goorman",
   "username": "Goorman",
   "v": 3
  },
  "html": "Hello. Does anybody have  experience with a jitclass, where one of the elements is a list of sets of ints?",
  "id": "5bcb0c1882893a2f3b0f3e54",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-10-20T11:06:00.664Z",
  "text": "Hello. Does anybody have  experience with a jitclass, where one of the elements is a list of sets of ints?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span> Hi, the initial string proposal says <code>Given the above, bytes / Python 2 str can be represented in nopython mode as pointer and a length, Python 3 str is a pointer, a length, and an encoding enum indicating latin1, UCS-2 or UCS-4.</code>  . Is it possible to have an array of these strings? In fact I have a StringRef structure in c++ which is exactly a ptr and a length. Will it be possible to pass my structure directly to jitted functions?  ",
  "id": "5bcb34f5ab17df2631c132c0",
  "issues": [],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 14,
  "sent": "2018-10-20T14:00:21.253Z",
  "text": "@stuartarchibald Hi, the initial string proposal says `Given the above, bytes / Python 2 str can be represented in nopython mode as pointer and a length, Python 3 str is a pointer, a length, and an encoding enum indicating latin1, UCS-2 or UCS-4.`  . Is it possible to have an array of these strings? In fact I have a StringRef structure in c++ which is exactly a ptr and a length. Will it be possible to pass my structure directly to jitted functions?  ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/amosbird",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5085485?v=4&s=60",
   "displayName": "Amos Bird",
   "gv": "4",
   "id": "54e48ded15522ed4b3dc26b7",
   "url": "/amosbird",
   "username": "amosbird",
   "v": 39
  },
  "html": "And is this also related to the string pr  ?  <a target=\"_blank\" data-link-type=\"issue\" data-issue=\"2381\" href=\"https://github.com/numba/numba/issues/2381\" data-provider=\"github\" data-issue-repo=\"numba/numba\" class=\"issue\">numba/numba#2381</a> ",
  "id": "5bcb5214435c2a518ed9643b",
  "issues": [
   {
    "number": "2381",
    "repo": "numba/numba"
   }
  ],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-10-20T16:04:36.122Z",
  "text": "And is this also related to the string pr  ?  https://github.com/numba/numba/issues/2381 ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-10-20T17:02:35.368Z",
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/boustrephon",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/14007454?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/14007454?v=4&s=60",
   "displayName": "boustrephon",
   "gv": "4",
   "id": "5ba8d2f0d73408ce4fa92cfb",
   "url": "/boustrephon",
   "username": "boustrephon",
   "v": 7
  },
  "html": "I am trying to create a jitclass to cover vector mathematics. I would like to know what I am doing wrong - the class appears to be slower than using tuples and then doing jit on explicit  functions that directly address the components of the tuple:<pre><code class=\"python\">spec32 = [(<span class=\"string\">'x'</span>, float32), (<span class=\"string\">'y'</span>, float32),  (<span class=\"string\">'z'</span>, float32)]\n<span class=\"decorator\">@jitclass(spec32)</span>\n<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">v3dj</span><span class=\"params\">(object)</span>:</span>\n    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, x, y, z)</span>:</span>\n        self.x = x\n        self.y = y\n        self.z = z\n<span class=\"decorator\">    @property</span>\n    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mag</span><span class=\"params\">(self)</span>:</span>\n        <span class=\"keyword\">return</span> (self.x**<span class=\"number\">2</span> + self.y**<span class=\"number\">2</span> + self.z**<span class=\"number\">2</span>)**<span class=\"number\">0.5</span>\n    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dot</span><span class=\"params\">(self, other)</span>:</span>\n        <span class=\"keyword\">return</span> self.x * other.x + self.y * other.y + self.z * other.z\n    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cross</span><span class=\"params\">(self, other)</span>:</span>\n        <span class=\"keyword\">return</span> v3dj(self.y * other.z - self.z * other.y, \n                        self.z * other.x - self.x * other.z, \n                        self.x * other.y - self.y * other.x)\n    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(self, other)</span>:</span>\n        <span class=\"keyword\">return</span> v3dj(self.x + other.x, self.y + other.y, self.z + other.z)\n    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sub</span><span class=\"params\">(self, other)</span>:</span>\n        <span class=\"keyword\">return</span> v3dj(self.x - other.x, self.y - other.y, self.z - other.z)\n    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mul</span><span class=\"params\">(self, other)</span>:</span>\n        <span class=\"keyword\">return</span> v3dj(self.x * other.x, self.y * other.y, self.z * other.z)\n    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">div</span><span class=\"params\">(self, other)</span>:</span>\n        <span class=\"keyword\">return</span> v3dj(self.x / other.x, self.y / other.y, self.z / other.z)\n    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cos</span><span class=\"params\">(self, other)</span>:</span>\n        <span class=\"keyword\">return</span> self.dot(other) / self.mag / other.mag</code></pre>",
  "id": "5bcb5ede069fca52a56827fb",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-10-20T16:59:10.735Z",
  "text": "I am trying to create a jitclass to cover vector mathematics. I would like to know what I am doing wrong - the class appears to be slower than using tuples and then doing jit on explicit  functions that directly address the components of the tuple:\n```python\nspec32 = [('x', float32), ('y', float32),  ('z', float32)]\n@jitclass(spec32)\nclass v3dj(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n    @property\n    def mag(self):\n        return (self.x**2 + self.y**2 + self.z**2)**0.5\n    def dot(self, other):\n        return self.x * other.x + self.y * other.y + self.z * other.z\n    def cross(self, other):\n        return v3dj(self.y * other.z - self.z * other.y, \n                        self.z * other.x - self.x * other.z, \n                        self.x * other.y - self.y * other.x)\n    def add(self, other):\n        return v3dj(self.x + other.x, self.y + other.y, self.z + other.z)\n    def sub(self, other):\n        return v3dj(self.x - other.x, self.y - other.y, self.z - other.z)\n    def mul(self, other):\n        return v3dj(self.x * other.x, self.y * other.y, self.z * other.z)\n    def div(self, other):\n        return v3dj(self.x / other.x, self.y / other.y, self.z / other.z)\n    def cos(self, other):\n        return self.dot(other) / self.mag / other.mag\n```\n",
  "unread": false,
  "urls": [],
  "v": 5
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/mdekstrand",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/186612?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/186612?v=4&s=60",
   "displayName": "Michael Ekstrand",
   "gv": "4",
   "id": "563a1c3016b6c7089cb97517",
   "url": "/mdekstrand",
   "username": "mdekstrand",
   "v": 50
  },
  "html": "Is there any means to manually take a lock in an explicit parallel loop, or plans to add such a feature?",
  "id": "5bcdebeb1e23486b93fda041",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-10-22T15:25:31.976Z",
  "text": "Is there any means to manually take a lock in an explicit parallel loop, or plans to add such a feature?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/mdekstrand",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/186612?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/186612?v=4&s=60",
   "displayName": "Michael Ekstrand",
   "gv": "4",
   "id": "563a1c3016b6c7089cb97517",
   "url": "/mdekstrand",
   "username": "mdekstrand",
   "v": 50
  },
  "html": "I have code that I am trying to parallelize, but its result accumulation step doesn&#39;t map nicely to any supported Numba parallel operations or reductions as near as I can tell.",
  "id": "5bcdec21069fca52a577efcf",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-10-22T15:26:25.589Z",
  "text": "I have code that I am trying to parallelize, but its result accumulation step doesn't map nicely to any supported Numba parallel operations or reductions as near as I can tell.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/mdekstrand",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/186612?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/186612?v=4&s=60",
   "displayName": "Michael Ekstrand",
   "gv": "4",
   "id": "563a1c3016b6c7089cb97517",
   "url": "/mdekstrand",
   "username": "mdekstrand",
   "v": 50
  },
  "html": "Unless there is a way to write a function or jitclass method that Numba would recognize as a reduction that I can use to accumulate the results.",
  "id": "5bcdec3682893a2f3b211650",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-10-22T15:26:46.365Z",
  "text": "Unless there is a way to write a function or jitclass method that Numba would recognize as a reduction that I can use to accumulate the results.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/mdekstrand",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/186612?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/186612?v=4&s=60",
   "displayName": "Michael Ekstrand",
   "gv": "4",
   "id": "563a1c3016b6c7089cb97517",
   "url": "/mdekstrand",
   "username": "mdekstrand",
   "v": 50
  },
  "html": "(each parallel op produces a sparse matrix row. I have tried assigning them to positions in a pre-allocated list, but that hasn&#39;t worked so far.)",
  "id": "5bcdec6e600c5f6423ed78b0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-10-22T15:27:42.058Z",
  "text": "(each parallel op produces a sparse matrix row. I have tried assigning them to positions in a pre-allocated list, but that hasn't worked so far.)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"amosbird\" class=\"mention\">@amosbird</span> PR is <a target=\"_blank\" data-link-type=\"pr\" data-issue=\"3363\" href=\"https://github.com/numba/numba/pull/3363\" data-provider=\"github\" data-issue-repo=\"numba/numba\" class=\"pr\">numba/numba#3363</a>, please ping <span data-link-type=\"mention\" data-screen-name=\"seibert\" class=\"mention\">@seibert</span> or <span data-link-type=\"mention\" data-screen-name=\"sklam\" class=\"mention\">@sklam</span> for impl details, I&#39;ve not been working on the details so am not in a good position to answer yet I&#39;m afraid.",
  "id": "5bce3f8a1e23486b93fff3a3",
  "issues": [
   {
    "number": "3363",
    "repo": "numba/numba"
   }
  ],
  "mentions": [
   {
    "screenName": "amosbird",
    "userId": "54e48ded15522ed4b3dc26b7",
    "userIds": []
   },
   {
    "screenName": "seibert",
    "userId": "55b68af40fc9f982beab2a3c",
    "userIds": []
   },
   {
    "screenName": "sklam",
    "userId": "55b689f50fc9f982beab2a24",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 14,
  "sent": "2018-10-22T21:22:18.153Z",
  "text": "@amosbird PR is https://github.com/numba/numba/pull/3363, please ping @seibert or @sklam for impl details, I've not been working on the details so am not in a good position to answer yet I'm afraid.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"mdekstrand\" class=\"mention\">@mdekstrand</span> <a target=\"_blank\" data-link-type=\"issue\" data-issue=\"2988\" href=\"https://github.com/numba/numba/issues/2988\" data-provider=\"github\" data-issue-repo=\"numba/numba\" class=\"issue\">numba/numba#2988</a> might be something of interest. Also, array reductions work for the parallel target.",
  "id": "5bce3fdcc08b8b306757c885",
  "issues": [
   {
    "number": "2988",
    "repo": "numba/numba"
   }
  ],
  "mentions": [
   {
    "screenName": "mdekstrand",
    "userId": "563a1c3016b6c7089cb97517",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 15,
  "sent": "2018-10-22T21:23:40.538Z",
  "text": "@mdekstrand https://github.com/numba/numba/issues/2988 might be something of interest. Also, array reductions work for the parallel target.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"Goorman\" class=\"mention\">@Goorman</span> is this a question about how to define that ?",
  "id": "5bce423b1e23486b9300046f",
  "issues": [],
  "mentions": [
   {
    "screenName": "Goorman",
    "userId": "57c6b25d40f3a6eec062585b",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 14,
  "sent": "2018-10-22T21:33:47.142Z",
  "text": "@Goorman is this a question about how to define that ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"boustrephon\" class=\"mention\">@boustrephon</span> the jitclass may well be generating a some of additional indirection in the code which is causing some overhead that can&#39;t be optimised out, would have to look at a concrete example to form a comparison.",
  "id": "5bce42b0bbdc0b25058346ac",
  "issues": [],
  "mentions": [
   {
    "screenName": "boustrephon",
    "userId": "5ba8d2f0d73408ce4fa92cfb",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 14,
  "sent": "2018-10-22T21:35:44.624Z",
  "text": "@boustrephon the jitclass may well be generating a some of additional indirection in the code which is causing some overhead that can't be optimised out, would have to look at a concrete example to form a comparison.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/mdekstrand",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/186612?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/186612?v=4&s=60",
   "displayName": "Michael Ekstrand",
   "gv": "4",
   "id": "563a1c3016b6c7089cb97517",
   "url": "/mdekstrand",
   "username": "mdekstrand",
   "v": 50
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span> thanks, that does look interesting. I don&#39;t think array reductions help me, unless concatenation is a supported reduction.",
  "id": "5bce60e9bbdc0b2505840270",
  "issues": [],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 15,
  "sent": "2018-10-22T23:44:41.433Z",
  "text": "@stuartarchibald thanks, that does look interesting. I don't think array reductions help me, unless concatenation is a supported reduction.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/boustrephon",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/14007454?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/14007454?v=4&s=60",
   "displayName": "boustrephon",
   "gv": "4",
   "id": "5ba8d2f0d73408ce4fa92cfb",
   "url": "/boustrephon",
   "username": "boustrephon",
   "v": 7
  },
  "html": "<p><span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span><br>I have done some time comparisons with a cosine similarity calculation (as defined for the class above). I ran it once using a pure python calculation, another time with an unjitted class as defined above, and finally with a numba-jitted class. Am I seeing the difference because I am doing one calculation repeatedly rather than pushing lists through? Or is something else going on?</p><pre><code class=\"python\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cos_sim</span><span class=\"params\">(v1, v2)</span>:</span>   <span class=\"comment\"># pure python calculation</span>\n    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mag</span><span class=\"params\">(self)</span>:</span>\n        <span class=\"keyword\">return</span> (self[<span class=\"number\">0</span>]**<span class=\"number\">2</span> + self[<span class=\"number\">1</span>]**<span class=\"number\">2</span> + self[<span class=\"number\">2</span>]**<span class=\"number\">2</span>)**<span class=\"number\">0.5</span>\n    <span class=\"keyword\">return</span> (v1[<span class=\"number\">0</span>] * v2[<span class=\"number\">0</span>] + v1[<span class=\"number\">1</span>] * v2[<span class=\"number\">1</span>] + v1[<span class=\"number\">2</span>] * v2[<span class=\"number\">2</span>]) / mag(v1) / mag(v2)\n\np3_1j = v3dj(<span class=\"number\">3.4</span>,<span class=\"number\">6.3</span>,<span class=\"number\">7.6</span>)\np3_2j = v3dj(<span class=\"number\">8.2</span>,-<span class=\"number\">6.3</span>,<span class=\"number\">0.1</span>)\n\n%timeit cos_sim((<span class=\"number\">3.4</span>,<span class=\"number\">6.3</span>,<span class=\"number\">7.6</span>),(<span class=\"number\">8.2</span>,-<span class=\"number\">6.3</span>,<span class=\"number\">0.1</span>))\n<span class=\"comment\"># %timeit p3_1.cos(p3_2) I also defined the class without jit and ran it</span>\n%timeit p3_1j.cos(p3_2j)</code></pre><p>Results:</p><pre><code><span class=\"number\">6.12</span> \u00b5s \u00b1 <span class=\"number\">1.12</span> \u00b5s per <span class=\"keyword\">loop</span> (mean \u00b1 std. dev. <span class=\"keyword\">of</span> <span class=\"number\">7</span> runs, <span class=\"number\">100000</span> loops <span class=\"keyword\">each</span>)\n<span class=\"number\">5.63</span> \u00b5s \u00b1 <span class=\"number\">839</span> ns per <span class=\"keyword\">loop</span> (mean \u00b1 std. dev. <span class=\"keyword\">of</span> <span class=\"number\">7</span> runs, <span class=\"number\">100000</span> loops <span class=\"keyword\">each</span>)\n<span class=\"number\">38.9</span> \u00b5s \u00b1 <span class=\"number\">9.44</span> \u00b5s per <span class=\"keyword\">loop</span> (mean \u00b1 std. dev. <span class=\"keyword\">of</span> <span class=\"number\">7</span> runs, <span class=\"number\">10000</span> loops <span class=\"keyword\">each</span>)</code></pre><p>Numba version on Win10</p><pre><code>(base) C:\\Users\\Grapher&gt;conda <span class=\"built_in\">list</span> numba\n<span class=\"preprocessor\"># packages in environment at C:\\ProgramData\\Anaconda3:</span>\n<span class=\"preprocessor\">#</span>\n<span class=\"preprocessor\"># Name                    Version                   Build  Channel</span>\nnumba                     <span class=\"number\">0.39</span><span class=\"number\">.0</span>           py36h830ac7b_0    anaconda</code></pre>",
  "id": "5bceca4d435c2a518eeed90f",
  "issues": [],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 14,
  "sent": "2018-10-23T07:14:21.415Z",
  "text": "@stuartarchibald \nI have done some time comparisons with a cosine similarity calculation (as defined for the class above). I ran it once using a pure python calculation, another time with an unjitted class as defined above, and finally with a numba-jitted class. Am I seeing the difference because I am doing one calculation repeatedly rather than pushing lists through? Or is something else going on?\n```python\ndef cos_sim(v1, v2):   # pure python calculation\n    def mag(self):\n        return (self[0]**2 + self[1]**2 + self[2]**2)**0.5\n    return (v1[0] * v2[0] + v1[1] * v2[1] + v1[2] * v2[2]) / mag(v1) / mag(v2)\n\np3_1j = v3dj(3.4,6.3,7.6)\np3_2j = v3dj(8.2,-6.3,0.1)\n\n%timeit cos_sim((3.4,6.3,7.6),(8.2,-6.3,0.1))\n# %timeit p3_1.cos(p3_2) I also defined the class without jit and ran it\n%timeit p3_1j.cos(p3_2j)\n```\nResults:\n```\n6.12 \u00b5s \u00b1 1.12 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100000 loops each)\n5.63 \u00b5s \u00b1 839 ns per loop (mean \u00b1 std. dev. of 7 runs, 100000 loops each)\n38.9 \u00b5s \u00b1 9.44 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 10000 loops each)\n\n```\nNumba version on Win10\n\n```\n(base) C:\\Users\\Grapher>conda list numba\n# packages in environment at C:\\ProgramData\\Anaconda3:\n#\n# Name                    Version                   Build  Channel\nnumba                     0.39.0           py36h830ac7b_0    anaconda\n\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-10-23T09:30:28.596Z",
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"mdekstrand\" class=\"mention\">@mdekstrand</span> if your loop is of known bounds and you just want to store some data into indexes of a list then this sort of thing might help:<pre><code><span class=\"keyword\">from</span> numba <span class=\"keyword\">import</span> prange, njit\n<span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np\n\n<span class=\"decorator\">@njit(parallel=True)</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">demo_parallel_list_storage</span><span class=\"params\">(n)</span>:</span>\n    placeholder = np.array([<span class=\"number\">0.</span>])\n    store = [placeholder <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(n)]\n\n    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> prange(n):\n        tmp = np.ones((i,)) * i\n        store[i] = tmp\n    <span class=\"keyword\">return</span> store\n\nprint(demo_parallel_list_storage(<span class=\"number\">10</span>))</code></pre>",
  "id": "5bceea28bbdc0b250587327c",
  "issues": [],
  "mentions": [
   {
    "screenName": "mdekstrand",
    "userId": "563a1c3016b6c7089cb97517",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 16,
  "sent": "2018-10-23T09:30:16.190Z",
  "text": "@mdekstrand if your loop is of known bounds and you just want to store some data into indexes of a list then this sort of thing might help:\n```\nfrom numba import prange, njit\nimport numpy as np\n\n@njit(parallel=True)\ndef demo_parallel_list_storage(n):\n    placeholder = np.array([0.])\n    store = [placeholder for _ in range(n)]\n\n    for i in prange(n):\n        tmp = np.ones((i,)) * i\n        store[i] = tmp\n    return store\n\nprint(demo_parallel_list_storage(10))\n```",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"boustrephon\" class=\"mention\">@boustrephon</span> thanks, I&#39;ve taken a look at the machine code, I don&#39;t think there&#39;s an obvious way around this. The code generated necessarily contains a lot of machinery to deal with that this is a class emulation, and yet the actual amount of computation is tiny. Also, there will be limited exploitable vectorization benefit as the data organisation at present is array-of-struct like opposed to struct-of-array.",
  "id": "5bceed7cef4afc4f28baa2ef",
  "issues": [],
  "mentions": [
   {
    "screenName": "boustrephon",
    "userId": "5ba8d2f0d73408ce4fa92cfb",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 15,
  "sent": "2018-10-23T09:44:28.522Z",
  "text": "@boustrephon thanks, I've taken a look at the machine code, I don't think there's an obvious way around this. The code generated necessarily contains a lot of machinery to deal with that this is a class emulation, and yet the actual amount of computation is tiny. Also, there will be limited exploitable vectorization benefit as the data organisation at present is array-of-struct like opposed to struct-of-array.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/mdekstrand",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/186612?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/186612?v=4&s=60",
   "displayName": "Michael Ekstrand",
   "gv": "4",
   "id": "563a1c3016b6c7089cb97517",
   "url": "/mdekstrand",
   "username": "mdekstrand",
   "v": 50
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span> thanks, that is now working :)",
  "id": "5bcf5006c08b8b30675eb5cd",
  "issues": [],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 13,
  "sent": "2018-10-23T16:44:54.341Z",
  "text": "@stuartarchibald thanks, that is now working :)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"mdekstrand\" class=\"mention\">@mdekstrand</span> brilliant, thanks for letting me know.",
  "id": "5bcf50a3ae7be94016a3b5b5",
  "issues": [],
  "mentions": [
   {
    "screenName": "mdekstrand",
    "userId": "563a1c3016b6c7089cb97517",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 13,
  "sent": "2018-10-23T16:47:31.021Z",
  "text": "@mdekstrand brilliant, thanks for letting me know.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/mdekstrand",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/186612?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/186612?v=4&s=60",
   "displayName": "Michael Ekstrand",
   "gv": "4",
   "id": "563a1c3016b6c7089cb97517",
   "url": "/mdekstrand",
   "username": "mdekstrand",
   "v": 50
  },
  "html": "However, performance is poor. Don&#39;t know that it&#39;s because of this, though.",
  "id": "5bcf50be435c2a518ef283fb",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-10-23T16:47:58.649Z",
  "text": "However, performance is poor. Don't know that it's because of this, though.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/mdekstrand",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/186612?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/186612?v=4&s=60",
   "displayName": "Michael Ekstrand",
   "gv": "4",
   "id": "563a1c3016b6c7089cb97517",
   "url": "/mdekstrand",
   "username": "mdekstrand",
   "v": 50
  },
  "html": "oprofile reports that the code is releasing a lot of OpenMP barriers.",
  "id": "5bcf50d182893a2f3b2a60df",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-10-23T16:48:17.752Z",
  "text": "oprofile reports that the code is releasing a lot of OpenMP barriers.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/mdekstrand",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/186612?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/186612?v=4&s=60",
   "displayName": "Michael Ekstrand",
   "gv": "4",
   "id": "563a1c3016b6c7089cb97517",
   "url": "/mdekstrand",
   "username": "mdekstrand",
   "v": 50
  },
  "html": "when I found that in a different piece of parallel numba code, it was because I was using <code>assert</code> in the parallel loop.",
  "id": "5bcf5110600c5f6423f6b5a7",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-10-23T16:49:20.737Z",
  "text": "when I found that in a different piece of parallel numba code, it was because I was using `assert` in the parallel loop.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/mdekstrand",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/186612?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/186612?v=4&s=60",
   "displayName": "Michael Ekstrand",
   "gv": "4",
   "id": "563a1c3016b6c7089cb97517",
   "url": "/mdekstrand",
   "username": "mdekstrand",
   "v": 50
  },
  "html": "But so far I have not found a good way of debugging, in general, <em>where</em> Numba code is taking barriers.",
  "id": "5bcf5138c08b8b30675ebe1a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-10-23T16:50:00.491Z",
  "text": "But so far I have not found a good way of debugging, in general, _where_ Numba code is taking barriers.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "are you using the OpenMP backend ?",
  "id": "5bcf5197bbdc0b25058a0376",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-10-23T16:51:35.476Z",
  "text": "are you using the OpenMP backend ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/mdekstrand",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/186612?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/186612?v=4&s=60",
   "displayName": "Michael Ekstrand",
   "gv": "4",
   "id": "563a1c3016b6c7089cb97517",
   "url": "/mdekstrand",
   "username": "mdekstrand",
   "v": 50
  },
  "html": "I&#39;m seeing this with both the OpenMP and TBB backends.",
  "id": "5bcf51a4ef4afc4f28bd5ec1",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-10-23T16:51:48.094Z",
  "text": "I'm seeing this with both the OpenMP and TBB backends.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "OMP barrier in TBB?",
  "id": "5bcf51bac08b8b30675ebffe",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-10-23T16:52:10.046Z",
  "text": "OMP barrier in TBB?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/mdekstrand",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/186612?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/186612?v=4&s=60",
   "displayName": "Michael Ekstrand",
   "gv": "4",
   "id": "563a1c3016b6c7089cb97517",
   "url": "/mdekstrand",
   "username": "mdekstrand",
   "v": 50
  },
  "html": "yeah that surprised me :(",
  "id": "5bcf51bec7bf7c36625a1414",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-10-23T16:52:14.940Z",
  "text": "yeah that surprised me :(",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "are you sure its using TBB ?",
  "id": "5bcf51cac08b8b30675ec0cf",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-10-23T16:52:26.371Z",
  "text": "are you sure its using TBB ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/mdekstrand",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/186612?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/186612?v=4&s=60",
   "displayName": "Michael Ekstrand",
   "gv": "4",
   "id": "563a1c3016b6c7089cb97517",
   "url": "/mdekstrand",
   "username": "mdekstrand",
   "v": 50
  },
  "html": "pretty sure, just a minute and I&#39;ll double-check",
  "id": "5bcf51da435c2a518ef28d6a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-10-23T16:52:42.471Z",
  "text": "pretty sure, just a minute and I'll double-check",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<code>print(numba.threading_layer() )</code> at the end of the computation should tell you",
  "id": "5bcf51e3ae7be94016a3c00f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-10-23T16:52:51.098Z",
  "text": "`print(numba.threading_layer() )` at the end of the computation should tell you",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/mdekstrand",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/186612?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/186612?v=4&s=60",
   "displayName": "Michael Ekstrand",
   "gv": "4",
   "id": "563a1c3016b6c7089cb97517",
   "url": "/mdekstrand",
   "username": "mdekstrand",
   "v": 50
  },
  "html": "yes, using TBB",
  "id": "5bcf52396e5a401c2dbae457",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-10-23T16:54:17.101Z",
  "text": "yes, using TBB",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/mdekstrand",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/186612?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/186612?v=4&s=60",
   "displayName": "Michael Ekstrand",
   "gv": "4",
   "id": "563a1c3016b6c7089cb97517",
   "url": "/mdekstrand",
   "username": "mdekstrand",
   "v": 50
  },
  "html": "<pre><code><span class=\"number\">152794</span>   <span class=\"number\">20.8699</span>  anon (tgid:<span class=\"number\">3553</span> range:<span class=\"number\">0x7f5124d1f000</span>-<span class=\"number\">0x7f5124d37fff</span>) python3<span class=\"number\">.6</span>                anon (tgid:<span class=\"number\">3553</span> range:<span class=\"number\">0x7f5124d1f000</span>-<span class=\"number\">0x7f5124d37fff</span>)\n<span class=\"number\">129225</span>   <span class=\"number\">17.6507</span>  libiomp5.so              python3<span class=\"number\">.6</span>                _INTERNAL_25_______src_kmp_barrier_cpp_71f3cf03::__kmp_hyper_barrier_release(barrier_type, kmp_info*, <span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>, <span class=\"keyword\">void</span>*)\n<span class=\"number\">54500</span>     <span class=\"number\">7.4441</span>  no-vmlinux               python3<span class=\"number\">.6</span>                /no-vmlinux</code></pre>",
  "id": "5bcf524082893a2f3b2a6d85",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-10-23T16:54:24.806Z",
  "text": "```\n152794   20.8699  anon (tgid:3553 range:0x7f5124d1f000-0x7f5124d37fff) python3.6                anon (tgid:3553 range:0x7f5124d1f000-0x7f5124d37fff)\n129225   17.6507  libiomp5.so              python3.6                _INTERNAL_25_______src_kmp_barrier_cpp_71f3cf03::__kmp_hyper_barrier_release(barrier_type, kmp_info*, int, int, int, void*)\n54500     7.4441  no-vmlinux               python3.6                /no-vmlinux\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/mdekstrand",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/186612?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/186612?v=4&s=60",
   "displayName": "Michael Ekstrand",
   "gv": "4",
   "id": "563a1c3016b6c7089cb97517",
   "url": "/mdekstrand",
   "username": "mdekstrand",
   "v": 50
  },
  "html": "the top 3 lines of <code>opreport -l</code> after running the TBB run under <code>operf</code>",
  "id": "5bcf5249ef4afc4f28bd6309",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-10-23T16:54:33.918Z",
  "text": "the top 3 lines of `opreport -l` after running the TBB run under `operf`",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/mdekstrand",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/186612?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/186612?v=4&s=60",
   "displayName": "Michael Ekstrand",
   "gv": "4",
   "id": "563a1c3016b6c7089cb97517",
   "url": "/mdekstrand",
   "username": "mdekstrand",
   "v": 50
  },
  "html": "I just set <code>MKL_THREADING_LAYER=TBB</code> too to try to make sure MKL isn&#39;t the culprit, and no change :(",
  "id": "5bcf52e4600c5f6423f6c5d7",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-10-23T16:57:08.016Z",
  "text": "I just set `MKL_THREADING_LAYER=TBB` too to try to make sure MKL isn't the culprit, and no change :(",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/mdekstrand",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/186612?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/186612?v=4&s=60",
   "displayName": "Michael Ekstrand",
   "gv": "4",
   "id": "563a1c3016b6c7089cb97517",
   "url": "/mdekstrand",
   "username": "mdekstrand",
   "v": 50
  },
  "html": "I do have reproducer code on GitHub if that would be helpful.",
  "id": "5bcf533164cfc273f912bbc6",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-10-23T16:58:25.891Z",
  "text": "I do have reproducer code on GitHub if that would be helpful.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "that&#39;d be great, thanks",
  "id": "5bcf5339ef4afc4f28bd6c48",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-10-23T16:58:33.022Z",
  "text": "that'd be great, thanks",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/mdekstrand",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/186612?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/186612?v=4&s=60",
   "displayName": "Michael Ekstrand",
   "gv": "4",
   "id": "563a1c3016b6c7089cb97517",
   "url": "/mdekstrand",
   "username": "mdekstrand",
   "v": 50
  },
  "html": "this is the code I am trying to get working (well): <a target=\"_blank\" data-link-type=\"pr\" data-issue=\"39\" href=\"https://github.com/lenskit/lkpy/pull/39\" data-provider=\"github\" data-issue-repo=\"lenskit/lkpy\" class=\"pr\">lenskit/lkpy#39</a>",
  "id": "5bcf534e64cfc273f912bc9d",
  "issues": [
   {
    "number": "39",
    "repo": "lenskit/lkpy"
   }
  ],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-10-23T16:58:54.125Z",
  "text": "this is the code I am trying to get working (well): https://github.com/lenskit/lkpy/pull/39",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/mdekstrand",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/186612?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/186612?v=4&s=60",
   "displayName": "Michael Ekstrand",
   "gv": "4",
   "id": "563a1c3016b6c7089cb97517",
   "url": "/mdekstrand",
   "username": "mdekstrand",
   "v": 50
  },
  "html": "this is the test harness that demonstrates the scalability problems: <a href=\"https://github.com/lenskit/lk-test-evals/tree/lkpy\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://github.com/lenskit/lk-test-evals/tree/lkpy</a>",
  "id": "5bcf536538449236618763a8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-10-23T16:59:17.012Z",
  "text": "this is the test harness that demonstrates the scalability problems: https://github.com/lenskit/lk-test-evals/tree/lkpy",
  "unread": false,
  "urls": [
   {
    "url": "https://github.com/lenskit/lk-test-evals/tree/lkpy"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/mdekstrand",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/186612?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/186612?v=4&s=60",
   "displayName": "Michael Ekstrand",
   "gv": "4",
   "id": "563a1c3016b6c7089cb97517",
   "url": "/mdekstrand",
   "username": "mdekstrand",
   "v": 50
  },
  "html": "with <code>python setup.py develop</code> on the LKPY code, running <code>invoke train-lkpy --algorithm item-item --data ml-small</code> in the <code>lkpy</code> branch of the <code>lk-test-evals</code> repository will run the code on enough data to demonstrate the problem.",
  "id": "5bcf53b4ae7be94016a3cd2e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-10-23T17:00:36.527Z",
  "text": "with `python setup.py develop` on the LKPY code, running `invoke train-lkpy --algorithm item-item --data ml-small` in the `lkpy` branch of the `lk-test-evals` repository will run the code on enough data to demonstrate the problem.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "can you <code>strace -fe open</code> on the process to see what&#39;s opening libiomp5.so ?",
  "id": "5bcf53fac7bf7c36625a25c1",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-10-23T17:01:46.952Z",
  "text": "can you `strace -fe open` on the process to see what's opening libiomp5.so ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/mdekstrand",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/186612?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/186612?v=4&s=60",
   "displayName": "Michael Ekstrand",
   "gv": "4",
   "id": "563a1c3016b6c7089cb97517",
   "url": "/mdekstrand",
   "username": "mdekstrand",
   "v": 50
  },
  "html": "hmm, it can be simpler, one of the test cases in the LKPY repository is actually enough to demosntrate the problem.",
  "id": "5bcf53fbae7be94016a3ceb0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-10-23T17:01:47.442Z",
  "text": "hmm, it can be simpler, one of the test cases in the LKPY repository is actually enough to demosntrate the problem.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/mdekstrand",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/186612?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/186612?v=4&s=60",
   "displayName": "Michael Ekstrand",
   "gv": "4",
   "id": "563a1c3016b6c7089cb97517",
   "url": "/mdekstrand",
   "username": "mdekstrand",
   "v": 50
  },
  "html": "yeah",
  "id": "5bcf5400ab17df2631db256f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-10-23T17:01:52.675Z",
  "text": "yeah",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "I hope its NumPy",
  "id": "5bcf54176e5a401c2dbaf33e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-10-23T17:02:15.742Z",
  "text": "I hope its NumPy",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/mdekstrand",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/186612?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/186612?v=4&s=60",
   "displayName": "Michael Ekstrand",
   "gv": "4",
   "id": "563a1c3016b6c7089cb97517",
   "url": "/mdekstrand",
   "username": "mdekstrand",
   "v": 50
  },
  "html": "<code>python -m pytest -k ii_large</code> should exercise this code.",
  "id": "5bcf542a271506518d5af09d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-10-23T17:02:34.928Z",
  "text": "`python -m pytest -k ii_large` should exercise this code.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/mdekstrand",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/186612?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/186612?v=4&s=60",
   "displayName": "Michael Ekstrand",
   "gv": "4",
   "id": "563a1c3016b6c7089cb97517",
   "url": "/mdekstrand",
   "username": "mdekstrand",
   "v": 50
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span> it does look like numpy, here&#39;s a squence of opens:<pre><code><span class=\"function\"><span class=\"title\">open</span><span class=\"params\">(<span class=\"string\">\"/home/MICHAELEKSTRAND/.conda/envs/lkpy-dev/lib/python3.6/site-packages/numpy/_mklinit.cpython-36m-x86_64-linux-gnu.so\"</span>, O_RDONLY|O_CLOEXEC)</span></span> = <span class=\"number\">4</span>\n<span class=\"function\"><span class=\"title\">open</span><span class=\"params\">(<span class=\"string\">\"/home/MICHAELEKSTRAND/.conda/envs/lkpy-dev/lib/python3.6/site-packages/numpy/../../../tls/x86_64/libiomp5.so\"</span>, O_RDONLY|O_CLOEXEC)</span></span> = -<span class=\"number\">1</span> ENOENT (No such file or directory)\n<span class=\"function\"><span class=\"title\">open</span><span class=\"params\">(<span class=\"string\">\"/home/MICHAELEKSTRAND/.conda/envs/lkpy-dev/lib/python3.6/site-packages/numpy/../../../tls/libiomp5.so\"</span>, O_RDONLY|O_CLOEXEC)</span></span> = -<span class=\"number\">1</span> ENOENT (No such file or directory)\n<span class=\"function\"><span class=\"title\">open</span><span class=\"params\">(<span class=\"string\">\"/home/MICHAELEKSTRAND/.conda/envs/lkpy-dev/lib/python3.6/site-packages/numpy/../../../x86_64/libiomp5.so\"</span>, O_RDONLY|O_CLOEXEC)</span></span> = -<span class=\"number\">1</span> ENOENT (No such file or directory)\n<span class=\"function\"><span class=\"title\">open</span><span class=\"params\">(<span class=\"string\">\"/home/MICHAELEKSTRAND/.conda/envs/lkpy-dev/lib/python3.6/site-packages/numpy/../../../libiomp5.so\"</span>, O_RDONLY|O_CLOEXEC)</span></span> = <span class=\"number\">4</span></code></pre>",
  "id": "5bcf548d64cfc273f912c312",
  "issues": [],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 16,
  "sent": "2018-10-23T17:04:13.160Z",
  "text": "@stuartarchibald it does look like numpy, here's a squence of opens:\n```\nopen(\"/home/MICHAELEKSTRAND/.conda/envs/lkpy-dev/lib/python3.6/site-packages/numpy/_mklinit.cpython-36m-x86_64-linux-gnu.so\", O_RDONLY|O_CLOEXEC) = 4\nopen(\"/home/MICHAELEKSTRAND/.conda/envs/lkpy-dev/lib/python3.6/site-packages/numpy/../../../tls/x86_64/libiomp5.so\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\nopen(\"/home/MICHAELEKSTRAND/.conda/envs/lkpy-dev/lib/python3.6/site-packages/numpy/../../../tls/libiomp5.so\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\nopen(\"/home/MICHAELEKSTRAND/.conda/envs/lkpy-dev/lib/python3.6/site-packages/numpy/../../../x86_64/libiomp5.so\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\nopen(\"/home/MICHAELEKSTRAND/.conda/envs/lkpy-dev/lib/python3.6/site-packages/numpy/../../../libiomp5.so\", O_RDONLY|O_CLOEXEC) = 4\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "yeah, so its MKL that&#39;s pulling it in",
  "id": "5bcf549c435c2a518ef2a3c6",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-10-23T17:04:28.269Z",
  "text": "yeah, so its MKL that's pulling it in",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "does <code>perf</code> give you the same answer as to what&#39;s taking all the time ?",
  "id": "5bcf54d982893a2f3b2a80c0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-10-23T17:05:29.226Z",
  "text": "does `perf` give you the same answer as to what's taking all the time ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/mdekstrand",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/186612?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/186612?v=4&s=60",
   "displayName": "Michael Ekstrand",
   "gv": "4",
   "id": "563a1c3016b6c7089cb97517",
   "url": "/mdekstrand",
   "username": "mdekstrand",
   "v": 50
  },
  "html": "<pre><code> 13.52% <span class=\"instruction\"> invoke </span>   ld-2.17.so                                    <span class=\"keyword\">[</span>.] _dl_lookup_symbol_x                                                                                                                                                   \u2592\n  11.27% <span class=\"instruction\"> invoke </span>   <span class=\"keyword\">[</span>kernel.kallsyms]                             <span class=\"keyword\">[</span>k] SYSC_newfstat                                                                                                                                                         \u2592\n   9.73% <span class=\"instruction\"> invoke </span>   libiom<span class=\"variable\">p5</span>.so                                   <span class=\"keyword\">[</span>.] _INTERNAL_25_______src_kmp_barrier_cpp_71f3cf03::__kmp_hyper_barrier_release                                                                                          \u2592\n   6.28% <span class=\"instruction\"> invoke </span>   perf-8113.map                                 <span class=\"keyword\">[</span>.] 0x00007f76ddf8e055                                                                                                                                                    \u2592\n   5.30% <span class=\"instruction\"> invoke </span>   perf-8113.map                                 <span class=\"keyword\">[</span>.] 0x00007f76ddf8e065</code></pre>",
  "id": "5bcf55fe1e23486b9306f24b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-10-23T17:10:22.786Z",
  "text": "```\n 13.52%  invoke    ld-2.17.so                                    [.] _dl_lookup_symbol_x                                                                                                                                                   \u2592\n  11.27%  invoke    [kernel.kallsyms]                             [k] SYSC_newfstat                                                                                                                                                         \u2592\n   9.73%  invoke    libiomp5.so                                   [.] _INTERNAL_25_______src_kmp_barrier_cpp_71f3cf03::__kmp_hyper_barrier_release                                                                                          \u2592\n   6.28%  invoke    perf-8113.map                                 [.] 0x00007f76ddf8e055                                                                                                                                                    \u2592\n   5.30%  invoke    perf-8113.map                                 [.] 0x00007f76ddf8e065                             \n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "hmmm, ok, what&#39;s the internals of the loop doing ?",
  "id": "5bcf56543844923661877a31",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-10-23T17:11:48.774Z",
  "text": "hmmm, ok, what's the internals of the loop doing ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/mdekstrand",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/186612?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/186612?v=4&s=60",
   "displayName": "Michael Ekstrand",
   "gv": "4",
   "id": "563a1c3016b6c7089cb97517",
   "url": "/mdekstrand",
   "username": "mdekstrand",
   "v": 50
  },
  "html": "allocating a numpy array, filling it up by working through a CSR matrix, trimming down the results into a new pair of numpy arrays, and storing that in a list.",
  "id": "5bcf56a9ef4afc4f28bd832e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-10-23T17:13:13.848Z",
  "text": "allocating a numpy array, filling it up by working through a CSR matrix, trimming down the results into a new pair of numpy arrays, and storing that in a list.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/mdekstrand",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/186612?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/186612?v=4&s=60",
   "displayName": "Michael Ekstrand",
   "gv": "4",
   "id": "563a1c3016b6c7089cb97517",
   "url": "/mdekstrand",
   "username": "mdekstrand",
   "v": 50
  },
  "html": "it is possible that the barriers are a red herring \ud83e\udd14",
  "id": "5bcf56cb1c100a4f29d1085f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-10-23T17:13:47.380Z",
  "text": "it is possible that the barriers are a red herring \ud83e\udd14",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/mdekstrand",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/186612?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/186612?v=4&s=60",
   "displayName": "Michael Ekstrand",
   "gv": "4",
   "id": "563a1c3016b6c7089cb97517",
   "url": "/mdekstrand",
   "username": "mdekstrand",
   "v": 50
  },
  "html": "(just ran with a bigger data set, and the barrier percentage drops)",
  "id": "5bcf56d41e23486b9306f7c0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-10-23T17:13:56.969Z",
  "text": "(just ran with a bigger data set, and the barrier percentage drops)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "they might be just a necessity of scheduling",
  "id": "5bcf56dfbbdc0b25058a2455",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-10-23T17:14:07.867Z",
  "text": "they might be just a necessity of scheduling",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-10-23T17:15:48.393Z",
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "if you run a loop with no effort in (just assign something to your list, a bit like my little example from earlier) do you get the same lot-of-barrier behaviour ?",
  "id": "5bcf572c6e5a401c2dbb08ee",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-10-23T17:15:24.936Z",
  "text": "if you run a loop with no effort in (just assign something to your list, a bit like my little example from earlier) do you get the same lot-of-barrier behaviour ?",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "(AFK for a bit)",
  "id": "5bcf5767271506518d5b0605",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-10-23T17:16:23.459Z",
  "text": "(AFK for a bit)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/mdekstrand",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/186612?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/186612?v=4&s=60",
   "displayName": "Michael Ekstrand",
   "gv": "4",
   "id": "563a1c3016b6c7089cb97517",
   "url": "/mdekstrand",
   "username": "mdekstrand",
   "v": 50
  },
  "html": "I see no barriers in the top page of  perf with a no-work loop.",
  "id": "5bcf587dc08b8b30675eedf1",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 20,
  "sent": "2018-10-23T17:21:01.976Z",
  "text": "I see no barriers in the top page of  perf with a no-work loop.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/mdekstrand",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/186612?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/186612?v=4&s=60",
   "displayName": "Michael Ekstrand",
   "gv": "4",
   "id": "563a1c3016b6c7089cb97517",
   "url": "/mdekstrand",
   "username": "mdekstrand",
   "v": 50
  },
  "html": "Running with an even bigger data set, barrier drops down to about 1%, so i think my parallel slowdown is probably happening elsewhere :/",
  "id": "5bcf58ab1e23486b9307042a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 20,
  "sent": "2018-10-23T17:21:47.658Z",
  "text": "Running with an even bigger data set, barrier drops down to about 1%, so i think my parallel slowdown is probably happening elsewhere :/",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "hmmm, possibly so",
  "id": "5bcf62f0069fca52a5817cfd",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-10-23T18:05:36.221Z",
  "text": "hmmm, possibly so",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/boustrephon",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/14007454?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/14007454?v=4&s=60",
   "displayName": "boustrephon",
   "gv": "4",
   "id": "5ba8d2f0d73408ce4fa92cfb",
   "url": "/boustrephon",
   "username": "boustrephon",
   "v": 7
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span>  Thanks - I am getting a better idea of what I should be looking to use Numba for.",
  "id": "5bd03e48ab17df2631e0f0e7",
  "issues": [],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 17,
  "sent": "2018-10-24T09:41:28.984Z",
  "text": "@stuartarchibald  Thanks - I am getting a better idea of what I should be looking to use Numba for.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-10-24T10:36:55.699Z",
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "<p>Hello<br>I&#39;m trying to further parallelize my function with this firm:</p><pre><code><span class=\"decorator\">@guvectorize([(uint32[:], uint32[:], uint32[:], uint32[:], uint32[:], uint32[:])], '(d),(d),(),(),()-&gt;(d)', target='parallel')</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_sgm</span><span class=\"params\">(SGMI, LA, p1, p2, min2, SGMO)</span>:</span></code></pre><p>the function works correctly when it is called from normal python:</p><pre><code><span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"function\"><span class=\"title\">range</span><span class=\"params\">(<span class=\"number\">1</span>,lagg.shape[<span class=\"number\">1</span>])</span></span>:\n     _sgm(sagg[<span class=\"tag\">i</span>, j-<span class=\"number\">1</span>], lagg[<span class=\"tag\">i</span>,j], P1[<span class=\"tag\">i</span>,j], P2[<span class=\"tag\">i</span>,j], <span class=\"number\">0</span>, sagg[<span class=\"tag\">i</span>,j])</code></pre><p>and the arguments have the following shape:</p><pre><code>sagg.shape = (<span class=\"number\">480</span>, <span class=\"number\">640</span>, <span class=\"number\">98</span>)\nlagg.shape = (<span class=\"number\">480</span>, <span class=\"number\">640</span>, <span class=\"number\">98</span>)\nP1.shape = (<span class=\"number\">480</span>, <span class=\"number\">640</span>)\nP2.shape = (<span class=\"number\">480</span>, <span class=\"number\">640</span>)</code></pre><p>As said, the function works properly, problems arise when i try to parallelize the outer loop:</p><pre><code><span class=\"decorator\">@jit(nopython=True, parallel=True)</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sgim</span><span class=\"params\">(sagg, lagg, P1, P2)</span>:</span>\n    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,lagg.shape[<span class=\"number\">0</span>]):\n        _sgm(sagg[j-<span class=\"number\">1</span>], lagg[j], P1[j], P2[j], <span class=\"number\">0</span>, sagg[j])</code></pre><p>I get the following error:</p><pre><code>TypingError: Failed in nopython mode pipeline (<span class=\"keyword\">step</span>: nopython frontend)\nUntyped global name <span class=\"string\">'_sgm'</span>: cannot determine Numba type of &lt;<span class=\"keyword\">class</span> <span class=\"string\">'numpy.ufunc'</span>&gt;\n\n<span class=\"keyword\">File</span> <span class=\"string\">\"&lt;ipython-input-13-7812a7fabd86&gt;\"</span>, line <span class=\"number\">29</span>:\n<span class=\"keyword\">def</span> sgim(sagg, lagg, P1, P2):\n    &lt;<span class=\"keyword\">source</span> elided&gt;\n        _sgm(sagg[j-<span class=\"number\">1</span>], lagg[j], P1[j], P2[j], <span class=\"number\">0</span>, sagg[j])\n        ^</code></pre><p>Any suggestions?</p>",
  "id": "5bd04b39069fca52a58755d5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-10-24T10:36:41.635Z",
  "text": "Hello\nI'm trying to further parallelize my function with this firm:\n```\n@guvectorize([(uint32[:], uint32[:], uint32[:], uint32[:], uint32[:], uint32[:])], '(d),(d),(),(),()->(d)', target='parallel')\ndef _sgm(SGMI, LA, p1, p2, min2, SGMO):\n```\n\nthe function works correctly when it is called from normal python:\n```\nfor j in range(1,lagg.shape[1]):\n     _sgm(sagg[i, j-1], lagg[i,j], P1[i,j], P2[i,j], 0, sagg[i,j])\n```\n\nand the arguments have the following shape:\n```\nsagg.shape = (480, 640, 98)\nlagg.shape = (480, 640, 98)\nP1.shape = (480, 640)\nP2.shape = (480, 640)\n```\n\nAs said, the function works properly, problems arise when i try to parallelize the outer loop:\n\n```\n@jit(nopython=True, parallel=True)\ndef sgim(sagg, lagg, P1, P2):\n    for j in range(1,lagg.shape[0]):\n        _sgm(sagg[j-1], lagg[j], P1[j], P2[j], 0, sagg[j])\n```\n\nI get the following error:\n\n```\nTypingError: Failed in nopython mode pipeline (step: nopython frontend)\nUntyped global name '_sgm': cannot determine Numba type of <class 'numpy.ufunc'>\n\nFile \"<ipython-input-13-7812a7fabd86>\", line 29:\ndef sgim(sagg, lagg, P1, P2):\n    <source elided>\n        _sgm(sagg[j-1], lagg[j], P1[j], P2[j], 0, sagg[j])\n        ^\n```\n\nAny suggestions?",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"lpuglia\" class=\"mention\">@lpuglia</span> seems like you are trying to call a gufunc from a jitted function, is that right?",
  "id": "5bd051cb64cfc273f9192b90",
  "issues": [],
  "mentions": [
   {
    "screenName": "lpuglia",
    "userId": "5bc8acc0d73408ce4fabe62d",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 16,
  "sent": "2018-10-24T11:04:43.440Z",
  "text": "@lpuglia seems like you are trying to call a gufunc from a jitted function, is that right?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "What is the correct way to proceed for the parallelization of the outer loop? should i bring it inside the _sgm function directly?",
  "id": "5bd05c4b069fca52a587c940",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-10-24T11:49:31.756Z",
  "text": "What is the correct way to proceed for the parallelization of the outer loop? should i bring it inside the _sgm function directly?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "and also: what is wrong in calling gufunc from jitted func?&gt;",
  "id": "5bd05ceb1c100a4f29d7904b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-10-24T11:52:11.757Z",
  "text": "and also: what is wrong in calling gufunc from jitted func?>",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"lpuglia\" class=\"mention\">@lpuglia</span> unfortunately calling gufuncs from jitted functions is unsupported.",
  "id": "5bd06a6fab17df2631e21e7e",
  "issues": [],
  "mentions": [
   {
    "screenName": "lpuglia",
    "userId": "5bc8acc0d73408ce4fabe62d",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 16,
  "sent": "2018-10-24T12:49:51.238Z",
  "text": "@lpuglia unfortunately calling gufuncs from jitted functions is unsupported.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "It&#39;s a long standing issue that is quite complicated to resolve due to broadcasting behaviours.",
  "id": "5bd06a94ae7be94016aae0ea",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-10-24T12:50:28.934Z",
  "text": "It's a long standing issue that is quite complicated to resolve due to broadcasting behaviours.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "Also, putting parallel calls inside parallel calls doesn&#39;t create nested parallelism, the optimisation passes will flatten that out and make the outer most loop parallel",
  "id": "5bd06af2600c5f6423fdcde4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-10-24T12:52:02.446Z",
  "text": "Also, putting parallel calls inside parallel calls doesn't create nested parallelism, the optimisation passes will flatten that out and make the outer most loop parallel",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "i solved my problem, i put that loop in the _sgm func and it is very fast",
  "id": "5bd09168c08b8b306766eb89",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-10-24T15:36:08.932Z",
  "text": "i solved my problem, i put that loop in the _sgm func and it is very fast",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": ":) brilliant",
  "id": "5bd094a9c08b8b3067670812",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-10-24T15:50:01.645Z",
  "text": ":) brilliant",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-10-24T15:57:39.393Z",
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "anyway the library is very nice and neat, IMHO the only problem is with the errors: for beginners they can look &quot;scary&quot; while for people that are already in parallelization enviroment sometimes they are misleading (e.g. in my case i would have never guessed from that error that ufunc are not supported in jitted func)",
  "id": "5bd09648600c5f6423ff124d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-10-24T15:56:56.416Z",
  "text": "anyway the library is very nice and neat, IMHO the only problem is with the errors: for beginners they can look \"scary\" while for people that are already in parallelization enviroment sometimes they are misleading (e.g. in my case i would have never guessed from that error that ufunc are not supported in jitted func)",
  "unread": false,
  "urls": [],
  "v": 3
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "thank you for you help!",
  "id": "5bd09651ef4afc4f28c597b5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-10-24T15:57:05.931Z",
  "text": "thank you for you help!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "no problem, and thanks for the feedback",
  "id": "5bd09d9eef4afc4f28c5d147",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-10-24T16:28:14.138Z",
  "text": "no problem, and thanks for the feedback",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "we&#39;ve been working on trying to provide better error messages",
  "id": "5bd09da9c08b8b3067674ea0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-10-24T16:28:25.972Z",
  "text": "we've been working on trying to provide better error messages",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "i know how hard can it be to produce meaningfull error messages :)",
  "id": "5bd09dd0435c2a518efb2ca6",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-10-24T16:29:04.773Z",
  "text": "i know how hard can it be to produce meaningfull error messages :)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "the standard CPU target <code>@jit</code> has the most useful messages, the rest of the targets are slowly catching up",
  "id": "5bd09dd9ae7be94016ac6261",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-10-24T16:29:13.480Z",
  "text": "the standard CPU target `@jit` has the most useful messages, the rest of the targets are slowly catching up",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "the <code>parallel</code> target is relatively new in itself and we&#39;ve some tools in the pipeline to help with it",
  "id": "5bd09e0082893a2f3b32d379",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-10-24T16:29:52.420Z",
  "text": "the `parallel` target is relatively new in itself and we've some tools in the pipeline to help with it",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "I&#39;m hoping <a target=\"_blank\" data-link-type=\"pr\" data-issue=\"3160\" href=\"https://github.com/numba/numba/pull/3160\" data-provider=\"github\" data-issue-repo=\"numba/numba\" class=\"pr\">numba/numba#3160</a> will make it into the next release",
  "id": "5bd09e20ae7be94016ac636d",
  "issues": [
   {
    "number": "3160",
    "repo": "numba/numba"
   }
  ],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-10-24T16:30:24.542Z",
  "text": "I'm hoping https://github.com/numba/numba/pull/3160 will make it into the next release",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "there&#39;s also an outstanding issue to rewrite the &quot;what happens when lowering has a problem&quot; handling to work a bit like the rest of Numba&#39;s exception handling, that might be release after (fingers crossed!)",
  "id": "5bd09e71c08b8b3067675330",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-10-24T16:31:45.859Z",
  "text": "there's also an outstanding issue to rewrite the \"what happens when lowering has a problem\" handling to work a bit like the rest of Numba's exception handling, that might be release after (fingers crossed!)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "anyway, if you have any specific feedback on things to improve it&#39;d be great to hear it, please feel free to open issues on github",
  "id": "5bd09e9d271506518d635bb4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-10-24T16:32:29.038Z",
  "text": "anyway, if you have any specific feedback on things to improve it'd be great to hear it, please feel free to open issues on github",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "i see, just a fast question, what is the expected behaviour when you access the -1 column of a matrix? is not giving me any error",
  "id": "5bd09ee9ab17df2631e3a11e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-10-24T16:33:45.009Z",
  "text": "i see, just a fast question, what is the expected behaviour when you access the -1 column of a matrix? is not giving me any error",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "oh right, this is python, not C++ XD",
  "id": "5bd09f0bef4afc4f28c5d910",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-10-24T16:34:19.576Z",
  "text": "oh right, this is python, not C++ XD",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "should just read backwards off the end",
  "id": "5bd09f181c100a4f29d97c78",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-10-24T16:34:32.500Z",
  "text": "should just read backwards off the end",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "yeah :) not C++",
  "id": "5bd09f2038449236618fd610",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-10-24T16:34:40.392Z",
  "text": "yeah :) not C++",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/haakonvt",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/8521241?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/8521241?v=4&s=60",
   "displayName": "H\u00e5kon V. Treider",
   "gv": "4",
   "id": "5bd32b8ed73408ce4facdf68",
   "url": "/haakonvt",
   "username": "haakonvt",
   "v": 1
  },
  "html": "Hi there people! I have a question regarding datetime64[ns] and timedelta. Why does the last line give error?<pre><code>import numba\nimport numpy as np\nimport pandas as pd\n\n@numba.<span class=\"function\"><span class=\"title\">jit</span><span class=\"params\">(nopython=True)</span></span>\ndef <span class=\"function\"><span class=\"title\">foo</span><span class=\"params\">(datetimes)</span></span>:\n    <span class=\"tag\">a</span> = np.<span class=\"function\"><span class=\"title\">diff</span><span class=\"params\">(datetimes)</span></span>\n    return <span class=\"tag\">a</span>[<span class=\"number\">0</span>]\n\nindex = pd.<span class=\"function\"><span class=\"title\">date_range</span><span class=\"params\">(start=<span class=\"string\">'1/1/2018'</span>, end=<span class=\"string\">'2/1/2018'</span>, freq=<span class=\"string\">'5 s'</span>)</span></span>\n\n<span class=\"function\"><span class=\"title\">print</span><span class=\"params\">(<span class=\"string\">\"This works!\"</span>,    foo(np.array(index, dtype=np.int64)</span></span>))\n<span class=\"function\"><span class=\"title\">print</span><span class=\"params\">(<span class=\"string\">\"This does not!\"</span>, foo(np.array(index, dtype=<span class=\"string\">'datetime64[ns]'</span>)</span></span>))</code></pre>",
  "id": "5bd32c85bbdc0b2505a31c66",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-10-26T15:02:29.618Z",
  "text": "Hi there people! I have a question regarding datetime64[ns] and timedelta. Why does the last line give error?\n```\nimport numba\nimport numpy as np\nimport pandas as pd\n\n@numba.jit(nopython=True)\ndef foo(datetimes):\n    a = np.diff(datetimes)\n    return a[0]\n\nindex = pd.date_range(start='1/1/2018', end='2/1/2018', freq='5 s')\n\nprint(\"This works!\",    foo(np.array(index, dtype=np.int64)))\nprint(\"This does not!\", foo(np.array(index, dtype='datetime64[ns]')))\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/haakonvt",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/8521241?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/8521241?v=4&s=60",
   "displayName": "H\u00e5kon V. Treider",
   "gv": "4",
   "id": "5bd32b8ed73408ce4facdf68",
   "url": "/haakonvt",
   "username": "haakonvt",
   "v": 1
  },
  "html": "If anyone has a solution/fix please PM me :D",
  "id": "5bd32e99ef4afc4f28d634fc",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-10-26T15:11:21.590Z",
  "text": "If anyone has a solution/fix please PM me :D",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-10-26T16:17:18.847Z",
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"haakonvt\" class=\"mention\">@haakonvt</span>  you can see this?...<pre><code>Invalid <span class=\"operator\"><span class=\"keyword\">use</span> <span class=\"keyword\">of</span> <span class=\"keyword\">Function</span>(&lt;<span class=\"keyword\">function</span> diff <span class=\"keyword\">at</span> <span class=\"number\">0x7faee9ae9e18</span>&gt;) <span class=\"keyword\">with</span> argument(s) <span class=\"keyword\">of</span> <span class=\"keyword\">type</span>(s): (<span class=\"built_in\">array</span>(datetime64[ns], <span class=\"number\">1</span><span class=\"keyword\">d</span>, <span class=\"keyword\">C</span>))\n * parameterized\n<span class=\"keyword\">In</span> definition <span class=\"number\">0</span>:\n    TypingError: <span class=\"keyword\">Failed</span> <span class=\"keyword\">in</span> nopython <span class=\"keyword\">mode</span> pipeline (step: nopython frontend)\nCannot resolve setitem: <span class=\"built_in\">array</span>(datetime64[ns], <span class=\"number\">1</span><span class=\"keyword\">d</span>, <span class=\"keyword\">C</span>)[int64] = timedelta64[ns]\n\n<span class=\"keyword\">File</span> <span class=\"string\">\"numba/targets/arraymath.py\"</span>, line <span class=\"number\">1893</span>:\n    <span class=\"keyword\">def</span> diff_impl(a, <span class=\"keyword\">n</span>=<span class=\"number\">1</span>):\n        &lt;<span class=\"keyword\">source</span> elided&gt;\n            <span class=\"keyword\">for</span> <span class=\"keyword\">i</span> <span class=\"keyword\">in</span> <span class=\"keyword\">range</span>(<span class=\"keyword\">size</span> - <span class=\"number\">1</span>):\n                <span class=\"keyword\">work</span>[<span class=\"keyword\">i</span>] = a2[major, <span class=\"keyword\">i</span> + <span class=\"number\">1</span>] - a2[major, <span class=\"keyword\">i</span>]\n                ^</span></code></pre>",
  "id": "5bd33decbbdc0b2505a39ebc",
  "issues": [],
  "mentions": [
   {
    "screenName": "haakonvt",
    "userId": "5bd32b8ed73408ce4facdf68",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 16,
  "sent": "2018-10-26T16:16:44.932Z",
  "text": "@haakonvt  you can see this?...\n```\nInvalid use of Function(<function diff at 0x7faee9ae9e18>) with argument(s) of type(s): (array(datetime64[ns], 1d, C))\n * parameterized\nIn definition 0:\n    TypingError: Failed in nopython mode pipeline (step: nopython frontend)\nCannot resolve setitem: array(datetime64[ns], 1d, C)[int64] = timedelta64[ns]\n\nFile \"numba/targets/arraymath.py\", line 1893:\n    def diff_impl(a, n=1):\n        <source elided>\n            for i in range(size - 1):\n                work[i] = a2[major, i + 1] - a2[major, i]\n                ^\n```",
  "unread": false,
  "urls": [],
  "v": 3
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "essentially, the diff implementation assumes that the type of the difference will be the same as the input type, but in this case it is not, the type of the difference is a time delta and there&#39;s no implementation to write that into an array of datetime64s",
  "id": "5bd33e52435c2a518e0bfee7",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-10-26T16:18:26.437Z",
  "text": "essentially, the diff implementation assumes that the type of the difference will be the same as the input type, but in this case it is not, the type of the difference is a time delta and there's no implementation to write that into an array of datetime64s",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/haakonvt",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/8521241?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/8521241?v=4&s=60",
   "displayName": "H\u00e5kon V. Treider",
   "gv": "4",
   "id": "5bd32b8ed73408ce4facdf68",
   "url": "/haakonvt",
   "username": "haakonvt",
   "v": 1
  },
  "html": "Oh, I see, that makes sense. Guess I have to run with int64 then change back outside Numba. Thanks! :) ",
  "id": "5bd343ce3844923661a0f0f2",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-10-26T16:41:50.609Z",
  "text": "Oh, I see, that makes sense. Guess I have to run with int64 then change back outside Numba. Thanks! :) ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "np",
  "id": "5bd34411ef4afc4f28d6cd4e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-10-26T16:42:57.426Z",
  "text": "np",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "hey guys, is it possible to cache ufunc and paraller jitted func?",
  "id": "5bd45441271506518d7adaf3",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-10-27T12:04:17.906Z",
  "text": "hey guys, is it possible to cache ufunc and paraller jitted func?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"lpuglia\" class=\"mention\">@lpuglia</span> <code>ufunc</code> yes, <code>jit(parallel=True)</code> no",
  "id": "5bd6f628271506518d8ac556",
  "issues": [],
  "mentions": [
   {
    "screenName": "lpuglia",
    "userId": "5bc8acc0d73408ce4fabe62d",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 15,
  "sent": "2018-10-29T11:59:36.469Z",
  "text": "@lpuglia `ufunc` yes, `jit(parallel=True)` no",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "how so you do that for ufunc?",
  "id": "5bd70854ef4afc4f28ed7ba9",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-10-29T13:17:08.194Z",
  "text": "how so you do that for ufunc?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<a href=\"http://numba.pydata.org/numba-doc/latest/reference/jit-compilation.html#vectorized-functions-ufuncs-and-dufuncs\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://numba.pydata.org/numba-doc/latest/reference/jit-compilation.html#vectorized-functions-ufuncs-and-dufuncs</a>",
  "id": "5bd708ce3844923661b7b3b8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-10-29T13:19:10.780Z",
  "text": "http://numba.pydata.org/numba-doc/latest/reference/jit-compilation.html#vectorized-functions-ufuncs-and-dufuncs",
  "unread": false,
  "urls": [
   {
    "url": "http://numba.pydata.org/numba-doc/latest/reference/jit-compilation.html#vectorized-functions-ufuncs-and-dufuncs"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "set <code>cache=True</code> in the decorator call",
  "id": "5bd708e6ab17df26310bc6ed",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-10-29T13:19:34.915Z",
  "text": "set `cache=True` in the decorator call",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-10-29T13:30:32.406Z",
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "i tried with guvectorize and it works, but it doesn&#39;t with vectorize: TypeError: caching is not supported",
  "id": "5bd70adfab17df26310bd2ab",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-10-29T13:27:59.320Z",
  "text": "i tried with guvectorize and it works, but it doesn't with vectorize: TypeError: caching is not supported\n\n",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<pre><code>from numba import vectorize\nimport numpy as np\n\n@<span class=\"function\"><span class=\"title\">vectorize</span><span class=\"params\">([<span class=\"string\">\"float64(float64, float64)\"</span>, <span class=\"string\">\"float32(float32, float32)\"</span>], target=<span class=\"string\">'parallel'</span>, cache=True)</span></span>\ndef <span class=\"function\"><span class=\"title\">foo123</span><span class=\"params\">(a, b)</span></span>:\n    return np.<span class=\"function\"><span class=\"title\">sqrt</span><span class=\"params\">(np.cos(a)</span></span>**<span class=\"number\">2</span> + np.<span class=\"function\"><span class=\"title\">sin</span><span class=\"params\">(a)</span></span>**<span class=\"number\">2</span> + np.<span class=\"function\"><span class=\"title\">cos</span><span class=\"params\">(b)</span></span>**<span class=\"number\">2</span> + np.<span class=\"function\"><span class=\"title\">sin</span><span class=\"params\">(b)</span></span>**<span class=\"number\">2</span>)\n\nx = np.<span class=\"function\"><span class=\"title\">arange</span><span class=\"params\">(<span class=\"number\">1</span>.e3)</span></span>\n\n<span class=\"function\"><span class=\"title\">print</span><span class=\"params\">(foo123(x, x)</span></span>)</code></pre>",
  "id": "5bd70dc9ae7be94016d4f682",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-10-29T13:40:25.524Z",
  "text": "```\nfrom numba import vectorize\nimport numpy as np\n\n@vectorize([\"float64(float64, float64)\", \"float32(float32, float32)\"], target='parallel', cache=True)\ndef foo123(a, b):\n    return np.sqrt(np.cos(a)**2 + np.sin(a)**2 + np.cos(b)**2 + np.sin(b)**2)\n\nx = np.arange(1.e3)\n\nprint(foo123(x, x))\n```\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "^ that help ?",
  "id": "5bd70dcd64cfc273f943c0b4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-10-29T13:40:29.569Z",
  "text": "^ that help ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "it works in terminal",
  "id": "5bd70dfeab17df26310be4ff",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-10-29T13:41:18.703Z",
  "text": "it works in terminal",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "ok, found the problem, the target was cuda",
  "id": "5bd70e4d271506518d8b6b77",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-10-29T13:42:37.540Z",
  "text": "ok, found the problem, the target was cuda",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "&quot;The compiled function can be cached to reduce future compilation time. It is enabled by setting cache to True. Only the \u201ccpu\u201d and \u201cparallel\u201d targets support caching.&quot; just noticed",
  "id": "5bd70eb2bbdc0b2505bafa48",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-10-29T13:44:18.481Z",
  "text": "\"The compiled function can be cached to reduce future compilation time. It is enabled by setting cache to True. Only the \u201ccpu\u201d and \u201cparallel\u201d targets support caching.\" just noticed",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "thank you!",
  "id": "5bd70eb63844923661b7dad6",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-10-29T13:44:22.867Z",
  "text": "thank you!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "ah, yes, does not work with CUDA",
  "id": "5bd70eb81e23486b933785f4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-10-29T13:44:24.559Z",
  "text": "ah, yes, does not work with CUDA",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "no problem",
  "id": "5bd70eba435c2a518e22f959",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-10-29T13:44:26.714Z",
  "text": "no problem",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-10-30T17:24:35.579Z",
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "Hello guys, is it normal that this code prints True?<pre><code><span class=\"keyword\">from</span> numba <span class=\"keyword\">import</span> stencil\n<span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np\n\n<span class=\"decorator\">@stencil</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">kernel1</span><span class=\"params\">(a)</span>:</span>\n    print(<span class=\"number\">2</span>==<span class=\"number\">1</span>)\n    <span class=\"keyword\">return</span> <span class=\"number\">0.25</span> * (a[<span class=\"number\">0</span>, <span class=\"number\">1</span>] + a[<span class=\"number\">1</span>, <span class=\"number\">0</span>] + a[<span class=\"number\">0</span>, -<span class=\"number\">1</span>] + a[-<span class=\"number\">1</span>, <span class=\"number\">0</span>])\n\noutput_arr = kernel1(np.arange(<span class=\"number\">100</span>).reshape((<span class=\"number\">10</span>, <span class=\"number\">10</span>)))</code></pre>",
  "id": "5bd893acc7bf7c366294b503",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-10-30T17:23:56.795Z",
  "text": "Hello guys, is it normal that this code prints True?\n```\nfrom numba import stencil\nimport numpy as np\n\n@stencil\ndef kernel1(a):\n    print(2==1)\n    return 0.25 * (a[0, 1] + a[1, 0] + a[0, -1] + a[-1, 0])\n\noutput_arr = kernel1(np.arange(100).reshape((10, 10)))\n```",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "that looks like a bug.  can you open an issue?",
  "id": "5bd896a7435c2a518e2c83e3",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-10-30T17:36:39.630Z",
  "text": "that looks like a bug.  can you open an issue?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "nice XD",
  "id": "5bd896b4ae7be94016dea42f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-10-30T17:36:52.977Z",
  "text": "nice XD",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "I&#39;m not sure if it is related to the print function in a stencil context",
  "id": "5bd896c1ab17df2631158d9c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-10-30T17:37:05.553Z",
  "text": "I'm not sure if it is related to the print function in a stencil context",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "is it discouraged to use condition in stencils?",
  "id": "5bd896c3ef4afc4f28f74e5f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-10-30T17:37:07.161Z",
  "text": "is it discouraged to use condition in stencils?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "conditions are fine",
  "id": "5bd896c964cfc273f94d7395",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-10-30T17:37:13.173Z",
  "text": "conditions are fine",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "it is not just the print",
  "id": "5bd896cdc08b8b3067991241",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-10-30T17:37:17.905Z",
  "text": "it is not just the print",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "condition are not firing because of that",
  "id": "5bd896d7ef4afc4f28f74f1a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-10-30T17:37:27.990Z",
  "text": "condition are not firing because of that",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "really, we need to diagnose the issue first.  sometimes things have non-obvious causes",
  "id": "5bd896e5435c2a518e2c84fb",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-10-30T17:37:41.963Z",
  "text": "really, we need to diagnose the issue first.  sometimes things have non-obvious causes",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "Once it is open, I&#39;ll kick it over to the stencil authors to take a look",
  "id": "5bd896fe82893a2f3b64ca73",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-10-30T17:38:06.442Z",
  "text": "Once it is open, I'll kick it over to the stencil authors to take a look",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "ok, i will open a full issue then",
  "id": "5bd896fec7bf7c366294caf6",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-10-30T17:38:06.665Z",
  "text": "ok, i will open a full issue then",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "<pre><code>from numba import stencil\nimport numpy as np\n\n@stencil\ndef <span class=\"function\"><span class=\"title\">kernel1</span><span class=\"params\">(a)</span></span>:\n    <span class=\"tag\">b</span> = <span class=\"number\">0</span>\n    <span class=\"function\"><span class=\"title\">if</span><span class=\"params\">(<span class=\"number\">2</span>==<span class=\"number\">0</span>)</span></span>: b=<span class=\"number\">2</span>\n    return <span class=\"tag\">a</span>[<span class=\"number\">0</span>,<span class=\"number\">0</span>]+<span class=\"tag\">b</span>\n\nasd = np.<span class=\"function\"><span class=\"title\">arange</span><span class=\"params\">(<span class=\"number\">100</span>)</span></span>.<span class=\"function\"><span class=\"title\">reshape</span><span class=\"params\">((<span class=\"number\">10</span>, <span class=\"number\">10</span>)</span></span>)\n<span class=\"function\"><span class=\"title\">print</span><span class=\"params\">(asd)</span></span>\noutput_arr = <span class=\"function\"><span class=\"title\">kernel1</span><span class=\"params\">(asd)</span></span>\n<span class=\"function\"><span class=\"title\">print</span><span class=\"params\">(output_arr)</span></span></code></pre>",
  "id": "5bd89770600c5f642330d495",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-10-30T17:40:00.664Z",
  "text": "```\nfrom numba import stencil\nimport numpy as np\n\n@stencil\ndef kernel1(a):\n    b = 0\n    if(2==0): b=2\n    return a[0,0]+b\n\nasd = np.arange(100).reshape((10, 10))\nprint(asd)\noutput_arr = kernel1(asd)\nprint(output_arr)\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "<a target=\"_blank\" data-link-type=\"issue\" data-issue=\"3454\" href=\"https://github.com/numba/numba/issues/3454\" data-provider=\"github\" data-issue-repo=\"numba/numba\" class=\"issue\">numba/numba#3454</a>",
  "id": "5bd898e4271506518d9525c2",
  "issues": [
   {
    "number": "3454",
    "repo": "numba/numba"
   }
  ],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-10-30T17:46:12.846Z",
  "text": "https://github.com/numba/numba/issues/3454",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "excellent, thanks!",
  "id": "5bd89fc46e5a401c2df55496",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-10-30T18:15:32.591Z",
  "text": "excellent, thanks!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "I&#39;ve tagged the developers to take a look",
  "id": "5bd89fcb069fca52a5bbbec9",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-10-30T18:15:39.794Z",
  "text": "I've tagged the developers to take a look",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/KhalilWong",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/23718391?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/23718391?v=4&s=60",
   "displayName": "Khalil Wong",
   "gv": "4",
   "id": "5bdea8ffd73408ce4fadc97e",
   "url": "/KhalilWong",
   "username": "KhalilWong",
   "v": 1
  },
  "html": "new here. I want to get the &quot;ptx&quot; of a cuda kernel, how should i use the &quot;class numba.cuda.compiler.CUDAKernel&quot; or  someone can give me a simple example?",
  "id": "5bdeaa7aa9c55b2574a517b5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-11-04T08:14:50.350Z",
  "text": "new here. I want to get the \"ptx\" of a cuda kernel, how should i use the \"class numba.cuda.compiler.CUDAKernel\" or  someone can give me a simple example?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 7
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"KhalilWong\" class=\"mention\">@KhalilWong</span> , there\u2019s a <code>.inspect_asm()</code> method on the kernel for doing that",
  "id": "5be07ab026be6b5979726b57",
  "issues": [],
  "mentions": [
   {
    "screenName": "KhalilWong",
    "userId": "5bdea8ffd73408ce4fadc97e",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 19,
  "sent": "2018-11-05T17:15:28.758Z",
  "text": "@KhalilWong , there\u2019s a `.inspect_asm()` method on the kernel for doing that",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/KhalilWong",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/23718391?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/23718391?v=4&s=60",
   "displayName": "Khalil Wong",
   "gv": "4",
   "id": "5bdea8ffd73408ce4fadc97e",
   "url": "/KhalilWong",
   "username": "KhalilWong",
   "v": 1
  },
  "html": "I knew it. But have no idea how to give parameters the class needs, such as &quot;llvm_module, name, pretty_name, argtypes, call_helper&quot;?",
  "id": "5be0e0e87660cf07ca754f21",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-11-06T00:31:36.189Z",
  "text": "I knew it. But have no idea how to give parameters the class needs, such as \"llvm_module, name, pretty_name, argtypes, call_helper\"?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/KhalilWong",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/23718391?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/23718391?v=4&s=60",
   "displayName": "Khalil Wong",
   "gv": "4",
   "id": "5bdea8ffd73408ce4fadc97e",
   "url": "/KhalilWong",
   "username": "KhalilWong",
   "v": 1
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"sklam\" class=\"mention\">@sklam</span> ",
  "id": "5be0e0fa1f2bb1676b5d744d",
  "issues": [],
  "mentions": [
   {
    "screenName": "sklam",
    "userId": "55b689f50fc9f982beab2a24",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 19,
  "sent": "2018-11-06T00:31:54.543Z",
  "text": "@sklam ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 7
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"KhalilWong\" class=\"mention\">@KhalilWong</span> , i am not sure why you need to instantiate the class.  Is your cuda-kernel not created by <code>numba.cuda.jit</code>?",
  "id": "5be1b0bdaa58bd16744d8cb4",
  "issues": [],
  "mentions": [
   {
    "screenName": "KhalilWong",
    "userId": "5bdea8ffd73408ce4fadc97e",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 18,
  "sent": "2018-11-06T15:18:21.701Z",
  "text": "@KhalilWong , i am not sure why you need to instantiate the class.  Is your cuda-kernel not created by `numba.cuda.jit`?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/KhalilWong",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/23718391?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/23718391?v=4&s=60",
   "displayName": "Khalil Wong",
   "gv": "4",
   "id": "5bdea8ffd73408ce4fadc97e",
   "url": "/KhalilWong",
   "username": "KhalilWong",
   "v": 1
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"sklam\" class=\"mention\">@sklam</span> As Chapter 4.2 mentions, cuda-kernel created by &quot;numba.cuda.jit&quot; belong to class &quot;numba.cuda.compiler.AutoJitCUDAKernel&quot; of which &quot;.inspect_asm()&quot; method cannot give the &quot;ptx&quot;. If so, I must to use class &quot;numba.cuda.compiler.CUDAKernel&quot;?",
  "id": "5be24474fbb6f507e644e1cd",
  "issues": [],
  "mentions": [
   {
    "screenName": "sklam",
    "userId": "55b689f50fc9f982beab2a24",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 17,
  "sent": "2018-11-07T01:48:36.506Z",
  "text": "@sklam As Chapter 4.2 mentions, cuda-kernel created by \"numba.cuda.jit\" belong to class \"numba.cuda.compiler.AutoJitCUDAKernel\" of which \".inspect_asm()\" method cannot give the \"ptx\". If so, I must to use class \"numba.cuda.compiler.CUDAKernel\"?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/KhalilWong",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/23718391?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/23718391?v=4&s=60",
   "displayName": "Khalil Wong",
   "gv": "4",
   "id": "5bdea8ffd73408ce4fadc97e",
   "url": "/KhalilWong",
   "username": "KhalilWong",
   "v": 1
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"sklam\" class=\"mention\">@sklam</span> Any suggestions?",
  "id": "5be42b0c7a36913a9a0e174f",
  "issues": [],
  "mentions": [
   {
    "screenName": "sklam",
    "userId": "55b689f50fc9f982beab2a24",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 16,
  "sent": "2018-11-08T12:24:44.227Z",
  "text": "@sklam Any suggestions?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 7
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"KhalilWong\" class=\"mention\">@KhalilWong</span> , the documentation is unclear here but the assembly it is mentioning is the ptx.",
  "id": "5be476077a36913a9a1024ea",
  "issues": [],
  "mentions": [
   {
    "screenName": "KhalilWong",
    "userId": "5bdea8ffd73408ce4fadc97e",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 16,
  "sent": "2018-11-08T17:44:39.663Z",
  "text": "@KhalilWong , the documentation is unclear here but the assembly it is mentioning is the ptx.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 7
  },
  "html": "<pre><code class=\"python\">In [<span class=\"number\">1</span>]: <span class=\"keyword\">from</span> numba <span class=\"keyword\">import</span> cuda\n\nIn [<span class=\"number\">2</span>]: <span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np\n\nIn [<span class=\"number\">3</span>]: @cuda.jit\n   ...: <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">(a, i)</span>:</span>\n   ...:     a[i] = <span class=\"number\">123</span>\n   ...:\n\nIn [<span class=\"number\">4</span>]: foo(np.arange(<span class=\"number\">10</span>), <span class=\"number\">1</span>)\n\nIn [<span class=\"number\">5</span>]: foo.inspect_asm()</code></pre>",
  "id": "5be4760d9600d10e647bb205",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-11-08T17:44:45.131Z",
  "text": "```python\nIn [1]: from numba import cuda\n\nIn [2]: import numpy as np\n\nIn [3]: @cuda.jit\n   ...: def foo(a, i):\n   ...:     a[i] = 123\n   ...:\n\nIn [4]: foo(np.arange(10), 1)\n\nIn [5]: foo.inspect_asm()\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 7
  },
  "html": "note cell 4 is needed to ask numba to compile the function for the given types, otherwise, .inspect_asm() will return a empty dict.",
  "id": "5be476487326df140ed5655e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-11-08T17:45:44.311Z",
  "text": "note cell 4 is needed to ask numba to compile the function for the given types, otherwise, .inspect_asm() will return a empty dict.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 7
  },
  "html": "here, <code>.inspect_asm()</code> will return a dictionary where the keys are  <code>(compute_capability, function_signature)</code> and values are the ptx.",
  "id": "5be47677d001b917202c33a4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-11-08T17:46:31.641Z",
  "text": "here, `.inspect_asm()` will return a dictionary where the keys are  `(compute_capability, function_signature)` and values are the ptx.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/KhalilWong",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/23718391?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/23718391?v=4&s=60",
   "displayName": "Khalil Wong",
   "gv": "4",
   "id": "5bdea8ffd73408ce4fadc97e",
   "url": "/KhalilWong",
   "username": "KhalilWong",
   "v": 1
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"sklam\" class=\"mention\">@sklam</span> , got it. Thanks! ",
  "id": "5be53c4c7326df140eda11f0",
  "issues": [],
  "mentions": [
   {
    "screenName": "sklam",
    "userId": "55b689f50fc9f982beab2a24",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 17,
  "sent": "2018-11-09T07:50:36.438Z",
  "text": "@sklam , got it. Thanks! ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/KhalilWong",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/23718391?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/23718391?v=4&s=60",
   "displayName": "Khalil Wong",
   "gv": "4",
   "id": "5bdea8ffd73408ce4fadc97e",
   "url": "/KhalilWong",
   "username": "KhalilWong",
   "v": 1
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"sklam\" class=\"mention\">@sklam</span> ,  so I still can&#39;t get information like <code>ptxas info    : Used 46 registers, 176 bytes cmem[0], 16 bytes cmem[14]</code> from ptx, even if I use this?<pre><code>@cuda.<span class=\"function\"><span class=\"title\">jit</span><span class=\"params\">(debug=<span class=\"string\">'--ptxas-options=-v'</span>)</span></span></code></pre>",
  "id": "5be53f06d001b9172030fc4b",
  "issues": [],
  "mentions": [
   {
    "screenName": "sklam",
    "userId": "55b689f50fc9f982beab2a24",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 17,
  "sent": "2018-11-09T08:02:14.042Z",
  "text": "@sklam ,  so I still can't get information like `ptxas info    : Used 46 registers, 176 bytes cmem[0], 16 bytes cmem[14]` from ptx, even if I use this?\n```\n@cuda.jit(debug='--ptxas-options=-v')\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/SamRagusa",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/11341857?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/11341857?v=4&s=60",
   "displayName": "Sam Ragusa",
   "gv": "4",
   "id": "57742186c2f0db084a209dc5",
   "url": "/SamRagusa",
   "username": "SamRagusa",
   "v": 3
  },
  "html": "<p>So I know that when calling an njit compiled function from a python function, having a list as a parameter is very slow due to it&#39;s type checking (or something similar).</p><p>If the list is created, exclusively used, and never returned to a function outside of njit compilation, should there be no expected extra costs associated with using lists (of JitClass objects if the context is helpful)?</p>",
  "id": "5be7acba6b9822140d10294a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-11-11T04:14:50.880Z",
  "text": "So I know that when calling an njit compiled function from a python function, having a list as a parameter is very slow due to it's type checking (or something similar).\n\nIf the list is created, exclusively used, and never returned to a function outside of njit compilation, should there be no expected extra costs associated with using lists (of JitClass objects if the context is helpful)?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/Tillsten",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/189880?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/189880?v=4&s=60",
   "displayName": "Till Stensitzki",
   "gv": "4",
   "id": "56225b5e16b6c7089cb75649",
   "url": "/Tillsten",
   "username": "Tillsten",
   "v": 14
  },
  "html": "Maybe someone call help me here: I want to call cffi function with numba.",
  "id": "5be831846b9822140d13268f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-11-11T13:41:24.246Z",
  "text": "Maybe someone call help me here: I want to call cffi function with numba.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/Tillsten",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/189880?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/189880?v=4&s=60",
   "displayName": "Till Stensitzki",
   "gv": "4",
   "id": "56225b5e16b6c7089cb75649",
   "url": "/Tillsten",
   "username": "Tillsten",
   "v": 14
  },
  "html": "The problem no matter what i do it does not recognize the pointer type",
  "id": "5be831a26b9822140d1327ae",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-11-11T13:41:54.211Z",
  "text": "The problem no matter what i do it does not recognize the pointer type",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/Tillsten",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/189880?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/189880?v=4&s=60",
   "displayName": "Till Stensitzki",
   "gv": "4",
   "id": "56225b5e16b6c7089cb75649",
   "url": "/Tillsten",
   "username": "Tillsten",
   "v": 14
  },
  "html": "So what are actually the arguments of the <code>register_type</code> function?",
  "id": "5be832129600d10e649293a2",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-11-11T13:43:46.386Z",
  "text": "So what are actually the arguments of the `register_type` function?\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/Tillsten",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/189880?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/189880?v=4&s=60",
   "displayName": "Till Stensitzki",
   "gv": "4",
   "id": "56225b5e16b6c7089cb75649",
   "url": "/Tillsten",
   "username": "Tillsten",
   "v": 14
  },
  "html": "Is this correct:<br><code>cffi_support.register_type(cairocffi.ffi.typeof(&#39;struct _cairo *&#39;), cffi_support.types.RawPointer)</code><br>Or without the <code>typeof</code>?",
  "id": "5be83238f1b8753404ac979e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-11-11T13:44:24.822Z",
  "text": "Is this correct: \n`cffi_support.register_type(cairocffi.ffi.typeof('struct _cairo *'), cffi_support.types.RawPointer)`\nOr without the `typeof`?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/Tillsten",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/189880?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/189880?v=4&s=60",
   "displayName": "Till Stensitzki",
   "gv": "4",
   "id": "56225b5e16b6c7089cb75649",
   "url": "/Tillsten",
   "username": "Tillsten",
   "v": 14
  },
  "html": "Note that I just want to pass the pointer, not access anything of it",
  "id": "5be8338c9600d10e64929e6c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-11-11T13:50:04.398Z",
  "text": "Note that I just want to pass the pointer, not access anything of it",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "<p><span data-link-type=\"mention\" data-screen-name=\"SamRagusa\" class=\"mention\">@SamRagusa</span>: The performance issue with a list as an argument is that we need to &quot;unbox&quot; it before entering nopython mode.  This requires allocating new storage, iterating over the list and converting its Python object elements into raw data (i.e., converting every Python float object into a float64 value in the array).  At the end of the function, we also have to walk the &quot;nopython list&quot; and copy any changed values back out into the Python list.  (A feature which creates more problems than it is worth...)</p><p>If you create the list inside nopython mode and do not return it back to Python, none of this overhead applies, and it should perform similar to a traditional C array.</p>",
  "id": "5be8c0467326df140eef9084",
  "issues": [],
  "mentions": [
   {
    "screenName": "SamRagusa",
    "userId": "57742186c2f0db084a209dc5",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 16,
  "sent": "2018-11-11T23:50:30.284Z",
  "text": "@SamRagusa: The performance issue with a list as an argument is that we need to \"unbox\" it before entering nopython mode.  This requires allocating new storage, iterating over the list and converting its Python object elements into raw data (i.e., converting every Python float object into a float64 value in the array).  At the end of the function, we also have to walk the \"nopython list\" and copy any changed values back out into the Python list.  (A feature which creates more problems than it is worth...)\n\nIf you create the list inside nopython mode and do not return it back to Python, none of this overhead applies, and it should perform similar to a traditional C array.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/SamRagusa",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/11341857?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/11341857?v=4&s=60",
   "displayName": "Sam Ragusa",
   "gv": "4",
   "id": "57742186c2f0db084a209dc5",
   "url": "/SamRagusa",
   "username": "SamRagusa",
   "v": 3
  },
  "html": "Awesome, thanks for the information!   I&#39;ve implemented a linked list JitClass for now, but when I&#39;ve compiled everything else I&#39;ll start switching over to a list implementation.  ",
  "id": "5be8c1192138723405f0f5d7",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-11-11T23:54:01.666Z",
  "text": "Awesome, thanks for the information!   I've implemented a linked list JitClass for now, but when I've compiled everything else I'll start switching over to a list implementation.  ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/SamRagusa",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/11341857?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/11341857?v=4&s=60",
   "displayName": "Sam Ragusa",
   "gv": "4",
   "id": "57742186c2f0db084a209dc5",
   "url": "/SamRagusa",
   "username": "SamRagusa",
   "v": 3
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"seibert\" class=\"mention\">@seibert</span> , does any of the parallelization stuff apply to lists?",
  "id": "5be8c15862866f7473848c83",
  "issues": [],
  "mentions": [
   {
    "screenName": "seibert",
    "userId": "55b68af40fc9f982beab2a3c",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 17,
  "sent": "2018-11-11T23:55:04.492Z",
  "text": "@seibert , does any of the parallelization stuff apply to lists?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "At this point, I would test it &quot;at your own risk&quot;.  Specifically, I&#39;m not sure how the parallelization transforms impact the list if it changes size in the parallel loop.",
  "id": "5be8c19d9600d10e649609f8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-11-11T23:56:13.746Z",
  "text": "At this point, I would test it \"at your own risk\".  Specifically, I'm not sure how the parallelization transforms impact the list if it changes size in the parallel loop.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "I suspect things are fine if the list size is fixed during the parallel code",
  "id": "5be8c1abbb06d73a995c8869",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-11-11T23:56:27.455Z",
  "text": "I suspect things are fine if the list size is fixed during the parallel code",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "We have plans to straight out some of the complexity of lists by creating a Numba list object that can be used in Python mode, but doesn&#39;t incur the unboxing / boxing overhead",
  "id": "5be8c1e04e7ca145208f4b19",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-11-11T23:57:20.957Z",
  "text": "We have plans to straight out some of the complexity of lists by creating a Numba list object that can be used in Python mode, but doesn't incur the unboxing / boxing overhead",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/SamRagusa",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/11341857?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/11341857?v=4&s=60",
   "displayName": "Sam Ragusa",
   "gv": "4",
   "id": "57742186c2f0db084a209dc5",
   "url": "/SamRagusa",
   "username": "SamRagusa",
   "v": 3
  },
  "html": "It&#39;d be for trivial tasks so that sounds good to me.   Super helpful.  That&#39;s pretty cool, but after one last thing everything for my chess engine will be compiled, so boxing/unboxing will be a non-issue",
  "id": "5be8c250f1b8753404b00db5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-11-11T23:59:12.815Z",
  "text": "It'd be for trivial tasks so that sounds good to me.   Super helpful.  That's pretty cool, but after one last thing everything for my chess engine will be compiled, so boxing/unboxing will be a non-issue",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "In a prange driven loop, if the list is created in the loop body it&#39;ll be fine, if the list is defined outside the loop body and appended to it will not (list append is not threadsafe), if the list is defined to the bounds of the loop size outside the loop body (the &quot;trick&quot; at the bottom of <a href=\"http://numba.pydata.org/numba-doc/dev/user/troubleshoot.html?highlight=trick#my-code-has-an-untyped-list-problem\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://numba.pydata.org/numba-doc/dev/user/troubleshoot.html?highlight=trick#my-code-has-an-untyped-list-problem</a> might help) and then each iteration writes to a unique index then this is fine",
  "id": "5be973cfd001b917204abd4a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-11-12T12:36:31.749Z",
  "text": "In a prange driven loop, if the list is created in the loop body it'll be fine, if the list is defined outside the loop body and appended to it will not (list append is not threadsafe), if the list is defined to the bounds of the loop size outside the loop body (the \"trick\" at the bottom of http://numba.pydata.org/numba-doc/dev/user/troubleshoot.html?highlight=trick#my-code-has-an-untyped-list-problem might help) and then each iteration writes to a unique index then this is fine",
  "unread": false,
  "urls": [
   {
    "url": "http://numba.pydata.org/numba-doc/dev/user/troubleshoot.html?highlight=trick#my-code-has-an-untyped-list-problem"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"SamRagusa\" class=\"mention\">@SamRagusa</span> ^",
  "id": "5be973d7f1b8753404b41910",
  "issues": [],
  "mentions": [
   {
    "screenName": "SamRagusa",
    "userId": "57742186c2f0db084a209dc5",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 18,
  "sent": "2018-11-12T12:36:39.236Z",
  "text": "@SamRagusa ^",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 7
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"KhalilWong\" class=\"mention\">@KhalilWong</span> , there are no public api to get to the ptxas info, but it is still possible.  see this gist for example <a href=\"https://gist.github.com/sklam/0e750e0dea7571c68e94d99006ae8533\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://gist.github.com/sklam/0e750e0dea7571c68e94d99006ae8533</a>",
  "id": "5be997123102f145218dab37",
  "issues": [],
  "mentions": [
   {
    "screenName": "KhalilWong",
    "userId": "5bdea8ffd73408ce4fadc97e",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 17,
  "sent": "2018-11-12T15:06:58.613Z",
  "text": "@KhalilWong , there are no public api to get to the ptxas info, but it is still possible.  see this gist for example https://gist.github.com/sklam/0e750e0dea7571c68e94d99006ae8533",
  "unread": false,
  "urls": [
   {
    "url": "https://gist.github.com/sklam/0e750e0dea7571c68e94d99006ae8533"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 7
  },
  "html": "i\u2019ve opened a feature request at <a target=\"_blank\" data-link-type=\"issue\" data-issue=\"3482\" href=\"https://github.com/numba/numba/issues/3482\" data-provider=\"github\" data-issue-repo=\"numba/numba\" class=\"issue\">numba/numba#3482</a>.  Please comment in the issue about your usecase.  There are APIs to auto determine the thread-per-block to optimal occupancy if that is what you want.",
  "id": "5be997b69600d10e649b284a",
  "issues": [
   {
    "number": "3482",
    "repo": "numba/numba"
   }
  ],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-11-12T15:09:42.617Z",
  "text": "i\u2019ve opened a feature request at https://github.com/numba/numba/issues/3482.  Please comment in the issue about your usecase.  There are APIs to auto determine the thread-per-block to optimal occupancy if that is what you want.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/KhalilWong",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/23718391?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/23718391?v=4&s=60",
   "displayName": "Khalil Wong",
   "gv": "4",
   "id": "5bdea8ffd73408ce4fadc97e",
   "url": "/KhalilWong",
   "username": "KhalilWong",
   "v": 1
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"sklam\" class=\"mention\">@sklam</span> , commented. Maybe I will use these APIs later. So where i can find them?",
  "id": "5bea52fd7a36913a9a33bc15",
  "issues": [],
  "mentions": [
   {
    "screenName": "sklam",
    "userId": "55b689f50fc9f982beab2a24",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 15,
  "sent": "2018-11-13T04:28:45.640Z",
  "text": "@sklam , commented. Maybe I will use these APIs later. So where i can find them?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-11-14T13:12:55.489Z",
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/jllanfranchi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6414943?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6414943?v=4&s=60",
   "displayName": "J. L. Lanfranchi",
   "gv": "4",
   "id": "5aa7320ed73408ce4f9115a7",
   "url": "/jllanfranchi",
   "username": "jllanfranchi",
   "v": 30
  },
  "html": "<p>Is there a way to cache a function generated by <code>exec</code>-ing a string? E.g., the following:</p><pre><code class=\"python\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">genfunc</span><span class=\"params\">()</span>:</span>\n    func = <span class=\"string\">\"\"\"def f(x):\n        return x**2\n    \"\"\"</span>\n    <span class=\"keyword\">exec</span> func <span class=\"keyword\">in</span> locals()\n    <span class=\"keyword\">return</span> f\n\nf = genfunc()\nprint(f(<span class=\"number\">2</span>))\n\nnf = numba.njit(cache=<span class=\"keyword\">True</span>)(f)\nprint(nf(<span class=\"number\">2</span>))</code></pre><p>where using <code>cache=False</code> works but as above, the error message emitted is:</p><pre><code><span class=\"comment\">---------------------------------------------------------------------------</span>\nRuntimeError                              Traceback (most recent <span class=\"operator\"><span class=\"keyword\">call</span> <span class=\"keyword\">last</span>)\n&lt;ipython-<span class=\"keyword\">input</span>-<span class=\"number\">17</span>-<span class=\"number\">2e9767</span>f5bac5&gt; <span class=\"keyword\">in</span> &lt;<span class=\"keyword\">module</span>&gt;()\n      <span class=\"number\">9</span> print(<span class=\"keyword\">f</span>(<span class=\"number\">2</span>))\n     <span class=\"number\">10</span> \n<span class=\"comment\">---&gt; 11 nf = numba.njit(cache=True)(f)</span>\n     <span class=\"number\">12</span> print(nf(<span class=\"number\">2</span>))\n\n/home/justin/anaconda2/lib/python2<span class=\"number\">.7</span>/site-packages/numba/decorators.pyc <span class=\"keyword\">in</span> wrapper(func)\n    <span class=\"number\">189</span>                           **dispatcher_args)\n    <span class=\"number\">190</span>         <span class=\"keyword\">if</span> <span class=\"keyword\">cache</span>:\n<span class=\"comment\">--&gt; 191             disp.enable_caching()</span>\n    <span class=\"number\">192</span>         <span class=\"keyword\">if</span> sigs <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:\n    <span class=\"number\">193</span>             # <span class=\"keyword\">Register</span> the Dispatcher <span class=\"keyword\">to</span> the <span class=\"keyword\">type</span> inference mechanism,\n\n/home/justin/anaconda2/lib/python2<span class=\"number\">.7</span>/site-packages/numba/dispatcher.pyc <span class=\"keyword\">in</span> enable_caching(<span class=\"keyword\">self</span>)\n    <span class=\"number\">562</span> \n    <span class=\"number\">563</span>     <span class=\"keyword\">def</span> enable_caching(<span class=\"keyword\">self</span>):\n<span class=\"comment\">--&gt; 564         self._cache = FunctionCache(self.py_func)</span>\n    <span class=\"number\">565</span> \n    <span class=\"number\">566</span>     <span class=\"keyword\">def</span> __get__(<span class=\"keyword\">self</span>, obj, objtype=<span class=\"keyword\">None</span>):\n\n/home/justin/anaconda2/lib/python2<span class=\"number\">.7</span>/site-packages/numba/<span class=\"keyword\">caching</span>.pyc <span class=\"keyword\">in</span> __init__(<span class=\"keyword\">self</span>, py_func)\n    <span class=\"number\">612</span>     <span class=\"keyword\">def</span> __init__(<span class=\"keyword\">self</span>, py_func):\n    <span class=\"number\">613</span>         <span class=\"keyword\">self</span>._name = repr(py_func)\n<span class=\"comment\">--&gt; 614         self._impl = self._impl_class(py_func)</span>\n    <span class=\"number\">615</span>         <span class=\"keyword\">self</span>._cache_path = <span class=\"keyword\">self</span>._impl.<span class=\"keyword\">locator</span>.get_cache_path()\n    <span class=\"number\">616</span>         # This may be a <span class=\"built_in\">bit</span> <span class=\"keyword\">strict</span> but avoids us maintaining a magic <span class=\"built_in\">number</span>\n\n/home/justin/anaconda2/lib/python2<span class=\"number\">.7</span>/site-packages/numba/<span class=\"keyword\">caching</span>.pyc <span class=\"keyword\">in</span> __init__(<span class=\"keyword\">self</span>, py_func)\n    <span class=\"number\">347</span>         <span class=\"keyword\">else</span>:\n    <span class=\"number\">348</span>             <span class=\"keyword\">raise</span> RuntimeError(<span class=\"string\">\"cannot cache function %r: no locator available \"</span>\n<span class=\"comment\">--&gt; 349                                \"for file %r\" % (qualname, source_path))</span>\n    <span class=\"number\">350</span>         <span class=\"keyword\">self</span>._locator = <span class=\"keyword\">locator</span>\n    <span class=\"number\">351</span>         # <span class=\"keyword\">Use</span> filename base <span class=\"keyword\">name</span> <span class=\"keyword\">as</span> <span class=\"keyword\">module</span> <span class=\"keyword\">name</span> <span class=\"keyword\">to</span> avoid conflict <span class=\"keyword\">between</span>\n\nRuntimeError: cannot <span class=\"keyword\">cache</span> <span class=\"keyword\">function</span> <span class=\"string\">'f'</span>: <span class=\"keyword\">no</span> <span class=\"keyword\">locator</span> available <span class=\"keyword\">for</span> <span class=\"keyword\">file</span> <span class=\"string\">'&lt;string&gt;'</span></span></code></pre>",
  "id": "5bec1f0a47217e07ff1e9209",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-11-14T13:11:38.280Z",
  "text": "Is there a way to cache a function generated by `exec`-ing a string? E.g., the following:\n```python\ndef genfunc():\n    func = \"\"\"def f(x):\n        return x**2\n    \"\"\"\n    exec func in locals()\n    return f\n\nf = genfunc()\nprint(f(2))\n\nnf = numba.njit(cache=True)(f)\nprint(nf(2))\n```\nwhere using `cache=False` works but as above, the error message emitted is:\n```\n---------------------------------------------------------------------------\nRuntimeError                              Traceback (most recent call last)\n<ipython-input-17-2e9767f5bac5> in <module>()\n      9 print(f(2))\n     10 \n---> 11 nf = numba.njit(cache=True)(f)\n     12 print(nf(2))\n\n/home/justin/anaconda2/lib/python2.7/site-packages/numba/decorators.pyc in wrapper(func)\n    189                           **dispatcher_args)\n    190         if cache:\n--> 191             disp.enable_caching()\n    192         if sigs is not None:\n    193             # Register the Dispatcher to the type inference mechanism,\n\n/home/justin/anaconda2/lib/python2.7/site-packages/numba/dispatcher.pyc in enable_caching(self)\n    562 \n    563     def enable_caching(self):\n--> 564         self._cache = FunctionCache(self.py_func)\n    565 \n    566     def __get__(self, obj, objtype=None):\n\n/home/justin/anaconda2/lib/python2.7/site-packages/numba/caching.pyc in __init__(self, py_func)\n    612     def __init__(self, py_func):\n    613         self._name = repr(py_func)\n--> 614         self._impl = self._impl_class(py_func)\n    615         self._cache_path = self._impl.locator.get_cache_path()\n    616         # This may be a bit strict but avoids us maintaining a magic number\n\n/home/justin/anaconda2/lib/python2.7/site-packages/numba/caching.pyc in __init__(self, py_func)\n    347         else:\n    348             raise RuntimeError(\"cannot cache function %r: no locator available \"\n--> 349                                \"for file %r\" % (qualname, source_path))\n    350         self._locator = locator\n    351         # Use filename base name as module name to avoid conflict between\n\nRuntimeError: cannot cache function 'f': no locator available for file '<string>'\n```",
  "unread": false,
  "urls": [],
  "v": 3
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"jllanfranchi\" class=\"mention\">@jllanfranchi</span> I can think of a way but it&#39;s horrible",
  "id": "5bec2b7e3102f145219e0ac6",
  "issues": [],
  "mentions": [
   {
    "screenName": "jllanfranchi",
    "userId": "5aa7320ed73408ce4f9115a7",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 11,
  "sent": "2018-11-14T14:04:46.845Z",
  "text": "@jllanfranchi I can think of a way but it's horrible",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "perhaps open a ticket for a feature request?",
  "id": "5bec2be0bb88787474ca0311",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-11-14T14:06:24.619Z",
  "text": "perhaps open a ticket for a feature request?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/jllanfranchi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6414943?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6414943?v=4&s=60",
   "displayName": "J. L. Lanfranchi",
   "gv": "4",
   "id": "5aa7320ed73408ce4f9115a7",
   "url": "/jllanfranchi",
   "username": "jllanfranchi",
   "v": 30
  },
  "html": "Will do, thanks for the response <span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span> . Not a blocking issue for me, but could hurt performance and so make numba less attractive for this application.",
  "id": "5bec4a2d62866f74739a8abc",
  "issues": [],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 11,
  "sent": "2018-11-14T16:15:41.695Z",
  "text": "Will do, thanks for the response @stuartarchibald . Not a blocking issue for me, but could hurt performance and so make numba less attractive for this application.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/jllanfranchi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/6414943?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/6414943?v=4&s=60",
   "displayName": "J. L. Lanfranchi",
   "gv": "4",
   "id": "5aa7320ed73408ce4f9115a7",
   "url": "/jllanfranchi",
   "username": "jllanfranchi",
   "v": 30
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span> Ticket with feature (and issue details as above) opened here: <a target=\"_blank\" data-link-type=\"issue\" data-issue=\"3501\" href=\"https://github.com/numba/numba/issues/3501\" data-provider=\"github\" data-issue-repo=\"numba/numba\" class=\"issue\">numba/numba#3501</a>",
  "id": "5bec5c13d001b917205d8ac7",
  "issues": [
   {
    "number": "3501",
    "repo": "numba/numba"
   }
  ],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 11,
  "sent": "2018-11-14T17:32:03.380Z",
  "text": "@stuartarchibald Ticket with feature (and issue details as above) opened here: https://github.com/numba/numba/issues/3501",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"jllanfranchi\" class=\"mention\">@jllanfranchi</span> great, thanks v. much.",
  "id": "5bec60b97a36913a9a40f3f0",
  "issues": [],
  "mentions": [
   {
    "screenName": "jllanfranchi",
    "userId": "5aa7320ed73408ce4f9115a7",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 11,
  "sent": "2018-11-14T17:51:53.854Z",
  "text": "@jllanfranchi great, thanks v. much.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/DavidMertz",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/2380665?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/2380665?v=4&s=60",
   "displayName": "David Mertz",
   "gv": "4",
   "id": "5776e17ec2f0db084a2104b0",
   "url": "/DavidMertz",
   "username": "DavidMertz",
   "v": 6
  },
  "html": "Does <code>prange()</code> get autodetected nowadays? I&#39;m having trouble finding cases where it really makes much difference, if any.  For example, here is a function that would seem to need a declaration of parallelism:<pre><code class=\"python\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mandelbrot</span><span class=\"params\">(xs, ys, n, maxi, escape)</span>:</span>\n    <span class=\"string\">\"\"\"Calculate the Mandelbrot Set\n\n    xs     : sequence of x coords to loop over\n    ys     : sequence of y coords to loop over\n    n      : number of points along each axis\n    maxi   : iterations in which to escape bounds\n    escape : array to store results\n    \"\"\"</span>\n    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n):\n        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(n):\n            z = <span class=\"number\">0</span> + <span class=\"number\">0j</span>\n            c = complex(xs[i], ys[j]) <span class=\"comment\"># faster than `xs[i] + 1j*ys[j]` </span>\n            esc = maxi\n            <span class=\"keyword\">for</span> it <span class=\"keyword\">in</span> range(maxi):\n                z = z*z + c\n                <span class=\"keyword\">if</span> z.real**<span class=\"number\">2</span> + z.imag**<span class=\"number\">2</span> &gt; <span class=\"number\">4</span>:\n                    esc = it\n                    <span class=\"keyword\">break</span>\n            escape[j, i] = esc</code></pre>",
  "id": "5becd025fee6703aaf70ee34",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-11-15T01:47:17.710Z",
  "text": "Does `prange()` get autodetected nowadays? I'm having trouble finding cases where it really makes much difference, if any.  For example, here is a function that would seem to need a declaration of parallelism:\n\n```python\ndef mandelbrot(xs, ys, n, maxi, escape):\n    \"\"\"Calculate the Mandelbrot Set\n    \n    xs     : sequence of x coords to loop over\n    ys     : sequence of y coords to loop over\n    n      : number of points along each axis\n    maxi   : iterations in which to escape bounds\n    escape : array to store results\n    \"\"\"\n    for i in range(n):\n        for j in range(n):\n            z = 0 + 0j\n            c = complex(xs[i], ys[j]) # faster than `xs[i] + 1j*ys[j]` \n            esc = maxi\n            for it in range(maxi):\n                z = z*z + c\n                if z.real**2 + z.imag**2 > 4:\n                    esc = it\n                    break\n            escape[j, i] = esc  \n```\n\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-11-15T01:51:40.807Z",
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/DavidMertz",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/2380665?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/2380665?v=4&s=60",
   "displayName": "David Mertz",
   "gv": "4",
   "id": "5776e17ec2f0db084a2104b0",
   "url": "/DavidMertz",
   "username": "DavidMertz",
   "v": 6
  },
  "html": "<p>The loop of iterations is clearly non-parallel since it has dependencies on the prior loop.  But the outer loops in i and j should create completely independent calculation paths.  I tried decorating this with both <code>@jit(nopython=True, nogil=True, target=&#39;cpu&#39;)</code> and also with <code>@cuda.jit</code> and whether or not I use <code>numba.prange</code> in those outer loops has no effect.  This is on a 24 core CPU and a GeForce GTX 1080 (however many cores that has).</p><p>Mind you, I&#39;m not disappointed by the speedup <em>per se</em>, but I&#39;m just wondering if I&#39;m missing something that could parallelize more.  Or best of all, maybe the simplest thing is already success in identifying all of it.</p>",
  "id": "5becd0dcbb06d73a99769939",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-11-15T01:50:20.357Z",
  "text": "The loop of iterations is clearly non-parallel since it has dependencies on the prior loop.  But the outer loops in i and j should create completely independent calculation paths.  I tried decorating this with both `@jit(nopython=True, nogil=True, target='cpu')` and also with `@cuda.jit` and whether or not I use `numba.prange` in those outer loops has no effect.  This is on a 24 core CPU and a GeForce GTX 1080 (however many cores that has).\n\nMind you, I'm not disappointed by the speedup *per se*, but I'm just wondering if I'm missing something that could parallelize more.  Or best of all, maybe the simplest thing is already success in identifying all of it.",
  "unread": false,
  "urls": [],
  "v": 3
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/DavidMertz",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/2380665?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/2380665?v=4&s=60",
   "displayName": "David Mertz",
   "gv": "4",
   "id": "5776e17ec2f0db084a2104b0",
   "url": "/DavidMertz",
   "username": "DavidMertz",
   "v": 6
  },
  "html": "Very strange segfault I&#39;m getting.  Here is my simplified program:<pre><code class=\"python\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np\n<span class=\"keyword\">import</span> numba\n\nsignatures = [<span class=\"string\">'(float32, float32, float32)'</span>, \n              <span class=\"string\">'(float64, float64, float64)'</span>]\n\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">axpy</span><span class=\"params\">(a, x, y)</span>:</span>\n    <span class=\"keyword\">return</span> a * x + y\n\naxpy_ufunc_par = numba.vectorize(signatures, target=<span class=\"string\">'parallel'</span>)(axpy)\n\nn = <span class=\"number\">10</span>_000_000\na = np.random.random(n).astype(<span class=\"string\">'float32'</span>)\nx = np.random.random(n).astype(<span class=\"string\">'float32'</span>)\ny = np.random.random(n).astype(<span class=\"string\">'float32'</span>)\n\naxpy_ufunc_par(a, x, y)</code></pre><pre><code class=\"bash\">root@C.<span class=\"number\">25687</span>:/workspace/kdm/Numba/src$ python segfault.py\nSegmentation fault (core dumped)\nroot@C.<span class=\"number\">25687</span>:/workspace/kdm/Numba/src$ uname <span class=\"operator\">-a</span>\nLinux eb1e240b5c17 <span class=\"number\">4.15</span>.<span class=\"number\">0</span>-<span class=\"number\">36</span>-generic <span class=\"comment\">#39~16.04.1-Ubuntu SMP Tue Sep 25 08:59:23 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux</span>\nroot@C.<span class=\"number\">25687</span>:/workspace/kdm/Numba/src$ arch\nx86_64\nroot@C.<span class=\"number\">25687</span>:/workspace/kdm/Numba/src$ nproc\n<span class=\"number\">24</span>\nroot@C.<span class=\"number\">25687</span>:/workspace/kdm/Numba/src$ free -h\n              total        used        free      shared  buff/cache   available\nMem:           <span class=\"number\">125</span>G         <span class=\"number\">20</span>G         <span class=\"number\">86</span>G        <span class=\"number\">1.3</span>G         <span class=\"number\">19</span>G        <span class=\"number\">102</span>G\nSwap:          <span class=\"number\">7.8</span>G         <span class=\"number\">12</span>M        <span class=\"number\">7.8</span>G</code></pre>",
  "id": "5bece91a7a36913a9a444a1a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-11-15T03:33:46.111Z",
  "text": "Very strange segfault I'm getting.  Here is my simplified program:\n\n```python\nimport numpy as np\nimport numba\n\nsignatures = ['(float32, float32, float32)', \n              '(float64, float64, float64)']\n\ndef axpy(a, x, y):\n    return a * x + y\n\naxpy_ufunc_par = numba.vectorize(signatures, target='parallel')(axpy)\n\nn = 10_000_000\na = np.random.random(n).astype('float32')\nx = np.random.random(n).astype('float32')\ny = np.random.random(n).astype('float32')\n\naxpy_ufunc_par(a, x, y)\n```\n\n```bash\nroot@C.25687:/workspace/kdm/Numba/src$ python segfault.py\nSegmentation fault (core dumped)\nroot@C.25687:/workspace/kdm/Numba/src$ uname -a\nLinux eb1e240b5c17 4.15.0-36-generic #39~16.04.1-Ubuntu SMP Tue Sep 25 08:59:23 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux\nroot@C.25687:/workspace/kdm/Numba/src$ arch\nx86_64\nroot@C.25687:/workspace/kdm/Numba/src$ nproc\n24\nroot@C.25687:/workspace/kdm/Numba/src$ free -h\n              total        used        free      shared  buff/cache   available\nMem:           125G         20G         86G        1.3G         19G        102G\nSwap:          7.8G         12M        7.8G\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-11-15T03:49:54.449Z",
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/DavidMertz",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/2380665?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/2380665?v=4&s=60",
   "displayName": "David Mertz",
   "gv": "4",
   "id": "5776e17ec2f0db084a2104b0",
   "url": "/DavidMertz",
   "username": "DavidMertz",
   "v": 6
  },
  "html": "On a different machine it is fine:<pre><code class=\"bash\">(base) \u2714 src [master|\u2026<span class=\"number\">32</span>\u2691 <span class=\"number\">1</span>] % uname <span class=\"operator\">-a</span>\nDarwin Retinal-Gnosis.local <span class=\"number\">18.2</span>.<span class=\"number\">0</span> Darwin Kernel Version <span class=\"number\">18.2</span>.<span class=\"number\">0</span>: Fri Oct  <span class=\"number\">5</span> <span class=\"number\">19</span>:<span class=\"number\">41</span>:<span class=\"number\">49</span> PDT <span class=\"number\">2018</span>; root:xnu-<span class=\"number\">4903.221</span>.<span class=\"number\">2</span>~<span class=\"number\">2</span>/RELEASE_X86_64 x86_64\n(base) \u2714 src [master|\u2026<span class=\"number\">32</span>\u2691 <span class=\"number\">1</span>] % arch\ni386\n(base) \u2714 src [master|\u2026<span class=\"number\">32</span>\u2691 <span class=\"number\">1</span>] % gnproc\n<span class=\"number\">4</span>\n(base) \u2714 src [master|\u2026<span class=\"number\">32</span>\u2691 <span class=\"number\">1</span>] % python segfault.py</code></pre>",
  "id": "5bececdcfee6703aaf718bdf",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-11-15T03:49:48.201Z",
  "text": "On a different machine it is fine:\n\n```bash\n(base) \u2714 src [master|\u202632\u2691 1] % uname -a\nDarwin Retinal-Gnosis.local 18.2.0 Darwin Kernel Version 18.2.0: Fri Oct  5 19:41:49 PDT 2018; root:xnu-4903.221.2~2/RELEASE_X86_64 x86_64\n(base) \u2714 src [master|\u202632\u2691 1] % arch\ni386\n(base) \u2714 src [master|\u202632\u2691 1] % gnproc\n4\n(base) \u2714 src [master|\u202632\u2691 1] % python segfault.py\n```",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"DavidMertz\" class=\"mention\">@DavidMertz</span> to your segfault, if you are using the OpenMP backend you may be blowing the stack, it was a bug we fixed a few weeks back <a target=\"_blank\" data-link-type=\"issue\" data-issue=\"3406\" href=\"https://github.com/numba/numba/issues/3406\" data-provider=\"github\" data-issue-repo=\"numba/numba\" class=\"issue\">numba/numba#3406</a>",
  "id": "5bed4b0fbb06d73a997992e1",
  "issues": [
   {
    "number": "3406",
    "repo": "numba/numba"
   }
  ],
  "mentions": [
   {
    "screenName": "DavidMertz",
    "userId": "5776e17ec2f0db084a2104b0",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 12,
  "sent": "2018-11-15T10:31:43.880Z",
  "text": "@DavidMertz to your segfault, if you are using the OpenMP backend you may be blowing the stack, it was a bug we fixed a few weeks back https://github.com/numba/numba/issues/3406",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "couple of workaround here <a href=\"https://github.com/numba/numba/issues/3406#issuecomment-430164527\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://github.com/numba/numba/issues/3406#issuecomment-430164527</a>",
  "id": "5bed4b22f1b8753404ccce3a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-11-15T10:32:02.888Z",
  "text": "couple of workaround here https://github.com/numba/numba/issues/3406#issuecomment-430164527",
  "unread": false,
  "urls": [
   {
    "url": "https://github.com/numba/numba/issues/3406#issuecomment-430164527"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"DavidMertz\" class=\"mention\">@DavidMertz</span> as to the mandlebrot computation, prange is working for the loops induced by <code>i</code> and <code>j</code>",
  "id": "5bed4c2e9600d10e64b2e1ef",
  "issues": [],
  "mentions": [
   {
    "screenName": "DavidMertz",
    "userId": "5776e17ec2f0db084a2104b0",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 12,
  "sent": "2018-11-15T10:36:30.883Z",
  "text": "@DavidMertz as to the mandlebrot computation, prange is working for the loops induced by `i` and `j`",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-11-15T10:38:02.419Z",
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "This tool: <a target=\"_blank\" data-link-type=\"pr\" data-issue=\"3160\" href=\"https://github.com/numba/numba/pull/3160\" data-provider=\"github\" data-issue-repo=\"numba/numba\" class=\"pr\">numba/numba#3160</a> which I&#39;m working on right this second! Shows this:<pre><code>================================================================================\n===== <span class=\"constant\">Parallel Accelerator Optimizing:</span>  <span class=\"constant\">Function </span>mandelbrot, gi29.py (<span class=\"number\">5</span>)  ======\n================================================================================\n---------------------------<span class=\"constant\">Looking </span><span class=\"keyword\">for</span> parallel loops---------------------------\n<span class=\"constant\">Parallel </span><span class=\"keyword\">for</span>-loop <span class=\"comment\">#1: is produced from gi29.py (14):</span>\n    user <span class=\"keyword\">defined</span> prange\n\n<span class=\"constant\">Parallel </span><span class=\"keyword\">for</span>-loop <span class=\"comment\">#0: is produced from gi29.py (15):</span>\n    user <span class=\"keyword\">defined</span> prange\n\n<span class=\"constant\">Found </span><span class=\"number\">2</span> parallel loops.\n--------------------------------------------------------------------------------\n\n\n<span class=\"constant\">Parallel </span>loop listing <span class=\"keyword\">for</span> file gi29.py\n----------------------------------------------------------------------------|loop <span class=\"comment\">#ID</span>\nimport numpy as np                                                          | \nfrom numba import njit, prange                                              | \n                                                                            | \n                                                                            | \n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mandelbrot</span></span>(xs, ys, n, maxi, escape)<span class=\"symbol\">:</span>                                    | \n    <span class=\"string\">\"\"</span><span class=\"string\">\"Calculate the Mandelbrot Set                                         | \n                                                                            | \n    xs     : sequence of x coords to loop over                              | \n    ys     : sequence of y coords to loop over                              | \n    n      : number of points along each axis                               | \n    maxi   : iterations in which to escape bounds                           | \n    escape : array to store results                                         | \n    \"</span><span class=\"string\">\"\"</span>                                                                     | \n    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> prange(n)<span class=\"symbol\">:-----------------------------------------------------|</span> <span class=\"comment\">#1</span>\n        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> prange(n)<span class=\"symbol\">:-------------------------------------------------|</span> <span class=\"comment\">#0</span>\n            z = <span class=\"number\">0</span> + 0j                                                      | \n            c = complex(xs[i], ys[j]) <span class=\"comment\"># faster than `xs[i] + 1j*ys[j]`      | </span>\n            esc = maxi                                                      | \n            <span class=\"keyword\">for</span> it <span class=\"keyword\">in</span> range(maxi)<span class=\"symbol\">:</span>                                          | \n                z = z*z + c                                                 | \n                if z.real**<span class=\"number\">2</span> + z.imag**<span class=\"number\">2</span> &gt; <span class=\"number\">4</span><span class=\"symbol\">:</span>                               | \n                    esc = it                                                | \n                    <span class=\"keyword\">break</span>                                                   | \n            escape[j, i] = esc                                              | \n                                                                            | \nn = <span class=\"number\">1000</span>                                                                    | \n<span class=\"constant\">Xs </span>= np.arange(n, dtype=np.float64)                                         | \n<span class=\"constant\">Ys </span>= np.arange(n, dtype=np.float64)                                         | \nmaxi = <span class=\"number\">10</span>                                                                   | \n                                                                            | \nescape = np.zeros((n, n))                                                   | \nmandelbrot(<span class=\"constant\">Xs,</span> <span class=\"constant\">Ys,</span> n, maxi, escape)                                         | \nprint(escape)                                                               | \n                                                                            | \nescape = np.zeros((n, n))                                                   | \nnjit(mandelbrot)(<span class=\"constant\">Xs,</span> <span class=\"constant\">Ys,</span> n, maxi, escape)                                   | \nprint(escape)                                                               | \n                                                                            | \nescape = np.zeros((n, n))                                                   | \nnjit(parallel=<span class=\"constant\">True)</span>(mandelbrot)(<span class=\"constant\">Xs,</span> <span class=\"constant\">Ys,</span> n, maxi, escape)                    | \nprint(escape)                                                               | \n--------------------------------- <span class=\"constant\">Fusing </span>loops ---------------------------------\n<span class=\"constant\">Attempting </span>fusion of parallel loops (combines loops with similar properties)...\n<span class=\"constant\">Following </span>the attempted fusion of parallel <span class=\"keyword\">for</span>-loops there are <span class=\"number\">2</span> parallel <span class=\"keyword\">for</span>-\nloop(s) (originating from loops <span class=\"symbol\">labelled:</span> <span class=\"comment\">#1, #0).</span>\n--------------------------------------------------------------------------------\n---------------------------- <span class=\"constant\">Optimising </span>loop nests -----------------------------\n<span class=\"constant\">Attempting </span>loop nest rewrites (optimising <span class=\"keyword\">for</span> the largest parallel loops)...\n\n+--<span class=\"number\">1</span> is a parallel loop\n   +--<span class=\"number\">0</span> --&gt; rewritten as a serial loop\n--------------------------------------------------------------------------------\n----------------------------- <span class=\"constant\">Before Optimisation </span>------------------------------\n<span class=\"constant\">Parallel </span>region <span class=\"number\">0</span><span class=\"symbol\">:</span>\n+--<span class=\"number\">1</span> (parallel)\n   +--<span class=\"number\">0</span> (parallel)\n\n\n--------------------------------------------------------------------------------\n------------------------------ <span class=\"constant\">After Optimisation </span>------------------------------\n<span class=\"constant\">Parallel </span>region <span class=\"number\">0</span><span class=\"symbol\">:</span>\n+--<span class=\"number\">1</span> (parallel)\n   +--<span class=\"number\">0</span> (serial)\n\n\n\n<span class=\"constant\">Parallel </span>region <span class=\"number\">0</span> (loop <span class=\"comment\">#1) had 0 loop(s) fused.</span>\n--------------------------------------------------------------------------------\n--------------------------------------------------------------------------------\n\n---------------------------<span class=\"constant\">Loop </span>invariant code motion---------------------------\n<span class=\"constant\">Allocation </span><span class=\"symbol\">hoisting:</span>\n<span class=\"constant\">No </span>allocation hoisting found\n\n<span class=\"constant\">Instruction </span><span class=\"symbol\">hoisting:</span>\n--------------------------------------------------------------------------------</code></pre>",
  "id": "5bed4c697326df140e0c1792",
  "issues": [
   {
    "number": "3160",
    "repo": "numba/numba"
   }
  ],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-11-15T10:37:29.456Z",
  "text": "This tool: https://github.com/numba/numba/pull/3160 which I'm working on right this second! Shows this:\n```\n================================================================================\n===== Parallel Accelerator Optimizing:  Function mandelbrot, gi29.py (5)  ======\n================================================================================\n---------------------------Looking for parallel loops---------------------------\nParallel for-loop #1: is produced from gi29.py (14):\n    user defined prange\n \nParallel for-loop #0: is produced from gi29.py (15):\n    user defined prange\n \nFound 2 parallel loops.\n--------------------------------------------------------------------------------\n\n\nParallel loop listing for file gi29.py\n----------------------------------------------------------------------------|loop #ID\nimport numpy as np                                                          | \nfrom numba import njit, prange                                              | \n                                                                            | \n                                                                            | \ndef mandelbrot(xs, ys, n, maxi, escape):                                    | \n    \"\"\"Calculate the Mandelbrot Set                                         | \n                                                                            | \n    xs     : sequence of x coords to loop over                              | \n    ys     : sequence of y coords to loop over                              | \n    n      : number of points along each axis                               | \n    maxi   : iterations in which to escape bounds                           | \n    escape : array to store results                                         | \n    \"\"\"                                                                     | \n    for i in prange(n):-----------------------------------------------------| #1\n        for j in prange(n):-------------------------------------------------| #0\n            z = 0 + 0j                                                      | \n            c = complex(xs[i], ys[j]) # faster than `xs[i] + 1j*ys[j]`      | \n            esc = maxi                                                      | \n            for it in range(maxi):                                          | \n                z = z*z + c                                                 | \n                if z.real**2 + z.imag**2 > 4:                               | \n                    esc = it                                                | \n                    break                                                   | \n            escape[j, i] = esc                                              | \n                                                                            | \nn = 1000                                                                    | \nXs = np.arange(n, dtype=np.float64)                                         | \nYs = np.arange(n, dtype=np.float64)                                         | \nmaxi = 10                                                                   | \n                                                                            | \nescape = np.zeros((n, n))                                                   | \nmandelbrot(Xs, Ys, n, maxi, escape)                                         | \nprint(escape)                                                               | \n                                                                            | \nescape = np.zeros((n, n))                                                   | \nnjit(mandelbrot)(Xs, Ys, n, maxi, escape)                                   | \nprint(escape)                                                               | \n                                                                            | \nescape = np.zeros((n, n))                                                   | \nnjit(parallel=True)(mandelbrot)(Xs, Ys, n, maxi, escape)                    | \nprint(escape)                                                               | \n--------------------------------- Fusing loops ---------------------------------\nAttempting fusion of parallel loops (combines loops with similar properties)...\nFollowing the attempted fusion of parallel for-loops there are 2 parallel for-\nloop(s) (originating from loops labelled: #1, #0).\n--------------------------------------------------------------------------------\n---------------------------- Optimising loop nests -----------------------------\nAttempting loop nest rewrites (optimising for the largest parallel loops)...\n \n+--1 is a parallel loop\n   +--0 --> rewritten as a serial loop\n--------------------------------------------------------------------------------\n----------------------------- Before Optimisation ------------------------------\nParallel region 0:\n+--1 (parallel)\n   +--0 (parallel)\n\n\n--------------------------------------------------------------------------------\n------------------------------ After Optimisation ------------------------------\nParallel region 0:\n+--1 (parallel)\n   +--0 (serial)\n\n\n \nParallel region 0 (loop #1) had 0 loop(s) fused.\n--------------------------------------------------------------------------------\n--------------------------------------------------------------------------------\n \n---------------------------Loop invariant code motion---------------------------\nAllocation hoisting:\nNo allocation hoisting found\n\nInstruction hoisting:\n--------------------------------------------------------------------------------\n```",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"DavidMertz\" class=\"mention\">@DavidMertz</span> ?",
  "id": "5bed695062866f7473a1cd53",
  "issues": [],
  "mentions": [
   {
    "screenName": "DavidMertz",
    "userId": "5776e17ec2f0db084a2104b0",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 12,
  "sent": "2018-11-15T12:40:48.100Z",
  "text": "@DavidMertz ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/DavidMertz",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/2380665?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/2380665?v=4&s=60",
   "displayName": "David Mertz",
   "gv": "4",
   "id": "5776e17ec2f0db084a2104b0",
   "url": "/DavidMertz",
   "username": "DavidMertz",
   "v": 6
  },
  "html": "Sorry... I started to type on my tablet earlier, and it sent a false start.  I tried <code>conda install tbb</code> and that solves the segfault nicely.",
  "id": "5bed702e7326df140e0d0c9f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-11-15T13:10:06.004Z",
  "text": "Sorry... I started to type on my tablet earlier, and it sent a false start.  I tried `conda install tbb` and that solves the segfault nicely.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "no worries :) Glad that&#39;s working better for you. Next release (later this month) will contain the fix, else the Numba channel has dev builds which should have it in.",
  "id": "5bed70c5bb88787474d23805",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-11-15T13:12:37.451Z",
  "text": "no worries :) Glad that's working better for you. Next release (later this month) will contain the fix, else the Numba channel has dev builds which should have it in.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/DavidMertz",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/2380665?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/2380665?v=4&s=60",
   "displayName": "David Mertz",
   "gv": "4",
   "id": "5776e17ec2f0db084a2104b0",
   "url": "/DavidMertz",
   "username": "DavidMertz",
   "v": 6
  },
  "html": "In terms of the parallel issue, I might have been unclear.  I <em>can</em> perfectly well use <code>prange</code> rather than <code>range</code> in the outer loops.  Nothing crashes if I change that, but also the speed is identical in either variant.  This makes me think that the version with plain <code>range</code> is still eeking out enough parallelism to fill  all the pipelines.  But I&#39;m not sure exactly how; albeit LLVM is magic, I know.",
  "id": "5bed70c892b7d1172191ea4c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-11-15T13:12:40.017Z",
  "text": "In terms of the parallel issue, I might have been unclear.  I *can* perfectly well use `prange` rather than `range` in the outer loops.  Nothing crashes if I change that, but also the speed is identical in either variant.  This makes me think that the version with plain `range` is still eeking out enough parallelism to fill  all the pipelines.  But I'm not sure exactly how; albeit LLVM is magic, I know.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "oh that&#39;s interesting, does the load look like its spread across cores?",
  "id": "5bed70fcf1b8753404cdced0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-11-15T13:13:32.096Z",
  "text": "oh that's interesting, does the load look like its spread across cores?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "it may be that there&#39;s just not enough work for 24 cores to be kept anywhere near busy",
  "id": "5bed711221387234050e8b76",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-11-15T13:13:54.378Z",
  "text": "it may be that there's just not enough work for 24 cores to be kept anywhere near busy",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "Locally, on a 4 core box I can make all the cores v. hot",
  "id": "5bed7187d001b91720646edf",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-11-15T13:15:51.507Z",
  "text": "Locally, on a 4 core box I can make all the cores v. hot",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/DavidMertz",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/2380665?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/2380665?v=4&s=60",
   "displayName": "David Mertz",
   "gv": "4",
   "id": "5776e17ec2f0db084a2104b0",
   "url": "/DavidMertz",
   "username": "DavidMertz",
   "v": 6
  },
  "html": "The test file uses 2000x2000 points to check the escape. Admittedly just 50 loops over what&#39;s not a very complex operation.  But there are 4 million independent paths, which I would think would utilize cores.  How are you checking how hot the cores are?",
  "id": "5bed71ae9600d10e64b3e256",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-11-15T13:16:30.947Z",
  "text": "The test file uses 2000x2000 points to check the escape. Admittedly just 50 loops over what's not a very complex operation.  But there are 4 million independent paths, which I would think would utilize cores.  How are you checking how hot the cores are?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "oh just looking at htop and seeing them 100% occupied, anecdotally scientific",
  "id": "5bed71e521387234050e916d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-11-15T13:17:25.200Z",
  "text": "oh just looking at htop and seeing them 100% occupied, anecdotally scientific",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "I used 20k points",
  "id": "5bed71e921387234050e91af",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-11-15T13:17:29.357Z",
  "text": "I used 20k points",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-11-15T13:17:54.728Z",
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "anything less than that barely registered",
  "id": "5bed71f36b9822140d33d6dd",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-11-15T13:17:39.838Z",
  "text": "anything less than that barely registered",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": " s/20k/20k x 20k /",
  "id": "5bed72114e7ca14520ace90a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-11-15T13:18:09.799Z",
  "text": " s/20k/20k x 20k /",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/DavidMertz",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/2380665?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/2380665?v=4&s=60",
   "displayName": "David Mertz",
   "gv": "4",
   "id": "5776e17ec2f0db084a2104b0",
   "url": "/DavidMertz",
   "username": "DavidMertz",
   "v": 6
  },
  "html": "Hmm... let me try testing with a much larger number of points.  You have 400M.  I tested the <code>prange</code> using my laptop with 4 cores, but there is still a scale difference.",
  "id": "5bed726a7326df140e0d1ad4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-11-15T13:19:38.416Z",
  "text": "Hmm... let me try testing with a much larger number of points.  You have 400M.  I tested the `prange` using my laptop with 4 cores, but there is still a scale difference.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "other option is to <code>%timeit</code> or similar? I&#39;m not sure where the break point for kernel launch overhead+scheduling will be data points wise",
  "id": "5bed734fe0fd6b4360f918af",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-11-15T13:23:27.459Z",
  "text": "other option is to `%timeit` or similar? I'm not sure where the break point for kernel launch overhead+scheduling will be data points wise",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/DavidMertz",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/2380665?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/2380665?v=4&s=60",
   "displayName": "David Mertz",
   "gv": "4",
   "id": "5776e17ec2f0db084a2104b0",
   "url": "/DavidMertz",
   "username": "DavidMertz",
   "v": 6
  },
  "html": "I&#39;ve tried <code>%timeit</code> in Jupyter with the 1000x1000 smaller set.  No difference there.  I&#39;m running the whole thing now with 20000x20000.",
  "id": "5bed75737a36913a9a47c247",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-11-15T13:32:35.326Z",
  "text": "I've tried `%timeit` in Jupyter with the 1000x1000 smaller set.  No difference there.  I'm running the whole thing now with 20000x20000.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "ok, let&#39;s hope that shows what you want :) Also, you mentioned you have a 50 iteration driving loop ? could always <code>prange</code> that too ? (the inner <code>prange</code> will just serialized to standard loops).",
  "id": "5bed75eb7a36913a9a47c5ef",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-11-15T13:34:35.977Z",
  "text": "ok, let's hope that shows what you want :) Also, you mentioned you have a 50 iteration driving loop ? could always `prange` that too ? (the inner `prange` will just serialized to standard loops).",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/DavidMertz",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/2380665?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/2380665?v=4&s=60",
   "displayName": "David Mertz",
   "gv": "4",
   "id": "5776e17ec2f0db084a2104b0",
   "url": "/DavidMertz",
   "username": "DavidMertz",
   "v": 6
  },
  "html": "OK... it looks like indeed it&#39;s mostly a question of pushing up work sizes.  The functions named below are the same program above with <code>range</code> vs. <code>prange</code>:<pre><code class=\"bash\">root@C.<span class=\"number\">25687</span>:/workspace/kdm/Numba/src$ NDIM=<span class=\"number\">20000</span> python mandelbrot.py jit_looped\n----------------------------------------------------------------------\n<span class=\"number\">3.6</span>.<span class=\"number\">7</span> |Anaconda, Inc.| (default, Oct <span class=\"number\">23</span> <span class=\"number\">2018</span>, <span class=\"number\">19</span>:<span class=\"number\">16</span>:<span class=\"number\">44</span>)\n[GCC <span class=\"number\">7.3</span>.<span class=\"number\">0</span>]\nFunction jit_looped ran <span class=\"keyword\">in</span> <span class=\"number\">36.29</span> seconds\nroot@C.<span class=\"number\">25687</span>:/workspace/kdm/Numba/src$ NDIM=<span class=\"number\">20000</span> python mandelbrot.py jit_parallel\n----------------------------------------------------------------------\n<span class=\"number\">3.6</span>.<span class=\"number\">7</span> |Anaconda, Inc.| (default, Oct <span class=\"number\">23</span> <span class=\"number\">2018</span>, <span class=\"number\">19</span>:<span class=\"number\">16</span>:<span class=\"number\">44</span>)\n[GCC <span class=\"number\">7.3</span>.<span class=\"number\">0</span>]\nFunction jit_parallel ran <span class=\"keyword\">in</span> <span class=\"number\">4.77</span> seconds</code></pre>",
  "id": "5bed75f392b7d117219212ba",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-11-15T13:34:43.538Z",
  "text": "OK... it looks like indeed it's mostly a question of pushing up work sizes.  The functions named below are the same program above with `range` vs. `prange`:\n\n```bash\nroot@C.25687:/workspace/kdm/Numba/src$ NDIM=20000 python mandelbrot.py jit_looped\n----------------------------------------------------------------------\n3.6.7 |Anaconda, Inc.| (default, Oct 23 2018, 19:16:44)\n[GCC 7.3.0]\nFunction jit_looped ran in 36.29 seconds\nroot@C.25687:/workspace/kdm/Numba/src$ NDIM=20000 python mandelbrot.py jit_parallel\n----------------------------------------------------------------------\n3.6.7 |Anaconda, Inc.| (default, Oct 23 2018, 19:16:44)\n[GCC 7.3.0]\nFunction jit_parallel ran in 4.77 seconds\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/DavidMertz",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/2380665?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/2380665?v=4&s=60",
   "displayName": "David Mertz",
   "gv": "4",
   "id": "5776e17ec2f0db084a2104b0",
   "url": "/DavidMertz",
   "username": "DavidMertz",
   "v": 6
  },
  "html": "That doesn&#39;t completely utilize the 24 cores, but there&#39;s definitely a sizable improvement in parallelism.",
  "id": "5bed761121387234050eb144",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-11-15T13:35:13.669Z",
  "text": "That doesn't completely utilize the 24 cores, but there's definitely a sizable improvement in parallelism.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "ah, that&#39;s better",
  "id": "5bed7671e0fd6b4360f92afb",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-11-15T13:36:49.266Z",
  "text": "ah, that's better",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/DavidMertz",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/2380665?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/2380665?v=4&s=60",
   "displayName": "David Mertz",
   "gv": "4",
   "id": "5776e17ec2f0db084a2104b0",
   "url": "/DavidMertz",
   "username": "DavidMertz",
   "v": 6
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span> How could I <code>prange</code> the inner loop? Each pass through it directly depends on the values from the last pass.  Are you saying that Numba is smart enough to ignore the false parallelization? Or that there&#39;s something I&#39;m missing about the logic of what can be parallel?",
  "id": "5bed767321387234050eb4b5",
  "issues": [],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 12,
  "sent": "2018-11-15T13:36:51.137Z",
  "text": "@stuartarchibald How could I `prange` the inner loop? Each pass through it directly depends on the values from the last pass.  Are you saying that Numba is smart enough to ignore the false parallelization? Or that there's something I'm missing about the logic of what can be parallel?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "is compilation time included in there ?",
  "id": "5bed76796b9822140d33fa22",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-11-15T13:36:57.092Z",
  "text": "is compilation time included in there ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/DavidMertz",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/2380665?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/2380665?v=4&s=60",
   "displayName": "David Mertz",
   "gv": "4",
   "id": "5776e17ec2f0db084a2104b0",
   "url": "/DavidMertz",
   "username": "DavidMertz",
   "v": 6
  },
  "html": "Yeah... that will include compilation overhead.  I figured once it&#39;s into multiple seconds, it&#39;s not that important. But I&#39;ll go tweak it to exclude that.",
  "id": "5bed76ab3102f14521a6834e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-11-15T13:37:47.878Z",
  "text": "Yeah... that will include compilation overhead.  I figured once it's into multiple seconds, it's not that important. But I'll go tweak it to exclude that.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "I think this might be me misunderstanding, I thought you had an <em>extra</em> loop driving the loop in <code>i</code>",
  "id": "5bed76aef1b8753404cdf5f9",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-11-15T13:37:50.497Z",
  "text": "I think this might be me misunderstanding, I thought you had an *extra* loop driving the loop in `i`",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "the compilation time for parallel is often much larger",
  "id": "5bed76c7bb88787474d25dd1",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-11-15T13:38:15.948Z",
  "text": "the compilation time for parallel is often much larger",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "and no, Numba can&#39;t figure out if the user has done something invalid with <code>prange</code>, there are some things that can be detected (e.g. a few race conditions) but there&#39;s no general &quot;safety&quot; check",
  "id": "5bed7702f1b8753404cdf7ec",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-11-15T13:39:14.329Z",
  "text": "and no, Numba can't figure out if the user has done something invalid with `prange`, there are some things that can be detected (e.g. a few race conditions) but there's no general \"safety\" check",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "Implied parallelism (i.e. no <code>prange</code>) is heavily validated.",
  "id": "5bed7728bb06d73a997ab640",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-11-15T13:39:52.654Z",
  "text": "Implied parallelism (i.e. no `prange`) is heavily validated.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "you may also like to <code>fastmath=True</code> if you so feel inclined, that&#39;ll heat up the vector units more",
  "id": "5bed77a192b7d11721921e8a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-11-15T13:41:53.934Z",
  "text": "you may also like to `fastmath=True` if you so feel inclined, that'll heat up the vector units more",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<a href=\"http://numba.pydata.org/numba-doc/latest/user/performance-tips.html\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://numba.pydata.org/numba-doc/latest/user/performance-tips.html</a> is a quick guide",
  "id": "5bed77c447217e07ff2744cd",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-11-15T13:42:28.173Z",
  "text": "http://numba.pydata.org/numba-doc/latest/user/performance-tips.html is a quick guide",
  "unread": false,
  "urls": [
   {
    "url": "http://numba.pydata.org/numba-doc/latest/user/performance-tips.html"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/DavidMertz",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/2380665?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/2380665?v=4&s=60",
   "displayName": "David Mertz",
   "gv": "4",
   "id": "5776e17ec2f0db084a2104b0",
   "url": "/DavidMertz",
   "username": "DavidMertz",
   "v": 6
  },
  "html": "<p>Hmm... maybe I see compilation time slightly.  Or perhaps it&#39;s just jitter on the system:</p><pre><code class=\"bash\">root@C.<span class=\"number\">25687</span>:/workspace/kdm/Numba/src$ NDIM=<span class=\"number\">20000</span> python mandelbrot.py jit_looped\n----------------------------------------------------------------------\n<span class=\"number\">3.6</span>.<span class=\"number\">7</span> |Anaconda, Inc.| (default, Oct <span class=\"number\">23</span> <span class=\"number\">2018</span>, <span class=\"number\">19</span>:<span class=\"number\">16</span>:<span class=\"number\">44</span>)\n[GCC <span class=\"number\">7.3</span>.<span class=\"number\">0</span>]\nFunction jit_looped ran <span class=\"keyword\">in</span> <span class=\"number\">35.82</span> seconds\nroot@C.<span class=\"number\">25687</span>:/workspace/kdm/Numba/src$ NDIM=<span class=\"number\">20000</span> python mandelbrot.py jit_parallel\n----------------------------------------------------------------------\n<span class=\"number\">3.6</span>.<span class=\"number\">7</span> |Anaconda, Inc.| (default, Oct <span class=\"number\">23</span> <span class=\"number\">2018</span>, <span class=\"number\">19</span>:<span class=\"number\">16</span>:<span class=\"number\">44</span>)\n[GCC <span class=\"number\">7.3</span>.<span class=\"number\">0</span>]\nFunction jit_parallel ran <span class=\"keyword\">in</span> <span class=\"number\">4.04</span> seconds</code></pre><p>My warm-up is just this:</p><pre><code class=\"python\">    <span class=\"comment\"># Create the compilation path outside the timer</span>\n    fn(xs, ys, <span class=\"number\">2</span>, orbits, escape)\n    <span class=\"comment\"># Now time with actual compiled function (where applicable)</span>\n    start = time.time()\n    fn(xs, ys, n, orbits, escape)\n    timer = time.time() - start</code></pre>",
  "id": "5bed810a47217e07ff27850a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-11-15T14:22:02.190Z",
  "text": "Hmm... maybe I see compilation time slightly.  Or perhaps it's just jitter on the system:\n\n```bash\nroot@C.25687:/workspace/kdm/Numba/src$ NDIM=20000 python mandelbrot.py jit_looped\n----------------------------------------------------------------------\n3.6.7 |Anaconda, Inc.| (default, Oct 23 2018, 19:16:44)\n[GCC 7.3.0]\nFunction jit_looped ran in 35.82 seconds\nroot@C.25687:/workspace/kdm/Numba/src$ NDIM=20000 python mandelbrot.py jit_parallel\n----------------------------------------------------------------------\n3.6.7 |Anaconda, Inc.| (default, Oct 23 2018, 19:16:44)\n[GCC 7.3.0]\nFunction jit_parallel ran in 4.04 seconds\n```\n\nMy warm-up is just this:\n\n```python\n    # Create the compilation path outside the timer\n    fn(xs, ys, 2, orbits, escape)\n    # Now time with actual compiled function (where applicable)\n    start = time.time()\n    fn(xs, ys, n, orbits, escape)\n    timer = time.time() - start\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/DavidMertz",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/2380665?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/2380665?v=4&s=60",
   "displayName": "David Mertz",
   "gv": "4",
   "id": "5776e17ec2f0db084a2104b0",
   "url": "/DavidMertz",
   "username": "DavidMertz",
   "v": 6
  },
  "html": "My little script tests a bunch of scenarios: looped vs. vectorized, JITed or not, using Python or PyPy as the interpreter (that last is why I report the interpreter in STDOUT).",
  "id": "5bed8153fee6703aaf75439e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-11-15T14:23:15.244Z",
  "text": "My little script tests a bunch of scenarios: looped vs. vectorized, JITed or not, using Python or PyPy as the interpreter (that last is why I report the interpreter in STDOUT).",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "ah ok. Might be worth seeing if setting env var <code>NUMBA_NUM_THREADS</code> as e.g. 8 or 12 helps if the workload is light and parallelism is just increasing memory bus pressure",
  "id": "5bed837f9600d10e64b4652b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-11-15T14:32:31.283Z",
  "text": "ah ok. Might be worth seeing if setting env var `NUMBA_NUM_THREADS` as e.g. 8 or 12 helps if the workload is light and parallelism is just increasing memory bus pressure",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "Running fewer cores hotter might work better. It&#39;s a shame the OpenMP backend isn&#39;t working as IIRC it handles process affinity best.",
  "id": "5bed83b647217e07ff279a5e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-11-15T14:33:26.093Z",
  "text": "Running fewer cores hotter might work better. It's a shame the OpenMP backend isn't working as IIRC it handles process affinity best.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-11-15T15:38:16.300Z",
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/DavidMertz",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/2380665?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/2380665?v=4&s=60",
   "displayName": "David Mertz",
   "gv": "4",
   "id": "5776e17ec2f0db084a2104b0",
   "url": "/DavidMertz",
   "username": "DavidMertz",
   "v": 6
  },
  "html": "<p><span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span> Thanks so much for the help.  I think I&#39;m not going to play with <code>NUMBA_NUM_THREADS</code> here because that feels especially machine dependent.  I&#39;m not trying per se to make this little algorithm maximally fast so much as produce some pedagogical comparisons.  I might add material later to illustrate the use of that variable, but it feels more specialized and case dependent.</p><p>FWIW, these are my current comparisons on my reasonably powerful cloud machine that I gave the specs for (24 cores, GTX 1080, although this doesn&#39;t try the GPU version):</p><table>\n<thead>\n<tr>\n<th><strong>Interpreter/Function</strong></th>\n<th>CPython</th>\n<th>PyPy</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>mandel_looped</code></td>\n<td>216.48s</td>\n<td>32.85s</td>\n</tr>\n<tr>\n<td><code>mandel_vectorized</code></td>\n<td>38.44s</td>\n<td>52.96s</td>\n</tr>\n<tr>\n<td><code>jit_looped</code></td>\n<td>2.33s</td>\n<td>N/A</td>\n</tr>\n<tr>\n<td><code>jit_vectorized</code></td>\n<td>49.32s</td>\n<td>N/A</td>\n</tr>\n<tr>\n<td><code>jit_parallel</code></td>\n<td>1.11s</td>\n<td>N/A</td>\n</tr>\n</tbody>\n</table>\n",
  "id": "5bed922b47217e07ff28012d",
  "issues": [],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 12,
  "sent": "2018-11-15T15:35:07.045Z",
  "text": "@stuartarchibald Thanks so much for the help.  I think I'm not going to play with `NUMBA_NUM_THREADS` here because that feels especially machine dependent.  I'm not trying per se to make this little algorithm maximally fast so much as produce some pedagogical comparisons.  I might add material later to illustrate the use of that variable, but it feels more specialized and case dependent.\n\nFWIW, these are my current comparisons on my reasonably powerful cloud machine that I gave the specs for (24 cores, GTX 1080, although this doesn't try the GPU version):\n\n| **Interpreter/Function**  | CPython | PyPy   |\n|--------------------------------|---------|--------|\n| `mandel_looped`                | 216.48s | 32.85s |\n| `mandel_vectorized`            |  38.44s | 52.96s |\n| `jit_looped`                   |   2.33s |  N/A   |\n| `jit_vectorized`               |  49.32s |  N/A   |\n| `jit_parallel`                 |   1.11s |  N/A   |",
  "unread": false,
  "urls": [],
  "v": 3
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"DavidMertz\" class=\"mention\">@DavidMertz</span> no problem. Glad you got it to work ok :) What&#39;s <code>jit_vectorized</code>?",
  "id": "5bed930d21387234050f78bf",
  "issues": [],
  "mentions": [
   {
    "screenName": "DavidMertz",
    "userId": "5776e17ec2f0db084a2104b0",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 13,
  "sent": "2018-11-15T15:38:53.454Z",
  "text": "@DavidMertz no problem. Glad you got it to work ok :) What's `jit_vectorized`?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "I&#39;d hope the parallel version would go quicker but it may well just not have enough compute",
  "id": "5bed932de0fd6b4360f9ed49",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-11-15T15:39:25.446Z",
  "text": "I'd hope the parallel version would go quicker but it may well just not have enough compute",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/DavidMertz",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/2380665?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/2380665?v=4&s=60",
   "displayName": "David Mertz",
   "gv": "4",
   "id": "5776e17ec2f0db084a2104b0",
   "url": "/DavidMertz",
   "username": "DavidMertz",
   "v": 6
  },
  "html": "<p><span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span>  It&#39;s a NumPy implementation that is passed to Numba.  I.e.:</p><pre><code class=\"python\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mandel_vectorized</span><span class=\"params\">(xs, ys, n, maxi, escape)</span>:</span>\n    <span class=\"comment\"># Can utilize broadcasting to create grid points</span>\n    c = xs + <span class=\"number\">1j</span>*ys.reshape(n, <span class=\"number\">1</span>)\n    z = np.zeros_like(c)\n    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(maxi):\n        z = z*z + c\n        escape[(abs(z) &gt; <span class=\"number\">2</span>) &amp; (escape == <span class=\"number\">0</span>)] = i\n    escape[escape == <span class=\"number\">0</span>] = maxi\n    <span class=\"keyword\">return</span> escape\njit_vectorized = numba.jit(nogil=<span class=\"keyword\">True</span>)(mandel_vectorized)</code></pre><p>This doesn&#39;t use <code>nopython=True</code> though... it blows up for unclear reasons if I do.  I&#39;m not as worried about that since I&#39;m illustrating loop acceleration; but maybe the benchmark is unfair until I work that out.</p>",
  "id": "5bed93b347217e07ff280b65",
  "issues": [],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 13,
  "sent": "2018-11-15T15:41:39.819Z",
  "text": "@stuartarchibald  It's a NumPy implementation that is passed to Numba.  I.e.:\n\n```python\ndef mandel_vectorized(xs, ys, n, maxi, escape):\n    # Can utilize broadcasting to create grid points\n    c = xs + 1j*ys.reshape(n, 1)\n    z = np.zeros_like(c)\n    for i in range(maxi):\n        z = z*z + c\n        escape[(abs(z) > 2) & (escape == 0)] = i\n    escape[escape == 0] = maxi\n    return escape\njit_vectorized = numba.jit(nogil=True)(mandel_vectorized)\n```\n\nThis doesn't use `nopython=True` though... it blows up for unclear reasons if I do.  I'm not as worried about that since I'm illustrating loop acceleration; but maybe the benchmark is unfair until I work that out.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "hmmm, I&#39;d remove the jit decorator if its running in object mode as it&#39;s not really fair, might even be slower",
  "id": "5bed93fc4e7ca14520addd89",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-11-15T15:42:52.639Z",
  "text": "hmmm, I'd remove the jit decorator if its running in object mode as it's not really fair, might even be slower",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/DavidMertz",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/2380665?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/2380665?v=4&s=60",
   "displayName": "David Mertz",
   "gv": "4",
   "id": "5776e17ec2f0db084a2104b0",
   "url": "/DavidMertz",
   "username": "DavidMertz",
   "v": 6
  },
  "html": "Well yeah... it <em>is</em> slower than the plain vectorized in the table.  This is the error if I put back <code>nopython=True</code>:<pre><code class=\"python\">root@C.25687:/workspace/kdm/Numba/src$ python mandelbrot.py jit_vectorized\n----------------------------------------------------------------------\n3.6.6 | packaged by conda-forge | (default, Oct 12 2018, 14:08:43)\n[GCC 4.8.2 20140120 (Red Hat 4.8.2-15)]\nTraceback (most recent call last):\n  File \"mandelbrot.py\", line 95, in &lt;module&gt;\n    fn(xs, ys, n, orbits, escape)\n  File \"/opt/conda/lib/python3.6/site-packages/numba/dispatcher.py\", line 348, in _compile_for_args\n    error_rewrite(e, 'typing')\n  File \"/opt/conda/lib/python3.6/site-packages/numba/dispatcher.py\", line 315, in error_rewrite\n    reraise(type(e), e, None)\n  File \"/opt/conda/lib/python3.6/site-packages/numba/six.py\", line 658, in reraise\n    raise value.with_traceback(tb)\nnumba.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)\nInvalid use of Function(&lt;built-in function abs&gt;) with argument(s) of type(s): (array(complex128, 2d, C))\nKnown signatures:\n * (int8,) -&gt; int8\n * (int64,) -&gt; int64\n * (int16,) -&gt; int16\n * (int32,) -&gt; int32\n * (float32,) -&gt; float32\n * (float64,) -&gt; float64\n * (complex64,) -&gt; float32\n * (complex128,) -&gt; float64\n * parameterized\nIn definition 0:\n    All templates rejected\nIn definition 1:\n    All templates rejected\nThis error is usually caused by passing an argument of a type that is unsupported by the named function.\n[1] During: resolving callee type: Function(&lt;built-in function abs&gt;)\n[2] During: typing of call at mandelbrot.py (39)\n\n\nFile \"mandelbrot.py\", line 39:\ndef mandel_vectorized(xs, ys, n, maxi, escape):\n    &lt;source elided&gt;\n        z = z*z + c\n        escape[(abs(z) &gt; 2) &amp; (escape == 0)] = i\n        ^\n\nThis is not usually a problem with Numba itself but instead often caused by\nthe use of unsupported features or an issue in resolving types.\n\nTo see Python/NumPy features supported by the latest release of Numba visit:\nhttp://numba.pydata.org/numba-doc/dev/reference/pysupported.html\nand\nhttp://numba.pydata.org/numba-doc/dev/reference/numpysupported.html\n\nFor more information about typing errors and how to debug them visit:\nhttp://numba.pydata.org/numba-doc/latest/user/troubleshoot.html#my-code-doesn-t-compile\n\nIf you think your code should work with Numba, please report the error message\nand traceback, along with a minimal reproducer at:\nhttps://github.com/numba/numba/issues/new</code></pre>",
  "id": "5bed948cf1b8753404cebcc7",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-11-15T15:45:16.566Z",
  "text": "Well yeah... it *is* slower than the plain vectorized in the table.  This is the error if I put back `nopython=True`:\n\n```python\nroot@C.25687:/workspace/kdm/Numba/src$ python mandelbrot.py jit_vectorized\n----------------------------------------------------------------------\n3.6.6 | packaged by conda-forge | (default, Oct 12 2018, 14:08:43)\n[GCC 4.8.2 20140120 (Red Hat 4.8.2-15)]\nTraceback (most recent call last):\n  File \"mandelbrot.py\", line 95, in <module>\n    fn(xs, ys, n, orbits, escape)\n  File \"/opt/conda/lib/python3.6/site-packages/numba/dispatcher.py\", line 348, in _compile_for_args\n    error_rewrite(e, 'typing')\n  File \"/opt/conda/lib/python3.6/site-packages/numba/dispatcher.py\", line 315, in error_rewrite\n    reraise(type(e), e, None)\n  File \"/opt/conda/lib/python3.6/site-packages/numba/six.py\", line 658, in reraise\n    raise value.with_traceback(tb)\nnumba.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)\nInvalid use of Function(<built-in function abs>) with argument(s) of type(s): (array(complex128, 2d, C))\nKnown signatures:\n * (int8,) -> int8\n * (int64,) -> int64\n * (int16,) -> int16\n * (int32,) -> int32\n * (float32,) -> float32\n * (float64,) -> float64\n * (complex64,) -> float32\n * (complex128,) -> float64\n * parameterized\nIn definition 0:\n    All templates rejected\nIn definition 1:\n    All templates rejected\nThis error is usually caused by passing an argument of a type that is unsupported by the named function.\n[1] During: resolving callee type: Function(<built-in function abs>)\n[2] During: typing of call at mandelbrot.py (39)\n\n\nFile \"mandelbrot.py\", line 39:\ndef mandel_vectorized(xs, ys, n, maxi, escape):\n    <source elided>\n        z = z*z + c\n        escape[(abs(z) > 2) & (escape == 0)] = i\n        ^\n\nThis is not usually a problem with Numba itself but instead often caused by\nthe use of unsupported features or an issue in resolving types.\n\nTo see Python/NumPy features supported by the latest release of Numba visit:\nhttp://numba.pydata.org/numba-doc/dev/reference/pysupported.html\nand\nhttp://numba.pydata.org/numba-doc/dev/reference/numpysupported.html\n\nFor more information about typing errors and how to debug them visit:\nhttp://numba.pydata.org/numba-doc/latest/user/troubleshoot.html#my-code-doesn-t-compile\n\nIf you think your code should work with Numba, please report the error message\nand traceback, along with a minimal reproducer at:\nhttps://github.com/numba/numba/issues/new\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "oh probably needs <code>np.abs</code>",
  "id": "5bed94c57326df140e0e0513",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-11-15T15:46:13.526Z",
  "text": "oh probably needs `np.abs`",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "I doubt numba could handle the fancy vectorized indexing though even if fixed",
  "id": "5bed95059600d10e64b4dfb1",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-11-15T15:47:17.227Z",
  "text": "I doubt numba could handle the fancy vectorized indexing though even if fixed",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/DavidMertz",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/2380665?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/2380665?v=4&s=60",
   "displayName": "David Mertz",
   "gv": "4",
   "id": "5776e17ec2f0db084a2104b0",
   "url": "/DavidMertz",
   "username": "DavidMertz",
   "v": 6
  },
  "html": "Slightly different error with <code>np.abs()</code>, but just as fatal.",
  "id": "5bed953e4e7ca14520ade6a7",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-11-15T15:48:14.012Z",
  "text": "Slightly different error with `np.abs()`, but just as fatal.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "something about indexing ?",
  "id": "5bed95593102f14521a76196",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-11-15T15:48:41.879Z",
  "text": "something about indexing ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "yeah, seems so",
  "id": "5bed956e47217e07ff281822",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-11-15T15:49:02.052Z",
  "text": "yeah, seems so",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/DavidMertz",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/2380665?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/2380665?v=4&s=60",
   "displayName": "David Mertz",
   "gv": "4",
   "id": "5776e17ec2f0db084a2104b0",
   "url": "/DavidMertz",
   "username": "DavidMertz",
   "v": 6
  },
  "html": "I think so (using <code>np.abs</code>)<pre><code>numba<span class=\"class\">.errors</span><span class=\"class\">.InternalError</span>: unsupported array index type <span class=\"function\"><span class=\"title\">array</span><span class=\"params\">(bool, <span class=\"number\">2</span>d, C)</span></span> <span class=\"keyword\">in</span> [<span class=\"function\"><span class=\"title\">array</span><span class=\"params\">(bool, <span class=\"number\">2</span>d, C)</span></span>]\n[<span class=\"number\">1</span>] During: typing of setitem at mandelbrot<span class=\"class\">.py</span> (<span class=\"number\">39</span>)</code></pre>",
  "id": "5bed95836b9822140d34cd4e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-11-15T15:49:23.387Z",
  "text": "I think so (using `np.abs`)\n\n```\nnumba.errors.InternalError: unsupported array index type array(bool, 2d, C) in [array(bool, 2d, C)]\n[1] During: typing of setitem at mandelbrot.py (39)\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "yeah, think that <code>escape[escape==0]</code> is the cause",
  "id": "5bed95b9d001b917206569a5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-11-15T15:50:17.777Z",
  "text": "yeah, think that `escape[escape==0]` is the cause",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "boolean array index into boolean array",
  "id": "5bed95c56b9822140d34cf96",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-11-15T15:50:29.592Z",
  "text": "boolean array index into boolean array",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "or rather, bool index array into float array, would have to look at the typing",
  "id": "5bed960b62866f7473a316f8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-11-15T15:51:39.119Z",
  "text": "or rather, bool index array into float array, would have to look at the typing",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-11-15T15:52:46.723Z",
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/DavidMertz",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/2380665?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/2380665?v=4&s=60",
   "displayName": "David Mertz",
   "gv": "4",
   "id": "5776e17ec2f0db084a2104b0",
   "url": "/DavidMertz",
   "username": "DavidMertz",
   "v": 6
  },
  "html": "Do you think expressing this with <code>np.where</code> would wind up doing better?",
  "id": "5bed963a6b9822140d34d161",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-11-15T15:52:26.561Z",
  "text": "Do you think expressing this with `np.where` would wind up doing better?",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "i think there&#39;s more chance it&#39;d compile",
  "id": "5bed96714e7ca14520adeee1",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-11-15T15:53:21.208Z",
  "text": "i think there's more chance it'd compile",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/DavidMertz",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/2380665?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/2380665?v=4&s=60",
   "displayName": "David Mertz",
   "gv": "4",
   "id": "5776e17ec2f0db084a2104b0",
   "url": "/DavidMertz",
   "username": "DavidMertz",
   "v": 6
  },
  "html": "I&#39;ll try that later.  Not my priority for right now.",
  "id": "5bed96814e7ca14520adef57",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-11-15T15:53:37.854Z",
  "text": "I'll try that later.  Not my priority for right now.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/DavidMertz",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/2380665?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/2380665?v=4&s=60",
   "displayName": "David Mertz",
   "gv": "4",
   "id": "5776e17ec2f0db084a2104b0",
   "url": "/DavidMertz",
   "username": "DavidMertz",
   "v": 6
  },
  "html": "... I might have to futz to make sure I get that change right.",
  "id": "5bed968d9600d10e64b4eb13",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-11-15T15:53:49.766Z",
  "text": "... I might have to futz to make sure I get that change right.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<code>np.where</code> is more contained in scope than the giant amount of indexing possibilities",
  "id": "5bed96a3d001b91720656ef7",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-11-15T15:54:11.720Z",
  "text": "`np.where` is more contained in scope than the giant amount of indexing possibilities",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "so might just worko",
  "id": "5bed96ad7a36913a9a48a8bc",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-11-15T15:54:21.740Z",
  "text": "so might just worko",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-11-18T18:19:21.425Z",
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/agoose77",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/1248413?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/1248413?v=4&s=60",
   "displayName": "Angus Hollands",
   "gv": "4",
   "id": "589e1136d73408ce4f4979ca",
   "url": "/agoose77",
   "username": "agoose77",
   "v": 22
  },
  "html": "Hi all, I have a traceback in the nopython mode and I&#39;m not entirely sure what to make of it",
  "id": "5bf1abf61ad4155d3ae50543",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-11-18T18:14:14.908Z",
  "text": "Hi all, I have a traceback in the nopython mode and I'm not entirely sure what to make of it\n",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "editedAt": "2018-11-18T18:19:21.535Z",
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/agoose77",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/1248413?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/1248413?v=4&s=60",
   "displayName": "Angus Hollands",
   "gv": "4",
   "id": "589e1136d73408ce4f4979ca",
   "url": "/agoose77",
   "username": "agoose77",
   "v": 22
  },
  "html": "any ideas?",
  "id": "5bf1abf82735965dfef6c32d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-11-18T18:14:16.887Z",
  "text": "any ideas?\n",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "editedAt": "2018-11-18T18:16:51.168Z",
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/agoose77",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/1248413?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/1248413?v=4&s=60",
   "displayName": "Angus Hollands",
   "gv": "4",
   "id": "589e1136d73408ce4f4979ca",
   "url": "/agoose77",
   "username": "agoose77",
   "v": 22
  },
  "html": "<pre><code class=\"python\"><span class=\"decorator\">@jit</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dc_dw</span><span class=\"params\">(a, y, w, l, m, p, q, derivative)</span>:</span>\n    a_l = a[l]\n\n    <span class=\"keyword\">return</span> np.sum(np.array([(a_l[i, j] - y[i, j]) * \n                   derivative(a_l[i, j]) * \n                   dz_dw(a, w, l, m, i, p, q, j, derivative)\n                   <span class=\"keyword\">for</span> i, j <span class=\"keyword\">in</span> np.ndindex(a_l.shape)]))</code></pre><pre><code><span class=\"comment\">---------------------------------------------------------------------------</span>\nTypingError                               Traceback (most recent <span class=\"operator\"><span class=\"keyword\">call</span> <span class=\"keyword\">last</span>)\n&lt;ipython-<span class=\"keyword\">input</span>-<span class=\"number\">103</span>-<span class=\"number\">81</span>ca510d1816&gt; <span class=\"keyword\">in</span> &lt;<span class=\"keyword\">module</span>&gt;\n<span class=\"comment\">----&gt; 1 dc_dw_mat(layers, y, weights, 2, 1)</span>\n\n&lt;ipython-<span class=\"keyword\">input</span>-<span class=\"number\">101</span>-<span class=\"number\">92</span>f24f215995&gt; <span class=\"keyword\">in</span> dc_dw_mat(layers, y, weights, <span class=\"keyword\">l</span>, <span class=\"keyword\">m</span>)\n      <span class=\"number\">3</span>     delta = np.empty_like(<span class=\"keyword\">source</span>)\n      <span class=\"number\">4</span>     <span class=\"keyword\">for</span> <span class=\"keyword\">p</span>, q <span class=\"keyword\">in</span> np.ndindex(delta.shape):\n<span class=\"comment\">----&gt; 5         delta[p, q] = dc_dw(layers, y, weights, l=l, m=m, p=p, q=q, derivative=expit_derivative)</span>\n      <span class=\"number\">6</span>     <span class=\"keyword\">return</span> delta\n\n~/.<span class=\"keyword\">local</span>/<span class=\"keyword\">share</span>/virtualenvs/sci/lib/python3<span class=\"number\">.7</span>/site-packages/numba/dispatcher.py <span class=\"keyword\">in</span> _compile_for_args(<span class=\"keyword\">self</span>, *args, **kws)\n    <span class=\"number\">346</span>                 <span class=\"keyword\">e</span>.patch_message(msg)\n    <span class=\"number\">347</span> \n<span class=\"comment\">--&gt; 348             error_rewrite(e, 'typing')</span>\n    <span class=\"number\">349</span>         <span class=\"keyword\">except</span> <span class=\"keyword\">errors</span>.UnsupportedError <span class=\"keyword\">as</span> <span class=\"keyword\">e</span>:\n    <span class=\"number\">350</span>             # Something unsupported <span class=\"keyword\">is</span> <span class=\"keyword\">present</span> <span class=\"keyword\">in</span> the <span class=\"keyword\">user</span> code, <span class=\"keyword\">add</span> <span class=\"keyword\">help</span> info\n\n~/.<span class=\"keyword\">local</span>/<span class=\"keyword\">share</span>/virtualenvs/sci/lib/python3<span class=\"number\">.7</span>/site-packages/numba/dispatcher.py <span class=\"keyword\">in</span> error_rewrite(<span class=\"keyword\">e</span>, issue_type)\n    <span class=\"number\">313</span>                 <span class=\"keyword\">raise</span> <span class=\"keyword\">e</span>\n    <span class=\"number\">314</span>             <span class=\"keyword\">else</span>:\n<span class=\"comment\">--&gt; 315                 reraise(type(e), e, None)</span>\n    <span class=\"number\">316</span> \n    <span class=\"number\">317</span>         argtypes = []\n\n~/.<span class=\"keyword\">local</span>/<span class=\"keyword\">share</span>/virtualenvs/sci/lib/python3<span class=\"number\">.7</span>/site-packages/numba/six.py <span class=\"keyword\">in</span> reraise(tp, <span class=\"keyword\">value</span>, tb)\n    <span class=\"number\">656</span>             <span class=\"keyword\">value</span> = tp()\n    <span class=\"number\">657</span>         <span class=\"keyword\">if</span> <span class=\"keyword\">value</span>.__traceback__ <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> tb:\n<span class=\"comment\">--&gt; 658             raise value.with_traceback(tb)</span>\n    <span class=\"number\">659</span>         <span class=\"keyword\">raise</span> <span class=\"keyword\">value</span>\n    <span class=\"number\">660</span> \n\nTypingError: <span class=\"keyword\">Failed</span> <span class=\"keyword\">in</span> nopython <span class=\"keyword\">mode</span> pipeline (step: nopython frontend)\nInvalid <span class=\"keyword\">use</span> <span class=\"keyword\">of</span> <span class=\"keyword\">Function</span>(&lt;intrinsic range_iter_len&gt;) <span class=\"keyword\">with</span> argument(s) <span class=\"keyword\">of</span> <span class=\"keyword\">type</span>(s): (ndindex(ndim=<span class=\"number\">2</span>))\n * parameterized\n<span class=\"keyword\">In</span> definition <span class=\"number\">0</span>:\n    All templates rejected\nThis <span class=\"keyword\">error</span> <span class=\"keyword\">is</span> usually caused <span class=\"keyword\">by</span> <span class=\"keyword\">passing</span> an argument <span class=\"keyword\">of</span> a <span class=\"keyword\">type</span> that <span class=\"keyword\">is</span> unsupported <span class=\"keyword\">by</span> the named <span class=\"keyword\">function</span>.\n[<span class=\"number\">1</span>] During: resolving callee <span class=\"keyword\">type</span>: <span class=\"keyword\">Function</span>(&lt;intrinsic range_iter_len&gt;)\n[<span class=\"number\">2</span>] During: typing <span class=\"keyword\">of</span> <span class=\"keyword\">call</span> <span class=\"keyword\">at</span> &lt;ipython-<span class=\"keyword\">input</span>-<span class=\"number\">100</span>-<span class=\"number\">858</span>ce6b65c0d&gt; (<span class=\"number\">24</span>)\n\n\n<span class=\"keyword\">File</span> <span class=\"string\">\"&lt;ipython-input-100-858ce6b65c0d&gt;\"</span>, line <span class=\"number\">24</span>:\n<span class=\"keyword\">def</span> dz_dw(a, w, <span class=\"keyword\">l</span>, <span class=\"keyword\">m</span>, <span class=\"keyword\">i</span>, <span class=\"keyword\">p</span>, q, j, derivative):\n    &lt;<span class=\"keyword\">source</span> elided&gt;\n\n@jit\n^\n\nThis <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> usually a problem <span class=\"keyword\">with</span> Numba itself but instead often caused <span class=\"keyword\">by</span>\nthe <span class=\"keyword\">use</span> <span class=\"keyword\">of</span> unsupported features <span class=\"keyword\">or</span> an issue <span class=\"keyword\">in</span> resolving types.\n\n<span class=\"keyword\">To</span> see Python/NumPy features supported <span class=\"keyword\">by</span> the latest <span class=\"keyword\">release</span> <span class=\"keyword\">of</span> Numba visit:\n<span class=\"keyword\">http</span>://numba.pydata.org/numba-doc/dev/<span class=\"keyword\">reference</span>/pysupported.html\n<span class=\"keyword\">and</span>\n<span class=\"keyword\">http</span>://numba.pydata.org/numba-doc/dev/<span class=\"keyword\">reference</span>/numpysupported.html\n\n<span class=\"keyword\">For</span> more information about typing <span class=\"keyword\">errors</span> <span class=\"keyword\">and</span> how <span class=\"keyword\">to</span> debug them visit:\n<span class=\"keyword\">http</span>://numba.pydata.org/numba-doc/latest/<span class=\"keyword\">user</span>/troubleshoot.html#my-code-doesn-<span class=\"keyword\">t</span>-compile\n\n<span class=\"keyword\">If</span> you think your code should <span class=\"keyword\">work</span> <span class=\"keyword\">with</span> Numba, please report the <span class=\"keyword\">error</span> message\n<span class=\"keyword\">and</span> traceback, along <span class=\"keyword\">with</span> a minimal reproducer <span class=\"keyword\">at</span>:\nhttps://github.com/numba/numba/issues/<span class=\"keyword\">new</span></span></code></pre>",
  "id": "5bf1ac154bad337eb9fcefdc",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-11-18T18:14:45.324Z",
  "text": "```python\n@jit\ndef dc_dw(a, y, w, l, m, p, q, derivative):\n    a_l = a[l]\n    \n    return np.sum(np.array([(a_l[i, j] - y[i, j]) * \n                   derivative(a_l[i, j]) * \n                   dz_dw(a, w, l, m, i, p, q, j, derivative)\n                   for i, j in np.ndindex(a_l.shape)]))\n```\n```traceback\n---------------------------------------------------------------------------\nTypingError                               Traceback (most recent call last)\n<ipython-input-103-81ca510d1816> in <module>\n----> 1 dc_dw_mat(layers, y, weights, 2, 1)\n\n<ipython-input-101-92f24f215995> in dc_dw_mat(layers, y, weights, l, m)\n      3     delta = np.empty_like(source)\n      4     for p, q in np.ndindex(delta.shape):\n----> 5         delta[p, q] = dc_dw(layers, y, weights, l=l, m=m, p=p, q=q, derivative=expit_derivative)\n      6     return delta\n\n~/.local/share/virtualenvs/sci/lib/python3.7/site-packages/numba/dispatcher.py in _compile_for_args(self, *args, **kws)\n    346                 e.patch_message(msg)\n    347 \n--> 348             error_rewrite(e, 'typing')\n    349         except errors.UnsupportedError as e:\n    350             # Something unsupported is present in the user code, add help info\n\n~/.local/share/virtualenvs/sci/lib/python3.7/site-packages/numba/dispatcher.py in error_rewrite(e, issue_type)\n    313                 raise e\n    314             else:\n--> 315                 reraise(type(e), e, None)\n    316 \n    317         argtypes = []\n\n~/.local/share/virtualenvs/sci/lib/python3.7/site-packages/numba/six.py in reraise(tp, value, tb)\n    656             value = tp()\n    657         if value.__traceback__ is not tb:\n--> 658             raise value.with_traceback(tb)\n    659         raise value\n    660 \n\nTypingError: Failed in nopython mode pipeline (step: nopython frontend)\nInvalid use of Function(<intrinsic range_iter_len>) with argument(s) of type(s): (ndindex(ndim=2))\n * parameterized\nIn definition 0:\n    All templates rejected\nThis error is usually caused by passing an argument of a type that is unsupported by the named function.\n[1] During: resolving callee type: Function(<intrinsic range_iter_len>)\n[2] During: typing of call at <ipython-input-100-858ce6b65c0d> (24)\n\n\nFile \"<ipython-input-100-858ce6b65c0d>\", line 24:\ndef dz_dw(a, w, l, m, i, p, q, j, derivative):\n    <source elided>\n    \n@jit\n^\n\nThis is not usually a problem with Numba itself but instead often caused by\nthe use of unsupported features or an issue in resolving types.\n\nTo see Python/NumPy features supported by the latest release of Numba visit:\nhttp://numba.pydata.org/numba-doc/dev/reference/pysupported.html\nand\nhttp://numba.pydata.org/numba-doc/dev/reference/numpysupported.html\n\nFor more information about typing errors and how to debug them visit:\nhttp://numba.pydata.org/numba-doc/latest/user/troubleshoot.html#my-code-doesn-t-compile\n\nIf you think your code should work with Numba, please report the error message\nand traceback, along with a minimal reproducer at:\nhttps://github.com/numba/numba/issues/new\n```\n\n",
  "unread": false,
  "urls": [],
  "v": 3
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/agoose77",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/1248413?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/1248413?v=4&s=60",
   "displayName": "Angus Hollands",
   "gv": "4",
   "id": "589e1136d73408ce4f4979ca",
   "url": "/agoose77",
   "username": "agoose77",
   "v": 22
  },
  "html": "Ah, calling <code>list</code> on <code>np.ndindex(...)</code> solved the problem",
  "id": "5bf1acd29f5a9e6e4105facf",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-11-18T18:17:54.804Z",
  "text": "Ah, calling `list` on `np.ndindex(...)` solved the problem",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-11-18T21:19:29.944Z",
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/agoose77",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/1248413?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/1248413?v=4&s=60",
   "displayName": "Angus Hollands",
   "gv": "4",
   "id": "589e1136d73408ce4f4979ca",
   "url": "/agoose77",
   "username": "agoose77",
   "v": 22
  },
  "html": "I love numba \ud83d\udc96",
  "id": "5bf1d74da47c6c5d3b08027f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-11-18T21:19:09.961Z",
  "text": "I love numba \ud83d\udc96",
  "unread": false,
  "urls": [],
  "v": 3
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/jni",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/492549?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/492549?v=4&s=60",
   "displayName": "Juan Nunez-Iglesias",
   "gv": "4",
   "id": "53815253048862e761fa28b2",
   "url": "/jni",
   "username": "jni",
   "v": 52
  },
  "html": "Wait, am I correct in interpreting this post to mean that numba can accelerate ndindex? Although, at any rate, having to call list on it is a bit unfortunate...",
  "id": "5bf20ab09f5a9e6e41081dc2",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-11-19T00:58:24.154Z",
  "text": "Wait, am I correct in interpreting this post to mean that numba can accelerate ndindex? Although, at any rate, having to call list on it is a bit unfortunate...",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"agoose77\" class=\"mention\">@agoose77</span>: Can you open an issue for this, noting your workaround.  We should fix this.",
  "id": "5bf211c12735965dfef94053",
  "issues": [],
  "mentions": [
   {
    "screenName": "agoose77",
    "userId": "589e1136d73408ce4f4979ca",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 16,
  "sent": "2018-11-19T01:28:33.882Z",
  "text": "@agoose77: Can you open an issue for this, noting your workaround.  We should fix this.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"seibert\" class=\"mention\">@seibert</span> pretty sure that&#39;s array comprehension inlining failing",
  "id": "5bf2b25e80e46b4266d64d3a",
  "issues": [],
  "mentions": [
   {
    "screenName": "seibert",
    "userId": "55b68af40fc9f982beab2a3c",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 16,
  "sent": "2018-11-19T12:53:50.505Z",
  "text": "@seibert pretty sure that's array comprehension inlining failing",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/agoose77",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/1248413?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/1248413?v=4&s=60",
   "displayName": "Angus Hollands",
   "gv": "4",
   "id": "589e1136d73408ce4f4979ca",
   "url": "/agoose77",
   "username": "agoose77",
   "v": 22
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"seibert\" class=\"mention\">@seibert</span> sure thing",
  "id": "5bf2b8fe2ef5b06e408e24ea",
  "issues": [],
  "mentions": [
   {
    "screenName": "seibert",
    "userId": "55b68af40fc9f982beab2a3c",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 16,
  "sent": "2018-11-19T13:22:06.309Z",
  "text": "@seibert sure thing",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "as will anything that isn&#39;t range-like as the iterable",
  "id": "5bf2c5335f5c92504080b9a0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-11-19T14:14:11.001Z",
  "text": "as will anything that isn't range-like as the iterable",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "(scratched the above, invalid code)",
  "id": "5bf2c7322735965dfefda98a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-11-19T14:22:42.542Z",
  "text": "(scratched the above, invalid code)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<pre><code><span class=\"keyword\">from</span> numba <span class=\"keyword\">import</span> njit\n<span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np\n\n<span class=\"decorator\">@njit</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">(a)</span>:</span>\n    <span class=\"keyword\">return</span> np.array([<span class=\"number\">1</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> np.nditer(a)])\n\nfoo(np.zeros((<span class=\"number\">10</span>,)))</code></pre>",
  "id": "5bf2c7b5b86c70503f55e5a1",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-11-19T14:24:53.249Z",
  "text": "```\nfrom numba import njit\nimport numpy as np\n\n@njit\ndef foo(a):\n    return np.array([1 for i in np.nditer(a)])\n\nfoo(np.zeros((10,)))\n```\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "^ that has the same problem",
  "id": "5bf2c7bb1ad4155d3aebdf60",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-11-19T14:24:59.298Z",
  "text": "^ that has the same problem",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "but works if inline_arraycall is disabled",
  "id": "5bf2c7ce5f5c92504080cd30",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-11-19T14:25:18.120Z",
  "text": "but works if inline_arraycall is disabled",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "i.e. no array comprehension",
  "id": "5bf2c7dd9f5a9e6e410cc252",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-11-19T14:25:33.985Z",
  "text": "i.e. no array comprehension",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-11-21T11:22:53.723Z",
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "<p>hey guys, is there a way (or a best practice) to call &quot;macro-like&quot; function in a gufunc?</p><pre><code><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">CLAMP</span><span class=\"params\">(x,thr)</span>:</span> <span class=\"keyword\">return</span> x <span class=\"keyword\">if</span> x&lt;thr+<span class=\"number\">1</span> <span class=\"keyword\">else</span> thr</code></pre><p>gives:</p><pre><code>Untyped <span class=\"built_in\">global</span> name <span class=\"string\">'CLAMP'</span>: cannot determine Numba type <span class=\"keyword\">of</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> '<span class=\"title\">function</span>'&gt;</span></code></pre>",
  "id": "5bf53fe8d24f9324d22db7d3",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-11-21T11:22:16.474Z",
  "text": "hey guys, is there a way (or a best practice) to call \"macro-like\" function in a gufunc?\n\n```\ndef CLAMP(x,thr): return x if x<thr+1 else thr\n```\n\ngives:\n```\nUntyped global name 'CLAMP': cannot determine Numba type of <class 'function'>\n```",
  "unread": false,
  "urls": [],
  "v": 5
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"lpuglia\" class=\"mention\">@lpuglia</span> could you just jit it or have is as a closure? Chances are LLVM would inline it anyway.",
  "id": "5bf5437aed6bcf1ef838d743",
  "issues": [],
  "mentions": [
   {
    "screenName": "lpuglia",
    "userId": "5bc8acc0d73408ce4fabe62d",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 14,
  "sent": "2018-11-21T11:37:30.848Z",
  "text": "@lpuglia could you just jit it or have is as a closure? Chances are LLVM would inline it anyway.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "well, that worked like a charm :)",
  "id": "5bf54455c6cf4524d1538c09",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-11-21T11:41:09.805Z",
  "text": "well, that worked like a charm :)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "thank you!",
  "id": "5bf54458f048fa1051fce5d4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-11-21T11:41:12.533Z",
  "text": "thank you!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": ":D no problem",
  "id": "5bf5445ef048fa1051fce5e4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-11-21T11:41:18.809Z",
  "text": ":D no problem",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "Hello again, for some reason i can&#39;t use np.nonzero in a gufunc:<pre><code>TypingError: Failed in nopython mode pipeline (step: nopython frontend)\nInvalid <span class=\"operator\"><span class=\"keyword\">use</span> <span class=\"keyword\">of</span> <span class=\"keyword\">Function</span>(&lt;<span class=\"keyword\">function</span> nonzero <span class=\"keyword\">at</span> <span class=\"number\">0x7fcbe821ea60</span>&gt;) <span class=\"keyword\">with</span> argument(s) <span class=\"keyword\">of</span> <span class=\"keyword\">type</span>(s): (<span class=\"keyword\">list</span>(int64))\n * parameterized\n<span class=\"keyword\">In</span> definition <span class=\"number\">0</span>:\n    All templates rejected\nThis <span class=\"keyword\">error</span> <span class=\"keyword\">is</span> usually caused <span class=\"keyword\">by</span> <span class=\"keyword\">passing</span> an argument <span class=\"keyword\">of</span> a <span class=\"keyword\">type</span> that <span class=\"keyword\">is</span> unsupported <span class=\"keyword\">by</span> the named <span class=\"keyword\">function</span>.\n[<span class=\"number\">1</span>] During: resolving callee <span class=\"keyword\">type</span>: <span class=\"keyword\">Function</span>(&lt;<span class=\"keyword\">function</span> nonzero <span class=\"keyword\">at</span> <span class=\"number\">0x7fcbe821ea60</span>&gt;)\n[<span class=\"number\">2</span>] During: typing <span class=\"keyword\">of</span> <span class=\"keyword\">call</span> <span class=\"keyword\">at</span> blah.py (<span class=\"number\">50</span>)\n\n\n<span class=\"keyword\">File</span> <span class=\"string\">\"blah.py\"</span>, line <span class=\"number\">50</span>:\n<span class=\"keyword\">def</span> foo(<span class=\"keyword\">L</span>, R, O):\n    &lt;<span class=\"keyword\">source</span> elided&gt;\n            np.nonzero([<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>])</span></code></pre>",
  "id": "5bf6b0b3cfa682348d67f502",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2018-11-22T13:35:47.854Z",
  "text": "Hello again, for some reason i can't use np.nonzero in a gufunc:\n\n```\nTypingError: Failed in nopython mode pipeline (step: nopython frontend)\nInvalid use of Function(<function nonzero at 0x7fcbe821ea60>) with argument(s) of type(s): (list(int64))\n * parameterized\nIn definition 0:\n    All templates rejected\nThis error is usually caused by passing an argument of a type that is unsupported by the named function.\n[1] During: resolving callee type: Function(<function nonzero at 0x7fcbe821ea60>)\n[2] During: typing of call at blah.py (50)\n\n\nFile \"blah.py\", line 50:\ndef foo(L, R, O):\n    <source elided>\n            np.nonzero([0,1,2,3])\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"lpuglia\" class=\"mention\">@lpuglia</span> more likely it&#39;s that <code>np.nonzero</code> doesn&#39;t support list input",
  "id": "5bf6b3de958fc53895d0dfcb",
  "issues": [],
  "mentions": [
   {
    "screenName": "lpuglia",
    "userId": "5bc8acc0d73408ce4fabe62d",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 10,
  "sent": "2018-11-22T13:49:18.181Z",
  "text": "@lpuglia more likely it's that `np.nonzero` doesn't support list input",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "yeah, try: <code>np.nonzero(np.array([0,1,2,3]))</code>",
  "id": "5bf6b3f3c6cf4524d15cdc03",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-11-22T13:49:39.563Z",
  "text": "yeah, try: `np.nonzero(np.array([0,1,2,3]))`",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "the array comprehension pass will inline the const values into the array constructor so there&#39;ll be no list temporary",
  "id": "5bf6b409c6cf4524d15cdcce",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-11-22T13:50:01.364Z",
  "text": "the array comprehension pass will inline the const values into the array constructor so there'll be no list temporary",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "There&#39;s a giant list of what&#39;s supported generated directly from the code base here: <a href=\"http://numba.pydata.org/numba-doc/dev/developer/listings.html\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://numba.pydata.org/numba-doc/dev/developer/listings.html</a>, the listing for <code>np.nonzero</code> is here <a href=\"http://numba.pydata.org/numba-doc/dev/developer/autogen_lower_listing.html#numpy-core-fromnumeric-nonzero\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://numba.pydata.org/numba-doc/dev/developer/autogen_lower_listing.html#numpy-core-fromnumeric-nonzero</a> and you&#39;ll note it only has support for the <code>types.Array</code> type",
  "id": "5bf6b496f048fa10510647c4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-11-22T13:52:22.295Z",
  "text": "There's a giant list of what's supported generated directly from the code base here: http://numba.pydata.org/numba-doc/dev/developer/listings.html, the listing for `np.nonzero` is here http://numba.pydata.org/numba-doc/dev/developer/autogen_lower_listing.html#numpy-core-fromnumeric-nonzero and you'll note it only has support for the `types.Array` type",
  "unread": false,
  "urls": [
   {
    "url": "http://numba.pydata.org/numba-doc/dev/developer/listings.html"
   },
   {
    "url": "http://numba.pydata.org/numba-doc/dev/developer/autogen_lower_listing.html#numpy-core-fromnumeric-nonzero"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "ok, I have a different problem (i was trying to minimize the example but the problem is different:<pre><code>tmp = O[i-<span class=\"number\">1</span>:i+<span class=\"number\">2</span>,j-<span class=\"number\">1</span>:j+<span class=\"number\">2</span>]\ntmp = np.nonzero(np.<span class=\"built_in\">array</span>(tmp))</code></pre>",
  "id": "5bf6b6e8baf43f2b9b57ded8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-11-22T14:02:16.060Z",
  "text": "ok, I have a different problem (i was trying to minimize the example but the problem is different:\n```\ntmp = O[i-1:i+2,j-1:j+2]\ntmp = np.nonzero(np.array(tmp))\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "this is the error<pre><code>TypingError: <span class=\"function\"><span class=\"title\">array</span><span class=\"params\">(uint32, <span class=\"number\">2</span>d, A)</span></span> not allowed <span class=\"keyword\">in</span> <span class=\"tag\">a</span> homogeneous sequence</code></pre>",
  "id": "5bf6b733cfa682348d68216f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-11-22T14:03:31.186Z",
  "text": "this is the error\n\n```\nTypingError: array(uint32, 2d, A) not allowed in a homogeneous sequence\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"lpuglia\" class=\"mention\">@lpuglia</span> errr, what&#39;s  O",
  "id": "5bf6bb65f59704348ee7db4d",
  "issues": [],
  "mentions": [
   {
    "screenName": "lpuglia",
    "userId": "5bc8acc0d73408ce4fabe62d",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 12,
  "sent": "2018-11-22T14:21:25.698Z",
  "text": "@lpuglia errr, what's  O",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "is that some uint32 array?",
  "id": "5bf6bb7bbaf43f2b9b57fd15",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-11-22T14:21:47.368Z",
  "text": "is that some uint32 array?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "yes, matrix",
  "id": "5bf6bb80c6cf4524d15d11ea",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-11-22T14:21:52.957Z",
  "text": "yes, matrix",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-11-22T14:22:13.523Z",
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "<code>uint32[:,:]</code>",
  "id": "5bf6bb8bf048fa10510678a5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-11-22T14:22:03.606Z",
  "text": "`uint32[:,:]`",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "editedAt": "2018-11-22T14:23:25.674Z",
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "i want to search for the median in a 3x3 window excluding the zeros",
  "id": "5bf6bbd2ed6bcf1ef8425719",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-11-22T14:23:14.794Z",
  "text": "i want to search for the median in a 3x3 window excluding the zeros",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<pre><code><span class=\"keyword\">from</span> numba <span class=\"keyword\">import</span> njit\n<span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np\n\n<span class=\"decorator\">@njit</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">(O)</span>:</span>\n    i = j = <span class=\"number\">2</span>\n    tmp = O[i-<span class=\"number\">1</span>:i+<span class=\"number\">2</span>,j-<span class=\"number\">1</span>:j+<span class=\"number\">2</span>]\n    tmp = np.nonzero(tmp)\n\nx = np.arange(<span class=\"number\">20</span>, dtype=np.uint32).reshape(<span class=\"number\">4</span>, <span class=\"number\">5</span>)\nfoo(x)</code></pre>",
  "id": "5bf6bc08e25cc27405276c6d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-11-22T14:24:08.621Z",
  "text": "```\nfrom numba import njit\nimport numpy as np\n\n@njit\ndef foo(O):\n    i = j = 2\n    tmp = O[i-1:i+2,j-1:j+2]\n    tmp = np.nonzero(tmp)\n\nx = np.arange(20, dtype=np.uint32).reshape(4, 5)\nfoo(x)\n```\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "seems to work ?",
  "id": "5bf6bc0d6621313894ff13b9",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-11-22T14:24:13.975Z",
  "text": "seems to work ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "oh, you have an array constructed from an array, is that the problem ?",
  "id": "5bf6bc21ed6bcf1ef84258bf",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-11-22T14:24:33.344Z",
  "text": "oh, you have an array constructed from an array, is that the problem ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<code>np.array(tmp)</code>, but <code>tmp</code> is already some sliced out bit of array",
  "id": "5bf6bc32c6cf4524d15d18c6",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-11-22T14:24:50.529Z",
  "text": "`np.array(tmp)`, but `tmp` is already some sliced out bit of array",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "yes, i tried without <code>np.array</code> but i get error anyway",
  "id": "5bf6bc5ff59704348ee7e0ac",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-11-22T14:25:35.060Z",
  "text": "yes, i tried without `np.array` but i get error anyway",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "mmmm",
  "id": "5bf6bd39e25cc274052776fe",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-11-22T14:29:13.272Z",
  "text": "mmmm",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "ok i got this",
  "id": "5bf6bda8c6cf4524d15d24a4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-11-22T14:31:04.295Z",
  "text": "ok i got this",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "note to myself:<br>if you are gonna use the same variable for two different things prepare for trouble",
  "id": "5bf6bdcaa115c91ef77610f7",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-11-22T14:31:38.517Z",
  "text": "note to myself:\nif you are gonna use the same variable for two different things prepare for trouble",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "<p>this does not compile:</p><pre><code>tmp = O[i-<span class=\"number\">1</span>:i+<span class=\"number\">2</span>,j-<span class=\"number\">1</span>:j+<span class=\"number\">2</span>]\ntmp = np.<span class=\"function\"><span class=\"title\">nonzero</span><span class=\"params\">(tmp)</span></span>\nO[<span class=\"tag\">i</span>,j] = np.<span class=\"function\"><span class=\"title\">median</span><span class=\"params\">(tmp[<span class=\"number\">0</span>])</span></span></code></pre><p>this compiles:</p><pre><code>tmp = O[i-<span class=\"number\">1</span>:i+<span class=\"number\">2</span>,j-<span class=\"number\">1</span>:j+<span class=\"number\">2</span>]\nasd = np.<span class=\"function\"><span class=\"title\">nonzero</span><span class=\"params\">(tmp)</span></span>\nO[<span class=\"tag\">i</span>,j] = np.<span class=\"function\"><span class=\"title\">median</span><span class=\"params\">(asd[<span class=\"number\">0</span>])</span></span></code></pre>",
  "id": "5bf6be09f59704348ee7ed11",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-11-22T14:32:41.967Z",
  "text": "this does not compile:\n```\ntmp = O[i-1:i+2,j-1:j+2]\ntmp = np.nonzero(tmp)\nO[i,j] = np.median(tmp[0])\n```\nthis compiles:\n```\ntmp = O[i-1:i+2,j-1:j+2]\nasd = np.nonzero(tmp)\nO[i,j] = np.median(asd[0])\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "hmmm, do you have a full example of the thing that doesn&#39;t compile please?",
  "id": "5bf6c0f4fa7bbb3fe0e89009",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-11-22T14:45:08.883Z",
  "text": "hmmm, do you have a full example of the thing that doesn't compile please?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-11-22T14:48:14.573Z",
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "as soon as i will have a minimal example i will post it",
  "id": "5bf6c1aa6621313894ff3f29",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-11-22T14:48:10.513Z",
  "text": "as soon as i will have a minimal example i will post it",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "great, thanks, things that don&#39;t compile because of obfuscation are annoying so we&#39;d like to hear about them :)",
  "id": "5bf6c298f59704348ee80b11",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-11-22T14:52:08.430Z",
  "text": "great, thanks, things that don't compile because of obfuscation are annoying so we'd like to hear about them :)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "Also, you just prompted my brain to create a better message about what is / is not supported (because clearly the compiler knows!).",
  "id": "5bf6c301f59704348ee80e6b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-11-22T14:53:53.234Z",
  "text": "Also, you just prompted my brain to create a better message about what is / is not supported (because clearly the compiler knows!).",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "this:",
  "id": "5bf6c30bc6cf4524d15d4796",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-11-22T14:54:03.679Z",
  "text": "this:",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<pre><code><span class=\"keyword\">from</span> numba <span class=\"keyword\">import</span> njit\n<span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np\n\n<span class=\"decorator\">@njit</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">()</span>:</span>\n    tmp = np.nonzero([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>])\n\nfoo()</code></pre>now does:<pre><code>numba.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)\nInvalid <span class=\"operator\"><span class=\"keyword\">use</span> <span class=\"keyword\">of</span> <span class=\"keyword\">Function</span>(&lt;<span class=\"keyword\">function</span> nonzero <span class=\"keyword\">at</span> <span class=\"number\">0x7f99ceb94ea0</span>&gt;) <span class=\"keyword\">with</span> argument(s) <span class=\"keyword\">of</span> <span class=\"keyword\">type</span>(s): (<span class=\"keyword\">list</span>(int64))\n * parameterized\n<span class=\"keyword\">In</span> definition <span class=\"number\">0</span>:\n    All templates rejected <span class=\"keyword\">with</span> literals.\n<span class=\"keyword\">In</span> definition <span class=\"number\">1</span>:\n    All templates rejected <span class=\"keyword\">without</span> literals.\nThis <span class=\"keyword\">error</span> <span class=\"keyword\">is</span> usually caused <span class=\"keyword\">by</span> <span class=\"keyword\">passing</span> an argument <span class=\"keyword\">of</span> a <span class=\"keyword\">type</span> that <span class=\"keyword\">is</span> unsupported <span class=\"keyword\">by</span> the named <span class=\"keyword\">function</span>.\n\nHINT: NumPy <span class=\"keyword\">function</span> <span class=\"string\">'numpy.nonzero'</span> <span class=\"keyword\">is</span> implemented <span class=\"keyword\">for</span> the <span class=\"keyword\">following</span> types:\n * numpy.nonzero(<span class=\"built_in\">Array</span>)\n\n\n[<span class=\"number\">1</span>] During: resolving callee <span class=\"keyword\">type</span>: <span class=\"keyword\">Function</span>(&lt;<span class=\"keyword\">function</span> nonzero <span class=\"keyword\">at</span> <span class=\"number\">0x7f99ceb94ea0</span>&gt;)\n[<span class=\"number\">2</span>] During: typing <span class=\"keyword\">of</span> <span class=\"keyword\">call</span> <span class=\"keyword\">at</span> gi34.py (<span class=\"number\">6</span>)\n\n\n<span class=\"keyword\">File</span> <span class=\"string\">\"gi34.py\"</span>, line <span class=\"number\">6</span>:\n<span class=\"keyword\">def</span> foo():\n    tmp = np.nonzero([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>])</span></code></pre>",
  "id": "5bf6c3276621313894ff488a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-11-22T14:54:31.676Z",
  "text": "```\nfrom numba import njit\nimport numpy as np\n\n@njit\ndef foo():\n    tmp = np.nonzero([1,2,3])\n\nfoo()\n```\nnow does:\n```\nnumba.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)\nInvalid use of Function(<function nonzero at 0x7f99ceb94ea0>) with argument(s) of type(s): (list(int64))\n * parameterized\nIn definition 0:\n    All templates rejected with literals.\nIn definition 1:\n    All templates rejected without literals.\nThis error is usually caused by passing an argument of a type that is unsupported by the named function.\n\nHINT: NumPy function 'numpy.nonzero' is implemented for the following types:\n * numpy.nonzero(Array)\n\n\n[1] During: resolving callee type: Function(<function nonzero at 0x7f99ceb94ea0>)\n[2] During: typing of call at gi34.py (6)\n\n\nFile \"gi34.py\", line 6:\ndef foo():\n    tmp = np.nonzero([1,2,3])\n ```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "Note the new <code>HINT</code> and then the known implementation being listed",
  "id": "5bf6c340cfa682348d687656",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-11-22T14:54:56.064Z",
  "text": "Note the new `HINT` and then the known implementation being listed",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "Would that help in these situations?",
  "id": "5bf6c359f59704348ee8109e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-11-22T14:55:21.175Z",
  "text": "Would that help in these situations?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "even better would be to print what it is required besides what are you providing",
  "id": "5bf6c3daed6bcf1ef842915e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-11-22T14:57:30.960Z",
  "text": "even better would be to print what it is required besides what are you providing",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "hmm, I&#39;m not sure what you mean? In this example what is it you&#39;d like  Numba to tell you ?",
  "id": "5bf6c409e25cc2740527a373",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-11-22T14:58:17.414Z",
  "text": "hmm, I'm not sure what you mean? In this example what is it you'd like  Numba to tell you ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "like this:<pre><code><span class=\"string\">HINT:</span> NumPy function <span class=\"string\">'numpy.nonzero'</span> is implemented <span class=\"keyword\">for</span> the following <span class=\"string\">types:</span>\n * numpy.nonzero(Array) (user provided <span class=\"string\">'list'</span>)</code></pre>",
  "id": "5bf6c415f59704348ee8146d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-11-22T14:58:29.710Z",
  "text": "like this:\n\n```\nHINT: NumPy function 'numpy.nonzero' is implemented for the following types:\n * numpy.nonzero(Array) (user provided 'list')\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "ah ok, that&#39;s higher up already, but lacking clarity perhaps",
  "id": "5bf6c427baf43f2b9b5835ef",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-11-22T14:58:47.932Z",
  "text": "ah ok, that's higher up already, but lacking clarity perhaps",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<pre><code>Invalid use of <span class=\"function\"><span class=\"title\">Function</span><span class=\"params\">(&lt;function nonzero at <span class=\"number\">0</span>x7f99ceb94ea0&gt;)</span></span> with <span class=\"function\"><span class=\"title\">argument</span><span class=\"params\">(s)</span></span> of <span class=\"function\"><span class=\"title\">type</span><span class=\"params\">(s)</span></span>: (<span class=\"function\"><span class=\"title\">list</span><span class=\"params\">(int64)</span></span>)</code></pre>",
  "id": "5bf6c437baf43f2b9b58360d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-11-22T14:59:03.945Z",
  "text": "```\nInvalid use of Function(<function nonzero at 0x7f99ceb94ea0>) with argument(s) of type(s): (list(int64))\n```\n\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-11-22T15:00:58.356Z",
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "i see your point, but IMHO i would put <code>provided argument</code> vs <code>required argument</code> on the SAME line",
  "id": "5bf6c48587c4b86bccfd8257",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-11-22T15:00:21.558Z",
  "text": "i see your point, but IMHO i would put `provided argument` vs `required argument` on the SAME line",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "it would make it more intuitive, especially for new users",
  "id": "5bf6c494ed6bcf1ef842964c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-11-22T15:00:36.373Z",
  "text": "it would make it more intuitive, especially for new users",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "I agree, but there&#39;s some functions that are implemented for load of types, so how about:",
  "id": "5bf6c4b3cfa682348d688478",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-11-22T15:01:07.765Z",
  "text": "I agree, but there's some functions that are implemented for load of types, so how about:",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<pre><code>HINT: NumPy <span class=\"function\"><span class=\"keyword\">function</span> '<span class=\"title\">numpy</span>.<span class=\"title\">nonzero</span>' <span class=\"title\">is</span> <span class=\"title\">implemented</span> <span class=\"title\">for</span> <span class=\"title\">the</span> <span class=\"title\">following</span> <span class=\"title\">types</span> <span class=\"params\">(user provided: list(int64)</span>):</span>\n * numpy.nonzero(<span class=\"keyword\">Array</span>)</code></pre>",
  "id": "5bf6c4c0ced7003fe16b537f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-11-22T15:01:20.199Z",
  "text": "```\nHINT: NumPy function 'numpy.nonzero' is implemented for the following types (user provided: list(int64)):\n * numpy.nonzero(Array)\n```\n\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "that is sooooooo much better :)",
  "id": "5bf6c4cd87c4b86bccfd83df",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-11-22T15:01:33.566Z",
  "text": "that is sooooooo much better :)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "like, if you pass a list to <code>arange</code>:",
  "id": "5bf6c4ebd24f9324d2377b76",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-11-22T15:02:03.834Z",
  "text": "like, if you pass a list to `arange`:",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<pre><code>HINT: NumPy <span class=\"function\"><span class=\"keyword\">function</span></span> <span class=\"string\">'numpy.arange'</span> is implemented for the following types (user provided list(int64)):\n * numpy.arange(<span class=\"keyword\">Number</span>)\n * numpy.arange(<span class=\"keyword\">Number</span>, <span class=\"keyword\">Number</span>)\n * numpy.arange(<span class=\"keyword\">Number</span>, <span class=\"keyword\">Number</span>, <span class=\"keyword\">Number</span>)\n * numpy.arange(<span class=\"keyword\">Number</span>, <span class=\"keyword\">Number</span>, <span class=\"keyword\">Number</span>, DTypeSpec)\n\n\n[<span class=\"number\">1</span>] During: resolving callee <span class=\"keyword\">type</span>: <span class=\"function\"><span class=\"keyword\">Function</span><span class=\"params\">(&lt;built-in function arange&gt;)</span></span>\n[<span class=\"number\">2</span>] During: typing of <span class=\"keyword\">call</span> at gi34.py (<span class=\"number\">6</span>)\n\n\n<span class=\"keyword\">File</span> <span class=\"string\">\"gi34.py\"</span>, line <span class=\"number\">6</span>:\ndef foo(O):\n    tmp = np.arange([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>])</code></pre>",
  "id": "5bf6c4efb6c07010526e20cb",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-11-22T15:02:07.952Z",
  "text": "```\nHINT: NumPy function 'numpy.arange' is implemented for the following types (user provided list(int64)):\n * numpy.arange(Number)\n * numpy.arange(Number, Number)\n * numpy.arange(Number, Number, Number)\n * numpy.arange(Number, Number, Number, DTypeSpec)\n\n\n[1] During: resolving callee type: Function(<built-in function arange>)\n[2] During: typing of call at gi34.py (6)\n\n\nFile \"gi34.py\", line 6:\ndef foo(O):\n    tmp = np.arange([1,2,3])\n```\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "brilliant",
  "id": "5bf6c501f048fa105106bbb2",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-11-22T15:02:25.316Z",
  "text": "brilliant",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "great, thanks for the feed back",
  "id": "5bf6c509b6c07010526e20f1",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-11-22T15:02:33.809Z",
  "text": "great, thanks for the feed back",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "I&#39;ll go mangle it to handle bound functions too e.g. <code>ndarray.reshape</code> and get a PR in.",
  "id": "5bf6c525e25cc2740527a80a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-11-22T15:03:01.208Z",
  "text": "I'll go mangle it to handle bound functions too e.g. `ndarray.reshape` and get a PR in.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "thank you for the compiler! :)",
  "id": "5bf6c53887c4b86bccfd8674",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-11-22T15:03:20.917Z",
  "text": "thank you for the compiler! :)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": ":)",
  "id": "5bf6c54bbaf43f2b9b583c09",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2018-11-22T15:03:39.890Z",
  "text": ":)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "can you give me a hand with this stencil:<pre><code><span class=\"decorator\">@stencil(neighborhood=((-1, 1), (-1, 1)), )</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">interpolate</span><span class=\"params\">(L)</span>:</span>\n    <span class=\"keyword\">return</span> np.median(L[-<span class=\"number\">1</span>:<span class=\"number\">2</span>, -<span class=\"number\">1</span>:<span class=\"number\">2</span>])</code></pre>",
  "id": "5bf6d0936621313894ffa228",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-11-22T15:51:47.617Z",
  "text": "can you give me a hand with this stencil:\n```\n@stencil(neighborhood=((-1, 1), (-1, 1)), )\ndef interpolate(L):\n    return np.median(L[-1:2, -1:2])\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-11-22T15:56:54.337Z",
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "it should work, but when i call it with:<pre><code>    disp_map = np.<span class=\"function\"><span class=\"title\">zeros_like</span><span class=\"params\">(wta_l)</span></span>.<span class=\"function\"><span class=\"title\">astype</span><span class=\"params\">(np.int32)</span></span>\n    disp_map = <span class=\"function\"><span class=\"title\">interpolate</span><span class=\"params\">(wta_l.astype(np.int32)</span></span>)</code></pre>",
  "id": "5bf6d0db958fc53895d1a164",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-11-22T15:52:59.366Z",
  "text": "it should work, but when i call it with:\n```\n    disp_map = np.zeros_like(wta_l).astype(np.int32)\n    disp_map = interpolate(wta_l.astype(np.int32))\n```",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "i get:<pre><code><span class=\"attribute\">TypingError</span>: Failed <span class=\"keyword\">in</span> nopython mode pipeline (<span class=\"attribute\">step</span>: nopython frontend)\nInvalid use <span class=\"keyword\">of</span> Function(&lt;built-<span class=\"keyword\">in</span> <span class=\"keyword\">function</span> add&gt;) <span class=\"keyword\">with</span> argument(s) <span class=\"keyword\">of</span> type(s): (slice&lt;<span class=\"attribute\">a</span>:b&gt;, int64)\nKnown <span class=\"attribute\">signatures</span>:\n * <span class=\"function\"><span class=\"params\">(int64, int64)</span> -&gt;</span> int64\n * <span class=\"function\"><span class=\"params\">(int64, uint64)</span> -&gt;</span> int64\n * <span class=\"function\"><span class=\"params\">(uint64, int64)</span> -&gt;</span> int64\n * <span class=\"function\"><span class=\"params\">(uint64, uint64)</span> -&gt;</span> uint64\n...</code></pre>",
  "id": "5bf6d0fdced7003fe16b9f77",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-11-22T15:53:33.869Z",
  "text": "i get:\n```\nTypingError: Failed in nopython mode pipeline (step: nopython frontend)\nInvalid use of Function(<built-in function add>) with argument(s) of type(s): (slice<a:b>, int64)\nKnown signatures:\n * (int64, int64) -> int64\n * (int64, uint64) -> int64\n * (uint64, int64) -> int64\n * (uint64, uint64) -> uint64\n...\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "what is <code>wta_l</code> like ?",
  "id": "5bf6d350ced7003fe16bafc2",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-11-22T16:03:28.038Z",
  "text": "what is `wta_l` like ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "not very important",
  "id": "5bf6d35887c4b86bccfde368",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-11-22T16:03:36.601Z",
  "text": "not very important",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "just tried with:",
  "id": "5bf6d35cb6c07010526e825c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-11-22T16:03:40.534Z",
  "text": "just tried with:",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-11-22T16:04:26.385Z",
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "<pre><code> x = np.<span class=\"function\"><span class=\"title\">arange</span><span class=\"params\">(<span class=\"number\">20</span>, dtype=np.uint32)</span></span>.<span class=\"function\"><span class=\"title\">reshape</span><span class=\"params\">(<span class=\"number\">4</span>, <span class=\"number\">5</span>)</span></span>\n <span class=\"function\"><span class=\"title\">interpolate</span><span class=\"params\">(x)</span></span></code></pre>",
  "id": "5bf6d368fa7bbb3fe0e90a0e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-11-22T16:03:52.197Z",
  "text": "```\n x = np.arange(20, dtype=np.uint32).reshape(4, 5)\n interpolate(x) \n```",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "same problem",
  "id": "5bf6d37787c4b86bccfde3b0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-11-22T16:04:07.543Z",
  "text": "same problem",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "even<pre><code>interpolate<span class=\"list\">(<span class=\"keyword\">x</span>.astype<span class=\"list\">(<span class=\"string\">\"int64\"</span>)</span>)</span></code></pre>",
  "id": "5bf6d3a8cfa682348d68ed3d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-11-22T16:04:56.348Z",
  "text": "even\n```\ninterpolate(x.astype(\"int64\")) \n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "where the <code>&lt;built-in function add&gt;</code> is used in the median?",
  "id": "5bf6d3cca115c91ef776a630",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-11-22T16:05:32.637Z",
  "text": "where the `<built-in function add>` is used in the median?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "I don&#39;t think its the kernel",
  "id": "5bf6d41bfa7bbb3fe0e90f0d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-11-22T16:06:51.746Z",
  "text": "I don't think its the kernel",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "more likely it&#39;s the huge amount of generated code around the kernel",
  "id": "5bf6d42c6621313894ffb510",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-11-22T16:07:08.319Z",
  "text": "more likely it's the huge amount of generated code around the kernel",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "just taking a look",
  "id": "5bf6d42fe25cc274052810ec",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-11-22T16:07:11.909Z",
  "text": "just taking a look",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-11-22T16:07:30.561Z",
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "full minimal example:<pre><code><span class=\"keyword\">from</span> numba <span class=\"keyword\">import</span> stencil\n<span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np\n\n<span class=\"decorator\">@stencil(neighborhood=((-1, 1), (-1, 1)), )</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">interpolate</span><span class=\"params\">(L)</span>:</span>\n    <span class=\"keyword\">return</span> np.median(L[-<span class=\"number\">1</span>:<span class=\"number\">2</span>, -<span class=\"number\">1</span>:<span class=\"number\">2</span>])\n\nx = np.arange(<span class=\"number\">20</span>, dtype=np.uint32).reshape(<span class=\"number\">4</span>, <span class=\"number\">5</span>)\ninterpolate(x)</code></pre>",
  "id": "5bf6d4306621313894ffb594",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-11-22T16:07:12.911Z",
  "text": "full minimal example:\n```\nfrom numba import stencil\nimport numpy as np\n\n@stencil(neighborhood=((-1, 1), (-1, 1)), )\ndef interpolate(L):\n    return np.median(L[-1:2, -1:2])\n\nx = np.arange(20, dtype=np.uint32).reshape(4, 5)\ninterpolate(x) \n```",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "essentially a basic median filter",
  "id": "5bf6d484ced7003fe16bb70f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-11-22T16:08:36.271Z",
  "text": "essentially a basic median filter",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "think its a bug in code gen",
  "id": "5bf6d6ed87c4b86bccfdfea0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-11-22T16:18:53.349Z",
  "text": "think its a bug in code gen",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "looks like there&#39;s a call to slice which is then added to an index value",
  "id": "5bf6d73ffa7bbb3fe0e925b5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-11-22T16:20:15.836Z",
  "text": "looks like there's a call to slice which is then added to an index value",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "i see",
  "id": "5bf6d752c6cf4524d15dd549",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-11-22T16:20:34.880Z",
  "text": "i see",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-11-22T16:23:29.060Z",
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "i think there should be a test case in your continuous integration system (jenkins?) with this script, I know that sorting is not the best in numba but it is an emblematic case",
  "id": "5bf6d7c1d24f9324d23802ec",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-11-22T16:22:25.597Z",
  "text": "i think there should be a test case in your continuous integration system (jenkins?) with this script, I know that sorting is not the best in numba but it is an emblematic case",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "opening a bug ticket now",
  "id": "5bf6d7c997a8982b9a498b14",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-11-22T16:22:33.405Z",
  "text": "opening a bug ticket now",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "yeah, please open a ticket",
  "id": "5bf6d808a115c91ef776c5a6",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-11-22T16:23:36.456Z",
  "text": "yeah, please open a ticket",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "was just checking the intermediate representation",
  "id": "5bf6d812e25cc27405282a0e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-11-22T16:23:46.698Z",
  "text": "was just checking the intermediate representation",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "it&#39;s definitely a bug",
  "id": "5bf6d822ced7003fe16bcc93",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-11-22T16:24:02.850Z",
  "text": "it's definitely a bug",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "i will search for work around then",
  "id": "5bf6d856b6c07010526ea453",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-11-22T16:24:54.263Z",
  "text": "i will search for work around then",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "<a target=\"_blank\" data-link-type=\"issue\" data-issue=\"3528\" href=\"https://github.com/numba/numba/issues/3528\" data-provider=\"github\" data-issue-repo=\"numba/numba\" class=\"issue\">numba/numba#3528</a>",
  "id": "5bf6d8e287c4b86bccfe0eb7",
  "issues": [
   {
    "number": "3528",
    "repo": "numba/numba"
   }
  ],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-11-22T16:27:14.799Z",
  "text": "https://github.com/numba/numba/issues/3528",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "the work around is hideous",
  "id": "5bf6d8e4ed6bcf1ef8431ddb",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-11-22T16:27:16.450Z",
  "text": "the work around is hideous",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "but it&#39;s to basically buffer that slice into a tmp array via a loop",
  "id": "5bf6d8f287c4b86bccfe0edc",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-11-22T16:27:30.897Z",
  "text": "but it's to basically buffer that slice into a tmp array via a loop",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "thanks for the ticket",
  "id": "5bf6d8feb6c07010526ea878",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-11-22T16:27:42.843Z",
  "text": "thanks for the ticket",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-11-22T16:28:26.379Z",
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "i will wrote a jitted function while i wait",
  "id": "5bf6d924958fc53895d1d675",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-11-22T16:28:20.691Z",
  "text": "i will wrote a jitted function while i wait",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<pre><code>from numba import stencil\nimport numpy as np\n\n\n@<span class=\"function\"><span class=\"title\">stencil</span><span class=\"params\">(neighborhood=((-<span class=\"number\">1</span>, <span class=\"number\">1</span>)</span></span>, (-<span class=\"number\">1</span>, <span class=\"number\">1</span>)), )\ndef <span class=\"function\"><span class=\"title\">interpolate</span><span class=\"params\">(L)</span></span>:\n    tmp = np.<span class=\"function\"><span class=\"title\">empty</span><span class=\"params\">((<span class=\"number\">3</span>, <span class=\"number\">3</span>)</span></span>)\n    <span class=\"keyword\">for</span> <span class=\"tag\">i</span> <span class=\"keyword\">in</span> <span class=\"function\"><span class=\"title\">range</span><span class=\"params\">(-<span class=\"number\">1</span>, <span class=\"number\">2</span>)</span></span>:\n        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"function\"><span class=\"title\">range</span><span class=\"params\">(-<span class=\"number\">1</span>, <span class=\"number\">2</span>)</span></span>:\n            tmp[<span class=\"tag\">i</span>, j] = L[<span class=\"tag\">i</span>, j]\n    return np.<span class=\"function\"><span class=\"title\">median</span><span class=\"params\">(tmp)</span></span>\n\nx = np.<span class=\"function\"><span class=\"title\">arange</span><span class=\"params\">(<span class=\"number\">20</span>, dtype=np.float64)</span></span>.<span class=\"function\"><span class=\"title\">reshape</span><span class=\"params\">(<span class=\"number\">4</span>, <span class=\"number\">5</span>)</span></span>\n\ndisp_map = <span class=\"function\"><span class=\"title\">interpolate</span><span class=\"params\">(x)</span></span></code></pre>",
  "id": "5bf6d95abaf43f2b9b58caf3",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-11-22T16:29:14.462Z",
  "text": "```\nfrom numba import stencil\nimport numpy as np\n\n\n@stencil(neighborhood=((-1, 1), (-1, 1)), )\ndef interpolate(L):\n    tmp = np.empty((3, 3))\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            tmp[i, j] = L[i, j]\n    return np.median(tmp)\n\nx = np.arange(20, dtype=np.float64).reshape(4, 5)\n\ndisp_map = interpolate(x)\n```\n\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "^ that&#39;ll work, because it avoids the thing that&#39;s broken",
  "id": "5bf6d966f59704348ee8a971",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-11-22T16:29:26.018Z",
  "text": "^ that'll work, because it avoids the thing that's broken",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "but is horribly inefficient",
  "id": "5bf6d96c87c4b86bccfe125a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-11-22T16:29:32.370Z",
  "text": "but is horribly inefficient",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "XD",
  "id": "5bf6d979d24f9324d2381184",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-11-22T16:29:45.872Z",
  "text": "XD",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/NanduTej",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/27914041?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/27914041?v=4&s=60",
   "displayName": "Teja Nanduri",
   "gv": "4",
   "id": "5bf71488d73408ce4fafd246",
   "url": "/NanduTej",
   "username": "NanduTej",
   "v": 5
  },
  "html": "Hello. I was trying to contribute to <a target=\"_blank\" data-link-type=\"issue\" data-issue=\"3457\" href=\"https://github.com/numba/numba/issues/3457\" data-provider=\"github\" data-issue-repo=\"numba/numba\" class=\"issue\">numba/numba#3457</a>. I raised a PR for this- <a target=\"_blank\" data-link-type=\"pr\" data-issue=\"3519\" href=\"https://github.com/numba/numba/pull/3519\" data-provider=\"github\" data-issue-repo=\"numba/numba\" class=\"pr\">numba/numba#3519</a>. I got stuck at one point with an error- TypeError: cannot index array(int64, 0d, C) with 1 indices: [int64], pointing to the line in code where I am assigning a value to a numpy zero array. Can someone help me with a work around?",
  "id": "5bf7154166213138940167e0",
  "issues": [
   {
    "number": "3457",
    "repo": "numba/numba"
   },
   {
    "number": "3519",
    "repo": "numba/numba"
   }
  ],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-11-22T20:44:49.991Z",
  "text": "Hello. I was trying to contribute to https://github.com/numba/numba/issues/3457. I raised a PR for this- https://github.com/numba/numba/pull/3519. I got stuck at one point with an error- TypeError: cannot index array(int64, 0d, C) with 1 indices: [int64], pointing to the line in code where I am assigning a value to a numpy zero array. Can someone help me with a work around?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/NanduTej",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/27914041?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/27914041?v=4&s=60",
   "displayName": "Teja Nanduri",
   "gv": "4",
   "id": "5bf71488d73408ce4fafd246",
   "url": "/NanduTej",
   "username": "NanduTej",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span> is familiar with my PR.",
  "id": "5bf71551f59704348eea3f76",
  "issues": [],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 18,
  "sent": "2018-11-22T20:45:05.618Z",
  "text": "@stuartarchibald is familiar with my PR.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-11-22T22:32:00.212Z",
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"NanduTej\" class=\"mention\">@NanduTej</span> seems like your code won&#39;t work because you are indexing a 0d array which i don&#39;t think is supported.",
  "id": "5bf72defc6cf4524d1600600",
  "issues": [],
  "mentions": [
   {
    "screenName": "NanduTej",
    "userId": "5bf71488d73408ce4fafd246",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 18,
  "sent": "2018-11-22T22:30:07.278Z",
  "text": "@NanduTej seems like your code won't work because you are indexing a 0d array which i don't think is supported.",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "in fact, I don&#39;t think that even works in numpy",
  "id": "5bf72eb897a8982b9a4bbc51",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-11-22T22:33:28.614Z",
  "text": "in fact, I don't think that even works in numpy",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<pre><code>In [8]: np.array(3)[0]\n<span class=\"comment\">---------------------------------------------------------------------------</span>\nIndexError                                Traceback (most recent <span class=\"operator\"><span class=\"keyword\">call</span> <span class=\"keyword\">last</span>)\n&lt;ipython-<span class=\"keyword\">input</span>-<span class=\"number\">8</span>-fbff3cb69a43&gt; <span class=\"keyword\">in</span> &lt;<span class=\"keyword\">module</span>&gt;()\n<span class=\"comment\">----&gt; 1 np.array(3)[0]</span>\n\nIndexError: too many <span class=\"keyword\">indices</span> <span class=\"keyword\">for</span> <span class=\"built_in\">array</span></span></code></pre>",
  "id": "5bf72ec3fa7bbb3fe0eb6070",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-11-22T22:33:39.969Z",
  "text": "```\nIn [8]: np.array(3)[0]\n---------------------------------------------------------------------------\nIndexError                                Traceback (most recent call last)\n<ipython-input-8-fbff3cb69a43> in <module>()\n----> 1 np.array(3)[0]\n\nIndexError: too many indices for array\n```\n\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "perhaps focus on the 1D and 2D tests?",
  "id": "5bf730da958fc53895d40648",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-11-22T22:42:34.552Z",
  "text": "perhaps focus on the 1D and 2D tests?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/NanduTej",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/27914041?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/27914041?v=4&s=60",
   "displayName": "Teja Nanduri",
   "gv": "4",
   "id": "5bf71488d73408ce4fafd246",
   "url": "/NanduTej",
   "username": "NanduTej",
   "v": 5
  },
  "html": "Okay. Got it.",
  "id": "5bf775becfa682348d6ce02d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-11-23T03:36:30.933Z",
  "text": "Okay. Got it.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/greenisms",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/45314909?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/45314909?v=4&s=60",
   "displayName": "greenisms",
   "gv": "4",
   "id": "5bf97cf4d73408ce4faff786",
   "url": "/greenisms",
   "username": "greenisms",
   "v": 1
  },
  "html": "Hello. when I using parallel to speed up my code, this strange problem comes out:",
  "id": "5bf97d5be25cc274053856b3",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-11-24T16:33:31.482Z",
  "text": "Hello. when I using parallel to speed up my code, this strange problem comes out:",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/greenisms",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/45314909?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/45314909?v=4&s=60",
   "displayName": "greenisms",
   "gv": "4",
   "id": "5bf97cf4d73408ce4faff786",
   "url": "/greenisms",
   "username": "greenisms",
   "v": 1
  },
  "html": "the code is <pre><code class=\"python\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np\n<span class=\"keyword\">from</span> numba <span class=\"keyword\">import</span> njit\n\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">()</span>:</span>\n    a = np.zeros(<span class=\"number\">10</span>)\n    a[<span class=\"number\">1</span>:<span class=\"number\">8</span>] = np.arange(<span class=\"number\">0</span>,<span class=\"number\">7</span>)\n    print(<span class=\"string\">'a[3]:'</span>, a[<span class=\"number\">3</span>])\n    print(<span class=\"string\">'a[3]:'</span>, a[<span class=\"number\">3</span>])\n    <span class=\"keyword\">return</span> a\n\nf = njit(foo)\n\nfnjit = njit(parallel=<span class=\"keyword\">True</span>)\nfn = fnjit(foo)</code></pre>",
  "id": "5bf97e8ee25cc27405385def",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-11-24T16:38:38.257Z",
  "text": "the code is \n```python\nimport numpy as np\nfrom numba import njit\n\ndef foo():\n    a = np.zeros(10)\n    a[1:8] = np.arange(0,7)\n    print('a[3]:', a[3])\n    print('a[3]:', a[3])\n    return a\n\nf = njit(foo)\n\nfnjit = njit(parallel=True)\nfn = fnjit(foo)\n\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/greenisms",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/45314909?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/45314909?v=4&s=60",
   "displayName": "greenisms",
   "gv": "4",
   "id": "5bf97cf4d73408ce4faff786",
   "url": "/greenisms",
   "username": "greenisms",
   "v": 1
  },
  "html": "the result is<pre><code class=\"python\">In [<span class=\"number\">36</span>]: f()\na[<span class=\"number\">3</span>]: <span class=\"number\">2.0</span>\na[<span class=\"number\">3</span>]: <span class=\"number\">2.0</span>\nOut[<span class=\"number\">36</span>]: array([<span class=\"number\">0.</span>, <span class=\"number\">0.</span>, <span class=\"number\">1.</span>, <span class=\"number\">2.</span>, <span class=\"number\">3.</span>, <span class=\"number\">4.</span>, <span class=\"number\">5.</span>, <span class=\"number\">6.</span>, <span class=\"number\">0.</span>, <span class=\"number\">0.</span>])\n\nIn [<span class=\"number\">37</span>]: fn()\na[<span class=\"number\">3</span>]: <span class=\"number\">0.0</span>\na[<span class=\"number\">3</span>]: <span class=\"number\">2.0</span>\nOut[<span class=\"number\">37</span>]: array([<span class=\"number\">0.</span>, <span class=\"number\">0.</span>, <span class=\"number\">1.</span>, <span class=\"number\">2.</span>, <span class=\"number\">3.</span>, <span class=\"number\">4.</span>, <span class=\"number\">5.</span>, <span class=\"number\">6.</span>, <span class=\"number\">0.</span>, <span class=\"number\">0.</span>])</code></pre>",
  "id": "5bf97ee3fa7bbb3fe0f97f89",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 21,
  "sent": "2018-11-24T16:40:03.136Z",
  "text": "the result is\n```python\nIn [36]: f()\na[3]: 2.0\na[3]: 2.0\nOut[36]: array([0., 0., 1., 2., 3., 4., 5., 6., 0., 0.])\n\nIn [37]: fn()\na[3]: 0.0\na[3]: 2.0\nOut[37]: array([0., 0., 1., 2., 3., 4., 5., 6., 0., 0.])\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/greenisms",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/45314909?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/45314909?v=4&s=60",
   "displayName": "greenisms",
   "gv": "4",
   "id": "5bf97cf4d73408ce4faff786",
   "url": "/greenisms",
   "username": "greenisms",
   "v": 1
  },
  "html": "a[3] should be equal to 2.0, but with keyword &#39;parallel&#39;, why the assignment not run immediately? see the print of a[3] for the first time , it shows 0.0 which is its initial value, the slicing line a[1:8] = np.arange(0,7) is not working",
  "id": "5bf98047ed6bcf1ef85377f1",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 22,
  "sent": "2018-11-24T16:45:59.618Z",
  "text": "a[3] should be equal to 2.0, but with keyword 'parallel', why the assignment not run immediately? see the print of a[3] for the first time , it shows 0.0 which is its initial value, the slicing line a[1:8] = np.arange(0,7) is not working",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/NanduTej",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/27914041?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/27914041?v=4&s=60",
   "displayName": "Teja Nanduri",
   "gv": "4",
   "id": "5bf71488d73408ce4fafd246",
   "url": "/NanduTej",
   "username": "NanduTej",
   "v": 5
  },
  "html": "My PR- <a target=\"_blank\" data-link-type=\"pr\" data-issue=\"3519\" href=\"https://github.com/numba/numba/pull/3519\" data-provider=\"github\" data-issue-repo=\"numba/numba\" class=\"pr\">numba/numba#3519</a>. This is working good for 1D arrays now. I wrote piece of code for 2D arrays which is commented below the line I raised a review for. If I use the commented code, the if condition checking for 1D array doesnt work and it goes in and fails with an index out of range error. Can someone help me with a work around for this?",
  "id": "5bfa5c24ced7003fe1811d4e",
  "issues": [
   {
    "number": "3519",
    "repo": "numba/numba"
   }
  ],
  "mentions": [],
  "meta": [],
  "readBy": 22,
  "sent": "2018-11-25T08:24:04.880Z",
  "text": "My PR- https://github.com/numba/numba/pull/3519. This is working good for 1D arrays now. I wrote piece of code for 2D arrays which is commented below the line I raised a review for. If I use the commented code, the if condition checking for 1D array doesnt work and it goes in and fails with an index out of range error. Can someone help me with a work around for this?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"greenisms\" class=\"mention\">@greenisms</span> thanks, seems like this is a bug in the parallel transforms that is allowing the reordering of the print statement. I think it works as expected if a call is made to a dummy function just prior to the print,  reordering over a function would not be permitted as the side-effects of the function is unknown. Will open a ticket.",
  "id": "5bfbbcb77074b903685909ef",
  "issues": [],
  "mentions": [
   {
    "screenName": "greenisms",
    "userId": "5bf97cf4d73408ce4faff786",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 19,
  "sent": "2018-11-26T09:28:23.603Z",
  "text": "@greenisms thanks, seems like this is a bug in the parallel transforms that is allowing the reordering of the print statement. I think it works as expected if a call is made to a dummy function just prior to the print,  reordering over a function would not be permitted as the side-effects of the function is unknown. Will open a ticket.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"greenisms\" class=\"mention\">@greenisms</span> <a target=\"_blank\" data-link-type=\"issue\" data-issue=\"3534\" href=\"https://github.com/numba/numba/issues/3534\" data-provider=\"github\" data-issue-repo=\"numba/numba\" class=\"issue\">numba/numba#3534</a>",
  "id": "5bfbce40ced7003fe189f1ee",
  "issues": [
   {
    "number": "3534",
    "repo": "numba/numba"
   }
  ],
  "mentions": [
   {
    "screenName": "greenisms",
    "userId": "5bf97cf4d73408ce4faff786",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 19,
  "sent": "2018-11-26T10:43:12.733Z",
  "text": "@greenisms https://github.com/numba/numba/issues/3534",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"NanduTej\" class=\"mention\">@NanduTej</span> thanks for the update, the code doesn&#39;t work because you are trying to write a 2D array into an array element (a scalar), this won&#39;t work in NumPy or Numba as it is invalid. If your code does not work in NumPy it won&#39;t work with  Numba, so perhaps try getting the implementing function code to just work correctly in NumPy first?",
  "id": "5bfbe564e25cc2740546d834",
  "issues": [],
  "mentions": [
   {
    "screenName": "NanduTej",
    "userId": "5bf71488d73408ce4fafd246",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 19,
  "sent": "2018-11-26T12:21:56.825Z",
  "text": "@NanduTej thanks for the update, the code doesn't work because you are trying to write a 2D array into an array element (a scalar), this won't work in NumPy or Numba as it is invalid. If your code does not work in NumPy it won't work with  Numba, so perhaps try getting the implementing function code to just work correctly in NumPy first?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "As to the implementation, it seems like the returned array is always <code>a.size * repeats</code> in size, and you can just allocate that with <code>np.empty()</code> (don&#39;t use <code>np.zeros</code> as the entire array is written into and so filling with zeros just wastes cycles), this saves having to branch.",
  "id": "5bfbe61cbaf43f2b9b77ade9",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-11-26T12:25:00.556Z",
  "text": "As to the implementation, it seems like the returned array is always `a.size * repeats` in size, and you can just allocate that with `np.empty()` (don't use `np.zeros` as the entire array is written into and so filling with zeros just wastes cycles), this saves having to branch.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "then the algorithm needed seems to just write <code>repeats</code> many copies of each element of <code>a</code> into the output array, so perhaps <code>.ravel()</code> the input so it is flat and then just  set up a loop indexing from <code>i * repeats: (i+1) * repeats</code> and assigning into that the value from the <code>ravel</code>&#39;d input?",
  "id": "5bfbe70cf59704348e07c7ab",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 20,
  "sent": "2018-11-26T12:29:00.345Z",
  "text": "then the algorithm needed seems to just write `repeats` many copies of each element of `a` into the output array, so perhaps `.ravel()` the input so it is flat and then just  set up a loop indexing from `i * repeats: (i+1) * repeats` and assigning into that the value from the `ravel`'d input?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "I think that might get around the difficulties in the current code present from handling the number of dimensions in the input array.",
  "id": "5bfbe73eb6c07010528ddbd9",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 20,
  "sent": "2018-11-26T12:29:50.925Z",
  "text": "I think that might get around the difficulties in the current code present from handling the number of dimensions in the input array.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-11-26T13:03:12.943Z",
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/greenisms",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/45314909?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/45314909?v=4&s=60",
   "displayName": "greenisms",
   "gv": "4",
   "id": "5bf97cf4d73408ce4faff786",
   "url": "/greenisms",
   "username": "greenisms",
   "v": 1
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span> thank you for your reply.  The second example your write in <a target=\"_blank\" data-link-type=\"issue\" data-issue=\"3534\" href=\"https://github.com/numba/numba/issues/3534\" data-provider=\"github\" data-issue-repo=\"numba/numba\" class=\"issue\">numba/numba#3534</a>, is exactly the problem I encountered.  for example, following the a[i] assignment, I need to use a[-1] to do some calculation, but I can&#39;t get the correct value, therefore I print a[-1] out,  then I find this phenomenon. I guess this problem caused by parallel has nothing to do with print statement.  ",
  "id": "5bfbeee687c4b86bcc1d2e57",
  "issues": [
   {
    "number": "3534",
    "repo": "numba/numba"
   }
  ],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 20,
  "sent": "2018-11-26T13:02:30.423Z",
  "text": "@stuartarchibald thank you for your reply.  The second example your write in https://github.com/numba/numba/issues/3534, is exactly the problem I encountered.  for example, following the a[i] assignment, I need to use a[-1] to do some calculation, but I can't get the correct value, therefore I print a[-1] out,  then I find this phenomenon. I guess this problem caused by parallel has nothing to do with print statement.  ",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "editedAt": "2018-11-26T13:08:02.969Z",
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"greenisms\" class=\"mention\">@greenisms</span> no problem. It is not permitted for the print IR node to be moved, however the <code>getitem</code>that is being printed is considered valid for a move because the code which analyses whether something can be moved is not using e.g. an alias map. I think the second problem, that which occurs without the printing, is another issue, though likely related.",
  "id": "5bfbf01787c4b86bcc1d37ec",
  "issues": [],
  "mentions": [
   {
    "screenName": "greenisms",
    "userId": "5bf97cf4d73408ce4faff786",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 20,
  "sent": "2018-11-26T13:07:35.757Z",
  "text": "@greenisms no problem. It is not permitted for the print IR node to be moved, however the `getitem`that is being printed is considered valid for a move because the code which analyses whether something can be moved is not using e.g. an alias map. I think the second problem, that which occurs without the printing, is another issue, though likely related.",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/greenisms",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/45314909?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/45314909?v=4&s=60",
   "displayName": "greenisms",
   "gv": "4",
   "id": "5bf97cf4d73408ce4faff786",
   "url": "/greenisms",
   "username": "greenisms",
   "v": 1
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span> the second problem is what I want to ask and to get solved, sorry for the misunderstanding way that I raised this problem ",
  "id": "5bfbf28df048fa105126924e",
  "issues": [],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 20,
  "sent": "2018-11-26T13:18:05.442Z",
  "text": "@stuartarchibald the second problem is what I want to ask and to get solved, sorry for the misunderstanding way that I raised this problem ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"greenisms\" class=\"mention\">@greenisms</span> sure, both need fixing! And don&#39;t worry, it&#39;s not clear that they are distinct issues as the effect appears the same/they still may both be down to the same bug. ",
  "id": "5bfbf740e25cc27405474612",
  "issues": [],
  "mentions": [
   {
    "screenName": "greenisms",
    "userId": "5bf97cf4d73408ce4faff786",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 19,
  "sent": "2018-11-26T13:38:08.140Z",
  "text": "@greenisms sure, both need fixing! And don't worry, it's not clear that they are distinct issues as the effect appears the same/they still may both be down to the same bug. ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "It&#39;s good to hear about any bugs!",
  "id": "5bfbf75897a8982b9a691914",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-11-26T13:38:32.593Z",
  "text": "It's good to hear about any bugs!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/NanduTej",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/27914041?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/27914041?v=4&s=60",
   "displayName": "Teja Nanduri",
   "gv": "4",
   "id": "5bf71488d73408ce4fafd246",
   "url": "/NanduTej",
   "username": "NanduTej",
   "v": 5
  },
  "html": "Okay <span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span>. I will work on that and get back to you.",
  "id": "5bfca37bb6c070105292ca17",
  "issues": [],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 17,
  "sent": "2018-11-27T01:52:59.015Z",
  "text": "Okay @stuartarchibald. I will work on that and get back to you.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/g/u/shuffle2_twitter",
   "avatarUrlMedium": "https://pbs.twimg.com/profile_images/1774912645/8-picture5.gif",
   "avatarUrlSmall": "https://pbs.twimg.com/profile_images/1774912645/8-picture5_bigger.gif",
   "displayName": "shuffle2",
   "id": "5bfe5bd5d73408ce4fb04d81",
   "url": "/shuffle2_twitter",
   "username": "shuffle2_twitter",
   "v": 1
  },
  "html": "Does anyone have recommendations about using numba.cuda with large data sets? I thought numba.cuda.mapped would do what I want (give device a pointer to the host-allocated memory), but it doesn&#39;t seem to work like that, and the <code>mapped</code> context manager also seems broken in that it doesn&#39;t UnRegister the mapping",
  "id": "5bfe5c99958fc53895008e4e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-11-28T09:15:05.879Z",
  "text": "Does anyone have recommendations about using numba.cuda with large data sets? I thought numba.cuda.mapped would do what I want (give device a pointer to the host-allocated memory), but it doesn't seem to work like that, and the `mapped` context manager also seems broken in that it doesn't UnRegister the mapping",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/g/u/shuffle2_twitter",
   "avatarUrlMedium": "https://pbs.twimg.com/profile_images/1774912645/8-picture5.gif",
   "avatarUrlSmall": "https://pbs.twimg.com/profile_images/1774912645/8-picture5_bigger.gif",
   "displayName": "shuffle2",
   "id": "5bfe5bd5d73408ce4fb04d81",
   "url": "/shuffle2_twitter",
   "username": "shuffle2_twitter",
   "v": 1
  },
  "html": "oh, ha, you just need to pass the original buffer object to the kernel instead of the object yielded from the context manager..kinda confusing :p",
  "id": "5bfe5e20f59704348e17f47a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-11-28T09:21:36.776Z",
  "text": "oh, ha, you just need to pass the original buffer object to the kernel instead of the object yielded from the context manager..kinda confusing :p",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/g/u/shuffle2_twitter",
   "avatarUrlMedium": "https://pbs.twimg.com/profile_images/1774912645/8-picture5.gif",
   "avatarUrlSmall": "https://pbs.twimg.com/profile_images/1774912645/8-picture5_bigger.gif",
   "displayName": "shuffle2",
   "id": "5bfe5bd5d73408ce4fb04d81",
   "url": "/shuffle2_twitter",
   "username": "shuffle2_twitter",
   "v": 1
  },
  "html": "failing to unregister the mapping does still seem like a bug tho",
  "id": "5bfe5e4966213138942efa2a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-11-28T09:22:17.233Z",
  "text": "failing to unregister the mapping does still seem like a bug tho",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/g/u/shuffle2_twitter",
   "avatarUrlMedium": "https://pbs.twimg.com/profile_images/1774912645/8-picture5.gif",
   "avatarUrlSmall": "https://pbs.twimg.com/profile_images/1774912645/8-picture5_bigger.gif",
   "displayName": "shuffle2",
   "id": "5bfe5bd5d73408ce4fb04d81",
   "url": "/shuffle2_twitter",
   "username": "shuffle2_twitter",
   "v": 1
  },
  "html": "..or not. passing the original buffer just results in numba doing the alloc+copy  itself :(",
  "id": "5bfe5ef3b6c07010529dc747",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-11-28T09:25:07.540Z",
  "text": "..or not. passing the original buffer just results in numba doing the alloc+copy  itself :(",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"shuffle2_twitter\" class=\"mention\">@shuffle2_twitter</span> do you have a piece of code to demonstrate what you are trying to do ?",
  "id": "5bfe5f67f59704348e17fcdb",
  "issues": [],
  "mentions": [
   {
    "screenName": "shuffle2_twitter",
    "userId": "5bfe5bd5d73408ce4fb04d81",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 14,
  "sent": "2018-11-28T09:27:03.315Z",
  "text": "@shuffle2_twitter do you have a piece of code to demonstrate what you are trying to do ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/g/u/shuffle2_twitter",
   "avatarUrlMedium": "https://pbs.twimg.com/profile_images/1774912645/8-picture5.gif",
   "avatarUrlSmall": "https://pbs.twimg.com/profile_images/1774912645/8-picture5_bigger.gif",
   "displayName": "shuffle2",
   "id": "5bfe5bd5d73408ce4fb04d81",
   "url": "/shuffle2_twitter",
   "username": "shuffle2_twitter",
   "v": 1
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span> here&#39;s the actual code <a href=\"https://ybin.me/p/20ec10ab7040395f#cY/5v2I5l2yRSWzfozHHSMtVG3kSbF1BcEOP26hz9WM=\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://ybin.me/p/20ec10ab7040395f#cY/5v2I5l2yRSWzfozHHSMtVG3kSbF1BcEOP26hz9WM=</a>",
  "id": "5bfe61577074b903686a3466",
  "issues": [],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 15,
  "sent": "2018-11-28T09:35:19.523Z",
  "text": "@stuartarchibald here's the actual code https://ybin.me/p/20ec10ab7040395f#cY/5v2I5l2yRSWzfozHHSMtVG3kSbF1BcEOP26hz9WM=",
  "unread": false,
  "urls": [
   {
    "url": "https://ybin.me/p/20ec10ab7040395f#cY/5v2I5l2yRSWzfozHHSMtVG3kSbF1BcEOP26hz9WM="
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/g/u/shuffle2_twitter",
   "avatarUrlMedium": "https://pbs.twimg.com/profile_images/1774912645/8-picture5.gif",
   "avatarUrlSmall": "https://pbs.twimg.com/profile_images/1774912645/8-picture5_bigger.gif",
   "displayName": "shuffle2",
   "id": "5bfe5bd5d73408ce4fb04d81",
   "url": "/shuffle2_twitter",
   "username": "shuffle2_twitter",
   "v": 1
  },
  "html": "i notice if i put something like a.copy_to_host() or numba.cuda.synchronize() after the kernel call, my gpu usage will spike to 100% briefly, then i get CUDA_ERROR_LAUNCH_FAILED",
  "id": "5bfe61b066213138942f1097",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-11-28T09:36:48.609Z",
  "text": "i notice if i put something like a.copy_to_host() or numba.cuda.synchronize() after the kernel call, my gpu usage will spike to 100% briefly, then i get CUDA_ERROR_LAUNCH_FAILED",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/g/u/shuffle2_twitter",
   "avatarUrlMedium": "https://pbs.twimg.com/profile_images/1774912645/8-picture5.gif",
   "avatarUrlSmall": "https://pbs.twimg.com/profile_images/1774912645/8-picture5_bigger.gif",
   "displayName": "shuffle2",
   "id": "5bfe5bd5d73408ce4fb04d81",
   "url": "/shuffle2_twitter",
   "username": "shuffle2_twitter",
   "v": 1
  },
  "html": "reducing the block dimension wayyy down allows it to work, but i&#39;m not really sure <em>why</em> a larger size doesn&#39;t work. iirc from when I was using CUDA SDK, the runtime would just manage this...",
  "id": "5bfe64b7e25cc2740556f2e1",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-11-28T09:49:43.939Z",
  "text": "reducing the block dimension wayyy down allows it to work, but i'm not really sure _why_ a larger size doesn't work. iirc from when I was using CUDA SDK, the runtime would just manage this...",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-11-28T10:02:29.569Z",
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "<p>hello guys, what is the problem with this code:</p><pre><code><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np                               \n<span class=\"keyword\">from</span> numba <span class=\"keyword\">import</span> stencil, jit\n\n<span class=\"decorator\">@stencil(neighborhood=((-2, 2), (0, 0), (0,0)), )</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_average</span><span class=\"params\">(arr)</span>:</span>\n    <span class=\"keyword\">return</span> np.round(np.mean(arr[-<span class=\"number\">2</span>:<span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>]))\n\na = np.zeros([<span class=\"number\">20</span>,<span class=\"number\">10</span>,<span class=\"number\">10</span>])\n_average(a)</code></pre><p>i get:</p><pre><code>TypingError: Failed in nopython mode pipeline (step: nopython frontend)\nInvalid <span class=\"operator\"><span class=\"keyword\">use</span> <span class=\"keyword\">of</span> getitem <span class=\"keyword\">with</span> <span class=\"keyword\">parameters</span> ((slice&lt;a:b&gt;, int64, int64), int64)\n * parameterized\n[<span class=\"number\">1</span>] During: typing <span class=\"keyword\">of</span> intrinsic-<span class=\"keyword\">call</span> <span class=\"keyword\">at</span> &lt;ipython-<span class=\"keyword\">input</span>-<span class=\"number\">2</span>-e4ab6d1fe725&gt; (<span class=\"number\">1</span>)\n\n<span class=\"keyword\">File</span> <span class=\"string\">\"&lt;ipython-input-2-e4ab6d1fe725&gt;\"</span>, line <span class=\"number\">1</span>:\n@stencil(neighborhood=((-<span class=\"number\">2</span>, <span class=\"number\">2</span>), (<span class=\"number\">0</span>, <span class=\"number\">0</span>), (<span class=\"number\">0</span>,<span class=\"number\">0</span>)), )</span></code></pre><p>it works if i call the function from a njitted func</p>",
  "id": "5bfe6723ed6bcf1ef8723254",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-11-28T10:00:03.377Z",
  "text": "hello guys, what is the problem with this code:\n\n```\nimport numpy as np                               \nfrom numba import stencil, jit\n\n@stencil(neighborhood=((-2, 2), (0, 0), (0,0)), )\ndef _average(arr):\n    return np.round(np.mean(arr[-2:3, 0, 0]))\n\na = np.zeros([20,10,10])\n_average(a)\n```\n\ni get:\n```\nTypingError: Failed in nopython mode pipeline (step: nopython frontend)\nInvalid use of getitem with parameters ((slice<a:b>, int64, int64), int64)\n * parameterized\n[1] During: typing of intrinsic-call at <ipython-input-2-e4ab6d1fe725> (1)\n\nFile \"<ipython-input-2-e4ab6d1fe725>\", line 1:\n@stencil(neighborhood=((-2, 2), (0, 0), (0,0)), )\n```\n\nit works if i call the function from a njitted func",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"shuffle2_twitter\" class=\"mention\">@shuffle2_twitter</span> thanks, what are <code>traces</code> and <code>inputs</code> ? I think that&#39;s all that&#39;s needed to run it, some one can take a look then.",
  "id": "5bfe6793f59704348e182ec4",
  "issues": [],
  "mentions": [
   {
    "screenName": "shuffle2_twitter",
    "userId": "5bfe5bd5d73408ce4fb04d81",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 15,
  "sent": "2018-11-28T10:01:55.964Z",
  "text": "@shuffle2_twitter thanks, what are `traces` and `inputs` ? I think that's all that's needed to run it, some one can take a look then.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"lpuglia\" class=\"mention\">@lpuglia</span> expect it&#39;s related to that bug you had the other day",
  "id": "5bfe68c97d26db1e830b1908",
  "issues": [],
  "mentions": [
   {
    "screenName": "lpuglia",
    "userId": "5bc8acc0d73408ce4fabe62d",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 15,
  "sent": "2018-11-28T10:07:05.921Z",
  "text": "@lpuglia expect it's related to that bug you had the other day",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<code>@njit</code> computes the kernel correctly",
  "id": "5bfe6901ed6bcf1ef8723f13",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-11-28T10:08:01.358Z",
  "text": "`@njit` computes the kernel correctly",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "yes it does",
  "id": "5bfe6a59b6c07010529e0a69",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-11-28T10:13:45.312Z",
  "text": "yes it does",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<pre><code>import numpy as np\nfrom numba import stencil, njit\n\n@<span class=\"function\"><span class=\"title\">stencil</span><span class=\"params\">(neighborhood=((-<span class=\"number\">2</span>, <span class=\"number\">2</span>)</span></span>, (<span class=\"number\">0</span>, <span class=\"number\">0</span>), (<span class=\"number\">0</span>,<span class=\"number\">0</span>)), )\ndef _average(arr):\n    tmp = np.<span class=\"function\"><span class=\"title\">empty</span><span class=\"params\">((<span class=\"number\">4</span>)</span></span>)\n    <span class=\"keyword\">for</span> <span class=\"tag\">i</span> <span class=\"keyword\">in</span> <span class=\"function\"><span class=\"title\">range</span><span class=\"params\">(-<span class=\"number\">2</span>, <span class=\"number\">3</span>)</span></span>:\n        j = <span class=\"number\">0</span>\n        k = <span class=\"number\">0</span>\n        tmp[i] = arr[<span class=\"tag\">i</span>, j, k]\n    return np.<span class=\"function\"><span class=\"title\">round</span><span class=\"params\">(np.mean(tmp)</span></span>)\n\ndim = (<span class=\"number\">20</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span>)\n<span class=\"tag\">a</span> = np.<span class=\"function\"><span class=\"title\">arange</span><span class=\"params\">(np.prod(dim)</span></span>).<span class=\"function\"><span class=\"title\">reshape</span><span class=\"params\">(dim)</span></span>\n<span class=\"function\"><span class=\"title\">print</span><span class=\"params\">(_average(a)</span></span>)</code></pre>",
  "id": "5bfe6a65e25cc27405571742",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-11-28T10:13:57.371Z",
  "text": "```\nimport numpy as np\nfrom numba import stencil, njit\n\n@stencil(neighborhood=((-2, 2), (0, 0), (0,0)), )\ndef _average(arr):\n    tmp = np.empty((4))\n    for i in range(-2, 3):\n        j = 0\n        k = 0\n        tmp[i] = arr[i, j, k]\n    return np.round(np.mean(tmp))\n\ndim = (20, 10, 10)\na = np.arange(np.prod(dim)).reshape(dim)\nprint(_average(a))\n```\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "does that do what you want ?",
  "id": "5bfe6a6af048fa105136992e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-11-28T10:14:02.553Z",
  "text": "does that do what you want ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "yes it does",
  "id": "5bfe6a9ce25cc27405571867",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-11-28T10:14:52.450Z",
  "text": "yes it does",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "so it is not only a problem of the median func but also mean",
  "id": "5bfe6aa8f048fa1051369b58",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-11-28T10:15:04.210Z",
  "text": "so it is not only a problem of the median func but also mean",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "i think it&#39;s a much more involved problem unfortunately",
  "id": "5bfe6ae2f59704348e18482a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-11-28T10:16:02.931Z",
  "text": "i think it's a much more involved problem unfortunately",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "without digging into the stuff that does the code generation, I&#39;d speculate that there&#39;s some assumption made about there being a loop nest corresponding to the neighbourhood",
  "id": "5bfe6b26cb32736b29a70145",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-11-28T10:17:10.077Z",
  "text": "without digging into the stuff that does the code generation, I'd speculate that there's some assumption made about there being a loop nest corresponding to the neighbourhood",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "and it&#39;s this that is causing problems",
  "id": "5bfe6b46f59704348e18492d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-11-28T10:17:42.303Z",
  "text": "and it's this that is causing problems",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-11-28T10:18:10.153Z",
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "note that the getitem issue above is trying to do a <code>getitem</code> on an <code>int64</code> type",
  "id": "5bfe6b56cfa682348d98ddcf",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-11-28T10:17:58.465Z",
  "text": "note that the getitem issue above is trying to do a `getitem` on an `int64` type",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "which is v. similar to the issue the other day about assigning into an <code>int64</code> type",
  "id": "5bfe6b7d7074b903686a757d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-11-28T10:18:37.249Z",
  "text": "which is v. similar to the issue the other day about assigning into an `int64` type",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-11-28T10:21:07.856Z",
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "<p>interestingly enough, if you call the stencil in a njit like this:</p><pre><code><span class=\"decorator\">@jit(nopython=True, parallel=True)</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_local_agg</span><span class=\"params\">(cost, agg)</span>:</span>\n    agg[:,:,:] = _average(cost)</code></pre><p>there are no problems</p>",
  "id": "5bfe6bbff849b222e0b7de91",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-11-28T10:19:43.188Z",
  "text": "interestingly enough, if you call the stencil in a njit like this:\n```\n@jit(nopython=True, parallel=True)\ndef _local_agg(cost, agg):\n    agg[:,:,:] = _average(cost)\n```\nthere are no problems",
  "unread": false,
  "urls": [],
  "v": 3
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "anyway, i was just searching for a way to make my code more concise than:<pre><code><span class=\"decorator\">@stencil(neighborhood=((-2, 2), (0, 0), (0,0)), )</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_average</span><span class=\"params\">(arr)</span>:</span>\n    <span class=\"keyword\">return</span> np.round(np.mean(arr[-<span class=\"number\">2</span>:<span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>]))\n\n<span class=\"decorator\">@jit(nopython=True, parallel=True)#, cache=True)</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_local_agg</span><span class=\"params\">(cost, agg)</span>:</span>\n    agg[:,:,:] = _average(cost)\n\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">local_aggreg</span><span class=\"params\">(cost)</span>:</span>\n    agg = np.zeros_like(cost, dtype=np.uint8)\n    _local_agg(cost, agg)</code></pre>",
  "id": "5bfe6c4bf59704348e184f6c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-11-28T10:22:03.393Z",
  "text": "anyway, i was just searching for a way to make my code more concise than:\n\n```\n@stencil(neighborhood=((-2, 2), (0, 0), (0,0)), )\ndef _average(arr):\n    return np.round(np.mean(arr[-2:3, 0, 0]))\n\n@jit(nopython=True, parallel=True)#, cache=True)\ndef _local_agg(cost, agg):\n    agg[:,:,:] = _average(cost)\n\ndef local_aggreg(cost):\n    agg = np.zeros_like(cost, dtype=np.uint8)\n    _local_agg(cost, agg)\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "removing the intermediate step",
  "id": "5bfe6c59cb32736b29a7085f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-11-28T10:22:17.484Z",
  "text": "removing the intermediate step",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "hmm, that&#39;s interesting, if you don&#39;t use <code>parallel=True</code> does it also work ?",
  "id": "5bfe6c857074b903686a7a7a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-11-28T10:23:01.604Z",
  "text": "hmm, that's interesting, if you don't use `parallel=True` does it also work ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "(IIRC there&#39;s 2x stencil implementations in the code base, one for njit (does some code gen via exec strings and some IR mutation) and another for parallel target (does code gen via IR manipulations), and technically there&#39;s also another implementation in the test code which works via AST transforms)",
  "id": "5bfe6d31ed6bcf1ef87259f4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-11-28T10:25:53.575Z",
  "text": "(IIRC there's 2x stencil implementations in the code base, one for njit (does some code gen via exec strings and some IR mutation) and another for parallel target (does code gen via IR manipulations), and technically there's also another implementation in the test code which works via AST transforms)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "it explodes",
  "id": "5bfe6d41d24f9324d2670e86",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-11-28T10:26:09.412Z",
  "text": "it explodes",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "same way?",
  "id": "5bfe6d62f849b222e0b7ea98",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-11-28T10:26:42.255Z",
  "text": "same way?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "<pre><code>TypingError: Failed in nopython mode pipeline (step: nopython mode backend)\nFailed in nopython mode pipeline (step: nopython frontend)\nInvalid <span class=\"operator\"><span class=\"keyword\">use</span> <span class=\"keyword\">of</span> getitem <span class=\"keyword\">with</span> <span class=\"keyword\">parameters</span> ((slice&lt;a:b&gt;, int64, int64), int64)\n * parameterized\n\n<span class=\"keyword\">File</span> <span class=\"string\">\"stereo/local_aggregation.py\"</span>, line <span class=\"number\">8</span>:\n# <span class=\"keyword\">def</span> _average(arr):\n    &lt;<span class=\"keyword\">source</span> elided&gt;\n\n@stencil(neighborhood=((-<span class=\"number\">2</span>, <span class=\"number\">2</span>), (<span class=\"number\">0</span>, <span class=\"number\">0</span>), (<span class=\"number\">0</span>,<span class=\"number\">0</span>)), )\n^\n\n[<span class=\"number\">1</span>] During: lowering <span class=\"string\">\"$0.3 = call $0.1(cost, func=$0.1, args=[Var(cost,)], kws=(), vararg=None)\"</span> <span class=\"keyword\">at</span> local_aggregation.py (<span class=\"number\">16</span>)\nThis <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> usually a problem <span class=\"keyword\">with</span> Numba itself but instead often caused <span class=\"keyword\">by</span>\nthe <span class=\"keyword\">use</span> <span class=\"keyword\">of</span> unsupported features <span class=\"keyword\">or</span> an issue <span class=\"keyword\">in</span> resolving types.\n\n<span class=\"keyword\">To</span> see Python/NumPy features supported <span class=\"keyword\">by</span> the latest <span class=\"keyword\">release</span> <span class=\"keyword\">of</span> Numba visit:\n<span class=\"keyword\">http</span>://numba.pydata.org/numba-doc/dev/<span class=\"keyword\">reference</span>/pysupported.html\n<span class=\"keyword\">and</span>\n<span class=\"keyword\">http</span>://numba.pydata.org/numba-doc/dev/<span class=\"keyword\">reference</span>/numpysupported.html\n\n<span class=\"keyword\">For</span> more information about typing <span class=\"keyword\">errors</span> <span class=\"keyword\">and</span> how <span class=\"keyword\">to</span> debug them visit:\n<span class=\"keyword\">http</span>://numba.pydata.org/numba-doc/latest/<span class=\"keyword\">user</span>/troubleshoot.html#my-code-doesn-<span class=\"keyword\">t</span>-compile\n\n<span class=\"keyword\">If</span> you think your code should <span class=\"keyword\">work</span> <span class=\"keyword\">with</span> Numba, please report the <span class=\"keyword\">error</span> message\n<span class=\"keyword\">and</span> traceback, along <span class=\"keyword\">with</span> a minimal reproducer <span class=\"keyword\">at</span>:\nhttps://github.com/numba/numba/issues/<span class=\"keyword\">new</span></span></code></pre>",
  "id": "5bfe6d67cfa682348d98eb1f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-11-28T10:26:47.472Z",
  "text": "```\nTypingError: Failed in nopython mode pipeline (step: nopython mode backend)\nFailed in nopython mode pipeline (step: nopython frontend)\nInvalid use of getitem with parameters ((slice<a:b>, int64, int64), int64)\n * parameterized\n\nFile \"stereo/local_aggregation.py\", line 8:\n# def _average(arr):\n    <source elided>\n\n@stencil(neighborhood=((-2, 2), (0, 0), (0,0)), )\n^\n\n[1] During: lowering \"$0.3 = call $0.1(cost, func=$0.1, args=[Var(cost,)], kws=(), vararg=None)\" at local_aggregation.py (16)\nThis is not usually a problem with Numba itself but instead often caused by\nthe use of unsupported features or an issue in resolving types.\n\nTo see Python/NumPy features supported by the latest release of Numba visit:\nhttp://numba.pydata.org/numba-doc/dev/reference/pysupported.html\nand\nhttp://numba.pydata.org/numba-doc/dev/reference/numpysupported.html\n\nFor more information about typing errors and how to debug them visit:\nhttp://numba.pydata.org/numba-doc/latest/user/troubleshoot.html#my-code-doesn-t-compile\n\nIf you think your code should work with Numba, please report the error message\nand traceback, along with a minimal reproducer at:\nhttps://github.com/numba/numba/issues/new\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "right, so same problem, I think it&#39;s the <code>StencilFunc</code> implementation that&#39;s broken then",
  "id": "5bfe6db08dffd748dbf5ed39",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-11-28T10:28:00.173Z",
  "text": "right, so same problem, I think it's the `StencilFunc` implementation that's broken then",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "i see, thank you for the answers!",
  "id": "5bfe6dbeced7003fe19af4cf",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-11-28T10:28:14.033Z",
  "text": "i see, thank you for the answers!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "well, thanks for helping narrow it down!",
  "id": "5bfe6dd0f048fa105136b297",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-11-28T10:28:32.760Z",
  "text": "well, thanks for helping narrow it down!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "should i update the bug ticket?",
  "id": "5bfe6de07074b903686a833c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-11-28T10:28:48.501Z",
  "text": "should i update the bug ticket?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "yes please",
  "id": "5bfe6de6e25cc274055730ee",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-11-28T10:28:54.302Z",
  "text": "yes please",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "roger",
  "id": "5bfe6df1958fc538950100c8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-11-28T10:29:05.345Z",
  "text": "roger",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "with what you found RE njit/njit(parallel=True), it narrows it down to a few kloc in one file then",
  "id": "5bfe6e14d24f9324d2671500",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-11-28T10:29:40.992Z",
  "text": "with what you found RE njit/njit(parallel=True), it narrows it down to a few kloc in one file then",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "thanks for your help :)",
  "id": "5bfe6e25b6c07010529e2220",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 20,
  "sent": "2018-11-28T10:29:57.100Z",
  "text": "thanks for your help :)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "<a target=\"_blank\" data-link-type=\"issue\" data-issue=\"3528\" href=\"https://github.com/numba/numba/issues/3528\" data-provider=\"github\" data-issue-repo=\"numba/numba\" class=\"issue\">numba/numba#3528</a> done",
  "id": "5bfe6f3666213138942f6a34",
  "issues": [
   {
    "number": "3528",
    "repo": "numba/numba"
   }
  ],
  "mentions": [],
  "meta": [],
  "readBy": 20,
  "sent": "2018-11-28T10:34:30.100Z",
  "text": "https://github.com/numba/numba/issues/3528 done",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "brilliant, thanks",
  "id": "5bfe6f8b66213138942f6c80",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 20,
  "sent": "2018-11-28T10:35:55.331Z",
  "text": "brilliant, thanks",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "thankfully it&#39;s in the slightly easier to debug one of the two implementations",
  "id": "5bfe6fb67d26db1e830b4514",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 20,
  "sent": "2018-11-28T10:36:38.586Z",
  "text": "thankfully it's in the slightly easier to debug one of the two implementations",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "that is a good news, if you solve it i will be very glad to pull and test :)",
  "id": "5bfe6fdded6bcf1ef8726cf7",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 20,
  "sent": "2018-11-28T10:37:17.830Z",
  "text": "that is a good news, if you solve it i will be very glad to pull and test :)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "great, thanks, I&#39;ll try and take a look to assess how hard it will be to fix",
  "id": "5bfe70f9b6c07010529e38cf",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 20,
  "sent": "2018-11-28T10:42:01.811Z",
  "text": "great, thanks, I'll try and take a look to assess how hard it will be to fix",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/SamRagusa",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/11341857?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/11341857?v=4&s=60",
   "displayName": "Sam Ragusa",
   "gv": "4",
   "id": "57742186c2f0db084a209dc5",
   "url": "/SamRagusa",
   "username": "SamRagusa",
   "v": 3
  },
  "html": "<p>Hey everyone!  So I&#39;ve been building a JIT compiled chess engine, and there&#39;s only one big hurdle left until complete JIT compilation, and that&#39;s running TensorFlow graphs for inference.</p><p>I&#39;ve been looking into this for a while, and currently there doesn&#39;t seem to be a great solution.  </p><p>I&#39;ve gone over all the methods I could think of, and the most simple/effective approach seems to be to build a basic TensorFlow language binding for Numba&#39;s nopython mode directly from the c_api.   The aim for its functionality would be to just open a given model (and session...), be able to do basic inference calls (run and maybe partial_run), and finally close everything.  Anything more complicated than that would/should be done in Python before saving the model.</p><p>I&#39;ve started working on this using cffi and currently it&#39;s able to (from nopython) create a tf.Session, load a graphdef, store the TF information, and close it all at the end.</p><p>While it shouldn&#39;t be much harder to do this for the general use case, this is my first &#39;real&#39; C, and I wouldn&#39;t want to spend time generalizing it if it seemed other&#39;s wouldn&#39;t use my implementation.</p><p>So I&#39;m here hoping to figure out people&#39;s interest level in this kinda thing.   </p>",
  "id": "5bfec5e98dffd748dbf83fa7",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 20,
  "sent": "2018-11-28T16:44:25.496Z",
  "text": "\nHey everyone!  So I've been building a JIT compiled chess engine, and there's only one big hurdle left until complete JIT compilation, and that's running TensorFlow graphs for inference.\n\nI've been looking into this for a while, and currently there doesn't seem to be a great solution.  \n\nI've gone over all the methods I could think of, and the most simple/effective approach seems to be to build a basic TensorFlow language binding for Numba's nopython mode directly from the c_api.   The aim for its functionality would be to just open a given model (and session...), be able to do basic inference calls (run and maybe partial_run), and finally close everything.  Anything more complicated than that would/should be done in Python before saving the model.\n\nI've started working on this using cffi and currently it's able to (from nopython) create a tf.Session, load a graphdef, store the TF information, and close it all at the end.\n\nWhile it shouldn't be much harder to do this for the general use case, this is my first 'real' C, and I wouldn't want to spend time generalizing it if it seemed other's wouldn't use my implementation.\n\nSo I'm here hoping to figure out people's interest level in this kinda thing.   ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "/all: Numba 0.41.0 has been released.  More info: <a href=\"https://groups.google.com/a/continuum.io/forum/#!topic/numba-users/Mj8YuhNtUOE\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://groups.google.com/a/continuum.io/forum/#!topic/numba-users/Mj8YuhNtUOE</a>",
  "id": "5bfecb79ed6bcf1ef874e935",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 22,
  "sent": "2018-11-28T17:08:09.902Z",
  "text": "/all: Numba 0.41.0 has been released.  More info: https://groups.google.com/a/continuum.io/forum/#!topic/numba-users/Mj8YuhNtUOE",
  "unread": false,
  "urls": [
   {
    "url": "https://groups.google.com/a/continuum.io/forum/#!topic/numba-users/Mj8YuhNtUOE"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/cenwangumass",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32693057?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32693057?v=4&s=60",
   "displayName": "cenwangumass",
   "gv": "4",
   "id": "5c00e5e1d73408ce4fb08634",
   "url": "/cenwangumass",
   "username": "cenwangumass",
   "v": 3
  },
  "html": "Hi, I just found a wired behavior but I&#39;m pretty new to Numba so I don&#39;t know if this is actually a bug or not",
  "id": "5c00e609464b6c0fd66a7c2c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 22,
  "sent": "2018-11-30T07:26:01.938Z",
  "text": "Hi, I just found a wired behavior but I'm pretty new to Numba so I don't know if this is actually a bug or not",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/cenwangumass",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32693057?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32693057?v=4&s=60",
   "displayName": "cenwangumass",
   "gv": "4",
   "id": "5c00e5e1d73408ce4fb08634",
   "url": "/cenwangumass",
   "username": "cenwangumass",
   "v": 3
  },
  "html": "<pre><code><span class=\"decorator\">@njit(nogil=True, parallel=True)</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f1</span><span class=\"params\">()</span>:</span>\n    s = <span class=\"number\">0</span>\n    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> prange(<span class=\"number\">1000</span>):\n        s += f2()\n    <span class=\"keyword\">return</span> s\n\n\n<span class=\"decorator\">@njit(nogil=True, parallel=True)</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f2</span><span class=\"params\">()</span>:</span>\n    s = <span class=\"number\">0</span>\n    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> prange(<span class=\"number\">1000</span>):\n        s += f3()\n    <span class=\"keyword\">return</span> s\n\n\n<span class=\"decorator\">@njit(nogil=True, parallel=True)</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f3</span><span class=\"params\">()</span>:</span>\n    s = <span class=\"number\">0</span>\n    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> prange(<span class=\"number\">1000</span>):\n        s += <span class=\"number\">1</span>\n    <span class=\"keyword\">return</span> s\n\n\n<span class=\"decorator\">@njit(nogil=True, parallel=True)</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f4</span><span class=\"params\">()</span>:</span>\n    s = <span class=\"number\">0</span>\n    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> prange(<span class=\"number\">1000</span>):\n        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> prange(<span class=\"number\">1000</span>):\n            <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> prange(<span class=\"number\">1000</span>):\n                s += <span class=\"number\">1</span>\n    <span class=\"keyword\">return</span> s</code></pre>I would expect running <code>f1()</code> to have the same result as <code>f4()</code>, but <code>f4()</code> will give me a result while <code>f1()</code> seems to stuck forever",
  "id": "5c00e6ff43c68b3727d833f0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 22,
  "sent": "2018-11-30T07:30:07.446Z",
  "text": "```\n@njit(nogil=True, parallel=True)\ndef f1():\n    s = 0\n    for i in prange(1000):\n        s += f2()\n    return s\n\n\n@njit(nogil=True, parallel=True)\ndef f2():\n    s = 0\n    for i in prange(1000):\n        s += f3()\n    return s\n\n\n@njit(nogil=True, parallel=True)\ndef f3():\n    s = 0\n    for i in prange(1000):\n        s += 1\n    return s\n\n\n@njit(nogil=True, parallel=True)\ndef f4():\n    s = 0\n    for i in prange(1000):\n        for j in prange(1000):\n            for k in prange(1000):\n                s += 1\n    return s\n```\nI would expect running `f1()` to have the same result as `f4()`, but `f4()` will give me a result while `f1()` seems to stuck forever",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"cenwangumass\" class=\"mention\">@cenwangumass</span> thanks for the report. I think this is a bug.",
  "id": "5c00fe40500e8e372839264d",
  "issues": [],
  "mentions": [
   {
    "screenName": "cenwangumass",
    "userId": "5c00e5e1d73408ce4fb08634",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 23,
  "sent": "2018-11-30T09:09:20.501Z",
  "text": "@cenwangumass thanks for the report. I think this is a bug.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "Seems to only fail in the workqueue threading layer though, so perhaps try installing <code>tbb</code> (<code>conda install tbb</code>) and then setting the environment variable <code>NUMBA_THREADING_LAYER</code> to <code>tbb</code>? ",
  "id": "5c00fef49f38cc0fd580f4d9",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 23,
  "sent": "2018-11-30T09:12:20.388Z",
  "text": "Seems to only fail in the workqueue threading layer though, so perhaps try installing `tbb` (`conda install tbb`) and then setting the environment variable `NUMBA_THREADING_LAYER` to `tbb`? ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"cenwangumass\" class=\"mention\">@cenwangumass</span> <a target=\"_blank\" data-link-type=\"issue\" data-issue=\"3551\" href=\"https://github.com/numba/numba/issues/3551\" data-provider=\"github\" data-issue-repo=\"numba/numba\" class=\"issue\">numba/numba#3551</a>",
  "id": "5c01048c464b6c0fd66b4165",
  "issues": [
   {
    "number": "3551",
    "repo": "numba/numba"
   }
  ],
  "mentions": [
   {
    "screenName": "cenwangumass",
    "userId": "5c00e5e1d73408ce4fb08634",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 23,
  "sent": "2018-11-30T09:36:12.371Z",
  "text": "@cenwangumass https://github.com/numba/numba/issues/3551",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/cenwangumass",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32693057?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32693057?v=4&s=60",
   "displayName": "cenwangumass",
   "gv": "4",
   "id": "5c00e5e1d73408ce4fb08634",
   "url": "/cenwangumass",
   "username": "cenwangumass",
   "v": 3
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span>  Hi, thanks for the suggestions! I&#39;ve tried <code>tbb</code> and <code>omp</code> layer on a 16-core Linux machine and Python 3.7.1 shipped with <code>conda</code>, <code>tbb</code> layer no longer hangs but starts 128 threads that the performance is worse than non-parallel version, <code>omp</code> works perfectly. Also, the actually functions are not the same as <code>f1</code> to <code>f4</code> showed before, they are just minimal reproducible versions.",
  "id": "5c01ae36be66d82526587af9",
  "issues": [],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 22,
  "sent": "2018-11-30T21:40:06.011Z",
  "text": "@stuartarchibald  Hi, thanks for the suggestions! I've tried `tbb` and `omp` layer on a 16-core Linux machine and Python 3.7.1 shipped with `conda`, `tbb` layer no longer hangs but starts 128 threads that the performance is worse than non-parallel version, `omp` works perfectly. Also, the actually functions are not the same as `f1` to `f4` showed before, they are just minimal reproducible versions.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/cenwangumass",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/32693057?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/32693057?v=4&s=60",
   "displayName": "cenwangumass",
   "gv": "4",
   "id": "5c00e5e1d73408ce4fb08634",
   "url": "/cenwangumass",
   "username": "cenwangumass",
   "v": 3
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span> When using <code>tbb</code>, I do set the environment variable <code>NUMBA_NUM_THREADS</code>, <code>OMP_NUM_THREADS</code>, <code>MKL_NUM_THREADS</code> to all be 16.",
  "id": "5c01aeae99ad1556dbe7faeb",
  "issues": [],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 23,
  "sent": "2018-11-30T21:42:06.556Z",
  "text": "@stuartarchibald When using `tbb`, I do set the environment variable `NUMBA_NUM_THREADS`, `OMP_NUM_THREADS`, `MKL_NUM_THREADS` to all be 16.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/NanduTej",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/27914041?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/27914041?v=4&s=60",
   "displayName": "Teja Nanduri",
   "gv": "4",
   "id": "5bf71488d73408ce4fafd246",
   "url": "/NanduTej",
   "username": "NanduTej",
   "v": 5
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span> Please review this PR - <a target=\"_blank\" data-link-type=\"pr\" data-issue=\"3519\" href=\"https://github.com/numba/numba/pull/3519\" data-provider=\"github\" data-issue-repo=\"numba/numba\" class=\"pr\">numba/numba#3519</a>",
  "id": "5c024076e8274925257ea5ad",
  "issues": [
   {
    "number": "3519",
    "repo": "numba/numba"
   }
  ],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 22,
  "sent": "2018-12-01T08:04:06.887Z",
  "text": "@stuartarchibald Please review this PR - https://github.com/numba/numba/pull/3519",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"NanduTej\" class=\"mention\">@NanduTej</span> great, thanks. Review submitted.",
  "id": "5c05042699ad1556dbfbd92d",
  "issues": [],
  "mentions": [
   {
    "screenName": "NanduTej",
    "userId": "5bf71488d73408ce4fafd246",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 21,
  "sent": "2018-12-03T10:23:34.028Z",
  "text": "@NanduTej great, thanks. Review submitted.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-12-03T10:28:37.589Z",
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"cenwangumass\" class=\"mention\">@cenwangumass</span>  I think the issue here is that the code presented has nested parallelism (parallel sections that launch further parallel sections) that is not being spotted or handled correctly. Whilst I think the TBB library can handle this situation correctly, Numba at present lacks the capacity to express this to TBB, hence TBB launches <code>NUMBA_NUM_THREADS</code> threads and each of those then launches <code>NUMBA_NUM_THREADS</code> threads. I think the <code>omp</code> version works ok because <code>omp</code> impls tend to keep a hot threadpool of <code>OMP_NUM_THREADS</code> size and will only execute using those threads, so over-subscription of threads to cores never happens.",
  "id": "5c050501500e8e37285173fb",
  "issues": [],
  "mentions": [
   {
    "screenName": "cenwangumass",
    "userId": "5c00e5e1d73408ce4fb08634",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 21,
  "sent": "2018-12-03T10:27:13.846Z",
  "text": "@cenwangumass  I think the issue here is that the code presented has nested parallelism (parallel sections that launch further parallel sections) that is not being spotted or handled correctly. Whilst I think the TBB library can handle this situation correctly, Numba at present lacks the capacity to express this to TBB, hence TBB launches `NUMBA_NUM_THREADS` threads and each of those then launches `NUMBA_NUM_THREADS` threads. I think the `omp` version works ok because `omp` impls tend to keep a hot threadpool of `OMP_NUM_THREADS` size and will only execute using those threads, so over-subscription of threads to cores never happens.",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "editedAt": "2018-12-07T12:40:38.625Z",
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "<p>hello, i would like to increase the speed of this snippet of code:</p><pre><code>@<span class=\"function\"><span class=\"title\">guvectorize</span><span class=\"params\">([(boolean[:,:], boolean[:,:,:], uint8[:,:])</span></span>],\n                     <span class=\"string\">'(n,d),        (k,n,d)  -&gt;   (n,k)'</span>, target=<span class=\"string\">'parallel'</span>)\ndef <span class=\"function\"><span class=\"title\">hamming_distance</span><span class=\"params\">(D1, D2, C)</span></span>:\n    <span class=\"keyword\">for</span> <span class=\"tag\">i</span> <span class=\"keyword\">in</span> <span class=\"function\"><span class=\"title\">range</span><span class=\"params\">(C.shape[<span class=\"number\">0</span>])</span></span>:\n        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"function\"><span class=\"title\">range</span><span class=\"params\">(C.shape[<span class=\"number\">1</span>])</span></span>:\n            <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> <span class=\"function\"><span class=\"title\">range</span><span class=\"params\">(D1.shape[<span class=\"number\">1</span>])</span></span>:\n                C[<span class=\"tag\">i</span>,j] += D1[<span class=\"tag\">i</span>,k] ^ D2[j,<span class=\"tag\">i</span>,k]</code></pre><p>i was thinking to release the GIL, is it a good idea? does the gufunc automaticly release it? it takes 6 seconds on my machine to run in parallel mode, while it takes ages if I use the GPU</p>",
  "id": "5c0a69434808192b03fc60f5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-12-07T12:36:19.264Z",
  "text": "hello, i would like to increase the speed of this snippet of code:\n\n```\n@guvectorize([(boolean[:,:], boolean[:,:,:], uint8[:,:])],\n                     '(n,d),        (k,n,d)  ->   (n,k)', target='parallel')\ndef hamming_distance(D1, D2, C):\n    for i in range(C.shape[0]):\n        for j in range(C.shape[1]):\n            for k in range(D1.shape[1]):\n                C[i,j] += D1[i,k] ^ D2[j,i,k]\n```\n\ni was thinking to release the GIL, is it a good idea? does the gufunc automaticly release it? it takes 6 seconds on my machine to run in parallel mode, while it takes ages if I use the GPU",
  "unread": false,
  "urls": [],
  "v": 6
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "You can release it but I&#39;m not convinced it&#39;ll make any difference, the parallel target is scheduled and executed in a compiled C/C++ backend, the gufuncs are just passed to the backend to execute.",
  "id": "5c0a6c2228907a3c7be145cc",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-12-07T12:48:34.953Z",
  "text": "You can release it but I'm not convinced it'll make any difference, the parallel target is scheduled and executed in a compiled C/C++ backend, the gufuncs are just passed to the backend to execute.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "any tricks to improve the speed?",
  "id": "5c0a6c43178d7860a19c5f48",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-12-07T12:49:07.067Z",
  "text": "any tricks to improve the speed?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "switch the i and j loops",
  "id": "5c0a6c96f4880a60a23f2f10",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-12-07T12:50:30.605Z",
  "text": "switch the i and j loops",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "?",
  "id": "5c0a6ccf8d4f3a2a7c852b7d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-12-07T12:51:27.826Z",
  "text": "?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "same",
  "id": "5c0a6d07178d7860a19c6438",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-12-07T12:52:23.516Z",
  "text": "same",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "how big is your data?",
  "id": "5c0a6d1a5e409525032c55d6",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-12-07T12:52:42.504Z",
  "text": "how big is your data?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "can you safely switch on fastmath ?",
  "id": "5c0a6d2d80986419d5536062",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-12-07T12:53:01.658Z",
  "text": "can you safely switch on fastmath ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "there&#39;s not a lot of work per element, so its probably memory bound",
  "id": "5c0a6d4c4808192b03fc7b5b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-12-07T12:53:32.846Z",
  "text": "there's not a lot of work per element, so its probably memory bound",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "oh wait, i&#39;m calling it in a loop",
  "id": "5c0a6d635e409525032c582c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-12-07T12:53:55.756Z",
  "text": "oh wait, i'm calling it in a loop",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "let me try to pass the loop inside the function",
  "id": "5c0a6d6e33d9e11991958eb3",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-12-07T12:54:06.126Z",
  "text": "let me try to pass the loop inside the function",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<code>fastmath=True</code> would let the reduction accumulate in a vector register",
  "id": "5c0a6d82f4880a60a23f367a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-12-07T12:54:26.520Z",
  "text": "`fastmath=True` would let the reduction accumulate in a vector register",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "whereas at present it&#39;ll be using scalar instructions, accumulating to the bottom part of a vector register as a scalar",
  "id": "5c0a6da58336e22a7df655b0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-12-07T12:55:01.684Z",
  "text": "whereas at present it'll be using scalar instructions, accumulating to the bottom part of a vector register as a scalar",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "ok. i will try this first since it is faster",
  "id": "5c0a6db58336e22a7df655d7",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-12-07T12:55:17.594Z",
  "text": "ok. i will try this first since it is faster",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "same speed with fastmath, probably the problem is in the outer loop around the function",
  "id": "5c0a6e334808192b03fc82fb",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-12-07T12:57:23.259Z",
  "text": "same speed with fastmath, probably the problem is in the outer loop around the function",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "i will try to bring it in",
  "id": "5c0a6e3828907a3c7be15309",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-12-07T12:57:28.552Z",
  "text": "i will try to bring it in",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "oh its bool dtype, :S might just get a loop unroll at best",
  "id": "5c0a6e3a28907a3c7be1530b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-12-07T12:57:30.948Z",
  "text": "oh its bool dtype, :S might just get a loop unroll at best",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "what if my input has this size: (718, 496, 32) (718, 496, 32)  and the output (718, 496, 200)",
  "id": "5c0a87373de4e816e22476c7",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-12-07T14:44:07.474Z",
  "text": "what if my input has this size: (718, 496, 32) (718, 496, 32)  and the output (718, 496, 200)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "i would write:<pre><code>@<span class=\"atom\">guvectorize</span>([(<span class=\"atom\">boolean</span>[:,:,:], <span class=\"atom\">boolean</span>[:,:,:], <span class=\"atom\">uint8</span>[:,:,:])],\n                     <span class=\"string\">'(m,n,d),        (m,n,d)  -&gt;   (m,n,k)'</span>, <span class=\"atom\">target</span>=<span class=\"string\">'parallel'</span>)</code></pre>",
  "id": "5c0a87545e409525032d0785",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-12-07T14:44:36.382Z",
  "text": "i would write:\n```\n@guvectorize([(boolean[:,:,:], boolean[:,:,:], uint8[:,:,:])],\n                     '(m,n,d),        (m,n,d)  ->   (m,n,k)', target='parallel')\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "but it gives error on k since it is not defined in the input",
  "id": "5c0a87655e409525032d07a6",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-12-07T14:44:53.722Z",
  "text": "but it gives error on k since it is not defined in the input",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "is there a workaround? or is this considered a bad practice?",
  "id": "5c0a8784f992693c7a388a7a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-12-07T14:45:24.088Z",
  "text": "is there a workaround? or is this considered a bad practice?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "does it always go to 200 ?",
  "id": "5c0a99a58b656e2b04d9e69c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-12-07T16:02:45.543Z",
  "text": "does it always go to 200 ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "yes",
  "id": "5c0aa745f992693c7a39659e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-12-07T17:00:53.942Z",
  "text": "yes",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "it is kind of a const",
  "id": "5c0aa74c28907a3c7be2e3f9",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-12-07T17:01:00.264Z",
  "text": "it is kind of a const",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "so no matter what m, n, d, it&#39;ll come out as <code>m, n, 200</code> ?",
  "id": "5c0aa93fe4787d16e35e279f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-12-07T17:09:19.382Z",
  "text": "so no matter what m, n, d, it'll come out as `m, n, 200` ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "yes",
  "id": "5c0aad871e86c3082340408c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-12-07T17:27:35.027Z",
  "text": "yes",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "my workaround would be to use a dummy array with size 200 as input that i don&#39;t use",
  "id": "5c0aae2f33d9e119919751ed",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-12-07T17:30:23.352Z",
  "text": "my workaround would be to use a dummy array with size 200 as input that i don't use",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-12-08T11:04:28.993Z",
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "like this:<pre><code><span class=\"decorator\">@guvectorize([(boolean[:], boolean[:,:,:], boolean[:,:,:], uint8[:,:,:])],</span>\n                     <span class=\"string\">'(k),        (m,n,d),        (m,n,d)  -&gt;   (m,n,k)'</span>, target=<span class=\"string\">'parallel'</span>)<span class=\"comment\">#</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hamming_distance</span><span class=\"params\">(dummy, D1, D2, C)</span>:</span></code></pre>",
  "id": "5c0ba5348b656e2b04e014fa",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-12-08T11:04:20.122Z",
  "text": "like this:\n```\n@guvectorize([(boolean[:], boolean[:,:,:], boolean[:,:,:], uint8[:,:,:])],\n                     '(k),        (m,n,d),        (m,n,d)  ->   (m,n,k)', target='parallel')#\ndef hamming_distance(dummy, D1, D2, C):\n```",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "editedAt": "2018-12-08T11:05:15.383Z",
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "which is kind of ridiculous since dummy is never used in the code",
  "id": "5c0ba55f11bb5b250480d3b3",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-12-08T11:05:03.891Z",
  "text": "which is kind of ridiculous since dummy is never used in the code",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "editedAt": "2018-12-09T21:01:46.993Z",
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 16
  },
  "html": "Hello. I&#39;m trying to get a zero of a particular type in Numba.<pre><code class=\"python\"><span class=\"decorator\">@njit</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">example</span><span class=\"params\">(a, b)</span>:</span>\n    c = <span class=\"number\">0</span>\n    <span class=\"keyword\">for</span> ai, bi <span class=\"keyword\">in</span> zip(a, b):\n        c += ai * bi\n\n    <span class=\"keyword\">return</span> np.array([c])</code></pre>",
  "id": "5c0d8081f992693c7a4a6868",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-12-09T20:52:17.131Z",
  "text": "Hello. I'm trying to get a zero of a particular type in Numba.\n\n```python\n@njit\ndef example(a, b):\n    c = 0\n    for ai, bi in zip(a, b):\n        c += ai * bi\n\n    return np.array([c])\n```",
  "unread": false,
  "urls": [],
  "v": 4
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 16
  },
  "html": "<code>c</code> sometimes has the wrong dtype e.g. for <code>a.dtype</code> and <code>b.dtype</code> is <code>np.uint8</code>.",
  "id": "5c0d80d526de6f0822ab5ef0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-12-09T20:53:41.256Z",
  "text": "`c` sometimes has the wrong dtype e.g. for `a.dtype` and `b.dtype` is `np.uint8`.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 16
  },
  "html": "Is there something like <code>np.result_type</code>?",
  "id": "5c0d80eaf4880a60a251deb0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-12-09T20:54:02.269Z",
  "text": "Is there something like `np.result_type`?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/asodeur",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/38456167?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/38456167?v=4&s=60",
   "displayName": "Andreas Sodeur",
   "gv": "4",
   "id": "5b39e8fbd73408ce4f9f4daf",
   "url": "/asodeur",
   "username": "asodeur",
   "v": 2
  },
  "html": "Hello, is there a way to debug jit compiled code on Windows? I tried GDB as in the troubleshooting section but the breakpoint is ignored.",
  "id": "5c0e33098b656e2b04ef4752",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-12-10T09:34:01.178Z",
  "text": "Hello, is there a way to debug jit compiled code on Windows? I tried GDB as in the troubleshooting section but the breakpoint is ignored.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-12-10T10:22:38.735Z",
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"hameerabbasi\" class=\"mention\">@hameerabbasi</span> I think this is just type inference moving to wider types to ensure safe behaviours. You can use the <code>locals</code> kwarg in the <code>jit</code> decorators to set the type of specific variables if that helps ? <a href=\"http://numba.pydata.org/numba-doc/latest/reference/jit-compilation.html?highlight=locals\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://numba.pydata.org/numba-doc/latest/reference/jit-compilation.html?highlight=locals</a><pre><code><span class=\"keyword\">from</span> numba <span class=\"keyword\">import</span> njit, types, numpy_support\n<span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np\n\ndt1 = np.uint8\ndt2 = np.uint16\n\n<span class=\"decorator\">@njit(locals={'c': numpy_support.from_dtype(np.result_type(dt1, dt2))})</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">example</span><span class=\"params\">(a, b)</span>:</span>\n    c = <span class=\"number\">0</span>\n    <span class=\"keyword\">for</span> ai, bi <span class=\"keyword\">in</span> zip(a, b):\n        c += ai * bi\n\n    <span class=\"keyword\">return</span> np.array([c])\n\n\na = np.zeros(<span class=\"number\">10</span>, dtype=dt1)\nb = np.zeros(<span class=\"number\">10</span>, dtype=dt2)\n\n<span class=\"keyword\">print</span> (example(a, b))\n\nexample.inspect_types()</code></pre>",
  "id": "5c0e3e594808192b03135fd9",
  "issues": [],
  "mentions": [
   {
    "screenName": "hameerabbasi",
    "userId": "55b089c90fc9f982beaaa526",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 14,
  "sent": "2018-12-10T10:22:17.689Z",
  "text": "@hameerabbasi I think this is just type inference moving to wider types to ensure safe behaviours. You can use the `locals` kwarg in the `jit` decorators to set the type of specific variables if that helps ? http://numba.pydata.org/numba-doc/latest/reference/jit-compilation.html?highlight=locals\n```\nfrom numba import njit, types, numpy_support\nimport numpy as np\n\ndt1 = np.uint8\ndt2 = np.uint16\n\n@njit(locals={'c': numpy_support.from_dtype(np.result_type(dt1, dt2))})\ndef example(a, b):\n    c = 0\n    for ai, bi in zip(a, b):\n        c += ai * bi\n\n    return np.array([c])\n\n\na = np.zeros(10, dtype=dt1)\nb = np.zeros(10, dtype=dt2)\n\nprint (example(a, b))\n\nexample.inspect_types()\n```",
  "unread": false,
  "urls": [
   {
    "url": "http://numba.pydata.org/numba-doc/latest/reference/jit-compilation.html?highlight=locals"
   }
  ],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"asodeur\" class=\"mention\">@asodeur</span> tend to just hook it with MS built in debugging tools. If I get really stuck I compile a tiny library with a known named function in it <code>void mybreakpoint(void) {} ;</code>, then bind to it with ctypes and then make a call in the jitted code to that known function, this gives a known break point.",
  "id": "5c0e3fa5f992693c7a4ed5bb",
  "issues": [],
  "mentions": [
   {
    "screenName": "asodeur",
    "userId": "5b39e8fbd73408ce4f9f4daf",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 14,
  "sent": "2018-12-10T10:27:49.843Z",
  "text": "@asodeur tend to just hook it with MS built in debugging tools. If I get really stuck I compile a tiny library with a known named function in it `void mybreakpoint(void) {} ;`, then bind to it with ctypes and then make a call in the jitted code to that known function, this gives a known break point.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span> any advice to avoid the dummy array?",
  "id": "5c0e4fc54808192b0313e42b",
  "issues": [],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 13,
  "sent": "2018-12-10T11:36:37.873Z",
  "text": "@stuartarchibald any advice to avoid the dummy array?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"lpuglia\" class=\"mention\">@lpuglia</span> I don&#39;t think there is a way around it that doesn&#39;t involve doing something horrendous. The signature&#39;s accepted must follow the grammar <a href=\"https://docs.scipy.org/doc/numpy-1.15.0/reference/c-api.generalized-ufuncs.html#details-of-signature\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://docs.scipy.org/doc/numpy-1.15.0/reference/c-api.generalized-ufuncs.html#details-of-signature</a>",
  "id": "5c0e55afe4787d16e373f8d2",
  "issues": [],
  "mentions": [
   {
    "screenName": "lpuglia",
    "userId": "5bc8acc0d73408ce4fabe62d",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 13,
  "sent": "2018-12-10T12:01:51.401Z",
  "text": "@lpuglia I don't think there is a way around it that doesn't involve doing something horrendous. The signature's accepted must follow the grammar https://docs.scipy.org/doc/numpy-1.15.0/reference/c-api.generalized-ufuncs.html#details-of-signature",
  "unread": false,
  "urls": [
   {
    "url": "https://docs.scipy.org/doc/numpy-1.15.0/reference/c-api.generalized-ufuncs.html#details-of-signature"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "Are you certain gufunc&#39;s are the things you need? could standard <code>@njit</code> work just as well ?",
  "id": "5c0e55c88336e22a7d0da8fb",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-12-10T12:02:16.703Z",
  "text": "Are you certain gufunc's are the things you need? could standard `@njit` work just as well ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 16
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span> Is there a way to ensure this dynamically?",
  "id": "5c0e588628907a3c7bf90d4f",
  "issues": [],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 15,
  "sent": "2018-12-10T12:13:58.952Z",
  "text": "@stuartarchibald Is there a way to ensure this dynamically?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 16
  },
  "html": "For all input <code>dtype</code>s?",
  "id": "5c0e58968b656e2b04f0405f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-12-10T12:14:14.140Z",
  "text": "For all input `dtype`s?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"hameerabbasi\" class=\"mention\">@hameerabbasi</span> not sure what you mean? Are you asking to force the dtypes of each input var to some specific type but without having to declare them in <code>locals</code>??",
  "id": "5c0e5a4080986419d56b4072",
  "issues": [],
  "mentions": [
   {
    "screenName": "hameerabbasi",
    "userId": "55b089c90fc9f982beaaa526",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 16,
  "sent": "2018-12-10T12:21:20.601Z",
  "text": "@hameerabbasi not sure what you mean? Are you asking to force the dtypes of each input var to some specific type but without having to declare them in `locals`??",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 16
  },
  "html": "I can have arbitrary input types, they aren&#39;t fixed.",
  "id": "5c0e5ae14808192b0314391a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-12-10T12:24:01.964Z",
  "text": "I can have arbitrary input types, they aren't fixed.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 16
  },
  "html": "If they were fixed, your solution would be quite nice.",
  "id": "5c0e5af08d4f3a2a7c9c9dab",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-12-10T12:24:16.549Z",
  "text": "If they were fixed, your solution would be quite nice.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "use a closure?",
  "id": "5c0e5b0a178d7860a1b40180",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-12-10T12:24:42.943Z",
  "text": "use a closure?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 16
  },
  "html": "Ah, yes, a closure+memoization would work.",
  "id": "5c0e5b6033d9e11991ad5bf8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-12-10T12:26:08.381Z",
  "text": "Ah, yes, a closure+memoization would work.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span> maybe you are right, i started with a gufunc, than i incorporeted the outer loop inside the gufunc, at this point, probably, it doesn&#39;t make any sense anymore",
  "id": "5c0e638df4880a60a2574f5c",
  "issues": [],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 16,
  "sent": "2018-12-10T13:01:01.180Z",
  "text": "@stuartarchibald maybe you are right, i started with a gufunc, than i incorporeted the outer loop inside the gufunc, at this point, probably, it doesn't make any sense anymore",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-12-10T13:06:43.718Z",
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/lpuglia",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2184440?v=4&s=60",
   "displayName": "Luca",
   "gv": "4",
   "id": "5bc8acc0d73408ce4fabe62d",
   "url": "/lpuglia",
   "username": "lpuglia",
   "v": 1
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span>  you were right, <code>@njit</code> is much more meaningfull in this case, thank you! :)",
  "id": "5c0e64db1e86c3082356b443",
  "issues": [],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 17,
  "sent": "2018-12-10T13:06:35.943Z",
  "text": "@stuartarchibald  you were right, `@njit` is much more meaningfull in this case, thank you! :)",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"lpuglia\" class=\"mention\">@lpuglia</span> no problem, gufuncs are great if you have a case where you want to broadcast some operation over data of dimensions potentially higher than the domain of the operation. That dummy arrays were needed is a reasonable indicator that something else may be more suitable. Glad you&#39;ve got it working :)",
  "id": "5c0e661e3de4e816e23c0207",
  "issues": [],
  "mentions": [
   {
    "screenName": "lpuglia",
    "userId": "5bc8acc0d73408ce4fabe62d",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 17,
  "sent": "2018-12-10T13:11:58.969Z",
  "text": "@lpuglia no problem, gufuncs are great if you have a case where you want to broadcast some operation over data of dimensions potentially higher than the domain of the operation. That dummy arrays were needed is a reasonable indicator that something else may be more suitable. Glad you've got it working :)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/NanduTej",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/27914041?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/27914041?v=4&s=60",
   "displayName": "Teja Nanduri",
   "gv": "4",
   "id": "5bf71488d73408ce4fafd246",
   "url": "/NanduTej",
   "username": "NanduTej",
   "v": 5
  },
  "html": "Hey, I was running into an error while running a code -- ImportError: cannot import name &#39;_typeconv&#39;. Can you help me fix this?",
  "id": "5c0e88a133d9e11991ae8ac3",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-12-10T15:39:13.081Z",
  "text": "Hey, I was running into an error while running a code -- ImportError: cannot import name '_typeconv'. Can you help me fix this?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"NanduTej\" class=\"mention\">@NanduTej</span> recompile Numba the C/extension libraries <code>python setup.py build_ext --inplace</code>",
  "id": "5c0e8cbd80986419d56c9c67",
  "issues": [],
  "mentions": [
   {
    "screenName": "NanduTej",
    "userId": "5bf71488d73408ce4fafd246",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 16,
  "sent": "2018-12-10T15:56:45.474Z",
  "text": "@NanduTej recompile Numba the C/extension libraries `python setup.py build_ext --inplace`",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/NanduTej",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/27914041?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/27914041?v=4&s=60",
   "displayName": "Teja Nanduri",
   "gv": "4",
   "id": "5bf71488d73408ce4fafd246",
   "url": "/NanduTej",
   "username": "NanduTej",
   "v": 5
  },
  "html": "That worked. Thank you!",
  "id": "5c0e8cf64808192b0315a32f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-12-10T15:57:42.000Z",
  "text": "That worked. Thank you!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "np",
  "id": "5c0e8f4680986419d56cacb4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-12-10T16:07:34.845Z",
  "text": "np",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 16
  },
  "html": "How would I go about reporting a semi-reproducible bug with the logic of the code Numba generated? Basically, when I turn jitting on, it gives me an out-of-range index error every 2-3 runs of my test suite, but with jitting off, it doesn&#39;t give any errors even in 20 runs.",
  "id": "5c0e9256f4880a60a25896d0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-12-10T16:20:38.363Z",
  "text": "How would I go about reporting a semi-reproducible bug with the logic of the code Numba generated? Basically, when I turn jitting on, it gives me an out-of-range index error every 2-3 runs of my test suite, but with jitting off, it doesn't give any errors even in 20 runs.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 16
  },
  "html": "I&#39;ve tried this numerous times.",
  "id": "5c0e9261e4787d16e375a65f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-12-10T16:20:49.412Z",
  "text": "I've tried this numerous times.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 16
  },
  "html": "It&#39;s semi-reproducible on both Travis and my local machine.",
  "id": "5c0e93224808192b0315cdaf",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-12-10T16:24:02.042Z",
  "text": "It's semi-reproducible on both Travis and my local machine.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "How big is the code to reproduce ?",
  "id": "5c0e932c11bb5b2504929129",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-12-10T16:24:12.107Z",
  "text": "How big is the code to reproduce ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 16
  },
  "html": "Well the relevant jitted code is about 30-35 lines. But to reproduce, I&#39;d have to isolate it somehow... Thing is, we test for random inputs so it&#39;s hard to nail down one input.",
  "id": "5c0e93a35e4095250345b84a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-12-10T16:26:11.170Z",
  "text": "Well the relevant jitted code is about 30-35 lines. But to reproduce, I'd have to isolate it somehow... Thing is, we test for random inputs so it's hard to nail down one input.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 16
  },
  "html": "I&#39;m still working on doing that though.",
  "id": "5c0e93ace4787d16e375aed6",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-12-10T16:26:20.595Z",
  "text": "I'm still working on doing that though.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "Perhaps set up the tests so that they whilst the input is randomized the RNG seed are fixed?",
  "id": "5c0e93f126de6f0822b1f07c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-12-10T16:27:29.912Z",
  "text": "Perhaps set up the tests so that they whilst the input is randomized the RNG seed are fixed?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 16
  },
  "html": "That could work. Or I could dump the relevant files after the test fails.",
  "id": "5c0e9425f992693c7a511eb8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-12-10T16:28:21.605Z",
  "text": "That could work. Or I could dump the relevant files after the test fails.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "Well, in general, having reproducible test sequences is a good idea because then you know precisely what is failing and have a chance of reproducing it. Imagine a worse case where there&#39;s no fixed seed but its 1 in 1000 runs that fails, that&#39;d be really hard to debug as there&#39;s 1/1000 chance it&#39;s hit, and most of the time the bug silently passes.",
  "id": "5c0e949680986419d56cd17f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-12-10T16:30:14.111Z",
  "text": "Well, in general, having reproducible test sequences is a good idea because then you know precisely what is failing and have a chance of reproducing it. Imagine a worse case where there's no fixed seed but its 1 in 1000 runs that fails, that'd be really hard to debug as there's 1/1000 chance it's hit, and most of the time the bug silently passes.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"hameerabbasi\" class=\"mention\">@hameerabbasi</span> If it&#39;s an open source project that&#39;s not too onerous to build then you could share that + failing test name and how to run the test?",
  "id": "5c0e95fc8d4f3a2a7c9e3ca5",
  "issues": [],
  "mentions": [
   {
    "screenName": "hameerabbasi",
    "userId": "55b089c90fc9f982beaaa526",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 19,
  "sent": "2018-12-10T16:36:12.349Z",
  "text": "@hameerabbasi If it's an open source project that's not too onerous to build then you could share that + failing test name and how to run the test?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 16
  },
  "html": "I&#39;m debugging... Trying to make it reproducible. <a href=\"https://travis-ci.org/pydata/sparse/jobs/466049243\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://travis-ci.org/pydata/sparse/jobs/466049243</a>",
  "id": "5c0e99898d4f3a2a7c9e564c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-12-10T16:51:21.020Z",
  "text": "I'm debugging... Trying to make it reproducible. https://travis-ci.org/pydata/sparse/jobs/466049243",
  "unread": false,
  "urls": [
   {
    "url": "https://travis-ci.org/pydata/sparse/jobs/466049243"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 16
  },
  "html": "Here&#39;s the traceback.",
  "id": "5c0e998e1e86c308235832b1",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-12-10T16:51:26.937Z",
  "text": "Here's the traceback.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 16
  },
  "html": "Reduce it to a minimal example.",
  "id": "5c0e999d178d7860a1b5b46e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-12-10T16:51:41.197Z",
  "text": "Reduce it to a minimal example.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 16
  },
  "html": "<a href=\"https://files.gitter.im/numba/numba/JMiy/Archive.zip\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">Archive.zip</a>",
  "id": "5c0e9ab98d4f3a2a7c9e5cf9",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-12-10T16:56:25.302Z",
  "text": "[Archive.zip](https://files.gitter.im/numba/numba/JMiy/Archive.zip)",
  "unread": false,
  "urls": [
   {
    "url": "https://files.gitter.im/numba/numba/JMiy/Archive.zip"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 16
  },
  "html": "That&#39;s a minimal example with the code from the repo here: <a href=\"https://github.com/hameerabbasi/sparse/tree/custom-dot\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://github.com/hameerabbasi/sparse/tree/custom-dot</a>",
  "id": "5c0e9ae6f992693c7a514860",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-12-10T16:57:10.094Z",
  "text": "That's a minimal example with the code from the repo here: https://github.com/hameerabbasi/sparse/tree/custom-dot",
  "unread": false,
  "urls": [
   {
    "url": "https://github.com/hameerabbasi/sparse/tree/custom-dot"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 16
  },
  "html": "Toggling off/on the jit decorator causes it.",
  "id": "5c0e9b4e28907a3c7bfad327",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-12-10T16:58:54.441Z",
  "text": "Toggling off/on the jit decorator causes it.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 16
  },
  "html": "(I suspect it&#39;s reordering some conditions in the <code>if</code> statements, and that causes the error because short-circuiting didn&#39;t work as intended)",
  "id": "5c0e9c9911bb5b250492d855",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-12-10T17:04:25.138Z",
  "text": "(I suspect it's reordering some conditions in the `if` statements, and that causes the error because short-circuiting didn't work as intended)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "It&#39;s a bug",
  "id": "5c0ea29580986419d56d350d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-12-10T17:29:57.270Z",
  "text": "It's a bug",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-12-10T17:30:17.696Z",
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<pre><code><span class=\"keyword\">from</span> numba <span class=\"keyword\">import</span> njit\n<span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np\n\n<span class=\"decorator\">@njit</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">(z)</span>:</span>\n    x = []\n    <span class=\"keyword\">if</span> z:\n        x.append([<span class=\"number\">10</span>])\n    <span class=\"keyword\">return</span> np.array(x)\n\nprint(foo(<span class=\"number\">0</span>))</code></pre>",
  "id": "5c0ea29b4808192b031631f1",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-12-10T17:30:03.571Z",
  "text": "```\nfrom numba import njit\nimport numpy as np\n\n@njit\ndef foo(z):\n    x = []\n    if z:\n        x.append([10])\n    return np.array(x)\n\nprint(foo(0))\n```",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<code>x</code> is typed as a <code>list(list(int64))</code> the array ctor expects a list of list of int, but upon arrival it is simply a list",
  "id": "5c0ea2de28907a3c7bfb06e4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-12-10T17:31:10.883Z",
  "text": "`x` is typed as a `list(list(int64))` the array ctor expects a list of list of int, but upon arrival it is simply a list",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "and here&#39;s a work around:",
  "id": "5c0ea32a3de4e816e23da77e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-12-10T17:32:26.348Z",
  "text": "and here's a work around:",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<pre><code>@njit\ndef <span class=\"function\"><span class=\"title\">foo</span><span class=\"params\">(z)</span></span>:\n    x = []\n    <span class=\"keyword\">if</span> z:\n        x.<span class=\"function\"><span class=\"title\">append</span><span class=\"params\">([<span class=\"number\">10</span>])</span></span>\n    <span class=\"keyword\">if</span> <span class=\"function\"><span class=\"title\">len</span><span class=\"params\">(x)</span></span> == <span class=\"number\">0</span>:\n        x.<span class=\"function\"><span class=\"title\">append</span><span class=\"params\">([_ for _ in range(<span class=\"number\">0</span>)</span></span>])\n    return np.<span class=\"function\"><span class=\"title\">array</span><span class=\"params\">(x)</span></span>\n\n<span class=\"function\"><span class=\"title\">print</span><span class=\"params\">(foo(<span class=\"number\">0</span>)</span></span>)\n<span class=\"function\"><span class=\"title\">print</span><span class=\"params\">(foo(<span class=\"number\">1</span>)</span></span>)</code></pre>",
  "id": "5c0ea32d8336e22a7d0fb50c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-12-10T17:32:29.842Z",
  "text": "```\n@njit\ndef foo(z):\n    x = []\n    if z:\n        x.append([10])\n    if len(x) == 0:\n        x.append([_ for _ in range(0)])\n    return np.array(x)\n\nprint(foo(0))\nprint(foo(1))\n```\n\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "in your code you&#39;ll need to add that branch before performing the construction of the two arrays on exit, if the list are length zero then they&#39;ll need a dummy entry adding.",
  "id": "5c0ea3598d4f3a2a7c9e9b93",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 20,
  "sent": "2018-12-10T17:33:13.169Z",
  "text": "in your code you'll need to add that branch before performing the construction of the two arrays on exit, if the list are length zero then they'll need a dummy entry adding.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"hameerabbasi\" class=\"mention\">@hameerabbasi</span> ^",
  "id": "5c0ea3a433d9e11991af4f93",
  "issues": [],
  "mentions": [
   {
    "screenName": "hameerabbasi",
    "userId": "55b089c90fc9f982beaaa526",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 22,
  "sent": "2018-12-10T17:34:28.852Z",
  "text": "@hameerabbasi ^",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<a target=\"_blank\" data-link-type=\"issue\" data-issue=\"3579\" href=\"https://github.com/numba/numba/issues/3579\" data-provider=\"github\" data-issue-repo=\"numba/numba\" class=\"issue\">numba/numba#3579</a>",
  "id": "5c0ea82f80986419d56d5d41",
  "issues": [
   {
    "number": "3579",
    "repo": "numba/numba"
   }
  ],
  "mentions": [],
  "meta": [],
  "readBy": 21,
  "sent": "2018-12-10T17:53:51.539Z",
  "text": "https://github.com/numba/numba/issues/3579",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 16
  },
  "html": "I fixed it by another method. Thanks!",
  "id": "5c0eadfe3de4e816e23dea4a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 22,
  "sent": "2018-12-10T18:18:38.272Z",
  "text": "I fixed it by another method. Thanks!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hameerabbasi",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2190658?v=4&s=60",
   "displayName": "Hameer Abbasi",
   "gv": "4",
   "id": "55b089c90fc9f982beaaa526",
   "url": "/hameerabbasi",
   "username": "hameerabbasi",
   "v": 16
  },
  "html": "(I worked out what the resultant arrays for 0-length would be)",
  "id": "5c0eae14e4787d16e3766729",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 24,
  "sent": "2018-12-10T18:19:00.749Z",
  "text": "(I worked out what the resultant arrays for 0-length would be)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hannaml",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/504036?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/504036?v=4&s=60",
   "displayName": "Hanna",
   "gv": "4",
   "id": "5c0ed1d5d73408ce4fb18506",
   "url": "/hannaml",
   "username": "hannaml",
   "v": 1
  },
  "html": "Hi all: I&#39;m having an issue with performance regression going from v0.40 to 0.41. ",
  "id": "5c0ed22c178d7860a1b72b42",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 24,
  "sent": "2018-12-10T20:53:00.529Z",
  "text": "Hi all: I'm having an issue with performance regression going from v0.40 to 0.41. ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hannaml",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/504036?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/504036?v=4&s=60",
   "displayName": "Hanna",
   "gv": "4",
   "id": "5c0ed1d5d73408ce4fb18506",
   "url": "/hannaml",
   "username": "hannaml",
   "v": 1
  },
  "html": "I believe it is the same is this issue <a target=\"_blank\" data-link-type=\"issue\" data-issue=\"3548\" href=\"https://github.com/numba/numba/issues/3548?_pjax=%23js-repo-pjax-container\" data-provider=\"github\" data-issue-repo=\"numba/numba\" class=\"issue\">numba/numba#3548</a>",
  "id": "5c0ed2364808192b0317875c",
  "issues": [
   {
    "number": "3548",
    "repo": "numba/numba"
   }
  ],
  "mentions": [],
  "meta": [],
  "readBy": 24,
  "sent": "2018-12-10T20:53:10.995Z",
  "text": "I believe it is the same is this issue https://github.com/numba/numba/issues/3548?_pjax=%23js-repo-pjax-container",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hannaml",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/504036?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/504036?v=4&s=60",
   "displayName": "Hanna",
   "gv": "4",
   "id": "5c0ed1d5d73408ce4fb18506",
   "url": "/hannaml",
   "username": "hannaml",
   "v": 1
  },
  "html": "Except i have numpy arrays of floats and ints rather than lists",
  "id": "5c0ed25228907a3c7bfc42f4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 24,
  "sent": "2018-12-10T20:53:38.042Z",
  "text": "Except i have numpy arrays of floats and ints rather than lists",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hannaml",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/504036?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/504036?v=4&s=60",
   "displayName": "Hanna",
   "gv": "4",
   "id": "5c0ed1d5d73408ce4fb18506",
   "url": "/hannaml",
   "username": "hannaml",
   "v": 1
  },
  "html": "Should I file a separate issue /  just comment on the existing issue ?",
  "id": "5c0ed28f178d7860a1b72e40",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 24,
  "sent": "2018-12-10T20:54:39.235Z",
  "text": "Should I file a separate issue /  just comment on the existing issue ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hannaml",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/504036?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/504036?v=4&s=60",
   "displayName": "Hanna",
   "gv": "4",
   "id": "5c0ed1d5d73408ce4fb18506",
   "url": "/hannaml",
   "username": "hannaml",
   "v": 1
  },
  "html": "or nothing at all?",
  "id": "5c0ed293e4787d16e3775aba",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 24,
  "sent": "2018-12-10T20:54:43.860Z",
  "text": "or nothing at all?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hannaml",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/504036?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/504036?v=4&s=60",
   "displayName": "Hanna",
   "gv": "4",
   "id": "5c0ed1d5d73408ce4fb18506",
   "url": "/hannaml",
   "username": "hannaml",
   "v": 1
  },
  "html": "To clarify, the note on the potential source of slowdown in <a target=\"_blank\" data-link-type=\"issue\" data-issue=\"3548\" href=\"https://github.com/numba/numba/issues/3548?_pjax=%23js-repo-pjax-container\" data-provider=\"github\" data-issue-repo=\"numba/numba\" class=\"issue\">numba/numba#3548</a> specifically mentions type checking in lists.  I don&#39;t understand numba&#39;s inner workings, so am not sure if my slowdown issue using numpy arrays is likely to be the same thing, or something different where I should open a new issue?",
  "id": "5c0eddadf992693c7a530adf",
  "issues": [
   {
    "number": "3548",
    "repo": "numba/numba"
   }
  ],
  "mentions": [],
  "meta": [],
  "readBy": 24,
  "sent": "2018-12-10T21:42:05.537Z",
  "text": "To clarify, the note on the potential source of slowdown in https://github.com/numba/numba/issues/3548?_pjax=%23js-repo-pjax-container specifically mentions type checking in lists.  I don't understand numba's inner workings, so am not sure if my slowdown issue using numpy arrays is likely to be the same thing, or something different where I should open a new issue?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"hannaml\" class=\"mention\">@hannaml</span>  thanks for raising this. If you have a reproducer, please open a new issue so that the source of the problem can be identified, if it is the same as <a target=\"_blank\" data-link-type=\"issue\" data-issue=\"3548\" href=\"https://github.com/numba/numba/issues/3548\" data-provider=\"github\" data-issue-repo=\"numba/numba\" class=\"issue\">numba/numba#3548</a> no harm is done, it can be closed as a duplicate. Thanks.",
  "id": "5c0edf7e28907a3c7bfc9c4a",
  "issues": [
   {
    "number": "3548",
    "repo": "numba/numba"
   }
  ],
  "mentions": [
   {
    "screenName": "hannaml",
    "userId": "5c0ed1d5d73408ce4fb18506",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 24,
  "sent": "2018-12-10T21:49:50.530Z",
  "text": "@hannaml  thanks for raising this. If you have a reproducer, please open a new issue so that the source of the problem can be identified, if it is the same as https://github.com/numba/numba/issues/3548 no harm is done, it can be closed as a duplicate. Thanks.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hannaml",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/504036?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/504036?v=4&s=60",
   "displayName": "Hanna",
   "gv": "4",
   "id": "5c0ed1d5d73408ce4fb18506",
   "url": "/hannaml",
   "username": "hannaml",
   "v": 1
  },
  "html": "Great, thank you.  I&#39;ll work on a minimal reproducer.",
  "id": "5c0ee07c11bb5b2504949d1e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 24,
  "sent": "2018-12-10T21:54:04.159Z",
  "text": "Great, thank you.  I'll work on a minimal reproducer.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/sjperkins",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/3530212?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/3530212?v=4&s=60",
   "displayName": "Simon Perkins",
   "gv": "4",
   "id": "54e5dc4615522ed4b3dc335f",
   "url": "/sjperkins",
   "username": "sjperkins",
   "v": 5
  },
  "html": "Would it be possible to get some feedback in <a target=\"_blank\" data-link-type=\"pr\" data-issue=\"3450\" href=\"https://github.com/numba/numba/pull/3450?\" data-provider=\"github\" data-issue-repo=\"numba/numba\" class=\"pr\">numba/numba#3450</a> Briefly, if cuda is not available on CI servers, the CUDA target doesn&#39;t get placed in the registry. Consequently the PR&#39;s generated_jit tests fail. I&#39;d like to know whether the tests should simply be disabled if CUDA isn&#39;t available for testing or whether the CUDA target should be available (even if CUDA itself is not).",
  "id": "5c0fbe125e409525034d6c28",
  "issues": [
   {
    "number": "3450",
    "repo": "numba/numba"
   }
  ],
  "mentions": [],
  "meta": [],
  "readBy": 23,
  "sent": "2018-12-11T13:39:30.180Z",
  "text": "Would it be possible to get some feedback in https://github.com/numba/numba/pull/3450? Briefly, if cuda is not available on CI servers, the CUDA target doesn't get placed in the registry. Consequently the PR's generated_jit tests fail. I'd like to know whether the tests should simply be disabled if CUDA isn't available for testing or whether the CUDA target should be available (even if CUDA itself is not).",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"sjperkins\" class=\"mention\">@sjperkins</span> I think if they can be run under the simulator then they should be, else it&#39;s fine to switch them off unless CUDA hardware is present.",
  "id": "5c0fdb158d4f3a2a7ca6a665",
  "issues": [],
  "mentions": [
   {
    "screenName": "sjperkins",
    "userId": "54e5dc4615522ed4b3dc335f",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 23,
  "sent": "2018-12-11T15:43:17.083Z",
  "text": "@sjperkins I think if they can be run under the simulator then they should be, else it's fine to switch them off unless CUDA hardware is present.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/ker2x",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/76649?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/76649?v=4&s=60",
   "displayName": "Laurent Laborde",
   "gv": "4",
   "id": "55aab46c8a7b72f55c3fc618",
   "url": "/ker2x",
   "username": "ker2x",
   "v": 3
  },
  "html": "Friendly greetings ! is numba supposed to be able to parallelize a ndenumerate loop ?",
  "id": "5c1418bc94d8cd0b9cc4b17a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-12-14T20:55:24.273Z",
  "text": "Friendly greetings ! is numba supposed to be able to parallelize a ndenumerate loop ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "Don&#39;t think that&#39;s supported",
  "id": "5c1419b1c428e9539d3c8034",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-12-14T20:59:29.712Z",
  "text": "Don't think that's supported",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<a href=\"http://numba.pydata.org/numba-doc/latest/user/parallel.html\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://numba.pydata.org/numba-doc/latest/user/parallel.html</a>",
  "id": "5c1419c80a145b0e249f4429",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-12-14T20:59:52.860Z",
  "text": "http://numba.pydata.org/numba-doc/latest/user/parallel.html",
  "unread": false,
  "urls": [
   {
    "url": "http://numba.pydata.org/numba-doc/latest/user/parallel.html"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "a parallel <code>range</code> loop is possible, it&#39;s accessed via <code>prange</code>",
  "id": "5c141a0ee806954a9a1b8133",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-12-14T21:01:02.245Z",
  "text": "a parallel `range` loop is possible, it's accessed via `prange`",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/ker2x",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/76649?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/76649?v=4&s=60",
   "displayName": "Laurent Laborde",
   "gv": "4",
   "id": "55aab46c8a7b72f55c3fc618",
   "url": "/ker2x",
   "username": "ker2x",
   "v": 3
  },
  "html": "Thx. when i used prange i had tons of internal error so i kind of gave up, i&#39;ll try again with prange",
  "id": "5c141a230a145b0e249f46ab",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-12-14T21:01:23.063Z",
  "text": "Thx. when i used prange i had tons of internal error so i kind of gave up, i'll try again with prange",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "hmmm, if there&#39;s anything that keeps reoccurring that&#39;s broken or something that works with <code>@jit(nopython=True)</code> but not with <code>@jit(nopython=True, parallel=True)</code> then please do feel free to report it in the issue tracker <a href=\"https://github.com/numba/numba/issues\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">here</a>",
  "id": "5c141ab572f31355cd574cdb",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-12-14T21:03:49.834Z",
  "text": "hmmm, if there's anything that keeps reoccurring that's broken or something that works with `@jit(nopython=True)` but not with `@jit(nopython=True, parallel=True)` then please do feel free to report it in the issue tracker [here](https://github.com/numba/numba/issues)",
  "unread": false,
  "urls": [
   {
    "url": "https://github.com/numba/numba/issues"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/ker2x",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/76649?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/76649?v=4&s=60",
   "displayName": "Laurent Laborde",
   "gv": "4",
   "id": "55aab46c8a7b72f55c3fc618",
   "url": "/ker2x",
   "username": "ker2x",
   "v": 3
  },
  "html": "i&#39;ll give it a try. it&#39;s in a jupyter notebook, i&#39;m a newbie so it&#39;s probably my mistake however",
  "id": "5c141ae4392d8c6f8e60e0c7",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-12-14T21:04:36.625Z",
  "text": "i'll give it a try. it's in a jupyter notebook, i'm a newbie so it's probably my mistake however",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "numba will also parallelize a lot of things for free, without explicitly declaring them in a <code>prange</code> loop",
  "id": "5c141af7039551387f9b5e63",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-12-14T21:04:55.191Z",
  "text": "numba will also parallelize a lot of things for free, without explicitly declaring them in a `prange` loop",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/ker2x",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/76649?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/76649?v=4&s=60",
   "displayName": "Laurent Laborde",
   "gv": "4",
   "id": "55aab46c8a7b72f55c3fc618",
   "url": "/ker2x",
   "username": "ker2x",
   "v": 3
  },
  "html": "LoweringError: Failed in nopython mode pipeline (step: nopython mode backend)<br>scalar type tuple(float64 x 2) given for non scalar argument <a target=\"_blank\" data-link-type=\"issue\" data-issue=\"4\" class=\"issue\">#4</a>",
  "id": "5c141b16e806954a9a1b891d",
  "issues": [
   {
    "number": "4"
   }
  ],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-12-14T21:05:26.181Z",
  "text": "LoweringError: Failed in nopython mode pipeline (step: nopython mode backend)\nscalar type tuple(float64 x 2) given for non scalar argument #4",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/ker2x",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/76649?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/76649?v=4&s=60",
   "displayName": "Laurent Laborde",
   "gv": "4",
   "id": "55aab46c8a7b72f55c3fc618",
   "url": "/ker2x",
   "username": "ker2x",
   "v": 3
  },
  "html": "it&#39;s probably an obvious problem on my side",
  "id": "5c141b270a145b0e249f4c5b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-12-14T21:05:43.317Z",
  "text": "it's probably an obvious problem on my side",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "do you have a reproducer ?",
  "id": "5c141b3794d8cd0b9cc4c426",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-12-14T21:05:59.777Z",
  "text": "do you have a reproducer ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-12-14T21:06:32.858Z",
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "its telling you something got a tuple that was not expecting to get a tuple",
  "id": "5c141b4ee86b0460b39b2b41",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-12-14T21:06:22.720Z",
  "text": "its telling you something got a tuple that was not expecting to get a tuple",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/ker2x",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/76649?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/76649?v=4&s=60",
   "displayName": "Laurent Laborde",
   "gv": "4",
   "id": "55aab46c8a7b72f55c3fc618",
   "url": "/ker2x",
   "username": "ker2x",
   "v": 3
  },
  "html": "well that&#39;s the problem, i don&#39;t mind sharing the code except i have no idea how to share my notebook. give me a few mn, i&#39;ll try",
  "id": "5c141b68b18e825e3b2d04aa",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-12-14T21:06:48.333Z",
  "text": "well that's the problem, i don't mind sharing the code except i have no idea how to share my notebook. give me a few mn, i'll try",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/ker2x",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/76649?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/76649?v=4&s=60",
   "displayName": "Laurent Laborde",
   "gv": "4",
   "id": "55aab46c8a7b72f55c3fc618",
   "url": "/ker2x",
   "username": "ker2x",
   "v": 3
  },
  "html": "it doesn&#39;t fail with <span data-link-type=\"mention\" data-screen-name=\"njit\" class=\"mention\">@njit</span>(parallel=False)",
  "id": "5c141b83e806954a9a1b8b5d",
  "issues": [],
  "mentions": [
   {
    "screenName": "njit",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 15,
  "sent": "2018-12-14T21:07:15.239Z",
  "text": "it doesn't fail with @njit(parallel=False)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "ah ok, in which case please try and reduce the problem to the smallest thing that causes it and report an issue in the tracker",
  "id": "5c141ba5987052387ee80e68",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-12-14T21:07:49.924Z",
  "text": "ah ok, in which case please try and reduce the problem to the smallest thing that causes it and report an issue in the tracker",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "it&#39;s probably/possibly a bug",
  "id": "5c141bafb512ce0b9d8fc986",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-12-14T21:07:59.572Z",
  "text": "it's probably/possibly a bug",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<a href=\"https://gist.github.com/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://gist.github.com/</a> is a way to share code, if you do file-&gt;download as-&gt;ipynb you&#39;ll get the notebook source which you can paste as a gist to share",
  "id": "5c141bd60a86bc6f8dab671d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-12-14T21:08:38.303Z",
  "text": "https://gist.github.com/ is a way to share code, if you do file->download as->ipynb you'll get the notebook source which you can paste as a gist to share",
  "unread": false,
  "urls": [
   {
    "url": "https://gist.github.com/"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "obviously its public so make sure it&#39;s something that is ok to be shared!",
  "id": "5c141bed0a145b0e249f509a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-12-14T21:09:01.840Z",
  "text": "obviously its public so make sure it's something that is ok to be shared!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/ker2x",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/76649?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/76649?v=4&s=60",
   "displayName": "Laurent Laborde",
   "gv": "4",
   "id": "55aab46c8a7b72f55c3fc618",
   "url": "/ker2x",
   "username": "ker2x",
   "v": 3
  },
  "html": "<a href=\"https://gist.github.com/ker2x/09591c8026d44711c3805da339b0c642\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://gist.github.com/ker2x/09591c8026d44711c3805da339b0c642</a> like this ?",
  "id": "5c141cd40a145b0e249f56cc",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-12-14T21:12:52.934Z",
  "text": "https://gist.github.com/ker2x/09591c8026d44711c3805da339b0c642 like this ?",
  "unread": false,
  "urls": [
   {
    "url": "https://gist.github.com/ker2x/09591c8026d44711c3805da339b0c642"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "yes, v. close, if you call the file <code>whatever.ipynb</code> github will also render it for you",
  "id": "5c141d0194d8cd0b9cc4d16a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-12-14T21:13:37.585Z",
  "text": "yes, v. close, if you call the file `whatever.ipynb` github will also render it for you",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/ker2x",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/76649?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/76649?v=4&s=60",
   "displayName": "Laurent Laborde",
   "gv": "4",
   "id": "55aab46c8a7b72f55c3fc618",
   "url": "/ker2x",
   "username": "ker2x",
   "v": 3
  },
  "html": "ok",
  "id": "5c141d29b18e825e3b2d1097",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-12-14T21:14:17.571Z",
  "text": "ok",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/ker2x",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/76649?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/76649?v=4&s=60",
   "displayName": "Laurent Laborde",
   "gv": "4",
   "id": "55aab46c8a7b72f55c3fc618",
   "url": "/ker2x",
   "username": "ker2x",
   "v": 3
  },
  "html": "<a href=\"https://gist.github.com/ker2x/25ba1baac1b4c0629529cfd6a7f9640d\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://gist.github.com/ker2x/25ba1baac1b4c0629529cfd6a7f9640d</a> much better :D",
  "id": "5c141d610a86bc6f8dab7197",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-12-14T21:15:13.459Z",
  "text": "https://gist.github.com/ker2x/25ba1baac1b4c0629529cfd6a7f9640d much better :D",
  "unread": false,
  "urls": [
   {
    "url": "https://gist.github.com/ker2x/25ba1baac1b4c0629529cfd6a7f9640d"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/ker2x",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/76649?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/76649?v=4&s=60",
   "displayName": "Laurent Laborde",
   "gv": "4",
   "id": "55aab46c8a7b72f55c3fc618",
   "url": "/ker2x",
   "username": "ker2x",
   "v": 3
  },
  "html": "hum you know what, my code doesn&#39;t works as it should with the Parallel=False either, but it show no error.",
  "id": "5c141df8987052387ee81d81",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-12-14T21:17:44.391Z",
  "text": "hum you know what, my code doesn't works as it should with the Parallel=False either, but it show no error.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/ker2x",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/76649?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/76649?v=4&s=60",
   "displayName": "Laurent Laborde",
   "gv": "4",
   "id": "55aab46c8a7b72f55c3fc618",
   "url": "/ker2x",
   "username": "ker2x",
   "v": 3
  },
  "html": "So there is a bug in my code that additionally cause a numba internal error",
  "id": "5c141e1b0a86bc6f8dab7739",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-12-14T21:18:19.117Z",
  "text": "So there is a bug in my code that additionally cause a numba internal error",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/ker2x",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/76649?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/76649?v=4&s=60",
   "displayName": "Laurent Laborde",
   "gv": "4",
   "id": "55aab46c8a7b72f55c3fc618",
   "url": "/ker2x",
   "username": "ker2x",
   "v": 3
  },
  "html": "the commented ndenumerate loop work as expected",
  "id": "5c141e3672f31355cd576332",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-12-14T21:18:46.843Z",
  "text": "the commented ndenumerate loop work as expected",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/ker2x",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/76649?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/76649?v=4&s=60",
   "displayName": "Laurent Laborde",
   "gv": "4",
   "id": "55aab46c8a7b72f55c3fc618",
   "url": "/ker2x",
   "username": "ker2x",
   "v": 3
  },
  "html": "i&#39;ll send a bug report once i fixed my code, if it still crash (i found the source of the problem), with a link to the gist notebook",
  "id": "5c141fbd539aca60b20ec996",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-12-14T21:25:17.183Z",
  "text": "i'll send a bug report once i fixed my code, if it still crash (i found the source of the problem), with a link to the gist notebook",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/ker2x",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/76649?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/76649?v=4&s=60",
   "displayName": "Laurent Laborde",
   "gv": "4",
   "id": "55aab46c8a7b72f55c3fc618",
   "url": "/ker2x",
   "username": "ker2x",
   "v": 3
  },
  "html": "thx for the help",
  "id": "5c141fbf987052387ee826d8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-12-14T21:25:19.874Z",
  "text": "thx for the help",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "ok, great, thanks",
  "id": "5c141ffcb512ce0b9d8fe97a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-12-14T21:26:20.500Z",
  "text": "ok, great, thanks",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "FWIW I can reproduce the bug, and that certainly should not happen",
  "id": "5c1420080a145b0e249f6600",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-12-14T21:26:32.632Z",
  "text": "FWIW I can reproduce the bug, and that certainly should not happen",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "I&#39;ll try and reduce it down to something smaller",
  "id": "5c14201172f31355cd57708b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-12-14T21:26:41.225Z",
  "text": "I'll try and reduce it down to something smaller",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "Thanks for contacting us to report it.",
  "id": "5c1420270a145b0e249f6815",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-12-14T21:27:03.956Z",
  "text": "Thanks for contacting us to report it.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/ker2x",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/76649?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/76649?v=4&s=60",
   "displayName": "Laurent Laborde",
   "gv": "4",
   "id": "55aab46c8a7b72f55c3fc618",
   "url": "/ker2x",
   "username": "ker2x",
   "v": 3
  },
  "html": "this is because of Vectorize. if i comment <a href=\"mailto:#@vectorize\" rel=\"nofollow\">#@vectorize</a>(nopython=True) i don&#39;t have an internal error anymore but a regular error : Untyped global name &#39;is_in_mset&#39;: cannot determine Numba type of &lt;class &#39;function&#39;&gt;",
  "id": "5c14213f94d8cd0b9cc4eb12",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-12-14T21:31:43.782Z",
  "text": "this is because of Vectorize. if i comment #@vectorize(nopython=True) i don't have an internal error anymore but a regular error : Untyped global name 'is_in_mset': cannot determine Numba type of <class 'function'>",
  "unread": false,
  "urls": [
   {
    "url": "mailto:#@vectorize"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/ker2x",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/76649?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/76649?v=4&s=60",
   "displayName": "Laurent Laborde",
   "gv": "4",
   "id": "55aab46c8a7b72f55c3fc618",
   "url": "/ker2x",
   "username": "ker2x",
   "v": 3
  },
  "html": "posting the bug in a few mn",
  "id": "5c14214f539aca60b20ed26a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-12-14T21:31:59.467Z",
  "text": "posting the bug in a few mn",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/ker2x",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/76649?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/76649?v=4&s=60",
   "displayName": "Laurent Laborde",
   "gv": "4",
   "id": "55aab46c8a7b72f55c3fc618",
   "url": "/ker2x",
   "username": "ker2x",
   "v": 3
  },
  "html": "ho, but now it still fail with parallel=false ... damnit :)<br>now i have 3 notebook to show i guess ? because when my code didn&#39;t work as expected it didn&#39;t have any error with parallel=False",
  "id": "5c142367539aca60b20ee073",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-12-14T21:40:55.087Z",
  "text": "ho, but now it still fail with parallel=false ... damnit :)\nnow i have 3 notebook to show i guess ? because when my code didn't work as expected it didn't have any error with parallel=False",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/ker2x",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/76649?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/76649?v=4&s=60",
   "displayName": "Laurent Laborde",
   "gv": "4",
   "id": "55aab46c8a7b72f55c3fc618",
   "url": "/ker2x",
   "username": "ker2x",
   "v": 3
  },
  "html": "<a target=\"_blank\" data-link-type=\"issue\" data-issue=\"3601\" href=\"https://github.com/numba/numba/issues/3601\" data-provider=\"github\" data-issue-repo=\"numba/numba\" class=\"issue\">numba/numba#3601</a> i think i pasted all the necessary notebook",
  "id": "5c142887039551387f9bb87d",
  "issues": [
   {
    "number": "3601",
    "repo": "numba/numba"
   }
  ],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-12-14T22:02:47.825Z",
  "text": "https://github.com/numba/numba/issues/3601 i think i pasted all the necessary notebook",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/ker2x",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/76649?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/76649?v=4&s=60",
   "displayName": "Laurent Laborde",
   "gv": "4",
   "id": "55aab46c8a7b72f55c3fc618",
   "url": "/ker2x",
   "username": "ker2x",
   "v": 3
  },
  "html": "my worst bugreport ever, what a mess :D ",
  "id": "5c142b1d94d8cd0b9cc52de5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 20,
  "sent": "2018-12-14T22:13:49.367Z",
  "text": "my worst bugreport ever, what a mess :D ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/ker2x",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/76649?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/76649?v=4&s=60",
   "displayName": "Laurent Laborde",
   "gv": "4",
   "id": "55aab46c8a7b72f55c3fc618",
   "url": "/ker2x",
   "username": "ker2x",
   "v": 3
  },
  "html": "huh ? i have a code that crash if i comment <span data-link-type=\"mention\" data-screen-name=\"vectorize\" class=\"mention\">@vectorize</span> but works if i uncomment it. so confused",
  "id": "5c142d3e392d8c6f8e6154d4",
  "issues": [],
  "mentions": [
   {
    "screenName": "vectorize",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 20,
  "sent": "2018-12-14T22:22:54.430Z",
  "text": "huh ? i have a code that crash if i comment @vectorize but works if i uncomment it. so confused",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/ker2x",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/76649?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/76649?v=4&s=60",
   "displayName": "Laurent Laborde",
   "gv": "4",
   "id": "55aab46c8a7b72f55c3fc618",
   "url": "/ker2x",
   "username": "ker2x",
   "v": 3
  },
  "html": "anyway, i&#39;m going to sleep. thank you for numba, even without parallelisation i have a 250ms vs 35s just by using <span data-link-type=\"mention\" data-screen-name=\"njit\" class=\"mention\">@njit</span>. good night &lt;3  ",
  "id": "5c1432af392d8c6f8e617f83",
  "issues": [],
  "mentions": [
   {
    "screenName": "njit",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 20,
  "sent": "2018-12-14T22:46:07.309Z",
  "text": "anyway, i'm going to sleep. thank you for numba, even without parallelisation i have a 250ms vs 35s just by using @njit. good night <3  ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/ker2x",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/76649?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/76649?v=4&s=60",
   "displayName": "Laurent Laborde",
   "gv": "4",
   "id": "55aab46c8a7b72f55c3fc618",
   "url": "/ker2x",
   "username": "ker2x",
   "v": 3
  },
  "html": "it almost make python worth it even compared to fortran :)",
  "id": "5c1432db039551387f9bf96f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 20,
  "sent": "2018-12-14T22:46:51.986Z",
  "text": "it almost make python worth it even compared to fortran :)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/SamRagusa",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/11341857?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/11341857?v=4&s=60",
   "displayName": "Sam Ragusa",
   "gv": "4",
   "id": "57742186c2f0db084a209dc5",
   "url": "/SamRagusa",
   "username": "SamRagusa",
   "v": 3
  },
  "html": "<p>So I&#39;m building a Numba language binding for TensorFlow, and to load a data buffer as a Tensor, the C API requires a deallocator for the buffer (the buffer being a NumPy array created within JIT compiled nopython code).   </p><p>So I&#39;m wondering, can the array be deallocated by the function NRT_FREE if used within the C code (which is imported through cffi)?</p>",
  "id": "5c16c3e6987052387ef79715",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-12-16T21:30:14.681Z",
  "text": "So I'm building a Numba language binding for TensorFlow, and to load a data buffer as a Tensor, the C API requires a deallocator for the buffer (the buffer being a NumPy array created within JIT compiled nopython code).   \n\nSo I'm wondering, can the array be deallocated by the function NRT_FREE if used within the C code (which is imported through cffi)?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 7
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"SamRagusa\" class=\"mention\">@SamRagusa</span>, let me make sure I understand.  You have wrapped Tensorflow C-API via CFFI to consume a Numba allocated Numpy Array.",
  "id": "5c17c822ae1ab5539efe74ea",
  "issues": [],
  "mentions": [
   {
    "screenName": "SamRagusa",
    "userId": "57742186c2f0db084a209dc5",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 18,
  "sent": "2018-12-17T16:00:34.518Z",
  "text": "@SamRagusa, let me make sure I understand.  You have wrapped Tensorflow C-API via CFFI to consume a Numba allocated Numpy Array.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 7
  },
  "html": "In that case, Numba is using RefCt to track the lifetime of the NumPy Array it allocated.",
  "id": "5c17c83bb18e825e3b42f979",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-12-17T16:00:59.516Z",
  "text": "In that case, Numba is using RefCt to track the lifetime of the NumPy Array it allocated.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 7
  },
  "html": "<pre><code class=\"python\">arr = np.arange(<span class=\"number\">10</span>)\ncall_tensorflow(arr)</code></pre>",
  "id": "5c17c850539aca60b2247822",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-12-17T16:01:20.684Z",
  "text": "```python\narr = np.arange(10)\ncall_tensorflow(arr)\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 7
  },
  "html": "<code>call_tensorflow</code> should not release the allocated memory, which is still owned by the numba function (the caller)",
  "id": "5c17c86f0a86bc6f8dc132c3",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-12-17T16:01:51.232Z",
  "text": "`call_tensorflow` should not release the allocated memory, which is still owned by the numba function (the caller)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 7
  },
  "html": "Also, everything allocated by numba contains a <code>MemInfo</code> structure with it\u2019s associated destructor function.",
  "id": "5c17c89e72f31355cd6d27e8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-12-17T16:02:38.806Z",
  "text": "Also, everything allocated by numba contains a `MemInfo` structure with it\u2019s associated destructor function.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 7
  },
  "html": "See <a href=\"https://github.com/numba/numba/blob/master/numba/runtime/nrt.c#L18\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://github.com/numba/numba/blob/master/numba/runtime/nrt.c#L18</a>",
  "id": "5c17c8b9ae1ab5539efe7a90",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-12-17T16:03:05.391Z",
  "text": "See https://github.com/numba/numba/blob/master/numba/runtime/nrt.c#L18",
  "unread": false,
  "urls": [
   {
    "url": "https://github.com/numba/numba/blob/master/numba/runtime/nrt.c#L18"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 7
  },
  "html": "For the array structure, the MemInfo is the first pointer.  See <a href=\"https://github.com/numba/numba/blob/54172e224e54bca05dc1732b2e68674e71dd2714/numba/datamodel/models.py#L839\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://github.com/numba/numba/blob/54172e224e54bca05dc1732b2e68674e71dd2714/numba/datamodel/models.py#L839</a>",
  "id": "5c17c914039551387fb17b85",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-12-17T16:04:36.434Z",
  "text": "For the array structure, the MemInfo is the first pointer.  See https://github.com/numba/numba/blob/54172e224e54bca05dc1732b2e68674e71dd2714/numba/datamodel/models.py#L839",
  "unread": false,
  "urls": [
   {
    "url": "https://github.com/numba/numba/blob/54172e224e54bca05dc1732b2e68674e71dd2714/numba/datamodel/models.py#L839"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/SamRagusa",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/11341857?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/11341857?v=4&s=60",
   "displayName": "Sam Ragusa",
   "gv": "4",
   "id": "57742186c2f0db084a209dc5",
   "url": "/SamRagusa",
   "username": "SamRagusa",
   "v": 3
  },
  "html": "<p>Exactly right, and super helpful!  Just to clarify, when using the <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/c/c_api.h#L224\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">TF_NewTensor</a> function you&#39;re suggesting I&#39;d give TensorFlow some dummy deallocation function and let Numba handle that?</p><p>Also I&#39;ve recently uploaded this project, named <a href=\"https://github.com/SamRagusa/NumbaFlow\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">NumbaFlow</a> if you were curious.</p>",
  "id": "5c18538cb8760c21bbe56a1f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 19,
  "sent": "2018-12-18T01:55:24.358Z",
  "text": "Exactly right, and super helpful!  Just to clarify, when using the [TF_NewTensor](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/c/c_api.h#L224) function you're suggesting I'd give TensorFlow some dummy deallocation function and let Numba handle that?\n\nAlso I've recently uploaded this project, named [NumbaFlow](https://github.com/SamRagusa/NumbaFlow) if you were curious.",
  "unread": false,
  "urls": [
   {
    "url": "https://github.com/tensorflow/tensorflow/blob/master/tensorflow/c/c_api.h#L224"
   },
   {
    "url": "https://github.com/SamRagusa/NumbaFlow"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 7
  },
  "html": "Wow, I didn\u2019t know TensorFlow has a C-API.",
  "id": "5c1908461287f05a1e28bd98",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-12-18T14:46:30.360Z",
  "text": "Wow, I didn\u2019t know TensorFlow has a C-API.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 7
  },
  "html": "After a quick look at that, I am slightly worried that your <code>call_tensorflow(arr)</code> may capture the reference of <code>arr</code>.  If that is the case, you will need to incref <code>arr</code> on the way in and associate a deallocator that will decref <code>arr</code> for TF.",
  "id": "5c190885b8760c21bbe9cb16",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-12-18T14:47:33.863Z",
  "text": "After a quick look at that, I am slightly worried that your `call_tensorflow(arr)` may capture the reference of `arr`.  If that is the case, you will need to incref `arr` on the way in and associate a deallocator that will decref `arr` for TF.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 7
  },
  "html": "if it is non-capturing, you can give TF a dummy deallocator and let numba deal with it.",
  "id": "5c19089d2a66862cc94b82b4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-12-18T14:47:57.708Z",
  "text": "if it is non-capturing, you can give TF a dummy deallocator and let numba deal with it.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Lomelgande",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/8880982?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/8880982?v=4&s=60",
   "displayName": "Lomelgande",
   "gv": "4",
   "id": "5ab3f0f2d73408ce4f92b317",
   "url": "/Lomelgande",
   "username": "Lomelgande",
   "v": 6
  },
  "html": "I am going to start playing around with warp shuffles and I wanted to ask a quick question. In the documentation it states &quot;The argument membermask is a 32 bit integer&quot;. Do I need to pass something like np.float32(1) to this, or does it cast a 64 to a 32 if I just give it something like 1? Also, looking at NIVIDA&#39;s example here, <a href=\"https://devblogs.nvidia.com/faster-parallel-reductions-kepler/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://devblogs.nvidia.com/faster-parallel-reductions-kepler/</a>, is the argument for the C++ warpSize just the membermask?",
  "id": "5c1a9edf4303512ab46f0ce7",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-12-19T19:41:19.538Z",
  "text": "I am going to start playing around with warp shuffles and I wanted to ask a quick question. In the documentation it states \"The argument membermask is a 32 bit integer\". Do I need to pass something like np.float32(1) to this, or does it cast a 64 to a 32 if I just give it something like 1? Also, looking at NIVIDA's example here, https://devblogs.nvidia.com/faster-parallel-reductions-kepler/, is the argument for the C++ warpSize just the membermask?",
  "unread": false,
  "urls": [
   {
    "url": "https://devblogs.nvidia.com/faster-parallel-reductions-kepler/"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Lomelgande",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/8880982?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/8880982?v=4&s=60",
   "displayName": "Lomelgande",
   "gv": "4",
   "id": "5ab3f0f2d73408ce4f92b317",
   "url": "/Lomelgande",
   "username": "Lomelgande",
   "v": 6
  },
  "html": "np.int32(1)*",
  "id": "5c1ab3e01287f05a1e33b0f1",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-12-19T21:10:56.045Z",
  "text": "np.int32(1)*",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2018-12-19T23:48:37.056Z",
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 7
  },
  "html": "<p>numba will cast it from int64 to int32.  It is used as a bitmask.  Each bit is corresponding to a thread in the warp (or the laneid).  </p><blockquote>\n<p> The argument membermask is a 32 bit integer mask with each bit corresponding to a thread in the warp, with 1 meaning the thread is in the subset of threads within the function call</p></blockquote>\n<p>I\u2019d suggest reading this blogpost for details: <a href=\"https://devblogs.nvidia.com/using-cuda-warp-level-primitives/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://devblogs.nvidia.com/using-cuda-warp-level-primitives/</a>.</p>",
  "id": "5c1ad8d134a2755a1d39d703",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-12-19T23:48:33.310Z",
  "text": "numba will cast it from int64 to int32.  It is used as a bitmask.  Each bit is corresponding to a thread in the warp (or the laneid).  \n>  The argument membermask is a 32 bit integer mask with each bit corresponding to a thread in the warp, with 1 meaning the thread is in the subset of threads within the function call\n\nI\u2019d suggest reading this blogpost for details: https://devblogs.nvidia.com/using-cuda-warp-level-primitives/.\n",
  "unread": false,
  "urls": [
   {
    "url": "https://devblogs.nvidia.com/using-cuda-warp-level-primitives/"
   }
  ],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 7
  },
  "html": "<code>warpSize</code> would be <code>32</code>.  To enable use all threads in the warp, use <code>0xffffffff</code> (all 32-bits are ones)",
  "id": "5c1ad95941637902415779e3",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-12-19T23:50:49.676Z",
  "text": "`warpSize` would be `32`.  To enable use all threads in the warp, use `0xffffffff` (all 32-bits are ones)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Lomelgande",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/8880982?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/8880982?v=4&s=60",
   "displayName": "Lomelgande",
   "gv": "4",
   "id": "5ab3f0f2d73408ce4f92b317",
   "url": "/Lomelgande",
   "username": "Lomelgande",
   "v": 6
  },
  "html": "Awesome, thanks. One more question. Does warp shuffling work on 2d and 3d grids? Does the delta get applied to each axis or does it flatten the threads index and add one to it or something like that?",
  "id": "5c1ae7f4f40433141939676a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-12-20T00:53:08.927Z",
  "text": "Awesome, thanks. One more question. Does warp shuffling work on 2d and 3d grids? Does the delta get applied to each axis or does it flatten the threads index and add one to it or something like that?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 7
  },
  "html": "I haven\u2019t tried it in &gt;1d grids.  I believe it will get flattened.  You can use the <code>cuda.laneid</code> to find out.",
  "id": "5c1bca3bb6f00a27101b2a12",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-12-20T16:58:35.764Z",
  "text": "I haven\u2019t tried it in >1d grids.  I believe it will get flattened.  You can use the `cuda.laneid` to find out.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/TomFD",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/44144239?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/44144239?v=4&s=60",
   "displayName": "TomFD",
   "gv": "4",
   "id": "5c27d595d73408ce4fb32c8b",
   "url": "/TomFD",
   "username": "TomFD",
   "v": 27
  },
  "html": "Hi, can anyone explain the use of environment variables? It does not work like explained in the maual with me.",
  "id": "5c27d604d945b96882152feb",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2018-12-29T20:16:04.479Z",
  "text": "Hi, can anyone explain the use of environment variables? It does not work like explained in the maual with me.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/arnabhik",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/33616046?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/33616046?v=4&s=60",
   "displayName": "Abhik Saha",
   "gv": "4",
   "id": "5c28de23d73408ce4fb33573",
   "url": "/arnabhik",
   "username": "arnabhik",
   "v": 1
  },
  "html": "<p>I am looking to build a python function to do some kind of on a array using gpu because the multi-dimensional array is around 1-2 million in size</p><p>here is my code:</p><p>import numpy as np<br>x = [[1,2,3],[12,32,34],[4,32,77]]<br>y = [[1,2,3],[12,32,34],[4,32,77]]</p><p><span data-link-type=\"mention\" data-screen-name=\"vectorize\" class=\"mention\">@vectorize</span>([void(f4[:], f4[:])], target=&#39;cuda&#39;)<br>def g(x, y):<br>    x[0] = 4<br>    y[1] = 3</p><pre><code><span class=\"comment\"># more code array stuff here ...</span></code></pre><p>x = np.array(x, dtype=&#39;f4&#39;)<br>y = np.array(y, dtype=&#39;f4&#39;)<br>print(g(x, y))<br>but the code is not working and i can see lot of errors, please help</p><p>Error:</p><p>Exception has occurred: TypeError Buffer dtype cannot be buffer File</p><p>&quot;E:\\Python\\GPU\\cuda-gpu.py&quot;, line 7, in</p><p><span data-link-type=\"mention\" data-screen-name=\"vectorize\" class=\"mention\">@vectorize</span>([int64(int64[:])], target=&#39;cuda&#39;)</p>",
  "id": "5c28de63f6166a3027922d1a",
  "issues": [],
  "mentions": [
   {
    "screenName": "vectorize",
    "userIds": []
   },
   {
    "screenName": "vectorize",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 11,
  "sent": "2018-12-30T15:04:03.642Z",
  "text": "I am looking to build a python function to do some kind of on a array using gpu because the multi-dimensional array is around 1-2 million in size\n\nhere is my code:\n\nimport numpy as np\nx = [[1,2,3],[12,32,34],[4,32,77]]\ny = [[1,2,3],[12,32,34],[4,32,77]]\n\n@vectorize([void(f4[:], f4[:])], target='cuda')\ndef g(x, y):\n    x[0] = 4\n    y[1] = 3\n    # more code array stuff here ...\n\n\nx = np.array(x, dtype='f4')\ny = np.array(y, dtype='f4')\nprint(g(x, y))\nbut the code is not working and i can see lot of errors, please help\n\nError:\n\nException has occurred: TypeError Buffer dtype cannot be buffer File\n\n\"E:\\Python\\GPU\\cuda-gpu.py\", line 7, in\n\n@vectorize([int64(int64[:])], target='cuda')",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"TomFD\" class=\"mention\">@TomFD</span> Hi, please could you elaborate on what it is that isn&#39;t working? Thanks.",
  "id": "5c29f80ff6166a302798cb72",
  "issues": [],
  "mentions": [
   {
    "screenName": "TomFD",
    "userId": "5c27d595d73408ce4fb32c8b",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 10,
  "sent": "2018-12-31T11:05:51.328Z",
  "text": "@TomFD Hi, please could you elaborate on what it is that isn't working? Thanks.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"arnabhik\" class=\"mention\">@arnabhik</span> the <code>@vectorize</code> decorator is declared in terms of scalar inputs (it broadcasts the operation across arrays when applied to them), if you want to do array index based manipulations then a <code>gufunc</code> with <code>@guvectorize</code> or a standard CUDA kernel may be more what you are after. Docs: <a href=\"http://numba.pydata.org/numba-doc/dev/user/vectorize.html\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://numba.pydata.org/numba-doc/dev/user/vectorize.html</a>, <a href=\"http://numba.pydata.org/numba-doc/dev/reference/jit-compilation.html#numba.vectorize\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://numba.pydata.org/numba-doc/dev/reference/jit-compilation.html#numba.vectorize</a>, <a href=\"http://numba.pydata.org/numba-doc/dev/user/vectorize.html#the-guvectorize-decorator\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://numba.pydata.org/numba-doc/dev/user/vectorize.html#the-guvectorize-decorator</a>,   <a href=\"http://numba.pydata.org/numba-doc/dev/reference/jit-compilation.html#numba.guvectorize\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://numba.pydata.org/numba-doc/dev/reference/jit-compilation.html#numba.guvectorize</a>.",
  "id": "5c29fa0092cf4d2242206852",
  "issues": [],
  "mentions": [
   {
    "screenName": "arnabhik",
    "userId": "5c28de23d73408ce4fb33573",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 10,
  "sent": "2018-12-31T11:14:08.374Z",
  "text": "@arnabhik the `@vectorize` decorator is declared in terms of scalar inputs (it broadcasts the operation across arrays when applied to them), if you want to do array index based manipulations then a `gufunc` with `@guvectorize` or a standard CUDA kernel may be more what you are after. Docs: http://numba.pydata.org/numba-doc/dev/user/vectorize.html, http://numba.pydata.org/numba-doc/dev/reference/jit-compilation.html#numba.vectorize, http://numba.pydata.org/numba-doc/dev/user/vectorize.html#the-guvectorize-decorator,   http://numba.pydata.org/numba-doc/dev/reference/jit-compilation.html#numba.guvectorize.",
  "unread": false,
  "urls": [
   {
    "url": "http://numba.pydata.org/numba-doc/dev/user/vectorize.html"
   },
   {
    "url": "http://numba.pydata.org/numba-doc/dev/reference/jit-compilation.html#numba.vectorize"
   },
   {
    "url": "http://numba.pydata.org/numba-doc/dev/user/vectorize.html#the-guvectorize-decorator"
   },
   {
    "url": "http://numba.pydata.org/numba-doc/dev/reference/jit-compilation.html#numba.guvectorize"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/TomFD",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/44144239?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/44144239?v=4&s=60",
   "displayName": "TomFD",
   "gv": "4",
   "id": "5c27d595d73408ce4fb32c8b",
   "url": "/TomFD",
   "username": "TomFD",
   "v": 27
  },
  "html": "Hi Stuart, I simply followed the instructions to make a file for the environment variables as described, but it seems that this file is not read at all. In this way I wanted to use the cuda simulator on my laptop without graphics card.",
  "id": "5c2a14e9ab910e7d3afdc4d5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-12-31T13:08:57.601Z",
  "text": "Hi Stuart, I simply followed the instructions to make a file for the environment variables as described, but it seems that this file is not read at all. In this way I wanted to use the cuda simulator on my laptop without graphics card.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/TomFD",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/44144239?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/44144239?v=4&s=60",
   "displayName": "TomFD",
   "gv": "4",
   "id": "5c27d595d73408ce4fb32c8b",
   "url": "/TomFD",
   "username": "TomFD",
   "v": 27
  },
  "html": "<p>Another issue I encountered was, that for a beginner like me, the examples, for instance, for matrix multiplication are not easy to understand, as no working example is given only the kernel. To my opinion, the example: </p><p><span data-link-type=\"mention\" data-screen-name=\"cuda.jit\" class=\"mention\">@cuda.jit</span><br>def matmul(A, B, C):<br>    &quot;&quot;&quot;Perform square matrix multiplication of C = A <em> B<br>    &quot;&quot;&quot;<br>    i, j = cuda.grid(2)<br>    if i &lt; C.shape[0] and j &lt; C.shape[1]:<br>        tmp = 0.<br>        for k in range(A.shape[1]):<br>            tmp += A[i, k] </em> B[k, j]<br>        C[i, j] = tmp</p>",
  "id": "5c2a156893cce97d3bc5cefb",
  "issues": [],
  "mentions": [
   {
    "screenName": "cuda.jit",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 11,
  "sent": "2018-12-31T13:11:04.062Z",
  "text": "Another issue I encountered was, that for a beginner like me, the examples, for instance, for matrix multiplication are not easy to understand, as no working example is given only the kernel. To my opinion, the example: \n\n@cuda.jit\ndef matmul(A, B, C):\n    \"\"\"Perform square matrix multiplication of C = A * B\n    \"\"\"\n    i, j = cuda.grid(2)\n    if i < C.shape[0] and j < C.shape[1]:\n        tmp = 0.\n        for k in range(A.shape[1]):\n            tmp += A[i, k] * B[k, j]\n        C[i, j] = tmp\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/TomFD",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/44144239?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/44144239?v=4&s=60",
   "displayName": "TomFD",
   "gv": "4",
   "id": "5c27d595d73408ce4fb32c8b",
   "url": "/TomFD",
   "username": "TomFD",
   "v": 27
  },
  "html": "<p>should have the main code in addition:</p><p>A = np.array(np.random.random((N, N)), dtype=np.float32)<br>B = np.array(np.random.random((N, N)), dtype=np.float32)<br>C = np.zeros_like(A)</p><p>TPB = 16<br>threadsperblock = (TPB, TPB)<br>blockspergrid_x = math.ceil(N / threadsperblock[0])<br>blockspergrid_y = math.ceil(N / threadsperblock[1])<br>blockspergrid = (blockspergrid_x, blockspergrid_y)<br>matmul<a href=\"http://A,B,C\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">blockspergrid, threadsperblock</a></p>",
  "id": "5c2a15c66649aa1f82fb36fb",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-12-31T13:12:38.465Z",
  "text": "should have the main code in addition:\n\nA = np.array(np.random.random((N, N)), dtype=np.float32)\nB = np.array(np.random.random((N, N)), dtype=np.float32)\nC = np.zeros_like(A)\n\nTPB = 16\nthreadsperblock = (TPB, TPB)\nblockspergrid_x = math.ceil(N / threadsperblock[0])\nblockspergrid_y = math.ceil(N / threadsperblock[1])\nblockspergrid = (blockspergrid_x, blockspergrid_y)\nmatmul[blockspergrid, threadsperblock](A,B,C)",
  "unread": false,
  "urls": [
   {
    "url": "http://A,B,C"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/TomFD",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/44144239?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/44144239?v=4&s=60",
   "displayName": "TomFD",
   "gv": "4",
   "id": "5c27d595d73408ce4fb32c8b",
   "url": "/TomFD",
   "username": "TomFD",
   "v": 27
  },
  "html": "<p>Finally, is there an easy explaination, why</p><p><span data-link-type=\"mention\" data-screen-name=\"guvectorize\" class=\"mention\">@guvectorize</span>([(float32[:, :], float32[:, :], float32[:, :])], &#39;(m,l),(l,n)-&gt;(m,n)&#39;, target=&#39;cuda&#39;)<br>def matmul_gu3(A, B, out):<br>    &quot;&quot;&quot;Perform square matrix multiplication of out = A <em> B<br>    &quot;&quot;&quot;<br>    i, j = cuda.grid(2)<br>    if i &lt; out.shape[0] and j &lt; out.shape[1]:<br>        tmp = 0.<br>        for k in range(A.shape[1]):<br>            tmp += A[i, k] </em> B[k, j]<br>        out[i, j] = tmp<br>matmul_gu3.max_blocksize = 32</p><p>is an order of magnitude faster then the normal <span data-link-type=\"mention\" data-screen-name=\"cuda.jit\" class=\"mention\">@cuda.jit</span> or shaded memory GPU or Intel MKL np.dot?</p>",
  "id": "5c2a1681db5b5c688334e645",
  "issues": [],
  "mentions": [
   {
    "screenName": "guvectorize",
    "userIds": []
   },
   {
    "screenName": "cuda.jit",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 11,
  "sent": "2018-12-31T13:15:45.444Z",
  "text": "Finally, is there an easy explaination, why\n\n@guvectorize([(float32[:, :], float32[:, :], float32[:, :])], '(m,l),(l,n)->(m,n)', target='cuda')\ndef matmul_gu3(A, B, out):\n    \"\"\"Perform square matrix multiplication of out = A * B\n    \"\"\"\n    i, j = cuda.grid(2)\n    if i < out.shape[0] and j < out.shape[1]:\n        tmp = 0.\n        for k in range(A.shape[1]):\n            tmp += A[i, k] * B[k, j]\n        out[i, j] = tmp\nmatmul_gu3.max_blocksize = 32\n\nis an order of magnitude faster then the normal @cuda.jit or shaded memory GPU or Intel MKL np.dot?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "Hi <span data-link-type=\"mention\" data-screen-name=\"TomFD\" class=\"mention\">@TomFD</span>, to the env vars first... I take it you are trying to use a <code>.numba_config.yaml</code> file ?",
  "id": "5c2a19d0f6166a3027999fa1",
  "issues": [],
  "mentions": [
   {
    "screenName": "TomFD",
    "userId": "5c27d595d73408ce4fb32c8b",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 11,
  "sent": "2018-12-31T13:29:52.678Z",
  "text": "Hi @TomFD, to the env vars first... I take it you are trying to use a `.numba_config.yaml` file ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "Here&#39;s mine:",
  "id": "5c2a19dbab910e7d3afde5de",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-12-31T13:30:03.298Z",
  "text": "Here's mine:",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<pre><code><span class=\"attribute\">full_tracebacks</span>: <span class=\"string\">1</span>\n<span class=\"attribute\">show_help</span>: <span class=\"string\">0</span>\n<span class=\"attribute\">color_scheme</span>: <span class=\"string\">dark_bg</span>\n<span class=\"attribute\">parallel_diagnostics</span>: <span class=\"string\">0</span>\n<span class=\"attribute\">gdb_binary</span>: <span class=\"string\">\"/opt/rh/devtoolset-7/root/bin/gdb\"</span>\n<span class=\"attribute\">threading_layer</span>: <span class=\"string\">tbb</span></code></pre>",
  "id": "5c2a19f2d945b968822297b5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-12-31T13:30:26.247Z",
  "text": "```\nfull_tracebacks: 1\nshow_help: 0\ncolor_scheme: dark_bg\nparallel_diagnostics: 0\ngdb_binary: \"/opt/rh/devtoolset-7/root/bin/gdb\"\nthreading_layer: tbb\n```\n\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "you&#39;ll need <code>pyyaml</code> installed for Numba to be able to read it, it should tell you this if it can&#39;t find it",
  "id": "5c2a1a102863d8612bb856ba",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-12-31T13:30:56.233Z",
  "text": "you'll need `pyyaml` installed for Numba to be able to read it, it should tell you this if it can't find it",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/TomFD",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/44144239?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/44144239?v=4&s=60",
   "displayName": "TomFD",
   "gv": "4",
   "id": "5c27d595d73408ce4fb32c8b",
   "url": "/TomFD",
   "username": "TomFD",
   "v": 27
  },
  "html": "maybe I don&#39;t have pyyaml installed ... I have to check. However, I&#39;ll need to charge my laptop first :-) ... but its again something one is not aware, if reading the documentation",
  "id": "5c2a1ac1ab910e7d3afdea77",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-12-31T13:33:53.044Z",
  "text": "maybe I don't have pyyaml installed ... I have to check. However, I'll need to charge my laptop first :-) ... but its again something one is not aware, if reading the documentation",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "hmmm, it&#39;s the second line here <a href=\"http://numba.pydata.org/numba-doc/latest/reference/envvars.html\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://numba.pydata.org/numba-doc/latest/reference/envvars.html</a>",
  "id": "5c2a1b0fdb5b5c68833504a8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-12-31T13:35:11.294Z",
  "text": "hmmm, it's the second line here http://numba.pydata.org/numba-doc/latest/reference/envvars.html",
  "unread": false,
  "urls": [
   {
    "url": "http://numba.pydata.org/numba-doc/latest/reference/envvars.html"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<code>For convenience, Numba also supports the use of a configuration file to persist configuration settings. Note: To use this feature pyyaml must be installed.</code>",
  "id": "5c2a1b1c92cf4d2242213905",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-12-31T13:35:24.167Z",
  "text": "`For convenience, Numba also supports the use of a configuration file to persist configuration settings. Note: To use this feature pyyaml must be installed.`",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/TomFD",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/44144239?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/44144239?v=4&s=60",
   "displayName": "TomFD",
   "gv": "4",
   "id": "5c27d595d73408ce4fb32c8b",
   "url": "/TomFD",
   "username": "TomFD",
   "v": 27
  },
  "html": "you are right.",
  "id": "5c2a1b2d8d31aa78b1267418",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-12-31T13:35:41.115Z",
  "text": "you are right.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "is it that it was hard to find that information, or that it was not sufficiently highlighted ?",
  "id": "5c2a1b332863d8612bb85d1c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-12-31T13:35:47.901Z",
  "text": "is it that it was hard to find that information, or that it was not sufficiently highlighted ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "more than happy for suggestions on how to make that more clear",
  "id": "5c2a1b4fd945b9688222a1f4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-12-31T13:36:15.309Z",
  "text": "more than happy for suggestions on how to make that more clear",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "that <code>Note:</code> could perhaps be pulled out as a fully marked up <code>..note:</code> section",
  "id": "5c2a1b7409b806684991c68a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-12-31T13:36:52.142Z",
  "text": "that `Note:` could perhaps be pulled out as a fully marked up `..note:` section",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/TomFD",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/44144239?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/44144239?v=4&s=60",
   "displayName": "TomFD",
   "gv": "4",
   "id": "5c27d595d73408ce4fb32c8b",
   "url": "/TomFD",
   "username": "TomFD",
   "v": 27
  },
  "html": "No, it is there. I&#39;m not sure why I overlooked it.",
  "id": "5c2a1bb7f6166a302799ab67",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-12-31T13:37:59.487Z",
  "text": "No, it is there. I'm not sure why I overlooked it.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "There&#39;s <code>matmul</code> examples in the Numba examples directory: <a href=\"https://github.com/numba/numba/tree/master/examples/cudajit\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://github.com/numba/numba/tree/master/examples/cudajit</a>",
  "id": "5c2a1be4babbc178b206aafe",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2018-12-31T13:38:44.814Z",
  "text": "There's `matmul` examples in the Numba examples directory: https://github.com/numba/numba/tree/master/examples/cudajit",
  "unread": false,
  "urls": [
   {
    "url": "https://github.com/numba/numba/tree/master/examples/cudajit"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/TomFD",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/44144239?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/44144239?v=4&s=60",
   "displayName": "TomFD",
   "gv": "4",
   "id": "5c27d595d73408ce4fb32c8b",
   "url": "/TomFD",
   "username": "TomFD",
   "v": 27
  },
  "html": "Now I got it: On google, one finds site links to older versions of numba documentation, which seem to have less or different information. I need to check always on the versioning.",
  "id": "5c2a1c2937975e7ca950b275",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-12-31T13:39:53.400Z",
  "text": "Now I got it: On google, one finds site links to older versions of numba documentation, which seem to have less or different information. I need to check always on the versioning.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "ah ok, that&#39;s unfortunate, I&#39;m not sure there&#39;s much we can do about that short of just taking down the old docs",
  "id": "5c2a1c718dafa715c71e4710",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2018-12-31T13:41:05.157Z",
  "text": "ah ok, that's unfortunate, I'm not sure there's much we can do about that short of just taking down the old docs",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "but then there&#39;s users on older versions of numba who do infrequent large scale upgrades (like some HPC users)",
  "id": "5c2a1c94d945b9688222ac17",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-12-31T13:41:40.039Z",
  "text": "but then there's users on older versions of numba who do infrequent large scale upgrades (like some HPC users)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/TomFD",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/44144239?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/44144239?v=4&s=60",
   "displayName": "TomFD",
   "gv": "4",
   "id": "5c27d595d73408ce4fb32c8b",
   "url": "/TomFD",
   "username": "TomFD",
   "v": 27
  },
  "html": "for comparision, the old Visual Studio Documentation give a hint on top of the pages, that its outdated",
  "id": "5c2a1cbbf6166a302799b1ae",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-12-31T13:42:19.450Z",
  "text": "for comparision, the old Visual Studio Documentation give a hint on top of the pages, that its outdated",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "noted <a target=\"_blank\" data-link-type=\"issue\" data-issue=\"3636\" href=\"https://github.com/numba/numba/issues/3636\" data-provider=\"github\" data-issue-repo=\"numba/numba\" class=\"issue\">numba/numba#3636</a>",
  "id": "5c2a1d7609b806684991d417",
  "issues": [
   {
    "number": "3636",
    "repo": "numba/numba"
   }
  ],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-12-31T13:45:26.732Z",
  "text": "noted https://github.com/numba/numba/issues/3636",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "thanks",
  "id": "5c2a1d7c2863d8612bb86e93",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-12-31T13:45:32.516Z",
  "text": "thanks",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/TomFD",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/44144239?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/44144239?v=4&s=60",
   "displayName": "TomFD",
   "gv": "4",
   "id": "5c27d595d73408ce4fb32c8b",
   "url": "/TomFD",
   "username": "TomFD",
   "v": 27
  },
  "html": "Stuart, here is what confused me on matmul: The documentation is here: <a href=\"https://numba.pydata.org/numba-doc/dev/cuda/examples.html\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://numba.pydata.org/numba-doc/dev/cuda/examples.html</a> where both examples perform at half exec speed of np.dot /mkl ",
  "id": "5c2a1dae8d31aa78b126873a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2018-12-31T13:46:22.227Z",
  "text": "Stuart, here is what confused me on matmul: The documentation is here: https://numba.pydata.org/numba-doc/dev/cuda/examples.html where both examples perform at half exec speed of np.dot /mkl ",
  "unread": false,
  "urls": [
   {
    "url": "https://numba.pydata.org/numba-doc/dev/cuda/examples.html"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "these examples are pedagogical",
  "id": "5c2a1de2db5b5c6883351652",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-12-31T13:47:14.135Z",
  "text": "these examples are pedagogical",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "there&#39;s no way one should be writing a matmul kernel, ever :)",
  "id": "5c2a1df3babbc178b206b94d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-12-31T13:47:31.042Z",
  "text": "there's no way one should be writing a matmul kernel, ever :)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "it&#39;s what BLAS is for",
  "id": "5c2a1dfcd945b9688222b4d1",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-12-31T13:47:40.155Z",
  "text": "it's what BLAS is for",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "the <code>np.dot</code> shipped from Anaconda is backed by Intel MKL and multithreaded in execution by default",
  "id": "5c2a1e1d92cf4d2242214ed4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2018-12-31T13:48:13.039Z",
  "text": "the `np.dot` shipped from Anaconda is backed by Intel MKL and multithreaded in execution by default",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/TomFD",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/44144239?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/44144239?v=4&s=60",
   "displayName": "TomFD",
   "gv": "4",
   "id": "5c27d595d73408ce4fb32c8b",
   "url": "/TomFD",
   "username": "TomFD",
   "v": 27
  },
  "html": "ok, understood. I came to it because I was looking for the fastest matmul",
  "id": "5c2a1e28f6166a302799bac4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-12-31T13:48:24.515Z",
  "text": "ok, understood. I came to it because I was looking for the fastest matmul",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "the fastest matmul will be one from the CUDA BLAS libraries",
  "id": "5c2a1e406649aa1f82fb7064",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-12-31T13:48:48.969Z",
  "text": "the fastest matmul will be one from the CUDA BLAS libraries",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "assuming you have amenable data etc",
  "id": "5c2a1e5009b806684991d99b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2018-12-31T13:49:04.897Z",
  "text": "assuming you have amenable data etc",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/TomFD",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/44144239?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/44144239?v=4&s=60",
   "displayName": "TomFD",
   "gv": "4",
   "id": "5c27d595d73408ce4fb32c8b",
   "url": "/TomFD",
   "username": "TomFD",
   "v": 27
  },
  "html": "the first <span data-link-type=\"mention\" data-screen-name=\"guvectorize\" class=\"mention\">@guvectorize</span> example I sent beats MKL by factor of 10",
  "id": "5c2a1e560b7fc97caac90f70",
  "issues": [],
  "mentions": [
   {
    "screenName": "guvectorize",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 16,
  "sent": "2018-12-31T13:49:10.233Z",
  "text": "the first @guvectorize example I sent beats MKL by factor of 10",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "that&#39;s good, now compare that to calling cuBLAS :)",
  "id": "5c2a1e96db5b5c6883351902",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-12-31T13:50:14.111Z",
  "text": "that's good, now compare that to calling cuBLAS :)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/TomFD",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/44144239?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/44144239?v=4&s=60",
   "displayName": "TomFD",
   "gv": "4",
   "id": "5c27d595d73408ce4fb32c8b",
   "url": "/TomFD",
   "username": "TomFD",
   "v": 27
  },
  "html": "let me now try cuda blas. Thanks ...",
  "id": "5c2a1e9bbabbc178b206bd28",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 17,
  "sent": "2018-12-31T13:50:19.565Z",
  "text": "let me now try cuda blas. Thanks ...",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "np",
  "id": "5c2a1ec30b7fc97caac911c9",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 18,
  "sent": "2018-12-31T13:50:59.038Z",
  "text": "np",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/TomFD",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/44144239?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/44144239?v=4&s=60",
   "displayName": "TomFD",
   "gv": "4",
   "id": "5c27d595d73408ce4fb32c8b",
   "url": "/TomFD",
   "username": "TomFD",
   "v": 27
  },
  "html": "Happy New Year all!",
  "id": "5c2b8adb0b7fc97caad1766d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2019-01-01T15:44:27.961Z",
  "text": "Happy New Year all!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/arnabhik",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/33616046?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/33616046?v=4&s=60",
   "displayName": "Abhik Saha",
   "gv": "4",
   "id": "5c28de23d73408ce4fb33573",
   "url": "/arnabhik",
   "username": "arnabhik",
   "v": 1
  },
  "html": "hi guys, i have a error in my code",
  "id": "5c2b92fe8dafa715c727258b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2019-01-01T16:19:10.453Z",
  "text": "hi guys, i have a error in my code",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/arnabhik",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/33616046?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/33616046?v=4&s=60",
   "displayName": "Abhik Saha",
   "gv": "4",
   "id": "5c28de23d73408ce4fb33573",
   "url": "/arnabhik",
   "username": "arnabhik",
   "v": 1
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"guvectorize\" class=\"mention\">@guvectorize</span>([&quot;int64[:,:], int64[:,:]&quot;], &#39;(n,m)-&gt;(a,b)&#39;)        it says a,b are not recognized symbols",
  "id": "5c2b932fab910e7d3a06d4eb",
  "issues": [],
  "mentions": [
   {
    "screenName": "guvectorize",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 15,
  "sent": "2019-01-01T16:19:59.895Z",
  "text": "@guvectorize([\"int64[:,:], int64[:,:]\"], '(n,m)->(a,b)')        it says a,b are not recognized symbols",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/arnabhik",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/33616046?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/33616046?v=4&s=60",
   "displayName": "Abhik Saha",
   "gv": "4",
   "id": "5c28de23d73408ce4fb33573",
   "url": "/arnabhik",
   "username": "arnabhik",
   "v": 1
  },
  "html": "i want to get output array in a differnt size",
  "id": "5c2b933fbabbc178b20fac2a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2019-01-01T16:20:15.247Z",
  "text": "i want to get output array in a differnt size",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/TomFD",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/44144239?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/44144239?v=4&s=60",
   "displayName": "TomFD",
   "gv": "4",
   "id": "5c27d595d73408ce4fb32c8b",
   "url": "/TomFD",
   "username": "TomFD",
   "v": 27
  },
  "html": "<p><span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span> Hi, can I please come back to the example below, which I think is maybe wrong. guvectorize does not need cuda.grid, right? Printing i and j always gives zeros.</p><p><span data-link-type=\"mention\" data-screen-name=\"guvectorize\" class=\"mention\">@guvectorize</span>([(float64[:, :], float64[:, :], float64[:, :])], &#39;(m,l),(l,n)-&gt;(m,n)&#39;, target=&#39;cuda&#39;)<br>def matmul_gu3(A, B, out):<br>   &quot;&quot;&quot;Perform square matrix multiplication of out = A <em> B<br>   &quot;&quot;&quot;<br>   i, j = cuda.grid(2)<br>   if i &lt; out.shape[0] and j &lt; out.shape[1]:<br>       tmp = 0.<br>       print(i,j)<br>       for k in range(A.shape[1]):<br>           tmp += A[i, k] </em> B[k, j]<br>           print(tmp)<br>       out[i, j] = tmp<br>matmul_gu3.max_blocksize = 32</p>",
  "id": "5c2bb21c8d31aa78b130296e",
  "issues": [],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   },
   {
    "screenName": "guvectorize",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 14,
  "sent": "2019-01-01T18:31:56.666Z",
  "text": "@stuartarchibald Hi, can I please come back to the example below, which I think is maybe wrong. guvectorize does not need cuda.grid, right? Printing i and j always gives zeros.\n\n@guvectorize([(float64[:, :], float64[:, :], float64[:, :])], '(m,l),(l,n)->(m,n)', target='cuda')\ndef matmul_gu3(A, B, out):\n   \"\"\"Perform square matrix multiplication of out = A * B\n   \"\"\"\n   i, j = cuda.grid(2)\n   if i < out.shape[0] and j < out.shape[1]:\n       tmp = 0.\n       print(i,j)\n       for k in range(A.shape[1]):\n           tmp += A[i, k] * B[k, j]\n           print(tmp)\n       out[i, j] = tmp\nmatmul_gu3.max_blocksize = 32\n\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"arnabhik\" class=\"mention\">@arnabhik</span> I&#39;m afraid that&#39;s not possible, if you want a different size you&#39;ll need to pass in dummy arrays to permit the use of additional symbols. Are you sure <code>@guvectorize</code> still suits your needs? Perhaps a standard <code>@jit</code> function may be more suitable?",
  "id": "5c2c857137975e7ca95f3998",
  "issues": [],
  "mentions": [
   {
    "screenName": "arnabhik",
    "userId": "5c28de23d73408ce4fb33573",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 14,
  "sent": "2019-01-02T09:33:37.127Z",
  "text": "@arnabhik I'm afraid that's not possible, if you want a different size you'll need to pass in dummy arrays to permit the use of additional symbols. Are you sure `@guvectorize` still suits your needs? Perhaps a standard `@jit` function may be more suitable?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"TomFD\" class=\"mention\">@TomFD</span> first, just a quick thing, to get syntax highlighting, use triple backticks ( ``` )around your code pastes",
  "id": "5c2c85df8dafa715c72cff44",
  "issues": [],
  "mentions": [
   {
    "screenName": "TomFD",
    "userId": "5c27d595d73408ce4fb32c8b",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 14,
  "sent": "2019-01-02T09:35:27.458Z",
  "text": "@TomFD first, just a quick thing, to get syntax highlighting, use triple backticks ( ``` )around your code pastes",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "like <code>def function(x): return x</code>",
  "id": "5c2c85ed6649aa1f8209d32c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2019-01-02T09:35:41.111Z",
  "text": "like ``` def function(x): return x```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "^ highlighted :)",
  "id": "5c2c85f4babbc178b21587b2",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2019-01-02T09:35:48.275Z",
  "text": "^ highlighted :)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "and correct, the code above does not need grid. If you declare and launch a kernel explicitly it can be useful <a href=\"https://numba.pydata.org/numba-doc/dev/cuda/kernels.html#kernel-declaration\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://numba.pydata.org/numba-doc/dev/cuda/kernels.html#kernel-declaration</a>",
  "id": "5c2c8870f6166a3027a877b1",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2019-01-02T09:46:24.011Z",
  "text": "and correct, the code above does not need grid. If you declare and launch a kernel explicitly it can be useful https://numba.pydata.org/numba-doc/dev/cuda/kernels.html#kernel-declaration",
  "unread": false,
  "urls": [
   {
    "url": "https://numba.pydata.org/numba-doc/dev/cuda/kernels.html#kernel-declaration"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/TomFD",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/44144239?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/44144239?v=4&s=60",
   "displayName": "TomFD",
   "gv": "4",
   "id": "5c27d595d73408ce4fb32c8b",
   "url": "/TomFD",
   "username": "TomFD",
   "v": 27
  },
  "html": "thank you!",
  "id": "5c2d069cf6166a3027ac02a7",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2019-01-02T18:44:44.369Z",
  "text": "thank you!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/TomFD",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/44144239?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/44144239?v=4&s=60",
   "displayName": "TomFD",
   "gv": "4",
   "id": "5c27d595d73408ce4fb32c8b",
   "url": "/TomFD",
   "username": "TomFD",
   "v": 27
  },
  "html": "I&#39;m not only new to numba, but also to github. What is the best to edit the sample <a href=\"https://github.com/numba/numba/blob/master/examples/cudajit/matmul.py\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://github.com/numba/numba/blob/master/examples/cudajit/matmul.py</a> where &#39;&#39;&#39;to_host&#39; is still used. Also, soon I&#39;m about to contribute some samples :-)",
  "id": "5c2d0b3409b8066849a459c7",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2019-01-02T19:04:20.023Z",
  "text": "I'm not only new to numba, but also to github. What is the best to edit the sample https://github.com/numba/numba/blob/master/examples/cudajit/matmul.py where '''to_host' is still used. Also, soon I'm about to contribute some samples :-)",
  "unread": false,
  "urls": [
   {
    "url": "https://github.com/numba/numba/blob/master/examples/cudajit/matmul.py"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/TomFD",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/44144239?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/44144239?v=4&s=60",
   "displayName": "TomFD",
   "gv": "4",
   "id": "5c27d595d73408ce4fb32c8b",
   "url": "/TomFD",
   "username": "TomFD",
   "v": 27
  },
  "html": "&#39;&#39;&#39;to_host&#39;&#39;&#39;",
  "id": "5c2d0b40ab910e7d3a107158",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2019-01-02T19:04:32.477Z",
  "text": "'''to_host'''",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/TomFD",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/44144239?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/44144239?v=4&s=60",
   "displayName": "TomFD",
   "gv": "4",
   "id": "5c27d595d73408ce4fb32c8b",
   "url": "/TomFD",
   "username": "TomFD",
   "v": 27
  },
  "html": "```to_host````",
  "id": "5c2d0b59f6166a3027ac27ef",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2019-01-02T19:04:57.252Z",
  "text": "```to_host````",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/TomFD",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/44144239?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/44144239?v=4&s=60",
   "displayName": "TomFD",
   "gv": "4",
   "id": "5c27d595d73408ce4fb32c8b",
   "url": "/TomFD",
   "username": "TomFD",
   "v": 27
  },
  "html": "???",
  "id": "5c2d0b5c93cce97d3bd8529a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2019-01-02T19:05:00.410Z",
  "text": "???",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/TomFD",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/44144239?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/44144239?v=4&s=60",
   "displayName": "TomFD",
   "gv": "4",
   "id": "5c27d595d73408ce4fb32c8b",
   "url": "/TomFD",
   "username": "TomFD",
   "v": 27
  },
  "html": "<code>code</code>",
  "id": "5c2d0bad37975e7ca962fb2e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2019-01-02T19:06:21.799Z",
  "text": "`code`",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/TomFD",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/44144239?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/44144239?v=4&s=60",
   "displayName": "TomFD",
   "gv": "4",
   "id": "5c27d595d73408ce4fb32c8b",
   "url": "/TomFD",
   "username": "TomFD",
   "v": 27
  },
  "html": "got it finally",
  "id": "5c2d0bc0f6166a3027ac2947",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2019-01-02T19:06:40.026Z",
  "text": "got it finally",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/TomFD",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/44144239?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/44144239?v=4&s=60",
   "displayName": "TomFD",
   "gv": "4",
   "id": "5c27d595d73408ce4fb32c8b",
   "url": "/TomFD",
   "username": "TomFD",
   "v": 27
  },
  "html": "not easy on a german keyboard",
  "id": "5c2d0caa0b7fc97caadb4572",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2019-01-02T19:10:34.012Z",
  "text": "not easy on a german keyboard",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"TomFD\" class=\"mention\">@TomFD</span> :) glad you got it. Great to hear you are writing some examples, <a href=\"http://numba.pydata.org/numba-doc/latest/developer/contributing.html\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://numba.pydata.org/numba-doc/latest/developer/contributing.html</a> is a good page to read regarding getting set up for development. Essentially, fork Numba on github to your own account, change what you want, commit it to your fork, then create a pull request against the numba/master branch.",
  "id": "5c2d2ad209b8066849a544e4",
  "issues": [],
  "mentions": [
   {
    "screenName": "TomFD",
    "userId": "5c27d595d73408ce4fb32c8b",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 12,
  "sent": "2019-01-02T21:19:14.668Z",
  "text": "@TomFD :) glad you got it. Great to hear you are writing some examples, http://numba.pydata.org/numba-doc/latest/developer/contributing.html is a good page to read regarding getting set up for development. Essentially, fork Numba on github to your own account, change what you want, commit it to your fork, then create a pull request against the numba/master branch.",
  "unread": false,
  "urls": [
   {
    "url": "http://numba.pydata.org/numba-doc/latest/developer/contributing.html"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "If you need a hand there&#39;s loads of guides on the internet or feel free to ask for help here...",
  "id": "5c2d2af40b7fc97caadc241c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2019-01-02T21:19:48.604Z",
  "text": "If you need a hand there's loads of guides on the internet or feel free to ask for help here...",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/asodeur",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/38456167?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/38456167?v=4&s=60",
   "displayName": "Andreas Sodeur",
   "gv": "4",
   "id": "5b39e8fbd73408ce4f9f4daf",
   "url": "/asodeur",
   "username": "asodeur",
   "v": 2
  },
  "html": "Hi, I am having trouble getting a test case to work for 32bit configs ",
  "id": "5c2db67cdb5b5c68834b2e45",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2019-01-03T07:15:08.549Z",
  "text": "Hi, I am having trouble getting a test case to work for 32bit configs ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/asodeur",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/38456167?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/38456167?v=4&s=60",
   "displayName": "Andreas Sodeur",
   "gv": "4",
   "id": "5b39e8fbd73408ce4f9f4daf",
   "url": "/asodeur",
   "username": "asodeur",
   "v": 2
  },
  "html": "<pre><code><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">forget</span><span class=\"params\">(o)</span>:</span>\n    <span class=\"keyword\">with</span> objmode(x=<span class=\"string\">'uintp'</span>):\n        x = id(o.something_not_boxable)\n\n    <span class=\"keyword\">return</span> x</code></pre>",
  "id": "5c2db6dbf6166a3027b02f1b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2019-01-03T07:16:43.123Z",
  "text": "```@jit(nopython=True)\ndef forget(o):\n    with objmode(x='uintp'):\n        x = id(o.something_not_boxable)\n\n    return x\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/asodeur",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/38456167?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/38456167?v=4&s=60",
   "displayName": "Andreas Sodeur",
   "gv": "4",
   "id": "5b39e8fbd73408ce4f9f4daf",
   "url": "/asodeur",
   "username": "asodeur",
   "v": 2
  },
  "html": "What would be the right type for <code>x</code>. As is,  <code>x</code> gets truncated to 32bits but if I declare it <code>int64</code> I am getting complaints I am storing an <code>int32</code> to <code>int64</code>",
  "id": "5c2db744d945b9688238f26a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2019-01-03T07:18:28.436Z",
  "text": "What would be the right type for `x`. As is,  `x` gets truncated to 32bits but if I declare it `int64` I am getting complaints I am storing an `int32` to `int64`",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/arnabhik",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/33616046?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/33616046?v=4&s=60",
   "displayName": "Abhik Saha",
   "gv": "4",
   "id": "5c28de23d73408ce4fb33573",
   "url": "/arnabhik",
   "username": "arnabhik",
   "v": 1
  },
  "html": "hi i have a code<br><span data-link-type=\"mention\" data-screen-name=\"guvectorize\" class=\"mention\">@guvectorize</span>(&quot;[void(int64[:,:], int64[:,:])]&quot;, &#39;(n,m), (a,b)&#39;)<br>def merge_array(main_arr, output_arr):<br>         output_arr.append([1,1])",
  "id": "5c2dd9fe09b8066849a94254",
  "issues": [],
  "mentions": [
   {
    "screenName": "guvectorize",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 12,
  "sent": "2019-01-03T09:46:38.399Z",
  "text": "hi i have a code \n@guvectorize(\"[void(int64[:,:], int64[:,:])]\", '(n,m), (a,b)') \ndef merge_array(main_arr, output_arr):\n         output_arr.append([1,1])",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/arnabhik",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/33616046?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/33616046?v=4&s=60",
   "displayName": "Abhik Saha",
   "gv": "4",
   "id": "5c28de23d73408ce4fb33573",
   "url": "/arnabhik",
   "username": "arnabhik",
   "v": 1
  },
  "html": "how can i append to a array inside a cuda vectorize or <span data-link-type=\"mention\" data-screen-name=\"cuda.jit\" class=\"mention\">@cuda.jit</span> function",
  "id": "5c2dda11d945b9688239c911",
  "issues": [],
  "mentions": [
   {
    "screenName": "cuda.jit",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 12,
  "sent": "2019-01-03T09:46:57.645Z",
  "text": "how can i append to a array inside a cuda vectorize or @cuda.jit function",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/sklam",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/1929845?v=4&s=60",
   "displayName": "Siu Kwan Lam",
   "gv": "4",
   "id": "55b689f50fc9f982beab2a24",
   "url": "/sklam",
   "username": "sklam",
   "v": 7
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"arnabhik\" class=\"mention\">@arnabhik</span> , You have to allocate the output array to the required capacity and have each iterator assign their output a specific location.  ",
  "id": "5c2e41d76649aa1f82151505",
  "issues": [],
  "mentions": [
   {
    "screenName": "arnabhik",
    "userId": "5c28de23d73408ce4fb33573",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 11,
  "sent": "2019-01-03T17:09:43.699Z",
  "text": "@arnabhik , You have to allocate the output array to the required capacity and have each iterator assign their output a specific location.  ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/TomFD",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/44144239?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/44144239?v=4&s=60",
   "displayName": "TomFD",
   "gv": "4",
   "id": "5c27d595d73408ce4fb32c8b",
   "url": "/TomFD",
   "username": "TomFD",
   "v": 27
  },
  "html": "Hi, I tried to use numba and pyculib together but failed. I use Python 3.6 on Win 10.<br>Pyculib -&gt; needs numpy to downgrad to 1.13. Do separate downgrade of numpy before installing pyculib, otherwise, numpy does not work anymore (no multiarray, unresolvable).<br>Pyculib -&gt; does not find cusparse (library cusparse not found), downgrade cudatoolkit to 7.5<br>Now my code does not work anymore: \u201elibnvvm : error: -arch=compute_61 is an unsupported option\u201c",
  "id": "5c2e73668dafa715c7394425",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2019-01-03T20:41:10.825Z",
  "text": "Hi, I tried to use numba and pyculib together but failed. I use Python 3.6 on Win 10. \nPyculib -> needs numpy to downgrad to 1.13. Do separate downgrade of numpy before installing pyculib, otherwise, numpy does not work anymore (no multiarray, unresolvable).\nPyculib -> does not find cusparse (library cusparse not found), downgrade cudatoolkit to 7.5\nNow my code does not work anymore: \u201elibnvvm : error: -arch=compute_61 is an unsupported option\u201c\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2019-01-03T20:42:29.191Z",
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/TomFD",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/44144239?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/44144239?v=4&s=60",
   "displayName": "TomFD",
   "gv": "4",
   "id": "5c27d595d73408ce4fb32c8b",
   "url": "/TomFD",
   "username": "TomFD",
   "v": 27
  },
  "html": "the code line for the error is <code>@cuda.jit(&#39;(float64[:,:], float64[:,:], float64[:,:])&#39;)</code>",
  "id": "5c2e739fbabbc178b221c9ac",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2019-01-03T20:42:07.434Z",
  "text": "the code line for the error is `@cuda.jit('(float64[:,:], float64[:,:], float64[:,:])')`",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/dawgster",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/24993972?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/24993972?v=4&s=60",
   "displayName": "dawgster",
   "gv": "4",
   "id": "5c2e8abfd73408ce4fb38e24",
   "url": "/dawgster",
   "username": "dawgster",
   "v": 1
  },
  "html": "hi guys! I want to calculate a matrix exponential inside a jitclass method, however since scipy is unsupported  I want to implement the workaroudn suggested here<a target=\"_blank\" data-link-type=\"issue\" data-issue=\"3351\" href=\"https://github.com/numba/numba/issues/3351\" data-provider=\"github\" data-issue-repo=\"numba/numba\" class=\"issue\">numba/numba#3351</a>",
  "id": "5c2e8dc4db5b5c688350921d",
  "issues": [
   {
    "number": "3351",
    "repo": "numba/numba"
   }
  ],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2019-01-03T22:33:40.330Z",
  "text": "hi guys! I want to calculate a matrix exponential inside a jitclass method, however since scipy is unsupported  I want to implement the workaroudn suggested herehttps://github.com/numba/numba/issues/3351",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2019-01-03T22:36:05.815Z",
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/dawgster",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/24993972?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/24993972?v=4&s=60",
   "displayName": "dawgster",
   "gv": "4",
   "id": "5c2e8abfd73408ce4fb38e24",
   "url": "/dawgster",
   "username": "dawgster",
   "v": 1
  },
  "html": "<pre><code>    with <span class=\"function\"><span class=\"title\">objmode</span><span class=\"params\">(answer=<span class=\"string\">'float64[:,:]'</span>)</span></span>:\n\n        answer = scipy<span class=\"class\">.linalg</span><span class=\"class\">.expm</span>(M*self.Ts)</code></pre>",
  "id": "5c2e8de68d31aa78b1423072",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2019-01-03T22:34:14.354Z",
  "text": "\n\n        with objmode(answer='float64[:,:]'):\n\n            answer = scipy.linalg.expm(M*self.Ts)\n",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/dawgster",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/24993972?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/24993972?v=4&s=60",
   "displayName": "dawgster",
   "gv": "4",
   "id": "5c2e8abfd73408ce4fb38e24",
   "url": "/dawgster",
   "username": "dawgster",
   "v": 1
  },
  "html": "however it gives me the following error: Failed in nopython mode pipeline (step: Handle with contexts)<br>Invalid type annotation on non-outgoing variables: {&#39;answer&#39;}.Suggestion: remove annotation of the listed variables",
  "id": "5c2e8e276649aa1f8216faa8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2019-01-03T22:35:19.941Z",
  "text": "however it gives me the following error: Failed in nopython mode pipeline (step: Handle with contexts)\nInvalid type annotation on non-outgoing variables: {'answer'}.Suggestion: remove annotation of the listed variables",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/dawgster",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/24993972?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/24993972?v=4&s=60",
   "displayName": "dawgster",
   "gv": "4",
   "id": "5c2e8abfd73408ce4fb38e24",
   "url": "/dawgster",
   "username": "dawgster",
   "v": 1
  },
  "html": "Id really apprecite some input, thanks",
  "id": "5c2e8e6837975e7ca96c77de",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2019-01-03T22:36:24.514Z",
  "text": "Id really apprecite some input, thanks",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"dawgster\" class=\"mention\">@dawgster</span> does this help:",
  "id": "5c2e99e233e089363b3e3570",
  "issues": [],
  "mentions": [
   {
    "screenName": "dawgster",
    "userId": "5c2e8abfd73408ce4fb38e24",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 12,
  "sent": "2019-01-03T23:25:22.903Z",
  "text": "@dawgster does this help:",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<pre><code><span class=\"keyword\">from</span> numba <span class=\"keyword\">import</span> objmode, njit\n<span class=\"keyword\">from</span> numba <span class=\"keyword\">import</span> jitclass\n<span class=\"keyword\">from</span> numba <span class=\"keyword\">import</span> int32, float64\n<span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np\n<span class=\"keyword\">import</span> scipy.linalg\n\nspec = [\n    (<span class=\"string\">'array'</span>, float64[:,:]),\n]\n\n<span class=\"decorator\">@jitclass(spec)</span>\n<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Thing</span><span class=\"params\">(object)</span>:</span>\n    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, arr)</span>:</span>\n        self.array = arr\n\n    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">expm</span><span class=\"params\">(self)</span>:</span>\n        <span class=\"keyword\">with</span> objmode(answer=<span class=\"string\">'float64[:,:]'</span>):\n            answer = scipy.linalg.expm(self.array)\n        <span class=\"keyword\">return</span> answer\n\n\n<span class=\"decorator\">@njit</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">(thing_inst)</span>:</span>\n    x = thing_inst.expm()\n    <span class=\"keyword\">return</span> x\n\na_in = np.arange(<span class=\"number\">16.</span>).reshape(<span class=\"number\">4</span>, <span class=\"number\">4</span>)\n\na_thing = Thing(a_in)\n\nprint(a_thing.array)\nprint(foo(a_thing))</code></pre>",
  "id": "5c2e99ebbabbc178b222afef",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2019-01-03T23:25:31.826Z",
  "text": "```\nfrom numba import objmode, njit\nfrom numba import jitclass\nfrom numba import int32, float64\nimport numpy as np\nimport scipy.linalg\n\nspec = [\n    ('array', float64[:,:]),\n]\n\n@jitclass(spec)\nclass Thing(object):\n    def __init__(self, arr):\n        self.array = arr\n\n    def expm(self):\n        with objmode(answer='float64[:,:]'):\n            answer = scipy.linalg.expm(self.array)\n        return answer\n\n\n@njit\ndef foo(thing_inst):\n    x = thing_inst.expm()\n    return x\n\na_in = np.arange(16.).reshape(4, 4)\n\na_thing = Thing(a_in)\n\nprint(a_thing.array)\nprint(foo(a_thing))\n```\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "I think you may need to use <code>answer</code> in the code following the <code>objmode</code> block ",
  "id": "5c2e9a3e37975e7ca96cb892",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2019-01-03T23:26:54.224Z",
  "text": "I think you may need to use `answer` in the code following the `objmode` block ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/dawgster",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/24993972?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/24993972?v=4&s=60",
   "displayName": "dawgster",
   "gv": "4",
   "id": "5c2e8abfd73408ce4fb38e24",
   "url": "/dawgster",
   "username": "dawgster",
   "v": 1
  },
  "html": "Great! Thanks, that helped a lot.  Now however that matrix exponential has proven to be a huge bottleneck in my code. Rewriting that method in C++ or cython is not a problem, however will I be able to integrate such external code with numba?",
  "id": "5c2ea2088dafa715c73a76a2",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2019-01-04T00:00:08.802Z",
  "text": "Great! Thanks, that helped a lot.  Now however that matrix exponential has proven to be a huge bottleneck in my code. Rewriting that method in C++ or cython is not a problem, however will I be able to integrate such external code with numba?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "ctypes bound functions and cython function exports are both accessible by numba",
  "id": "5c2ea85bab910e7d3a1a2e7b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2019-01-04T00:27:07.937Z",
  "text": "ctypes bound functions and cython function exports are both accessible by numba",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<a href=\"http://numba.pydata.org/numba-doc/latest/reference/pysupported.html?highlight=ctypes#ctypes\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://numba.pydata.org/numba-doc/latest/reference/pysupported.html?highlight=ctypes#ctypes</a>",
  "id": "5c2ea8b237975e7ca96d0bd3",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2019-01-04T00:28:34.793Z",
  "text": "http://numba.pydata.org/numba-doc/latest/reference/pysupported.html?highlight=ctypes#ctypes",
  "unread": false,
  "urls": [
   {
    "url": "http://numba.pydata.org/numba-doc/latest/reference/pysupported.html?highlight=ctypes#ctypes"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<a href=\"http://numba.pydata.org/numba-doc/latest/extending/high-level.html#importing-cython-functions\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://numba.pydata.org/numba-doc/latest/extending/high-level.html#importing-cython-functions</a>",
  "id": "5c2ea8bd5a0a8058be24f79a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2019-01-04T00:28:45.078Z",
  "text": "http://numba.pydata.org/numba-doc/latest/extending/high-level.html#importing-cython-functions",
  "unread": false,
  "urls": [
   {
    "url": "http://numba.pydata.org/numba-doc/latest/extending/high-level.html#importing-cython-functions"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "or write one using numpy and jit it?",
  "id": "5c2ea8d9f6166a3027b650e0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2019-01-04T00:29:13.609Z",
  "text": "or write one using numpy and jit it?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Lomelgande",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/8880982?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/8880982?v=4&s=60",
   "displayName": "Lomelgande",
   "gv": "4",
   "id": "5ab3f0f2d73408ce4f92b317",
   "url": "/Lomelgande",
   "username": "Lomelgande",
   "v": 6
  },
  "html": "I&#39;m encountering some strange behavior I&#39;m not sure I understand. Hopefully someone here might be able to help me. I am implementing a warp shuffle minimum reduction and if I set my 3d array&#39;s y dimension to a value less than 32 then I get the incorrect minimum value (it is always 0). With any other shape it seems to work just fine, even when the x and z are less than 32.<pre><code><span class=\"keyword\">from</span> numba <span class=\"keyword\">import</span> cuda, float32\n<span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np\n<span class=\"keyword\">import</span> math\n\n<span class=\"decorator\">@cuda.jit(device = True)</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">unflatten</span><span class=\"params\">(n, shape)</span>:</span>\n    k = n%shape[<span class=\"number\">2</span>]\n    j = n//shape[<span class=\"number\">2</span>]%shape[<span class=\"number\">1</span>]\n    i = n//(shape[<span class=\"number\">1</span>]*shape[<span class=\"number\">2</span>])\n\n    <span class=\"keyword\">return</span> (i, j, k)\n\n<span class=\"decorator\">@cuda.jit(device = True)</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_warp_min_reduce</span><span class=\"params\">(val)</span>:</span>\n    mask  = <span class=\"number\">0xffffffff</span>\n    delta = np.int32(cuda.warpsize//<span class=\"number\">2</span>)\n    <span class=\"keyword\">while</span> delta &gt; <span class=\"number\">0</span>:\n        val    = min(val, cuda.shfl_down_sync(mask, val, delta))\n        delta /= <span class=\"number\">2</span>\n\n    <span class=\"keyword\">return</span> val\n\n<span class=\"decorator\">@cuda.jit(device = True)</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_block_min_reduce</span><span class=\"params\">(val, shared)</span>:</span>\n    s_n = cuda.threadIdx.x//cuda.warpsize\n\n    val = _warp_min_reduce(val)\n\n    <span class=\"keyword\">if</span> cuda.laneid == <span class=\"number\">0</span>:\n        shared[s_n] = val\n\n    cuda.syncthreads()\n\n    val = np.inf\n    <span class=\"keyword\">if</span> cuda.threadIdx.x &lt; cuda.blockDim.x//cuda.warpsize:\n        val = shared[cuda.laneid]\n\n    <span class=\"keyword\">if</span> s_n == <span class=\"number\">0</span>:\n        val = _warp_min_reduce(val)\n\n    <span class=\"keyword\">return</span> val\n\n<span class=\"decorator\">@cuda.jit('void(f4[:,:,:], f4[:], i4[:])')</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_minimum_3d</span><span class=\"params\">(_in, _out, shape)</span>:</span>\n    w, h, d = shape\n    start   = cuda.grid(<span class=\"number\">1</span>)\n    stride  = cuda.gridsize(<span class=\"number\">1</span>)\n\n    shared = cuda.shared.array(shape = <span class=\"number\">32</span>, dtype = float32)\n\n    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> range(start, w*h*d, stride):\n        i, j, k = unflatten(n, shape)\n\n        val = _in[i,j,k]\n        val = _block_min_reduce(val, shared)\n\n        <span class=\"keyword\">if</span> cuda.threadIdx.x == <span class=\"number\">0</span>:\n            _out[cuda.blockIdx.x] = min(val, _out[cuda.blockIdx.x])\n\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">minimum</span><span class=\"params\">(d_in)</span>:</span>\n    blockSize = (<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>)\n    gridSize  = <span class=\"number\">1</span>\n\n    d_out   = cuda.to_device(np.full(gridSize, np.inf, dtype = np.float32))\n    d_shape = cuda.to_device(d_in.shape)\n\n    _minimum_3d[gridSize, np.prod(blockSize)](d_in, d_out, d_shape)\n\n    <span class=\"comment\">#TO DO:</span>\n        <span class=\"comment\">#run minimum reduction on output of _minimum_3d to get scalar value</span>\n\n    <span class=\"keyword\">return</span> d_out\n\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span>\n    <span class=\"comment\"># #Result is zero and incorrect when run on my 1080</span>\n    shape = np.array((<span class=\"number\">1</span>,<span class=\"number\">21</span>,<span class=\"number\">1</span>), dtype = np.int32)\n    <span class=\"comment\"># #Result is non-zero and correct  when run on my 1080</span>\n    <span class=\"comment\"># shape = np.array((10,32,10), dtype = np.int32)</span>\n    <span class=\"comment\"># shape = np.array((54,52,60), dtype = np.int32)</span>\n    <span class=\"comment\"># shape = np.array((31,32,31), dtype = np.int32)</span>\n\n    ary   = np.float32(np.random.rand(*shape))\n    d_ary = cuda.to_device(ary)\n\n    _min = minimum(d_ary)\n    test = _min.copy_to_host()\n    print(test)\n    print(min(test))\n    print(min(ary.flatten()))\n\n<span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:\n    main()</code></pre>",
  "id": "5c2eb81a6649aa1f8217f696",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2019-01-04T01:34:18.708Z",
  "text": "I'm encountering some strange behavior I'm not sure I understand. Hopefully someone here might be able to help me. I am implementing a warp shuffle minimum reduction and if I set my 3d array's y dimension to a value less than 32 then I get the incorrect minimum value (it is always 0). With any other shape it seems to work just fine, even when the x and z are less than 32.\n\n```\nfrom numba import cuda, float32\nimport numpy as np\nimport math\n\n@cuda.jit(device = True)\ndef unflatten(n, shape):\n\tk = n%shape[2]\n\tj = n//shape[2]%shape[1]\n\ti = n//(shape[1]*shape[2])\n\n\treturn (i, j, k)\n\n@cuda.jit(device = True)\ndef _warp_min_reduce(val):\n\tmask  = 0xffffffff\n\tdelta = np.int32(cuda.warpsize//2)\n\twhile delta > 0:\n\t\tval    = min(val, cuda.shfl_down_sync(mask, val, delta))\n\t\tdelta /= 2\n\n\treturn val\n\n@cuda.jit(device = True)\ndef _block_min_reduce(val, shared):\n\ts_n = cuda.threadIdx.x//cuda.warpsize\n\n\tval = _warp_min_reduce(val)\n\n\tif cuda.laneid == 0:\n\t\tshared[s_n] = val\n\n\tcuda.syncthreads()\n\n\tval = np.inf\n\tif cuda.threadIdx.x < cuda.blockDim.x//cuda.warpsize:\n\t\tval = shared[cuda.laneid]\n\n\tif s_n == 0:\n\t\tval = _warp_min_reduce(val)\n\n\treturn val\n\n@cuda.jit('void(f4[:,:,:], f4[:], i4[:])')\ndef _minimum_3d(_in, _out, shape):\n\tw, h, d = shape\n\tstart   = cuda.grid(1)\n\tstride  = cuda.gridsize(1)\n\n\tshared = cuda.shared.array(shape = 32, dtype = float32)\n\n\tfor n in range(start, w*h*d, stride):\n\t\ti, j, k = unflatten(n, shape)\n\n\t\tval = _in[i,j,k]\n\t\tval = _block_min_reduce(val, shared)\n\n\t\tif cuda.threadIdx.x == 0:\n\t\t\t_out[cuda.blockIdx.x] = min(val, _out[cuda.blockIdx.x])\n\ndef minimum(d_in):\n\tblockSize = (4,4,4)\n\tgridSize  = 1\n\n\td_out   = cuda.to_device(np.full(gridSize, np.inf, dtype = np.float32))\n\td_shape = cuda.to_device(d_in.shape)\n\n\t_minimum_3d[gridSize, np.prod(blockSize)](d_in, d_out, d_shape)\n\n\t#TO DO:\n\t\t#run minimum reduction on output of _minimum_3d to get scalar value\n\n\treturn d_out\n\ndef main():\n\t# #Result is zero and incorrect when run on my 1080\n\tshape = np.array((1,21,1), dtype = np.int32)\n\t# #Result is non-zero and correct  when run on my 1080\n\t# shape = np.array((10,32,10), dtype = np.int32)\n\t# shape = np.array((54,52,60), dtype = np.int32)\n\t# shape = np.array((31,32,31), dtype = np.int32)\n\n\tary   = np.float32(np.random.rand(*shape))\n\td_ary = cuda.to_device(ary)\n\n\t_min = minimum(d_ary)\n\ttest = _min.copy_to_host()\n\tprint(test)\n\tprint(min(test))\n\tprint(min(ary.flatten()))\n\nif __name__ == \"__main__\":\n\tmain()\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Lomelgande",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/8880982?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/8880982?v=4&s=60",
   "displayName": "Lomelgande",
   "gv": "4",
   "id": "5ab3f0f2d73408ce4f92b317",
   "url": "/Lomelgande",
   "username": "Lomelgande",
   "v": 6
  },
  "html": "it seems like min(val, cuda.shfl_down_sync(mask, val, delta)) is returning 0 when outside the range of the array. If I define val at the start of the kernel so that every thread initializes val = np.inf it still seems to return 0. Is there a way around this without having to add a bounds check inside warp shuffle while loop?",
  "id": "5c2f02b837975e7ca96f1090",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2019-01-04T06:52:40.692Z",
  "text": "it seems like min(val, cuda.shfl_down_sync(mask, val, delta)) is returning 0 when outside the range of the array. If I define val at the start of the kernel so that every thread initializes val = np.inf it still seems to return 0. Is there a way around this without having to add a bounds check inside warp shuffle while loop?\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/dawgster",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/24993972?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/24993972?v=4&s=60",
   "displayName": "dawgster",
   "gv": "4",
   "id": "5c2e8abfd73408ce4fb38e24",
   "url": "/dawgster",
   "username": "dawgster",
   "v": 1
  },
  "html": "norm = np.linalg.norm(A, ord=1) gives  TypeError: got an unexpected keyword argument &#39;ord&#39;. According to the documentation the ord argument should be supported no?",
  "id": "5c2f5af337975e7ca9714dd7",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2019-01-04T13:09:07.917Z",
  "text": "norm = np.linalg.norm(A, ord=1) gives  TypeError: got an unexpected keyword argument 'ord'. According to the documentation the ord argument should be supported no?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"dawgster\" class=\"mention\">@dawgster</span> think that&#39;s a bug from the literal types rewrite",
  "id": "5c2f5f318dafa715c73ef163",
  "issues": [],
  "mentions": [
   {
    "screenName": "dawgster",
    "userId": "5c2e8abfd73408ce4fb38e24",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 13,
  "sent": "2019-01-04T13:27:13.550Z",
  "text": "@dawgster think that's a bug from the literal types rewrite",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<pre><code>from numba import njit\nimport numpy as np\n\ndef <span class=\"function\"><span class=\"title\">foo</span><span class=\"params\">(a)</span></span>:\n    return np<span class=\"class\">.linalg</span><span class=\"class\">.norm</span>(<span class=\"tag\">a</span>, <span class=\"number\">1</span>)\n\n<span class=\"tag\">a</span> = np.<span class=\"function\"><span class=\"title\">arange</span><span class=\"params\">(<span class=\"number\">16</span>.)</span></span>.<span class=\"function\"><span class=\"title\">reshape</span><span class=\"params\">((<span class=\"number\">4</span>, <span class=\"number\">4</span>)</span></span>)\n\n<span class=\"function\"><span class=\"title\">print</span><span class=\"params\">(foo(a)</span></span>)\n<span class=\"function\"><span class=\"title\">print</span><span class=\"params\">(njit(foo)</span><span class=\"params\">(a)</span></span>)</code></pre>",
  "id": "5c2f5fbfab910e7d3a1ea2c2",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2019-01-04T13:29:35.300Z",
  "text": "```\nfrom numba import njit\nimport numpy as np\n\ndef foo(a):\n    return np.linalg.norm(a, 1)\n\na = np.arange(16.).reshape((4, 4))\n\nprint(foo(a))\nprint(njit(foo)(a))\n```\n\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "^ that works around it",
  "id": "5c2f5fc56649aa1f821bf709",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2019-01-04T13:29:41.143Z",
  "text": "^ that works around it",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "just don&#39;t use the named kwarg",
  "id": "5c2f5fcb8dafa715c73ef665",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2019-01-04T13:29:47.777Z",
  "text": "just don't use the named kwarg",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "actually, might just be a long standing bug",
  "id": "5c2f5ffb6649aa1f821bf8a7",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2019-01-04T13:30:35.319Z",
  "text": "actually, might just be a long standing bug",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<code>ord</code> is a built in, so IIRC I switched it for <code>order</code> at the call site, but clearly got the rewrite wrong",
  "id": "5c2f6028b8d2227918b022c3",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2019-01-04T13:31:20.634Z",
  "text": "`ord` is a built in, so IIRC I switched it for `order` at the call site, but clearly got the rewrite wrong",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/dawgster",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/24993972?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/24993972?v=4&s=60",
   "displayName": "dawgster",
   "gv": "4",
   "id": "5c2e8abfd73408ce4fb38e24",
   "url": "/dawgster",
   "username": "dawgster",
   "v": 1
  },
  "html": "Thanks your help is indeed very much appreciated. I decided to write a jitable numpy based matrix exponential but am still faced with some caveats",
  "id": "5c2f6a0bbabbc178b227d619",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2019-01-04T14:13:31.237Z",
  "text": "Thanks your help is indeed very much appreciated. I decided to write a jitable numpy based matrix exponential but am still faced with some caveats",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/dawgster",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/24993972?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/24993972?v=4&s=60",
   "displayName": "dawgster",
   "gv": "4",
   "id": "5c2e8abfd73408ce4fb38e24",
   "url": "/dawgster",
   "username": "dawgster",
   "v": 1
  },
  "html": "I want my function to fetch a set of coefficients from a global tuple and use them for calculation",
  "id": "5c2f6a27f6166a3027bb0c4a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2019-01-04T14:13:59.719Z",
  "text": "I want my function to fetch a set of coefficients from a global tuple and use them for calculation",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2019-01-04T14:16:30.095Z",
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/dawgster",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/24993972?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/24993972?v=4&s=60",
   "displayName": "dawgster",
   "gv": "4",
   "id": "5c2e8abfd73408ce4fb38e24",
   "url": "/dawgster",
   "username": "dawgster",
   "v": 1
  },
  "html": "like this :<pre><code>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_expm_pade</span><span class=\"params\">(A,M)</span>:</span>\n    dtype = A.dtype\n    dim,dim = A.shape\n    b = b_d[M]</code></pre>",
  "id": "5c2f6a3f93cce97d3be6dc01",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2019-01-04T14:14:23.172Z",
  "text": "like this :\n```\n\ndef _expm_pade(A,M):\n    dtype = A.dtype\n    dim,dim = A.shape\n    b = b_d[M]\n```",
  "unread": false,
  "urls": [],
  "v": 5
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/dawgster",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/24993972?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/24993972?v=4&s=60",
   "displayName": "dawgster",
   "gv": "4",
   "id": "5c2e8abfd73408ce4fb38e24",
   "url": "/dawgster",
   "username": "dawgster",
   "v": 1
  },
  "html": "b is said coefficient set and b_d the global tuple:<pre><code>b_d = (\n    (-<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>),\n    (-<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>),\n    (-<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>),\n    (<span class=\"number\">120</span>, <span class=\"number\">60</span>, <span class=\"number\">12</span>, <span class=\"number\">1</span>),\n    (-<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>),\n    (<span class=\"number\">30240</span>, <span class=\"number\">15120</span>, <span class=\"number\">3360</span>, <span class=\"number\">420</span>, <span class=\"number\">30</span>, <span class=\"number\">1</span>),\n    (-<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>),\n    (<span class=\"number\">17297280</span>, <span class=\"number\">8648640</span>, <span class=\"number\">1995840</span>, <span class=\"number\">277200</span>, <span class=\"number\">25200</span>, <span class=\"number\">1512</span>, <span class=\"number\">56</span>, <span class=\"number\">1</span>),\n    (-<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>),\n    (<span class=\"number\">17643225600</span>, <span class=\"number\">8821612800</span>, <span class=\"number\">2075673600</span>, <span class=\"number\">302702400</span>, <span class=\"number\">30270240</span>, <span class=\"number\">2162160</span>, <span class=\"number\">110880</span>, <span class=\"number\">3960</span>, <span class=\"number\">90</span>, <span class=\"number\">1</span>),\n    (-<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>),\n    (-<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>),\n    (-<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>),\n    (<span class=\"number\">64764752532480000</span>, <span class=\"number\">32382376266240000</span>, <span class=\"number\">7771770303897600</span>, <span class=\"number\">1187353796428800</span>, <span class=\"number\">129060195264000</span>, <span class=\"number\">10559470521600</span>, <span class=\"number\">670442572800</span>, <span class=\"number\">33522128640</span>, <span class=\"number\">1323241920</span>, <span class=\"number\">40840800</span>, <span class=\"number\">960960</span>, <span class=\"number\">16380</span>, <span class=\"number\">182</span>, <span class=\"number\">1</span>)\n)</code></pre>",
  "id": "5c2f6b2ddb5b5c688355d33d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2019-01-04T14:18:21.818Z",
  "text": "b is said coefficient set and b_d the global tuple:\n```\nb_d = (\n    (-1, -1, -1),\n    (-1, -1, -1),\n    (-1, -1, -1),\n    (120, 60, 12, 1),\n    (-1, -1, -1),\n    (30240, 15120, 3360, 420, 30, 1),\n    (-1, -1, -1),\n    (17297280, 8648640, 1995840, 277200, 25200, 1512, 56, 1),\n    (-1, -1, -1),\n    (17643225600, 8821612800, 2075673600, 302702400, 30270240, 2162160, 110880, 3960, 90, 1),\n    (-1, -1, -1),\n    (-1, -1, -1),\n    (-1, -1, -1),\n    (64764752532480000, 32382376266240000, 7771770303897600, 1187353796428800, 129060195264000, 10559470521600, 670442572800, 33522128640, 1323241920, 40840800, 960960, 16380, 182, 1)\n)\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2019-01-04T14:19:39.634Z",
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/dawgster",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/24993972?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/24993972?v=4&s=60",
   "displayName": "dawgster",
   "gv": "4",
   "id": "5c2e8abfd73408ce4fb38e24",
   "url": "/dawgster",
   "username": "dawgster",
   "v": 1
  },
  "html": "<p>when I try to run this i get the following error:<br>`<br>Failed in nopython mode pipeline (step: nopython frontend)<br>Failed in nopython mode pipeline (step: nopython frontend)<br>Failed in nopython mode pipeline (step: nopython frontend)<br>Invalid use of Function(&lt;built-in function getitem&gt;) with argument(s) of type(s): ((tuple(int32 x 3), tuple(int32 x 3), tuple(int32 x 3), tuple(int32 x 4), tuple(int32 x 3), tuple(int32 x 6), tuple(int32 x 3), tuple(int32 x 8), tuple(int32 x 3), (int64, int64, int32, int32, int32, int32, int32, int32, int32, int32), tuple(int32 x 3), tuple(int32 x 3), tuple(int32 x 3), (int64, int64, int64, int64, int64, int64, int64, int64, int32, int32, int32, int32, int32, int32)), Literal<a href=\"http://3\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">int</a>)</p><ul>\n<li>parameterized<br>In definition 0:<br> All templates rejected with literals.<br>In definition 1:<br> All templates rejected without literals.<br>In definition 2:<br> All templates rejected with literals.<br>In definition 3:<br> All templates rejected without literals.<br>In definition 4:<br> All templates rejected with literals.<br>In definition 5:<br> All templates rejected without literals.<br>In definition 6:<br> All templates rejected with literals.<br>In definition 7:<br> All templates rejected without literals.<br>This error is usually caused by passing an argument of a type that is unsupported by the named function.<br>[1] During: typing of intrinsic-call at C:\\Users\\Jakub\\PycharmProjects\\Driverless\\Utils\\MatrixExponential.py (35)</li>\n</ul>\n<p>`</p>",
  "id": "5c2f6b71f6166a3027bb15bf",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2019-01-04T14:19:29.657Z",
  "text": "when I try to run this i get the following error:\n`\nFailed in nopython mode pipeline (step: nopython frontend)\nFailed in nopython mode pipeline (step: nopython frontend)\nFailed in nopython mode pipeline (step: nopython frontend)\nInvalid use of Function(<built-in function getitem>) with argument(s) of type(s): ((tuple(int32 x 3), tuple(int32 x 3), tuple(int32 x 3), tuple(int32 x 4), tuple(int32 x 3), tuple(int32 x 6), tuple(int32 x 3), tuple(int32 x 8), tuple(int32 x 3), (int64, int64, int32, int32, int32, int32, int32, int32, int32, int32), tuple(int32 x 3), tuple(int32 x 3), tuple(int32 x 3), (int64, int64, int64, int64, int64, int64, int64, int64, int32, int32, int32, int32, int32, int32)), Literal[int](3))\n * parameterized\nIn definition 0:\n    All templates rejected with literals.\nIn definition 1:\n    All templates rejected without literals.\nIn definition 2:\n    All templates rejected with literals.\nIn definition 3:\n    All templates rejected without literals.\nIn definition 4:\n    All templates rejected with literals.\nIn definition 5:\n    All templates rejected without literals.\nIn definition 6:\n    All templates rejected with literals.\nIn definition 7:\n    All templates rejected without literals.\nThis error is usually caused by passing an argument of a type that is unsupported by the named function.\n[1] During: typing of intrinsic-call at C:\\Users\\Jakub\\PycharmProjects\\Driverless\\Utils\\MatrixExponential.py (35)\n\n`",
  "unread": false,
  "urls": [
   {
    "url": "http://3"
   }
  ],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/dawgster",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/24993972?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/24993972?v=4&s=60",
   "displayName": "dawgster",
   "gv": "4",
   "id": "5c2e8abfd73408ce4fb38e24",
   "url": "/dawgster",
   "username": "dawgster",
   "v": 1
  },
  "html": "Sorry for spamming the chat with questions and thanks again!",
  "id": "5c2f6baaab910e7d3a1ef0e5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2019-01-04T14:20:26.143Z",
  "text": "Sorry for spamming the chat with questions and thanks again!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "it&#39;s because the <code>b_d</code> variable is a tuple of non homogeneous type",
  "id": "5c2f6fccd945b9688243c182",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2019-01-04T14:38:04.807Z",
  "text": "it's because the `b_d` variable is a tuple of non homogeneous type",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "were all the entries <code>tuple(int32 x3)</code> type it&#39;d be ok",
  "id": "5c2f7013ab910e7d3a1f0ab2",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2019-01-04T14:39:15.311Z",
  "text": "were all the entries `tuple(int32 x3)` type it'd be ok",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "Perhaps just made <code>b_d</code> an array?",
  "id": "5c2f701b6649aa1f821c69ff",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2019-01-04T14:39:23.603Z",
  "text": "Perhaps just made `b_d` an array?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "or put some extra entries into the short tuples in the tuple definition",
  "id": "5c2f70c009b8066849b336f3",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2019-01-04T14:42:08.268Z",
  "text": "or put some extra entries into the short tuples in the tuple definition",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2019-01-04T14:43:52.378Z",
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/dawgster",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/24993972?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/24993972?v=4&s=60",
   "displayName": "dawgster",
   "gv": "4",
   "id": "5c2e8abfd73408ce4fb38e24",
   "url": "/dawgster",
   "username": "dawgster",
   "v": 1
  },
  "html": "yeah I had tried with array before but then i got<br>numba.errors.LoweringError: Failed in nopython mode pipeline (step: nopython mode backend)<br>Cannot lower constant of type &#39;reflected list(reflected list(int32))&#39;",
  "id": "5c2f711e2863d8612bd92adf",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2019-01-04T14:43:42.768Z",
  "text": "yeah I had tried with array before but then i got \nnumba.errors.LoweringError: Failed in nopython mode pipeline (step: nopython mode backend)\nCannot lower constant of type 'reflected list(reflected list(int32))'\n",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/dawgster",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/24993972?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/24993972?v=4&s=60",
   "displayName": "dawgster",
   "gv": "4",
   "id": "5c2e8abfd73408ce4fb38e24",
   "url": "/dawgster",
   "username": "dawgster",
   "v": 1
  },
  "html": "I think some of those numbers are too big to fit in int32 which results  in a non-homogenous  type, could that also be a problem?",
  "id": "5c2f717409b8066849b33c4d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2019-01-04T14:45:08.164Z",
  "text": "I think some of those numbers are too big to fit in int32 which results  in a non-homogenous  type, could that also be a problem?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "I wouldn&#39;t have thought an array would cause a complaint about a list of lists",
  "id": "5c2f72e48d31aa78b147ac79",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2019-01-04T14:51:16.409Z",
  "text": "I wouldn't have thought an array would cause a complaint about a list of lists",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/dawgster",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/24993972?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/24993972?v=4&s=60",
   "displayName": "dawgster",
   "gv": "4",
   "id": "5c2e8abfd73408ce4fb38e24",
   "url": "/dawgster",
   "username": "dawgster",
   "v": 1
  },
  "html": "oh maybe i just copied the wrong error, because I tried it with both lists and arrays",
  "id": "5c2f735e5a0a8058be29dc54",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2019-01-04T14:53:18.841Z",
  "text": "oh maybe i just copied the wrong error, because I tried it with both lists and arrays",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/dawgster",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/24993972?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/24993972?v=4&s=60",
   "displayName": "dawgster",
   "gv": "4",
   "id": "5c2e8abfd73408ce4fb38e24",
   "url": "/dawgster",
   "username": "dawgster",
   "v": 1
  },
  "html": "but it works now, ive added the dummy entries. Thanks!",
  "id": "5c2f738f8dafa715c73f6e6e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2019-01-04T14:54:07.110Z",
  "text": "but it works now, ive added the dummy entries. Thanks!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "no problem",
  "id": "5c2f73940b7fc97caae9f2bd",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2019-01-04T14:54:12.578Z",
  "text": "no problem",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "freezing data is surprisingly hard",
  "id": "5c2f739b0b7fc97caae9f31b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 16,
  "sent": "2019-01-04T14:54:19.828Z",
  "text": "freezing data is surprisingly hard",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"dawgster\" class=\"mention\">@dawgster</span> <a target=\"_blank\" data-link-type=\"issue\" data-issue=\"3649\" href=\"https://github.com/numba/numba/issues/3649\" data-provider=\"github\" data-issue-repo=\"numba/numba\" class=\"issue\">numba/numba#3649</a> to track norm <code>ord</code> problem, <a target=\"_blank\" data-link-type=\"pr\" data-issue=\"3648\" href=\"https://github.com/numba/numba/pull/3648\" data-provider=\"github\" data-issue-repo=\"numba/numba\" class=\"pr\">numba/numba#3648</a> is working towards a fix for the root cause, the impl itself isn&#39;t too bad to fix.",
  "id": "5c2f79200b7fc97caaea15f8",
  "issues": [
   {
    "number": "3649",
    "repo": "numba/numba"
   },
   {
    "number": "3648",
    "repo": "numba/numba"
   }
  ],
  "mentions": [
   {
    "screenName": "dawgster",
    "userId": "5c2e8abfd73408ce4fb38e24",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 16,
  "sent": "2019-01-04T15:17:52.964Z",
  "text": "@dawgster https://github.com/numba/numba/issues/3649 to track norm `ord` problem, https://github.com/numba/numba/pull/3648 is working towards a fix for the root cause, the impl itself isn't too bad to fix.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/TomFD",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/44144239?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/44144239?v=4&s=60",
   "displayName": "TomFD",
   "gv": "4",
   "id": "5c27d595d73408ce4fb32c8b",
   "url": "/TomFD",
   "username": "TomFD",
   "v": 27
  },
  "html": "Hi, I still don&#39;t get numba and pyculib to work together, to do an 2D FFT followed by a matrix multiplication. I did not use gemm. Can anyone reproduce the error numba.cuda.cudadrv.error.NvvmError: Failed to compile<br>libnvvm : error: -arch=compute_61 is an unsupported option<br>NVVM_ERROR_INVALID_OPTION<pre><code><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np\n<span class=\"keyword\">import</span> math\n\n<span class=\"keyword\">from</span> timeit <span class=\"keyword\">import</span> default_timer <span class=\"keyword\">as</span> timer\n<span class=\"keyword\">import</span> numba.cuda <span class=\"keyword\">as</span> cuda\n<span class=\"keyword\">import</span> pyculib.blas <span class=\"keyword\">as</span> cublas\n<span class=\"keyword\">import</span> pyculib.fft <span class=\"keyword\">as</span> cufft\n\n<span class=\"decorator\">@cuda.jit</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">matmul</span><span class=\"params\">(A, B, C)</span>:</span>\n    <span class=\"string\">\"\"\"Perform square matrix multiplication of C = A * B\n    \"\"\"</span>\n    i, j = cuda.grid(<span class=\"number\">2</span>)\n    <span class=\"keyword\">if</span> i &lt; C.shape[<span class=\"number\">0</span>] <span class=\"keyword\">and</span> j &lt; C.shape[<span class=\"number\">1</span>]:\n        tmp = <span class=\"number\">0.</span>\n        <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> range(A.shape[<span class=\"number\">1</span>]):\n            tmp += A[i, k] * B[k, j]\n        C[i, j] = tmp\n\nN=<span class=\"number\">2048</span>\nloops = <span class=\"number\">4</span>\n\nA = np.array(np.random.random((N, N)), dtype=np.complex64)\n<span class=\"comment\">#A = np.ones((N, N), dtype=np.complex64)</span>\nB = np.array(np.random.random((N, N)), dtype=np.complex64)\nC = np.zeros_like(A)\n<span class=\"comment\"># -----------------------------------------------------</span>\nprint(<span class=\"string\">'numpy.fft'</span>)\ns = timer()\n<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(loops):\n    C=np.fft.fft2(A)\n    np.dot(A,B,C)\ne = timer()\nref=C\nnp_time=(e-s)\nprint(<span class=\"string\">'reference time'</span>,np_time,<span class=\"string\">'sec'</span>,<span class=\"string\">'\\n'</span>)\n<span class=\"comment\"># -----------------------------------------------------</span>\nprint(<span class=\"string\">'cuFFT.fft'</span>)\nstream = cuda.stream()\nfftPlan = cufft.FFTPlan(shape=A.shape, itype=<span class=\"string\">'complex64'</span>, otype=<span class=\"string\">'complex64'</span>, stream=stream)\ntpb = <span class=\"number\">32</span>\nbpg = int(math.ceil(N / tpb))\ns = timer()\n<span class=\"keyword\">with</span> stream.auto_synchronize():\n        A_d = cuda.to_device(A, stream=stream)\n        B_d = cuda.to_device(B, stream=stream)\n        C_d = cuda.to_device(C, stream=stream)\n        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(loops):\n            fftPlan.forward(A_d, B_d)\n            matmul[(bpg, bpg), (tpb, tpb), stream](A_d, B_d, C_d)\n        C = C_d.copy_to_host()\n\ne = timer()\n\n<span class=\"keyword\">if</span> <span class=\"keyword\">not</span> np.allclose(ref, C):\n    print(<span class=\"string\">'C'</span>,C)\n    print(<span class=\"string\">'ref'</span>,ref)\n    print(<span class=\"string\">'matrix fft error. function contains error?'</span>)\nprint(<span class=\"string\">'speed-up'</span>,np_time/(e-s),<span class=\"string\">'\\n'</span>,<span class=\"string\">'\\n'</span>)</code></pre>",
  "id": "5c2fede54ed18278775e0e48",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2019-01-04T23:36:05.444Z",
  "text": "Hi, I still don't get numba and pyculib to work together, to do an 2D FFT followed by a matrix multiplication. I did not use gemm. Can anyone reproduce the error numba.cuda.cudadrv.error.NvvmError: Failed to compile\nlibnvvm : error: -arch=compute_61 is an unsupported option\nNVVM_ERROR_INVALID_OPTION\n\n```\nimport numpy as np\nimport math\n\nfrom timeit import default_timer as timer\nimport numba.cuda as cuda\nimport pyculib.blas as cublas\nimport pyculib.fft as cufft\n\n@cuda.jit\ndef matmul(A, B, C):\n    \"\"\"Perform square matrix multiplication of C = A * B\n    \"\"\"\n    i, j = cuda.grid(2)\n    if i < C.shape[0] and j < C.shape[1]:\n        tmp = 0.\n        for k in range(A.shape[1]):\n            tmp += A[i, k] * B[k, j]\n        C[i, j] = tmp\n\nN=2048\nloops = 4\n\nA = np.array(np.random.random((N, N)), dtype=np.complex64)\n#A = np.ones((N, N), dtype=np.complex64)\nB = np.array(np.random.random((N, N)), dtype=np.complex64)\nC = np.zeros_like(A)\n# -----------------------------------------------------\nprint('numpy.fft')\ns = timer()\nfor i in range(loops):\n    C=np.fft.fft2(A)\n    np.dot(A,B,C)\ne = timer()\nref=C\nnp_time=(e-s)\nprint('reference time',np_time,'sec','\\n')\n# -----------------------------------------------------\nprint('cuFFT.fft')\nstream = cuda.stream()\nfftPlan = cufft.FFTPlan(shape=A.shape, itype='complex64', otype='complex64', stream=stream)\ntpb = 32\nbpg = int(math.ceil(N / tpb))\ns = timer()\nwith stream.auto_synchronize():\n        A_d = cuda.to_device(A, stream=stream)\n        B_d = cuda.to_device(B, stream=stream)\n        C_d = cuda.to_device(C, stream=stream)\n        for i in range(loops):\n            fftPlan.forward(A_d, B_d)\n            matmul[(bpg, bpg), (tpb, tpb), stream](A_d, B_d, C_d)\n        C = C_d.copy_to_host()\n\ne = timer()\n\nif not np.allclose(ref, C):\n    print('C',C)\n    print('ref',ref)\n    print('matrix fft error. function contains error?')\nprint('speed-up',np_time/(e-s),'\\n','\\n')\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"TomFD\" class=\"mention\">@TomFD</span> This env: <code>conda create -n &lt;some_name_you_like&gt; -c numba pyculib numba=0.42 python=3 cudatoolkit six</code>",
  "id": "5c338fcf26d86e4d563e0990",
  "issues": [],
  "mentions": [
   {
    "screenName": "TomFD",
    "userId": "5c27d595d73408ce4fb32c8b",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 12,
  "sent": "2019-01-07T17:43:43.327Z",
  "text": "@TomFD This env: `conda create -n <some_name_you_like> -c numba pyculib numba=0.42 python=3 cudatoolkit six`",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "and this code:",
  "id": "5c338ff0357dd7655d305957",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2019-01-07T17:44:16.530Z",
  "text": "and this code:",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<pre><code><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np\n<span class=\"keyword\">import</span> math\n\n<span class=\"keyword\">from</span> timeit <span class=\"keyword\">import</span> default_timer <span class=\"keyword\">as</span> timer\n<span class=\"keyword\">import</span> numba.cuda <span class=\"keyword\">as</span> cuda\n<span class=\"keyword\">import</span> pyculib.blas <span class=\"keyword\">as</span> cublas\n<span class=\"keyword\">import</span> pyculib.fft <span class=\"keyword\">as</span> cufft\n\n\n<span class=\"decorator\">@cuda.jit</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">matmul</span><span class=\"params\">(A, B, C)</span>:</span>\n    <span class=\"string\">\"\"\"Perform square matrix multiplication of C = A * B\n    \"\"\"</span>\n    i, j = cuda.grid(<span class=\"number\">2</span>)\n    <span class=\"keyword\">if</span> i &lt; C.shape[<span class=\"number\">0</span>] <span class=\"keyword\">and</span> j &lt; C.shape[<span class=\"number\">1</span>]:\n        tmp = <span class=\"number\">0.</span>\n        <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> range(A.shape[<span class=\"number\">1</span>]):\n            tmp += A[i, k] * B[k, j]\n        C[i, j] = tmp\n\n\nN = <span class=\"number\">512</span>\nloops = <span class=\"number\">1</span>\n\nA = np.array(np.random.random((N, N)), dtype=np.complex64)\nB = np.array(np.random.random((N, N)), dtype=np.complex64)\nC = np.zeros_like(A)\n<span class=\"comment\"># -----------------------------------------------------</span>\nprint(<span class=\"string\">'numpy.fft'</span>)\ns = timer()\n<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(loops):\n    C = np.array(np.fft.fft2(A), dtype=np.complex64, order=<span class=\"string\">'C'</span>)\n    np.dot(A, B, C)\ne = timer()\nref = np.copy(C)\nnp_time = (e - s)\nprint(<span class=\"string\">'reference time'</span>, np_time, <span class=\"string\">'sec'</span>, <span class=\"string\">'\\n'</span>)\n<span class=\"keyword\">del</span> C\n\n<span class=\"comment\"># -----------------------------------------------------</span>\nprint(<span class=\"string\">'cuFFT.fft'</span>)\nstream = cuda.stream()\nfftPlan = cufft.FFTPlan(\n    shape=A.shape,\n    itype=<span class=\"string\">'complex64'</span>,\n    otype=<span class=\"string\">'complex64'</span>,\n    stream=stream)\ntpb = <span class=\"number\">32</span>\nbpg = N // tpb\n\n<span class=\"comment\"># Fortran order!</span>\nA = np.asfortranarray(A)\nB = np.asfortranarray(B)\nC = np.zeros_like(A)\ns = timer()\n<span class=\"keyword\">with</span> stream.auto_synchronize():\n    A_d = cuda.to_device(A, stream=stream)\n    B_d = cuda.to_device(B, stream=stream)\n    C_d = cuda.to_device(C, stream=stream)\n    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(loops):\n        fftPlan.forward(A_d, B_d)\n        matmul[(bpg, bpg), (tpb, tpb), stream](A_d, B_d, C_d)\nC = C_d.copy_to_host()\n\ne = timer()\n\n<span class=\"keyword\">if</span> <span class=\"keyword\">not</span> np.allclose(ref, C):\n    print(<span class=\"string\">'C'</span>, C)\n    print(<span class=\"string\">'ref'</span>, ref)\n    print(<span class=\"string\">'matrix fft error. function contains error?'</span>)\nprint(<span class=\"string\">'speed-up'</span>, np_time / (e - s), <span class=\"string\">'\\n'</span>, <span class=\"string\">'\\n'</span>)</code></pre>",
  "id": "5c338ff3bd592b2e6e68dc12",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2019-01-07T17:44:19.707Z",
  "text": "```\nimport numpy as np\nimport math\n\nfrom timeit import default_timer as timer\nimport numba.cuda as cuda\nimport pyculib.blas as cublas\nimport pyculib.fft as cufft\n\n\n@cuda.jit\ndef matmul(A, B, C):\n    \"\"\"Perform square matrix multiplication of C = A * B\n    \"\"\"\n    i, j = cuda.grid(2)\n    if i < C.shape[0] and j < C.shape[1]:\n        tmp = 0.\n        for k in range(A.shape[1]):\n            tmp += A[i, k] * B[k, j]\n        C[i, j] = tmp\n\n\nN = 512\nloops = 1\n\nA = np.array(np.random.random((N, N)), dtype=np.complex64)\nB = np.array(np.random.random((N, N)), dtype=np.complex64)\nC = np.zeros_like(A)\n# -----------------------------------------------------\nprint('numpy.fft')\ns = timer()\nfor i in range(loops):\n    C = np.array(np.fft.fft2(A), dtype=np.complex64, order='C')\n    np.dot(A, B, C)\ne = timer()\nref = np.copy(C)\nnp_time = (e - s)\nprint('reference time', np_time, 'sec', '\\n')\ndel C\n\n# -----------------------------------------------------\nprint('cuFFT.fft')\nstream = cuda.stream()\nfftPlan = cufft.FFTPlan(\n    shape=A.shape,\n    itype='complex64',\n    otype='complex64',\n    stream=stream)\ntpb = 32\nbpg = N // tpb\n\n# Fortran order!\nA = np.asfortranarray(A)\nB = np.asfortranarray(B)\nC = np.zeros_like(A)\ns = timer()\nwith stream.auto_synchronize():\n    A_d = cuda.to_device(A, stream=stream)\n    B_d = cuda.to_device(B, stream=stream)\n    C_d = cuda.to_device(C, stream=stream)\n    for i in range(loops):\n        fftPlan.forward(A_d, B_d)\n        matmul[(bpg, bpg), (tpb, tpb), stream](A_d, B_d, C_d)\nC = C_d.copy_to_host()\n\ne = timer()\n\nif not np.allclose(ref, C):\n    print('C', C)\n    print('ref', ref)\n    print('matrix fft error. function contains error?')\nprint('speed-up', np_time / (e - s), '\\n', '\\n')\n```\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "seems to work for me",
  "id": "5c338ff78b6399655e2120fe",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2019-01-07T17:44:23.238Z",
  "text": "seems to work for me",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "main issue was that pyculib is a raw BLAS binding so needs fortran ordered arrays",
  "id": "5c33900d357dd7655d305b65",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2019-01-07T17:44:45.310Z",
  "text": "main issue was that pyculib is a raw BLAS binding so needs fortran ordered arrays",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2019-01-08T18:39:05.029Z",
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/Lomelgande",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/8880982?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/8880982?v=4&s=60",
   "displayName": "Lomelgande",
   "gv": "4",
   "id": "5ab3f0f2d73408ce4f92b317",
   "url": "/Lomelgande",
   "username": "Lomelgande",
   "v": 6
  },
  "html": "If I create a device array, d_ary = cuda.to_device(np.zeros(100)), and I want to send the first half to one kernel and the second half to another kernel, can I do something like kernel<a href=\"http://d_ary[:50]\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">[1,1]</a>? Does this create a copy of the array? Also, inside the kernel, if I ask for the size of the array will it return 50 or 100?",
  "id": "5c34ee0e82a6c30b90a5beba",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2019-01-08T18:38:06.935Z",
  "text": "If I create a device array, d_ary = cuda.to_device(np.zeros(100)), and I want to send the first half to one kernel and the second half to another kernel, can I do something like kernel[[1,1]](d_ary[:50])? Does this create a copy of the array? Also, inside the kernel, if I ask for the size of the array will it return 50 or 100?",
  "unread": false,
  "urls": [
   {
    "url": "http://d_ary[:50]"
   }
  ],
  "v": 4
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "Slicing a device array (like <code>d_ary[:50]</code>) will produce a view on the original array data (no copy), and the view will have the size of the slice, not the size of the original array.",
  "id": "5c3500ef4ed18278777cbf3f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2019-01-08T19:58:39.047Z",
  "text": "Slicing a device array (like `d_ary[:50]`) will produce a view on the original array data (no copy), and the view will have the size of the slice, not the size of the original array.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/garanews",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/16938405?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/16938405?v=4&s=60",
   "displayName": "garanews",
   "gv": "4",
   "id": "58ef1881d73408ce4f580f51",
   "url": "/garanews",
   "username": "garanews",
   "v": 17
  },
  "html": "<p>Hello,  I&#39;m trying to convert in numba a  python function  maded with re that uncompressed strings in this way:<br>vector_compressed = &#39;A9gA6BA5EAg2wA2CA&#39;<br>vector_decompressed = &#39;AAAAAAAAAgAAAAAABAAAAAEAggwAACA&#39;<br>Actually code is like this:</p><pre><code>    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_decompress_get</span><span class=\"params\">(data)</span>:</span>\n        <span class=\"keyword\">for</span> match <span class=\"keyword\">in</span> re.finditer(<span class=\"string\">r\"(?P&lt;char&gt;.)((?P&lt;count&gt;\\d+))?\"</span>, data):\n            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> match.group(<span class=\"string\">\"count\"</span>): <span class=\"keyword\">yield</span> match.group(<span class=\"string\">\"char\"</span>)\n            <span class=\"keyword\">else</span>: <span class=\"keyword\">yield</span> match.group(<span class=\"string\">\"char\"</span>) * int(match.group(<span class=\"string\">\"count\"</span>))</code></pre><p>Any idea?</p>",
  "id": "5c376fa166f3433023a73bae",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2019-01-10T16:15:29.219Z",
  "text": "Hello,  I'm trying to convert in numba a  python function  maded with re that uncompressed strings in this way:\nvector_compressed = 'A9gA6BA5EAg2wA2CA'\nvector_decompressed = 'AAAAAAAAAgAAAAAABAAAAAEAggwAACA'\nActually code is like this:\n```\n    def _decompress_get(data):\n        for match in re.finditer(r\"(?P<char>.)((?P<count>\\d+))?\", data):\n            if not match.group(\"count\"): yield match.group(\"char\")\n            else: yield match.group(\"char\") * int(match.group(\"count\"))\n```\nAny idea?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "Are you trying to compile this function with Numba?  Numba will not be any help because it doesn&#39;t support the <code>re</code> module in nopython mode.",
  "id": "5c376feb8db70e46c4e5c20d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2019-01-10T16:16:43.310Z",
  "text": "Are you trying to compile this function with Numba?  Numba will not be any help because it doesn't support the `re` module in nopython mode.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/garanews",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/16938405?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/16938405?v=4&s=60",
   "displayName": "garanews",
   "gv": "4",
   "id": "58ef1881d73408ce4f580f51",
   "url": "/garanews",
   "username": "garanews",
   "v": 17
  },
  "html": "I know it doesn&#39;t support re, I need an help to write something without re ^__^",
  "id": "5c377083783a5553d8119d50",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2019-01-10T16:19:15.383Z",
  "text": "I know it doesn't support re, I need an help to write something without re ^__^",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "well you could write something that does that, but i&#39;m unconvinced it&#39;d be quicker than the highly optimized re module",
  "id": "5c377600a57b501bcfe285b5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2019-01-10T16:42:40.466Z",
  "text": "well you could write something that does that, but i'm unconvinced it'd be quicker than the highly optimized re module",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/seibert",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/425352?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/425352?v=4&s=60",
   "displayName": "Stan Seibert",
   "gv": "4",
   "id": "55b68af40fc9f982beab2a3c",
   "url": "/seibert",
   "username": "seibert",
   "v": 7
  },
  "html": "Oh yes, now that I see the count can be multiple digits, implementing that matching manually will be pretty annoying",
  "id": "5c3776dc8db70e46c4e5f3d3",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2019-01-10T16:46:20.347Z",
  "text": "Oh yes, now that I see the count can be multiple digits, implementing that matching manually will be pretty annoying",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/garanews",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/16938405?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/16938405?v=4&s=60",
   "displayName": "garanews",
   "gv": "4",
   "id": "58ef1881d73408ce4f580f51",
   "url": "/garanews",
   "username": "garanews",
   "v": 17
  },
  "html": "<p>the goal is<br>1) to uncompress two vectors vector_compressed in vector_decompressed  : from A9gA6BA5EAg2wA2CA to AAAAAAAAAgAAAAAABAAAAAEAggwAACA<br>2) convert in binary with a special dictionary (something like base642bin:   {&#39;A&#39;: &#39;000000&#39;, &#39;B&#39;: &#39;000001&#39;, &#39;C&#39;: &#39;000010&#39;} ) from AAAAAAAAAgAAAAAABAAAAAEAggwAACA to 000000000000000000000110000001<br>3) compare the 2 vectors with jaccard</p><p>We already have a function for point 3 in numba, but we would use parallel=True option moving the first 2 step in the numba function</p>",
  "id": "5c377767b35a0877665e9fd4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2019-01-10T16:48:39.941Z",
  "text": "the goal is\n1) to uncompress two vectors vector_compressed in vector_decompressed  : from A9gA6BA5EAg2wA2CA to AAAAAAAAAgAAAAAABAAAAAEAggwAACA\n2) convert in binary with a special dictionary (something like base642bin:   {'A': '000000', 'B': '000001', 'C': '000010'} ) from AAAAAAAAAgAAAAAABAAAAAEAggwAACA to 000000000000000000000110000001\n3) compare the 2 vectors with jaccard\n\nWe already have a function for point 3 in numba, but we would use parallel=True option moving the first 2 step in the numba function",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/garanews",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/16938405?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/16938405?v=4&s=60",
   "displayName": "garanews",
   "gv": "4",
   "id": "58ef1881d73408ce4f580f51",
   "url": "/garanews",
   "username": "garanews",
   "v": 17
  },
  "html": "(we have not only 2 vectors, but a vector that must be compared with a huge list of n vectors)",
  "id": "5c37783cb35a0877665ea582",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2019-01-10T16:52:12.043Z",
  "text": "(we have not only 2 vectors, but a vector that must be compared with a huge list of n vectors)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/garanews",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/16938405?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/16938405?v=4&s=60",
   "displayName": "garanews",
   "gv": "4",
   "id": "58ef1881d73408ce4f580f51",
   "url": "/garanews",
   "username": "garanews",
   "v": 17
  },
  "html": "at the moment for point 1 code is:<pre><code>def <span class=\"function\"><span class=\"title\">StringThings</span><span class=\"params\">(strng)</span></span>:\n    nums = []\n    number = <span class=\"string\">\"\"</span>\n    letter = None\n    <span class=\"keyword\">for</span> each <span class=\"keyword\">in</span> <span class=\"function\"><span class=\"title\">range</span><span class=\"params\">(len(strng)</span></span>):\n        <span class=\"keyword\">if</span> each != <span class=\"function\"><span class=\"title\">len</span><span class=\"params\">(strng)</span></span>-<span class=\"number\">1</span>:\n            <span class=\"keyword\">if</span> not strng[each].<span class=\"function\"><span class=\"title\">isdigit</span><span class=\"params\">()</span></span> and not strng[each+<span class=\"number\">1</span>].<span class=\"function\"><span class=\"title\">isdigit</span><span class=\"params\">()</span></span>:\n                nums.<span class=\"function\"><span class=\"title\">append</span><span class=\"params\">(strng[each])</span></span>\n            elif not strng[each].<span class=\"function\"><span class=\"title\">isdigit</span><span class=\"params\">()</span></span> and strng[each+<span class=\"number\">1</span>].<span class=\"function\"><span class=\"title\">isdigit</span><span class=\"params\">()</span></span>:\n                letter = strng[each]\n        <span class=\"keyword\">if</span> strng[each].<span class=\"function\"><span class=\"title\">isdigit</span><span class=\"params\">()</span></span>:\n            number += strng[each]\n        <span class=\"keyword\">if</span> each == <span class=\"function\"><span class=\"title\">len</span><span class=\"params\">(strng)</span></span>-<span class=\"number\">1</span>:\n            <span class=\"keyword\">if</span> number != <span class=\"string\">''</span>:\n                nums.<span class=\"function\"><span class=\"title\">append</span><span class=\"params\">(letter*int(number)</span></span>)\n            <span class=\"keyword\">else</span>:\n                nums.<span class=\"function\"><span class=\"title\">append</span><span class=\"params\">(strng[each])</span></span>\n        <span class=\"keyword\">if</span> each != <span class=\"function\"><span class=\"title\">len</span><span class=\"params\">(strng)</span></span>-<span class=\"number\">1</span>:\n            <span class=\"keyword\">if</span> strng[each].<span class=\"function\"><span class=\"title\">isdigit</span><span class=\"params\">()</span></span> and not strng[each+<span class=\"number\">1</span>].<span class=\"function\"><span class=\"title\">isdigit</span><span class=\"params\">()</span></span>:\n                nums.<span class=\"function\"><span class=\"title\">append</span><span class=\"params\">(letter*int(number)</span></span>)\n                number = <span class=\"string\">\"\"</span> \n                continue\n    return nums</code></pre>",
  "id": "5c377b91317e2407cd0e9107",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2019-01-10T17:06:25.638Z",
  "text": "at the moment for point 1 code is:\n```\ndef StringThings(strng):\n    nums = []\n    number = \"\"\n    letter = None\n    for each in range(len(strng)):\n        if each != len(strng)-1:\n            if not strng[each].isdigit() and not strng[each+1].isdigit():\n                nums.append(strng[each])\n            elif not strng[each].isdigit() and strng[each+1].isdigit():\n                letter = strng[each]\n        if strng[each].isdigit():\n            number += strng[each]\n        if each == len(strng)-1:\n            if number != '':\n                nums.append(letter*int(number))\n            else:\n                nums.append(strng[each])\n        if each != len(strng)-1:\n            if strng[each].isdigit() and not strng[each+1].isdigit():\n                nums.append(letter*int(number))\n                number = \"\" \n                continue\n    return nums\n```\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/garanews",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/16938405?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/16938405?v=4&s=60",
   "displayName": "garanews",
   "gv": "4",
   "id": "58ef1881d73408ce4f580f51",
   "url": "/garanews",
   "username": "garanews",
   "v": 17
  },
  "html": "but I am sure you will be able to optimize it :)",
  "id": "5c377baa9289cc7aa7513b6d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2019-01-10T17:06:50.651Z",
  "text": "but I am sure you will be able to optimize it :)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/garanews",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/16938405?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/16938405?v=4&s=60",
   "displayName": "garanews",
   "gv": "4",
   "id": "58ef1881d73408ce4f580f51",
   "url": "/garanews",
   "username": "garanews",
   "v": 17
  },
  "html": "and it seems that isdigit is not working with numba:<br>numba.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)<br>Unknown attribute &#39;isdigit&#39; of type unicode_type",
  "id": "5c377fa0da98233022eda112",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2019-01-10T17:23:44.143Z",
  "text": "and it seems that isdigit is not working with numba:\nnumba.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)\nUnknown attribute 'isdigit' of type unicode_type\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "the supported string behaviours are listed here: <a href=\"http://numba.pydata.org/numba-doc/dev/reference/pysupported.html#str\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://numba.pydata.org/numba-doc/dev/reference/pysupported.html#str</a>",
  "id": "5c378646ef78da1bcedd8516",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2019-01-10T17:52:06.765Z",
  "text": "the supported string behaviours are listed here: http://numba.pydata.org/numba-doc/dev/reference/pysupported.html#str",
  "unread": false,
  "urls": [
   {
    "url": "http://numba.pydata.org/numba-doc/dev/reference/pysupported.html#str"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/agoose77",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/1248413?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/1248413?v=4&s=60",
   "displayName": "Angus Hollands",
   "gv": "4",
   "id": "589e1136d73408ce4f4979ca",
   "url": "/agoose77",
   "username": "agoose77",
   "v": 22
  },
  "html": "Hi all, I&#39;m getting an error on this code",
  "id": "5c38ab788db70e46c4edb709",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2019-01-11T14:43:04.941Z",
  "text": "Hi all, I'm getting an error on this code",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/agoose77",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/1248413?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/1248413?v=4&s=60",
   "displayName": "Angus Hollands",
   "gv": "4",
   "id": "589e1136d73408ce4f4979ca",
   "url": "/agoose77",
   "username": "agoose77",
   "v": 22
  },
  "html": "<pre><code class=\"python\"><span class=\"decorator\">@numba.jit(nopython=True, parallel=True)</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">play_games</span><span class=\"params\">()</span>:</span>    \n    monte_carlo_cell_visit_frequency = np.zeros(<span class=\"number\">100</span>, dtype=np.int_)    \n    monte_carlo_cell_visit_frequency != <span class=\"number\">0</span>\nplay_games()</code></pre>",
  "id": "5c38ab7d8db70e46c4edb715",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2019-01-11T14:43:09.457Z",
  "text": "```python\n@numba.jit(nopython=True, parallel=True)\ndef play_games():    \n    monte_carlo_cell_visit_frequency = np.zeros(100, dtype=np.int_)    \n    monte_carlo_cell_visit_frequency != 0\nplay_games()\n```\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/agoose77",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/1248413?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/1248413?v=4&s=60",
   "displayName": "Angus Hollands",
   "gv": "4",
   "id": "589e1136d73408ce4f4979ca",
   "url": "/agoose77",
   "username": "agoose77",
   "v": 22
  },
  "html": "<pre><code><span class=\"comment\">---------------------------------------------------------------------------</span>\nTypingError                               Traceback (most recent <span class=\"operator\"><span class=\"keyword\">call</span> <span class=\"keyword\">last</span>)\n&lt;ipython-<span class=\"keyword\">input</span>-<span class=\"number\">22</span>-c0f1708db664&gt; <span class=\"keyword\">in</span> &lt;<span class=\"keyword\">module</span>&gt;\n      <span class=\"number\">3</span>     monte_carlo_cell_visit_frequency = np.zeros(<span class=\"number\">100</span>, dtype=np.int_)\n      <span class=\"number\">4</span>     monte_carlo_cell_visit_frequency != <span class=\"number\">0</span>\n<span class=\"comment\">----&gt; 5 play_games()</span>\n\n~/.pyenv/<span class=\"keyword\">versions</span>/<span class=\"number\">3.7</span><span class=\"number\">.1</span>/envs/sci/lib/python3<span class=\"number\">.7</span>/site-packages/numba/dispatcher.py <span class=\"keyword\">in</span> _compile_for_args(<span class=\"keyword\">self</span>, *args, **kws)\n    <span class=\"number\">346</span>                 <span class=\"keyword\">e</span>.patch_message(msg)\n    <span class=\"number\">347</span> \n<span class=\"comment\">--&gt; 348             error_rewrite(e, 'typing')</span>\n    <span class=\"number\">349</span>         <span class=\"keyword\">except</span> <span class=\"keyword\">errors</span>.UnsupportedError <span class=\"keyword\">as</span> <span class=\"keyword\">e</span>:\n    <span class=\"number\">350</span>             # Something unsupported <span class=\"keyword\">is</span> <span class=\"keyword\">present</span> <span class=\"keyword\">in</span> the <span class=\"keyword\">user</span> code, <span class=\"keyword\">add</span> <span class=\"keyword\">help</span> info\n\n~/.pyenv/<span class=\"keyword\">versions</span>/<span class=\"number\">3.7</span><span class=\"number\">.1</span>/envs/sci/lib/python3<span class=\"number\">.7</span>/site-packages/numba/dispatcher.py <span class=\"keyword\">in</span> error_rewrite(<span class=\"keyword\">e</span>, issue_type)\n    <span class=\"number\">313</span>                 <span class=\"keyword\">raise</span> <span class=\"keyword\">e</span>\n    <span class=\"number\">314</span>             <span class=\"keyword\">else</span>:\n<span class=\"comment\">--&gt; 315                 reraise(type(e), e, None)</span>\n    <span class=\"number\">316</span> \n    <span class=\"number\">317</span>         argtypes = []\n\n~/.pyenv/<span class=\"keyword\">versions</span>/<span class=\"number\">3.7</span><span class=\"number\">.1</span>/envs/sci/lib/python3<span class=\"number\">.7</span>/site-packages/numba/six.py <span class=\"keyword\">in</span> reraise(tp, <span class=\"keyword\">value</span>, tb)\n    <span class=\"number\">656</span>             <span class=\"keyword\">value</span> = tp()\n    <span class=\"number\">657</span>         <span class=\"keyword\">if</span> <span class=\"keyword\">value</span>.__traceback__ <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> tb:\n<span class=\"comment\">--&gt; 658             raise value.with_traceback(tb)</span>\n    <span class=\"number\">659</span>         <span class=\"keyword\">raise</span> <span class=\"keyword\">value</span>\n    <span class=\"number\">660</span> \n\nTypingError: <span class=\"keyword\">Failed</span> <span class=\"keyword\">in</span> nopython <span class=\"keyword\">mode</span> pipeline (step: <span class=\"keyword\">convert</span> <span class=\"keyword\">to</span> parfors)\nInvalid <span class=\"keyword\">use</span> <span class=\"keyword\">of</span> <span class=\"keyword\">Function</span>(&lt;built-<span class=\"keyword\">in</span> <span class=\"keyword\">function</span> ne&gt;) <span class=\"keyword\">with</span> argument(s) <span class=\"keyword\">of</span> <span class=\"keyword\">type</span>(s): (int64, int64)\n * parameterized\n<span class=\"keyword\">In</span> definition <span class=\"number\">0</span>:\n    All templates rejected <span class=\"keyword\">with</span> literals.\n<span class=\"keyword\">In</span> definition <span class=\"number\">1</span>:\n    All templates rejected <span class=\"keyword\">without</span> literals.\nThis <span class=\"keyword\">error</span> <span class=\"keyword\">is</span> usually caused <span class=\"keyword\">by</span> <span class=\"keyword\">passing</span> an argument <span class=\"keyword\">of</span> a <span class=\"keyword\">type</span> that <span class=\"keyword\">is</span> unsupported <span class=\"keyword\">by</span> the named <span class=\"keyword\">function</span>.\nThis <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> usually a problem <span class=\"keyword\">with</span> Numba itself but instead often caused <span class=\"keyword\">by</span>\nthe <span class=\"keyword\">use</span> <span class=\"keyword\">of</span> unsupported features <span class=\"keyword\">or</span> an issue <span class=\"keyword\">in</span> resolving types.\n\n<span class=\"keyword\">To</span> see Python/NumPy features supported <span class=\"keyword\">by</span> the latest <span class=\"keyword\">release</span> <span class=\"keyword\">of</span> Numba visit:\n<span class=\"keyword\">http</span>://numba.pydata.org/numba-doc/dev/<span class=\"keyword\">reference</span>/pysupported.html\n<span class=\"keyword\">and</span>\n<span class=\"keyword\">http</span>://numba.pydata.org/numba-doc/dev/<span class=\"keyword\">reference</span>/numpysupported.html\n\n<span class=\"keyword\">For</span> more information about typing <span class=\"keyword\">errors</span> <span class=\"keyword\">and</span> how <span class=\"keyword\">to</span> debug them visit:\n<span class=\"keyword\">http</span>://numba.pydata.org/numba-doc/latest/<span class=\"keyword\">user</span>/troubleshoot.html#my-code-doesn-<span class=\"keyword\">t</span>-compile\n\n<span class=\"keyword\">If</span> you think your code should <span class=\"keyword\">work</span> <span class=\"keyword\">with</span> Numba, please report the <span class=\"keyword\">error</span> message\n<span class=\"keyword\">and</span> traceback, along <span class=\"keyword\">with</span> a minimal reproducer <span class=\"keyword\">at</span>:\nhttps://github.com/numba/numba/issues/<span class=\"keyword\">new</span></span></code></pre>",
  "id": "5c38ab86ef78da1bcee4f357",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2019-01-11T14:43:18.486Z",
  "text": "```traceback\n---------------------------------------------------------------------------\nTypingError                               Traceback (most recent call last)\n<ipython-input-22-c0f1708db664> in <module>\n      3     monte_carlo_cell_visit_frequency = np.zeros(100, dtype=np.int_)\n      4     monte_carlo_cell_visit_frequency != 0\n----> 5 play_games()\n\n~/.pyenv/versions/3.7.1/envs/sci/lib/python3.7/site-packages/numba/dispatcher.py in _compile_for_args(self, *args, **kws)\n    346                 e.patch_message(msg)\n    347 \n--> 348             error_rewrite(e, 'typing')\n    349         except errors.UnsupportedError as e:\n    350             # Something unsupported is present in the user code, add help info\n\n~/.pyenv/versions/3.7.1/envs/sci/lib/python3.7/site-packages/numba/dispatcher.py in error_rewrite(e, issue_type)\n    313                 raise e\n    314             else:\n--> 315                 reraise(type(e), e, None)\n    316 \n    317         argtypes = []\n\n~/.pyenv/versions/3.7.1/envs/sci/lib/python3.7/site-packages/numba/six.py in reraise(tp, value, tb)\n    656             value = tp()\n    657         if value.__traceback__ is not tb:\n--> 658             raise value.with_traceback(tb)\n    659         raise value\n    660 \n\nTypingError: Failed in nopython mode pipeline (step: convert to parfors)\nInvalid use of Function(<built-in function ne>) with argument(s) of type(s): (int64, int64)\n * parameterized\nIn definition 0:\n    All templates rejected with literals.\nIn definition 1:\n    All templates rejected without literals.\nThis error is usually caused by passing an argument of a type that is unsupported by the named function.\nThis is not usually a problem with Numba itself but instead often caused by\nthe use of unsupported features or an issue in resolving types.\n\nTo see Python/NumPy features supported by the latest release of Numba visit:\nhttp://numba.pydata.org/numba-doc/dev/reference/pysupported.html\nand\nhttp://numba.pydata.org/numba-doc/dev/reference/numpysupported.html\n\nFor more information about typing errors and how to debug them visit:\nhttp://numba.pydata.org/numba-doc/latest/user/troubleshoot.html#my-code-doesn-t-compile\n\nIf you think your code should work with Numba, please report the error message\nand traceback, along with a minimal reproducer at:\nhttps://github.com/numba/numba/issues/new\n```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/agoose77",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/1248413?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/1248413?v=4&s=60",
   "displayName": "Angus Hollands",
   "gv": "4",
   "id": "589e1136d73408ce4f4979ca",
   "url": "/agoose77",
   "username": "agoose77",
   "v": 22
  },
  "html": "This used to work, any ideas as to why not? For reference, this is a minimum case to produce the error, and in reality I do have a <code>prange</code> executing the parallel work inside the function.",
  "id": "5c38abf46a394e2821901f40",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2019-01-11T14:45:08.713Z",
  "text": "This used to work, any ideas as to why not? For reference, this is a minimum case to produce the error, and in reality I do have a `prange` executing the parallel work inside the function.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/agoose77",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/1248413?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/1248413?v=4&s=60",
   "displayName": "Angus Hollands",
   "gv": "4",
   "id": "589e1136d73408ce4f4979ca",
   "url": "/agoose77",
   "username": "agoose77",
   "v": 22
  },
  "html": "For now, I&#39;ve inverted the condition where it&#39;s used in <code>np.where</code>, so <code>==</code> is supported.",
  "id": "5c38acdf54d8bb07ccd39016",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2019-01-11T14:49:03.989Z",
  "text": "For now, I've inverted the condition where it's used in `np.where`, so `==` is supported.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"agoose77\" class=\"mention\">@agoose77</span>  seems to be only when <code>parallel=True</code> is set?",
  "id": "5c38b2f9783a5553d819e846",
  "issues": [],
  "mentions": [
   {
    "screenName": "agoose77",
    "userId": "589e1136d73408ce4f4979ca",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 13,
  "sent": "2019-01-11T15:15:05.452Z",
  "text": "@agoose77  seems to be only when `parallel=True` is set?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "I&#39;ve a vague feeling I&#39;ve seen this before and it was to do with <a target=\"_blank\" data-link-type=\"pr\" data-issue=\"2983\" href=\"https://github.com/numba/numba/pull/2983\" data-provider=\"github\" data-issue-repo=\"numba/numba\" class=\"pr\">numba/numba#2983</a>",
  "id": "5c38b3afda98233022f542cd",
  "issues": [
   {
    "number": "2983",
    "repo": "numba/numba"
   }
  ],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2019-01-11T15:18:07.020Z",
  "text": "I've a vague feeling I've seen this before and it was to do with https://github.com/numba/numba/pull/2983",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"agoose77\" class=\"mention\">@agoose77</span> reported here <a target=\"_blank\" data-link-type=\"issue\" data-issue=\"3671\" href=\"https://github.com/numba/numba/issues/3671\" data-provider=\"github\" data-issue-repo=\"numba/numba\" class=\"issue\">numba/numba#3671</a>",
  "id": "5c38b72cdfe1332820345653",
  "issues": [
   {
    "number": "3671",
    "repo": "numba/numba"
   }
  ],
  "mentions": [
   {
    "screenName": "agoose77",
    "userId": "589e1136d73408ce4f4979ca",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 13,
  "sent": "2019-01-11T15:33:00.866Z",
  "text": "@agoose77 reported here https://github.com/numba/numba/issues/3671",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/agoose77",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/1248413?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/1248413?v=4&s=60",
   "displayName": "Angus Hollands",
   "gv": "4",
   "id": "589e1136d73408ce4f4979ca",
   "url": "/agoose77",
   "username": "agoose77",
   "v": 22
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span> Thanks, I didn&#39;t check the issues to be honest, my bad.",
  "id": "5c38bca983c7e3776552acc6",
  "issues": [],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 12,
  "sent": "2019-01-11T15:56:25.176Z",
  "text": "@stuartarchibald Thanks, I didn't check the issues to be honest, my bad.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-02.gitter.im/gh/uv/4/agoose77",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/1248413?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/1248413?v=4&s=60",
   "displayName": "Angus Hollands",
   "gv": "4",
   "id": "589e1136d73408ce4f4979ca",
   "url": "/agoose77",
   "username": "agoose77",
   "v": 22
  },
  "html": "Thank you for creating an issue!",
  "id": "5c38bce28db70e46c4ee39ad",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2019-01-11T15:57:22.365Z",
  "text": "Thank you for creating an issue!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "no problem.",
  "id": "5c38bf49dfe13328203489b4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2019-01-11T16:07:37.975Z",
  "text": "no problem.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/TomFD",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/44144239?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/44144239?v=4&s=60",
   "displayName": "TomFD",
   "gv": "4",
   "id": "5c27d595d73408ce4fb32c8b",
   "url": "/TomFD",
   "username": "TomFD",
   "v": 27
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span> a late thank you! now my example worked. It was essentially the env that solved it. Somehow I cannot get pyculib numba and cudatoolkit installed incremently in an existing env without getting the errors mentioned before.",
  "id": "5c3a3ee795e17b45253f3ce9",
  "issues": [],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 11,
  "sent": "2019-01-12T19:24:23.329Z",
  "text": "@stuartarchibald a late thank you! now my example worked. It was essentially the env that solved it. Somehow I cannot get pyculib numba and cudatoolkit installed incremently in an existing env without getting the errors mentioned before.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/Maurdekye",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2313721?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2313721?v=4&s=60",
   "displayName": "Ncolaprete",
   "gv": "4",
   "id": "568e8e4716b6c7089cc19046",
   "url": "/Maurdekye",
   "username": "Maurdekye",
   "v": 2
  },
  "html": "I&#39;m trying to install numba on windows 10, and I&#39;ve hit this error I can&#39;t find a solution to:",
  "id": "5c3b28efba355012a4303e09",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2019-01-13T12:02:55.787Z",
  "text": "I'm trying to install numba on windows 10, and I've hit this error I can't find a solution to:",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2019-01-13T12:03:10.935Z",
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/Maurdekye",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2313721?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2313721?v=4&s=60",
   "displayName": "Ncolaprete",
   "gv": "4",
   "id": "568e8e4716b6c7089cc19046",
   "url": "/Maurdekye",
   "username": "Maurdekye",
   "v": 2
  },
  "html": "<code>numba.cuda.cudadrv.error.CudaDriverError: driver missing function: cuInit.\nRequires CUDA 8.0 or above.</code>",
  "id": "5c3b28f8cb47ec300037bb3d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2019-01-13T12:03:04.322Z",
  "text": "```numba.cuda.cudadrv.error.CudaDriverError: driver missing function: cuInit.\nRequires CUDA 8.0 or above.```",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/Maurdekye",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2313721?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2313721?v=4&s=60",
   "displayName": "Ncolaprete",
   "gv": "4",
   "id": "568e8e4716b6c7089cc19046",
   "url": "/Maurdekye",
   "username": "Maurdekye",
   "v": 2
  },
  "html": "Even though I do have Cuda v8.0 installed, and i&#39;m pretty sure I have my environment variables configured correctly.",
  "id": "5c3b2913ba5936605bb1f186",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2019-01-13T12:03:31.951Z",
  "text": "Even though I do have Cuda v8.0 installed, and i'm pretty sure I have my environment variables configured correctly.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/Maurdekye",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2313721?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2313721?v=4&s=60",
   "displayName": "Ncolaprete",
   "gv": "4",
   "id": "568e8e4716b6c7089cc19046",
   "url": "/Maurdekye",
   "username": "Maurdekye",
   "v": 2
  },
  "html": "<code>NUMBAPRO_CUDA_DRIVER = C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\bin\\cublas64_80.dll</code>",
  "id": "5c3b292c28513d605a1c2622",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2019-01-13T12:03:56.125Z",
  "text": "```NUMBAPRO_CUDA_DRIVER = C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\bin\\cublas64_80.dll```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/Maurdekye",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2313721?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2313721?v=4&s=60",
   "displayName": "Ncolaprete",
   "gv": "4",
   "id": "568e8e4716b6c7089cc19046",
   "url": "/Maurdekye",
   "username": "Maurdekye",
   "v": 2
  },
  "html": "<code>NUMBAPRO_LIBDEVICE = C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\nvvm\\libdevice\\</code>",
  "id": "5c3b2939ba5936605bb1f214",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2019-01-13T12:04:09.472Z",
  "text": "```NUMBAPRO_LIBDEVICE = C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\nvvm\\libdevice\\```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/Maurdekye",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2313721?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2313721?v=4&s=60",
   "displayName": "Ncolaprete",
   "gv": "4",
   "id": "568e8e4716b6c7089cc19046",
   "url": "/Maurdekye",
   "username": "Maurdekye",
   "v": 2
  },
  "html": "<code>NUMBAPRO_NVVM = C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\nvvm\\bin\\nvvm64_33_0.dll</code>",
  "id": "5c3b2949ba355012a430414c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2019-01-13T12:04:25.562Z",
  "text": "```NUMBAPRO_NVVM = C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\nvvm\\bin\\nvvm64_33_0.dll```",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/Maurdekye",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2313721?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2313721?v=4&s=60",
   "displayName": "Ncolaprete",
   "gv": "4",
   "id": "568e8e4716b6c7089cc19046",
   "url": "/Maurdekye",
   "username": "Maurdekye",
   "v": 2
  },
  "html": "Everyone else with this error seems to be running Linux.",
  "id": "5c3b296439596c372bd4cec5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2019-01-13T12:04:52.330Z",
  "text": "Everyone else with this error seems to be running Linux.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/Maurdekye",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2313721?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2313721?v=4&s=60",
   "displayName": "Ncolaprete",
   "gv": "4",
   "id": "568e8e4716b6c7089cc19046",
   "url": "/Maurdekye",
   "username": "Maurdekye",
   "v": 2
  },
  "html": "wait, think i&#39;ve fixed it",
  "id": "5c3b2a8ecb47ec300037c3fc",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2019-01-13T12:09:50.984Z",
  "text": "wait, think i've fixed it",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/Maurdekye",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/2313721?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/2313721?v=4&s=60",
   "displayName": "Ncolaprete",
   "gv": "4",
   "id": "568e8e4716b6c7089cc19046",
   "url": "/Maurdekye",
   "username": "Maurdekye",
   "v": 2
  },
  "html": "removing the environment variables seems to have alleviated the issue.",
  "id": "5c3b2a9f39596c372bd4d56d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2019-01-13T12:10:07.028Z",
  "text": "removing the environment variables seems to have alleviated the issue.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"TomFD\" class=\"mention\">@TomFD</span> that&#39;s quite possibly true, glad it&#39;s now working.",
  "id": "5c3c7e0832a8370605ccce48",
  "issues": [],
  "mentions": [
   {
    "screenName": "TomFD",
    "userId": "5c27d595d73408ce4fb32c8b",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 11,
  "sent": "2019-01-14T12:18:16.589Z",
  "text": "@TomFD that's quite possibly true, glad it's now working.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"Maurdekye\" class=\"mention\">@Maurdekye</span> all working ok now?",
  "id": "5c3c7e2420b78635b61fd744",
  "issues": [],
  "mentions": [
   {
    "screenName": "Maurdekye",
    "userId": "568e8e4716b6c7089cc19046",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 11,
  "sent": "2019-01-14T12:18:44.825Z",
  "text": "@Maurdekye all working ok now?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/lalitparate",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/8740681?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/8740681?v=4&s=60",
   "displayName": "lalitparate",
   "gv": "4",
   "id": "5c3c5fc2d73408ce4fb49824",
   "url": "/lalitparate",
   "username": "lalitparate",
   "v": 1
  },
  "html": "I got below error for latest code",
  "id": "5c3cef03ba355012a43bc25f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2019-01-14T20:20:19.868Z",
  "text": "I got below error for latest code",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/lalitparate",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/8740681?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/8740681?v=4&s=60",
   "displayName": "lalitparate",
   "gv": "4",
   "id": "5c3c5fc2d73408ce4fb49824",
   "url": "/lalitparate",
   "username": "lalitparate",
   "v": 1
  },
  "html": "Traceback (most recent call last):<br>  File &quot;/Users/Lalit_Parate/miniconda3/envs/numbaenv/lib/python3.6/runpy.py&quot;, line 183, in _run_module_as_main<br>    mod_name, mod_spec, code = _get_module_details(mod_name, _Error)<br>  File &quot;/Users/Lalit_Parate/miniconda3/envs/numbaenv/lib/python3.6/runpy.py&quot;, line 109, in _get_module_details<br>    <strong>import</strong>(pkg_name)<br>  File &quot;/Users/Lalit_Parate/github/test1/numba/numba/<strong>init</strong>.py&quot;, line 14, in &lt;module&gt;<br>    from .special import typeof, prange, pndindex<br>  File &quot;/Users/Lalit_Parate/github/test1/numba/numba/special.py&quot;, line 3, in &lt;module&gt;<br>    from .typing.typeof import typeof<br>  File &quot;/Users/Lalit_Parate/github/test1/numba/numba/typing/<strong>init</strong>.py&quot;, line 2, in &lt;module&gt;<br>    from .context import BaseContext, Context<br>  File &quot;/Users/Lalit_Parate/github/test1/numba/numba/typing/context.py&quot;, line 11, in &lt;module&gt;<br>    from numba.typeconv import Conversion, rules<br>  File &quot;/Users/Lalit_Parate/github/test1/numba/numba/typeconv/rules.py&quot;, line 3, in &lt;module&gt;<br>    from .typeconv import TypeManager, TypeCastingRules<br>  File &quot;/Users/Lalit_Parate/github/test1/numba/numba/typeconv/typeconv.py&quot;, line 3, in &lt;module&gt;<br>    from . import _typeconv, castgraph, Conversion<br>ImportError: cannot import name &#39;_typeconv&#39;",
  "id": "5c3cef058318994524ecb3de",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2019-01-14T20:20:21.332Z",
  "text": "Traceback (most recent call last):\n  File \"/Users/Lalit_Parate/miniconda3/envs/numbaenv/lib/python3.6/runpy.py\", line 183, in _run_module_as_main\n    mod_name, mod_spec, code = _get_module_details(mod_name, _Error)\n  File \"/Users/Lalit_Parate/miniconda3/envs/numbaenv/lib/python3.6/runpy.py\", line 109, in _get_module_details\n    __import__(pkg_name)\n  File \"/Users/Lalit_Parate/github/test1/numba/numba/__init__.py\", line 14, in <module>\n    from .special import typeof, prange, pndindex\n  File \"/Users/Lalit_Parate/github/test1/numba/numba/special.py\", line 3, in <module>\n    from .typing.typeof import typeof\n  File \"/Users/Lalit_Parate/github/test1/numba/numba/typing/__init__.py\", line 2, in <module>\n    from .context import BaseContext, Context\n  File \"/Users/Lalit_Parate/github/test1/numba/numba/typing/context.py\", line 11, in <module>\n    from numba.typeconv import Conversion, rules\n  File \"/Users/Lalit_Parate/github/test1/numba/numba/typeconv/rules.py\", line 3, in <module>\n    from .typeconv import TypeManager, TypeCastingRules\n  File \"/Users/Lalit_Parate/github/test1/numba/numba/typeconv/typeconv.py\", line 3, in <module>\n    from . import _typeconv, castgraph, Conversion\nImportError: cannot import name '_typeconv'",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/lalitparate",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/8740681?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/8740681?v=4&s=60",
   "displayName": "lalitparate",
   "gv": "4",
   "id": "5c3c5fc2d73408ce4fb49824",
   "url": "/lalitparate",
   "username": "lalitparate",
   "v": 1
  },
  "html": "Can anyone help ?",
  "id": "5c3cef0f39596c372be01b33",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2019-01-14T20:20:31.878Z",
  "text": "Can anyone help ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "Have you built and installed numba in your env ?",
  "id": "5c3d0a0620b78635b623a391",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2019-01-14T22:15:34.782Z",
  "text": "Have you built and installed numba in your env ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "that import error usually means something didn&#39;t get compiled/the thing that was compiled cannot be found",
  "id": "5c3d0a1d32a8370605d09e50",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2019-01-14T22:15:57.786Z",
  "text": "that import error usually means something didn't get compiled/the thing that was compiled cannot be found",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"lalitparate\" class=\"mention\">@lalitparate</span> ^",
  "id": "5c3d0a38dab15872ce9536f1",
  "issues": [],
  "mentions": [
   {
    "screenName": "lalitparate",
    "userId": "5c3c5fc2d73408ce4fb49824",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 12,
  "sent": "2019-01-14T22:16:24.983Z",
  "text": "@lalitparate ^",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/lalitparate",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/8740681?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/8740681?v=4&s=60",
   "displayName": "lalitparate",
   "gv": "4",
   "id": "5c3c5fc2d73408ce4fb49824",
   "url": "/lalitparate",
   "username": "lalitparate",
   "v": 1
  },
  "html": "No I havent built and installed numba.  Used conda to setup the environment.",
  "id": "5c3d807420b78635b62664c1",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2019-01-15T06:40:52.216Z",
  "text": "No I havent built and installed numba.  Used conda to setup the environment.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/lalitparate",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/8740681?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/8740681?v=4&s=60",
   "displayName": "lalitparate",
   "gv": "4",
   "id": "5c3c5fc2d73408ce4fb49824",
   "url": "/lalitparate",
   "username": "lalitparate",
   "v": 1
  },
  "html": "strange thing is that, In my first/old cloned environment it works fine, but in latest one it fails with above error",
  "id": "5c3d82168ce4bb25b8b38d4d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2019-01-15T06:47:50.641Z",
  "text": "strange thing is that, In my first/old cloned environment it works fine, but in latest one it fails with above error",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/lalitparate",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/8740681?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/8740681?v=4&s=60",
   "displayName": "lalitparate",
   "gv": "4",
   "id": "5c3c5fc2d73408ce4fb49824",
   "url": "/lalitparate",
   "username": "lalitparate",
   "v": 1
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span>  .. Nevermind, it is working for me now.  I forgot to add Building Numba step for the latest cloned environment. ",
  "id": "5c3d929732a8370605d3d459",
  "issues": [],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 12,
  "sent": "2019-01-15T07:58:15.261Z",
  "text": "@stuartarchibald  .. Nevermind, it is working for me now.  I forgot to add Building Numba step for the latest cloned environment. ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/lalitparate",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/8740681?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/8740681?v=4&s=60",
   "displayName": "lalitparate",
   "gv": "4",
   "id": "5c3c5fc2d73408ce4fb49824",
   "url": "/lalitparate",
   "username": "lalitparate",
   "v": 1
  },
  "html": "The step  is &quot;python setup.py build_ext --inplace&quot; . As it is doing --inplace,  i needed to do it for new environment too .",
  "id": "5c3d93a539596c372be40568",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2019-01-15T08:02:45.327Z",
  "text": "The step  is \"python setup.py build_ext --inplace\" . As it is doing --inplace,  i needed to do it for new environment too .",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/lespaul",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/182689?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/182689?v=4&s=60",
   "displayName": "lespaul",
   "gv": "4",
   "id": "5a9a65dbd73408ce4f8fad42",
   "url": "/lespaul",
   "username": "lespaul",
   "v": 4
  },
  "html": "hello, is there an appropriate way to pass numpy vectors to ctypes functions requiring a function pointer as an argument?",
  "id": "5c3f0b5e39596c372bed9855",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2019-01-16T10:45:50.870Z",
  "text": "hello, is there an appropriate way to pass numpy vectors to ctypes functions requiring a function pointer as an argument?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/sk1p",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5778?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5778?v=4&s=60",
   "displayName": "Alexander Clausen",
   "gv": "4",
   "id": "5a53bb66d73408ce4f86f68d",
   "url": "/sk1p",
   "username": "sk1p",
   "v": 13
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"lespaul\" class=\"mention\">@lespaul</span> I&#39;v been using something like this:  <code>buf_for_ctypes = (ctypes.c_byte * buflen).from_buffer(input_array)</code> - should work for any <code>input_array</code> that implements the buffer protocol",
  "id": "5c3f0cc8ba5936605bcad79c",
  "issues": [],
  "mentions": [
   {
    "screenName": "lespaul",
    "userId": "5a9a65dbd73408ce4f8fad42",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 9,
  "sent": "2019-01-16T10:51:52.006Z",
  "text": "@lespaul I'v been using something like this:  `buf_for_ctypes = (ctypes.c_byte * buflen).from_buffer(input_array)` - should work for any `input_array` that implements the buffer protocol",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/lespaul",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/182689?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/182689?v=4&s=60",
   "displayName": "lespaul",
   "gv": "4",
   "id": "5a9a65dbd73408ce4f8fad42",
   "url": "/lespaul",
   "username": "lespaul",
   "v": 4
  },
  "html": "hi <span data-link-type=\"mention\" data-screen-name=\"sk1p\" class=\"mention\">@sk1p</span> , thanks for the response.  I&#39;m not quite sure if I communicated correctly.  I have a c function &quot;void foo(double* array, size_t n)&quot;  which I am trying to call in a numba (nopython) function passing to it a numpy array.  Is that consistent with your understanding?",
  "id": "5c3f0e4095e17b45255da31f",
  "issues": [],
  "mentions": [
   {
    "screenName": "sk1p",
    "userId": "5a53bb66d73408ce4f86f68d",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 9,
  "sent": "2019-01-16T10:58:08.697Z",
  "text": "hi @sk1p , thanks for the response.  I'm not quite sure if I communicated correctly.  I have a c function \"void foo(double* array, size_t n)\"  which I am trying to call in a numba (nopython) function passing to it a numpy array.  Is that consistent with your understanding?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2019-01-16T10:59:45.501Z",
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/lespaul",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/182689?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/182689?v=4&s=60",
   "displayName": "lespaul",
   "gv": "4",
   "id": "5a9a65dbd73408ce4f8fad42",
   "url": "/lespaul",
   "username": "lespaul",
   "v": 4
  },
  "html": "<pre><code><span class=\"decorator\">@njit</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pyfoo</span><span class=\"params\">()</span>:</span>\n    x = np.array([<span class=\"number\">1.0</span>])\n    foo(convert_to_c_pointer(x), x.shape[<span class=\"number\">0</span>])</code></pre>",
  "id": "5c3f0e888ce4bb25b8bdcd03",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2019-01-16T10:59:20.935Z",
  "text": "```\n@njit\ndef pyfoo():\n    x = np.array([1.0])\n    foo(convert_to_c_pointer(x), x.shape[0])```",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/lespaul",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/182689?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/182689?v=4&s=60",
   "displayName": "lespaul",
   "gv": "4",
   "id": "5a9a65dbd73408ce4f8fad42",
   "url": "/lespaul",
   "username": "lespaul",
   "v": 4
  },
  "html": "something that might implement convert_to_c_pointer",
  "id": "5c3f0e95c45b986d116c9244",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2019-01-16T10:59:33.304Z",
  "text": "something that might implement convert_to_c_pointer",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/sk1p",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5778?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5778?v=4&s=60",
   "displayName": "Alexander Clausen",
   "gv": "4",
   "id": "5a53bb66d73408ce4f86f68d",
   "url": "/sk1p",
   "username": "sk1p",
   "v": 13
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"lespaul\" class=\"mention\">@lespaul</span> sorry, not sure how this works in a numba context, the example I gave above works with &quot;raw&quot; ctypes, maybe try it?",
  "id": "5c3f0ee7ba355012a449566d",
  "issues": [],
  "mentions": [
   {
    "screenName": "lespaul",
    "userId": "5a9a65dbd73408ce4f8fad42",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 10,
  "sent": "2019-01-16T11:00:55.030Z",
  "text": "@lespaul sorry, not sure how this works in a numba context, the example I gave above works with \"raw\" ctypes, maybe try it?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/lespaul",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/182689?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/182689?v=4&s=60",
   "displayName": "lespaul",
   "gv": "4",
   "id": "5a9a65dbd73408ce4f8fad42",
   "url": "/lespaul",
   "username": "lespaul",
   "v": 4
  },
  "html": "gotcha that makes sense, appreciate the help",
  "id": "5c3f0ef80721b912a58b4bad",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2019-01-16T11:01:12.170Z",
  "text": "gotcha that makes sense, appreciate the help",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"lespaul\" class=\"mention\">@lespaul</span> use the <code>x.ctypes</code> attr in the call",
  "id": "5c3f0f18dab15872cea210a0",
  "issues": [],
  "mentions": [
   {
    "screenName": "lespaul",
    "userId": "5a9a65dbd73408ce4f8fad42",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 11,
  "sent": "2019-01-16T11:01:44.469Z",
  "text": "@lespaul use the `x.ctypes` attr in the call",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/lespaul",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/182689?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/182689?v=4&s=60",
   "displayName": "lespaul",
   "gv": "4",
   "id": "5a9a65dbd73408ce4f8fad42",
   "url": "/lespaul",
   "username": "lespaul",
   "v": 4
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span>  hah so simple, thank you sirr",
  "id": "5c3f0f7335350772cf3d1be1",
  "issues": [],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 11,
  "sent": "2019-01-16T11:03:15.928Z",
  "text": "@stuartarchibald  hah so simple, thank you sirr",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "np",
  "id": "5c3f0f798ce4bb25b8bdd3ae",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2019-01-16T11:03:21.778Z",
  "text": "np",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "if that doesn&#39;t work, please shout and I can take a look",
  "id": "5c3f0f8495e17b45255dadfb",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2019-01-16T11:03:32.579Z",
  "text": "if that doesn't work, please shout and I can take a look",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/lespaul",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/182689?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/182689?v=4&s=60",
   "displayName": "lespaul",
   "gv": "4",
   "id": "5a9a65dbd73408ce4f8fad42",
   "url": "/lespaul",
   "username": "lespaul",
   "v": 4
  },
  "html": "worked flawlessly",
  "id": "5c3f0f8ef780a1521f1bb608",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2019-01-16T11:03:42.551Z",
  "text": "worked flawlessly",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/sk1p",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/5778?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/5778?v=4&s=60",
   "displayName": "Alexander Clausen",
   "gv": "4",
   "id": "5a53bb66d73408ce4f86f68d",
   "url": "/sk1p",
   "username": "sk1p",
   "v": 13
  },
  "html": ":+1: ",
  "id": "5c3f0f9c8ce4bb25b8bdd4af",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2019-01-16T11:03:56.378Z",
  "text": ":+1: ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "excellent",
  "id": "5c3f0f9f0721b912a58b5037",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2019-01-16T11:03:59.195Z",
  "text": "excellent",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span> wonders if this is documented",
  "id": "5c3f0fb1f780a1521f1bb67f",
  "issues": [],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 11,
  "sent": "2019-01-16T11:04:17.909Z",
  "status": true,
  "text": "@stuartarchibald wonders if this is documented",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "seems not",
  "id": "5c3f0ffbdab15872cea2154b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2019-01-16T11:05:31.170Z",
  "text": "seems not",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/lespaul",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/182689?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/182689?v=4&s=60",
   "displayName": "lespaul",
   "gv": "4",
   "id": "5a9a65dbd73408ce4f8fad42",
   "url": "/lespaul",
   "username": "lespaul",
   "v": 4
  },
  "html": "my search path for this was all wrong, I was digging into it in numba docs and stackoverflow",
  "id": "5c3f100fdab15872cea2163b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2019-01-16T11:05:51.351Z",
  "text": "my search path for this was all wrong, I was digging into it in numba docs and stackoverflow",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/lespaul",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/182689?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/182689?v=4&s=60",
   "displayName": "lespaul",
   "gv": "4",
   "id": "5a9a65dbd73408ce4f8fad42",
   "url": "/lespaul",
   "username": "lespaul",
   "v": 4
  },
  "html": "rather than just searching ctypes and numpy, forgetting that numba doesn&#39;t need to be involved",
  "id": "5c3f10281cb70a372ae938c8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2019-01-16T11:06:16.115Z",
  "text": "rather than just searching ctypes and numpy, forgetting that numba doesn't need to be involved",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "Numba should just work the same way, but it is doing internal magic to compile the code to make it work the same way, I don&#39;t think it&#39;d hurt to document that this works as it&#39;s a question that I believe has been asked previously.",
  "id": "5c3f10a735350772cf3d251a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2019-01-16T11:08:23.341Z",
  "text": "Numba should just work the same way, but it is doing internal magic to compile the code to make it work the same way, I don't think it'd hurt to document that this works as it's a question that I believe has been asked previously.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"lespaul\" class=\"mention\">@lespaul</span> <a target=\"_blank\" data-link-type=\"issue\" data-issue=\"3682\" href=\"https://github.com/numba/numba/issues/3682\" data-provider=\"github\" data-issue-repo=\"numba/numba\" class=\"issue\">numba/numba#3682</a> to track",
  "id": "5c3f114120b78635b630f347",
  "issues": [
   {
    "number": "3682",
    "repo": "numba/numba"
   }
  ],
  "mentions": [
   {
    "screenName": "lespaul",
    "userId": "5a9a65dbd73408ce4f8fad42",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 11,
  "sent": "2019-01-16T11:10:57.548Z",
  "text": "@lespaul https://github.com/numba/numba/issues/3682 to track",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/lespaul",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/182689?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/182689?v=4&s=60",
   "displayName": "lespaul",
   "gv": "4",
   "id": "5a9a65dbd73408ce4f8fad42",
   "url": "/lespaul",
   "username": "lespaul",
   "v": 4
  },
  "html": "many thanks",
  "id": "5c3f131d20b78635b6310065",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2019-01-16T11:18:53.733Z",
  "text": "many thanks",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "np",
  "id": "5c3f231035350772cf3dab59",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2019-01-16T12:26:56.256Z",
  "text": "np",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hugohadfield",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/3056964?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/3056964?v=4&s=60",
   "displayName": "hugohadfield",
   "gv": "4",
   "id": "5afaaa89d73408ce4f995fa2",
   "url": "/hugohadfield",
   "username": "hugohadfield",
   "v": 7
  },
  "html": "<p>Hi everyone, I have a library that has numba as a requirement. Releases 0.41 and 0.42 both break my library for strange reasons and 0.40.1 seems to only work with python 3.5. The error message that I am getting is: </p><p>numba.errors.TypingError: Failed in nopython mode pipeline (step: convert to parfors)<br>Invalid use of Function(&lt;built-in function ne&gt;) with argument(s) of type(s): (int64, int64)</p><p>I&#39;m finding it very difficult to construct a minimum example of this so before I invest a lot of time in it im wondering if anyone else has experienced similar problems</p>",
  "id": "5c3f3b0c39596c372beef2af",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2019-01-16T14:09:16.432Z",
  "text": "Hi everyone, I have a library that has numba as a requirement. Releases 0.41 and 0.42 both break my library for strange reasons and 0.40.1 seems to only work with python 3.5. The error message that I am getting is: \n\nnumba.errors.TypingError: Failed in nopython mode pipeline (step: convert to parfors)\nInvalid use of Function(<built-in function ne>) with argument(s) of type(s): (int64, int64)\n\nI'm finding it very difficult to construct a minimum example of this so before I invest a lot of time in it im wondering if anyone else has experienced similar problems",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hugohadfield",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/3056964?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/3056964?v=4&s=60",
   "displayName": "hugohadfield",
   "gv": "4",
   "id": "5afaaa89d73408ce4f995fa2",
   "url": "/hugohadfield",
   "username": "hugohadfield",
   "v": 7
  },
  "html": "Build output is here: <a href=\"https://travis-ci.org/pygae/clifford/jobs/480390241\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://travis-ci.org/pygae/clifford/jobs/480390241</a>",
  "id": "5c3f3b220999400604fe4878",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2019-01-16T14:09:38.830Z",
  "text": "Build output is here: https://travis-ci.org/pygae/clifford/jobs/480390241",
  "unread": false,
  "urls": [
   {
    "url": "https://travis-ci.org/pygae/clifford/jobs/480390241"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hugohadfield",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/3056964?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/3056964?v=4&s=60",
   "displayName": "hugohadfield",
   "gv": "4",
   "id": "5afaaa89d73408ce4f995fa2",
   "url": "/hugohadfield",
   "username": "hugohadfield",
   "v": 7
  },
  "html": "here is the code for the last bit of the stack trace that is still in the area of my library: <a href=\"https://github.com/pygae/clifford/blob/e4e3c7a81963a19086084162a43563e5cf164b2d/clifford/__init__.py#L681\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://github.com/pygae/clifford/blob/e4e3c7a81963a19086084162a43563e5cf164b2d/clifford/__init__.py#L681</a>",
  "id": "5c3f3b9dba355012a44a9d03",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2019-01-16T14:11:41.068Z",
  "text": "here is the code for the last bit of the stack trace that is still in the area of my library: https://github.com/pygae/clifford/blob/e4e3c7a81963a19086084162a43563e5cf164b2d/clifford/__init__.py#L681",
  "unread": false,
  "urls": [
   {
    "url": "https://github.com/pygae/clifford/blob/e4e3c7a81963a19086084162a43563e5cf164b2d/clifford/__init__.py#L681"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"hugohadfield\" class=\"mention\">@hugohadfield</span> thanks for reporting it, <a target=\"_blank\" data-link-type=\"issue\" data-issue=\"3671\" href=\"https://github.com/numba/numba/issues/3671\" data-provider=\"github\" data-issue-repo=\"numba/numba\" class=\"issue\">numba/numba#3671</a> &lt;- is that similar to what you are seeing ?",
  "id": "5c3f3c5539596c372beefcc1",
  "issues": [
   {
    "number": "3671",
    "repo": "numba/numba"
   }
  ],
  "mentions": [
   {
    "screenName": "hugohadfield",
    "userId": "5afaaa89d73408ce4f995fa2",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 13,
  "sent": "2019-01-16T14:14:45.927Z",
  "text": "@hugohadfield thanks for reporting it, https://github.com/numba/numba/issues/3671 <- is that similar to what you are seeing ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hugohadfield",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/3056964?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/3056964?v=4&s=60",
   "displayName": "hugohadfield",
   "gv": "4",
   "id": "5afaaa89d73408ce4f995fa2",
   "url": "/hugohadfield",
   "username": "hugohadfield",
   "v": 7
  },
  "html": "yeah that looks super similar",
  "id": "5c3f3c73c45b986d116de62d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2019-01-16T14:15:15.564Z",
  "text": "yeah that looks super similar",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "great, we&#39;ve a couple of ideas about what might be causing it",
  "id": "5c3f3c9e32a8370605defbb2",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2019-01-16T14:15:58.490Z",
  "text": "great, we've a couple of ideas about what might be causing it",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "0.40 should be ok",
  "id": "5c3f3cab95e17b45255ee30a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2019-01-16T14:16:11.214Z",
  "text": "0.40 should be ok",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hugohadfield",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/3056964?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/3056964?v=4&s=60",
   "displayName": "hugohadfield",
   "gv": "4",
   "id": "5afaaa89d73408ce4f995fa2",
   "url": "/hugohadfield",
   "username": "hugohadfield",
   "v": 7
  },
  "html": "so 0.40 rather than 0.40.1?",
  "id": "5c3f3cb932a8370605defc93",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2019-01-16T14:16:25.103Z",
  "text": "so 0.40 rather than 0.40.1?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "sorry, 0.40.*",
  "id": "5c3f3cca0721b912a58c88a4",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2019-01-16T14:16:42.467Z",
  "text": "sorry, 0.40.*",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "the entire 0.40 series should be fine",
  "id": "5c3f3cd032a8370605defdce",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2019-01-16T14:16:48.846Z",
  "text": "the entire 0.40 series should be fine",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hugohadfield",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/3056964?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/3056964?v=4&s=60",
   "displayName": "hugohadfield",
   "gv": "4",
   "id": "5afaaa89d73408ce4f995fa2",
   "url": "/hugohadfield",
   "username": "hugohadfield",
   "v": 7
  },
  "html": "ok cool",
  "id": "5c3f3cd28318994524fbe65e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2019-01-16T14:16:50.340Z",
  "text": "ok cool",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hugohadfield",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/3056964?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/3056964?v=4&s=60",
   "displayName": "hugohadfield",
   "gv": "4",
   "id": "5afaaa89d73408ce4f995fa2",
   "url": "/hugohadfield",
   "username": "hugohadfield",
   "v": 7
  },
  "html": "I will have a go with playing around with it",
  "id": "5c3f3ce1ba5936605bcc3cc0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2019-01-16T14:17:05.543Z",
  "text": "I will have a go with playing around with it",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hugohadfield",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/3056964?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/3056964?v=4&s=60",
   "displayName": "hugohadfield",
   "gv": "4",
   "id": "5afaaa89d73408ce4f995fa2",
   "url": "/hugohadfield",
   "username": "hugohadfield",
   "v": 7
  },
  "html": "I think my test setup is a little odd anyway, need to make sure it is using the right versions",
  "id": "5c3f3cf839596c372bef0216",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2019-01-16T14:17:28.940Z",
  "text": "I think my test setup is a little odd anyway, need to make sure it is using the right versions",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "if you follow that ticket, when its closed please do ping us here for instructions on how to get a development version to test",
  "id": "5c3f3d058ce4bb25b8bf1677",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2019-01-16T14:17:41.988Z",
  "text": "if you follow that ticket, when its closed please do ping us here for instructions on how to get a development version to test",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/gh/uv/4/hugohadfield",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/3056964?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/3056964?v=4&s=60",
   "displayName": "hugohadfield",
   "gv": "4",
   "id": "5afaaa89d73408ce4f995fa2",
   "url": "/hugohadfield",
   "username": "hugohadfield",
   "v": 7
  },
  "html": "will do! cheers for the support guys, just want to say numba is an amazing project and is really vital for loads of us in my lab, keep up the good work :)",
  "id": "5c3f3d4439596c372bef0318",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 15,
  "sent": "2019-01-16T14:18:44.912Z",
  "text": "will do! cheers for the support guys, just want to say numba is an amazing project and is really vital for loads of us in my lab, keep up the good work :)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": ":) glad to hear it, thanks for your support",
  "id": "5c3f3d608318994524fbebec",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2019-01-16T14:19:12.472Z",
  "text": ":) glad to hear it, thanks for your support",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/jacksonloper",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2056977?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2056977?v=4&s=60",
   "displayName": "Jackson Loper",
   "gv": "4",
   "id": "5c3f5676d73408ce4fb4f678",
   "url": "/jacksonloper",
   "username": "jacksonloper",
   "v": 3
  },
  "html": "Dumb question: in olden days prange looked at each variable in a loop and decided whether it was private, reduction, or read-only.  I think that&#39;s not true now.  User manual docs  So if I need temporary variables inside each loop iteration, should I just wrap the inner code in a function?  Is there no way to specify a variable as threadprivate?",
  "id": "5c3f5750c45b986d116ea3a0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2019-01-16T16:09:52.689Z",
  "text": "Dumb question: in olden days prange looked at each variable in a loop and decided whether it was private, reduction, or read-only.  I think that's not true now.  User manual docs  So if I need temporary variables inside each loop iteration, should I just wrap the inner code in a function?  Is there no way to specify a variable as threadprivate?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"jacksonloper\" class=\"mention\">@jacksonloper</span> entirely sensible question. There&#39;s some discussion about it on this ticket <a target=\"_blank\" data-link-type=\"issue\" data-issue=\"2997\" href=\"https://github.com/numba/numba/issues/2997\" data-provider=\"github\" data-issue-repo=\"numba/numba\" class=\"issue\">numba/numba#2997</a>",
  "id": "5c3f599e39596c372befd02a",
  "issues": [
   {
    "number": "2997",
    "repo": "numba/numba"
   }
  ],
  "mentions": [
   {
    "screenName": "jacksonloper",
    "userId": "5c3f5676d73408ce4fb4f678",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 14,
  "sent": "2019-01-16T16:19:42.697Z",
  "text": "@jacksonloper entirely sensible question. There's some discussion about it on this ticket https://github.com/numba/numba/issues/2997",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "limited reductions are supported (scalars and whole arrays (but not slices/elements of arrays)) and in general there&#39;s a load of analysis that goes on to try and make things safe",
  "id": "5c3f5a340721b912a58d5c67",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2019-01-16T16:22:12.699Z",
  "text": "limited reductions are supported (scalars and whole arrays (but not slices/elements of arrays)) and in general there's a load of analysis that goes on to try and make things safe",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "however with <code>prange</code> there is more onus on the user to ensure that their code is threadsafe WRT writing to datastructures",
  "id": "5c3f5a5695e17b45255fbb9d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2019-01-16T16:22:46.529Z",
  "text": "however with `prange` there is more onus on the user to ensure that their code is threadsafe WRT writing to datastructures",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "Do you have an example of what you are trying to do ?",
  "id": "5c3f5adb20b78635b632f384",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2019-01-16T16:24:59.408Z",
  "text": "Do you have an example of what you are trying to do ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/jacksonloper",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2056977?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2056977?v=4&s=60",
   "displayName": "Jackson Loper",
   "gv": "4",
   "id": "5c3f5676d73408ce4fb4f678",
   "url": "/jacksonloper",
   "username": "jacksonloper",
   "v": 3
  },
  "html": "Hmm.  Thanks for the link; didn&#39;t show up on Google.  I guess I should search directly on GitHub issues next time!  I will post an example where replacing range with prange results in different output later today.  It doesn&#39;t seem to make sense with what I&#39;m reading on that GitHub issue.  Thx!!",
  "id": "5c3f5b64cb47ec300052eda1",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2019-01-16T16:27:16.808Z",
  "text": "Hmm.  Thanks for the link; didn't show up on Google.  I guess I should search directly on GitHub issues next time!  I will post an example where replacing range with prange results in different output later today.  It doesn't seem to make sense with what I'm reading on that GitHub issue.  Thx!!",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"jacksonloper\" class=\"mention\">@jacksonloper</span> great, thanks. It could be that you&#39;ve run into a bug so please do post an example to look at if you can.",
  "id": "5c3f5d8335350772cf3f4db2",
  "issues": [],
  "mentions": [
   {
    "screenName": "jacksonloper",
    "userId": "5c3f5676d73408ce4fb4f678",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 14,
  "sent": "2019-01-16T16:36:19.015Z",
  "text": "@jacksonloper great, thanks. It could be that you've run into a bug so please do post an example to look at if you can.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/jacksonloper",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2056977?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2056977?v=4&s=60",
   "displayName": "Jackson Loper",
   "gv": "4",
   "id": "5c3f5676d73408ce4fb4f678",
   "url": "/jacksonloper",
   "username": "jacksonloper",
   "v": 3
  },
  "html": "Yeah maybe it is a bug.  ",
  "id": "5c3fc06e8318994524ff75dd",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2019-01-16T23:38:22.897Z",
  "text": "Yeah maybe it is a bug.  ",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2019-01-16T23:49:56.333Z",
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/jacksonloper",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2056977?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2056977?v=4&s=60",
   "displayName": "Jackson Loper",
   "gv": "4",
   "id": "5c3f5676d73408ce4fb4f678",
   "url": "/jacksonloper",
   "username": "jacksonloper",
   "v": 3
  },
  "html": "Here is sample code:",
  "id": "5c3fc0d2c45b986d11716c78",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2019-01-16T23:40:02.667Z",
  "text": "Here is sample code:",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/jacksonloper",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2056977?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2056977?v=4&s=60",
   "displayName": "Jackson Loper",
   "gv": "4",
   "id": "5c3f5676d73408ce4fb4f678",
   "url": "/jacksonloper",
   "username": "jacksonloper",
   "v": 3
  },
  "html": "<pre><code>import numba\nimport numpy as np\n\n@numba.<span class=\"function\"><span class=\"title\">njit</span><span class=\"params\">(<span class=\"string\">'f8[:,:],f8[:],f8[:]'</span>,parallel=True)</span></span>\ndef <span class=\"function\"><span class=\"title\">ABELBO_from_ABXZ</span><span class=\"params\">(dmhalf,muhat,alpha)</span></span>:\n    Nbatch,Ng=dmhalf<span class=\"class\">.shape</span>\n    A=np.<span class=\"function\"><span class=\"title\">zeros</span><span class=\"params\">(Ng)</span></span>\n    B=np.<span class=\"function\"><span class=\"title\">zeros</span><span class=\"params\">(Nbatch)</span></span>\n\n    <span class=\"keyword\">for</span> <span class=\"tag\">i</span> <span class=\"keyword\">in</span> <span class=\"function\"><span class=\"title\">range</span><span class=\"params\">(Nbatch)</span></span>:         \n        this_matters=np.<span class=\"function\"><span class=\"title\">sum</span><span class=\"params\">(np.cosh(alpha)</span></span>)\n        A+=muhat[i]*dmhalf[i]\n        B[i]+=np.<span class=\"function\"><span class=\"title\">sum</span><span class=\"params\">(np.cosh(alpha)</span></span>)</code></pre>",
  "id": "5c3fc0d3cb47ec30005597d6",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2019-01-16T23:40:03.083Z",
  "text": "    import numba\n    import numpy as np\n\n    @numba.njit('f8[:,:],f8[:],f8[:]',parallel=True)\n    def ABELBO_from_ABXZ(dmhalf,muhat,alpha):\n        Nbatch,Ng=dmhalf.shape\n        A=np.zeros(Ng)\n        B=np.zeros(Nbatch)\n\n        for i in range(Nbatch):         \n            this_matters=np.sum(np.cosh(alpha))\n            A+=muhat[i]*dmhalf[i]\n            B[i]+=np.sum(np.cosh(alpha))\n",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2019-01-16T23:50:49.341Z",
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/jacksonloper",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2056977?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2056977?v=4&s=60",
   "displayName": "Jackson Loper",
   "gv": "4",
   "id": "5c3f5676d73408ce4fb4f678",
   "url": "/jacksonloper",
   "username": "jacksonloper",
   "v": 3
  },
  "html": "Replace the range with a prange, and it will actually fail to compile on numba 0.40.  Bizarrely if you remove the line <code>this_matters=...</code> then it compiles just fine.",
  "id": "5c3fc11bba5936605bcfe4f2",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2019-01-16T23:41:15.067Z",
  "text": "Replace the range with a prange, and it will actually fail to compile on numba 0.40.  Bizarrely if you remove the line `this_matters=...` then it compiles just fine.",
  "unread": false,
  "urls": [],
  "v": 4
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "thanks <span data-link-type=\"mention\" data-screen-name=\"jacksonloper\" class=\"mention\">@jacksonloper</span>, just to confirm... you see a failure coming from line 76 of <code>numba/typeinfer.py</code> caused by <code>assert not self.locked</code> which turns into a <code>LoweringError</code>?",
  "id": "5c4060511cb70a372af1ae70",
  "issues": [],
  "mentions": [
   {
    "screenName": "jacksonloper",
    "userId": "5c3f5676d73408ce4fb4f678",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 13,
  "sent": "2019-01-17T11:00:33.690Z",
  "text": "thanks @jacksonloper, just to confirm... you see a failure coming from line 76 of `numba/typeinfer.py` caused by `assert not self.locked` which turns into a `LoweringError`?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2019-01-17T16:01:47.229Z",
  "fromUser": {
   "avatarUrl": "https://avatars-01.gitter.im/gh/uv/4/jacksonloper",
   "avatarUrlMedium": "https://avatars0.githubusercontent.com/u/2056977?v=4&s=128",
   "avatarUrlSmall": "https://avatars0.githubusercontent.com/u/2056977?v=4&s=60",
   "displayName": "Jackson Loper",
   "gv": "4",
   "id": "5c3f5676d73408ce4fb4f678",
   "url": "/jacksonloper",
   "username": "jacksonloper",
   "v": 3
  },
  "html": "Yes, for me at line 75 of typeinfer.py (probably 75 instead of 76 because we have different versions)",
  "id": "5c40a6baf780a1521f261c4a",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2019-01-17T16:00:58.900Z",
  "text": "Yes, for me at line 75 of typeinfer.py (probably 75 instead of 76 because we have different versions)",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"jacksonloper\" class=\"mention\">@jacksonloper</span> great, thanks for confirming. I reduced it a bit, bug report is here <a target=\"_blank\" data-link-type=\"issue\" data-issue=\"3686\" href=\"https://github.com/numba/numba/issues/3686\" data-provider=\"github\" data-issue-repo=\"numba/numba\" class=\"issue\">numba/numba#3686</a>",
  "id": "5c40b4c4cb47ec30005bb174",
  "issues": [
   {
    "number": "3686",
    "repo": "numba/numba"
   }
  ],
  "mentions": [
   {
    "screenName": "jacksonloper",
    "userId": "5c3f5676d73408ce4fb4f678",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 12,
  "sent": "2019-01-17T17:00:52.649Z",
  "text": "@jacksonloper great, thanks for confirming. I reduced it a bit, bug report is here https://github.com/numba/numba/issues/3686",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/g/u/luciotorre_twitter",
   "avatarUrlMedium": "https://pbs.twimg.com/profile_images/644340336/toxic_low.png",
   "avatarUrlSmall": "https://pbs.twimg.com/profile_images/644340336/toxic_low_bigger.png",
   "displayName": "Lucio Torre",
   "id": "5c46a3ccd73408ce4fb584c4",
   "url": "/luciotorre_twitter",
   "username": "luciotorre_twitter",
   "v": 1
  },
  "html": "Hey guys! Question: i have a function that takes an array and does something with it. What i want to do is to be able to set the input parameter as an array or just one number, and have the code treat it like one array of that number repeated. Is there a pattern for that where i dont have to write the function twice? [I cannot (gu)vectorize it because it loops inside with an accumulator and the output array is not determined by the input array shape.]",
  "id": "5c46a4eeba355012a47972c0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2019-01-22T05:06:54.948Z",
  "text": "Hey guys! Question: i have a function that takes an array and does something with it. What i want to do is to be able to set the input parameter as an array or just one number, and have the code treat it like one array of that number repeated. Is there a pattern for that where i dont have to write the function twice? [I cannot (gu)vectorize it because it loops inside with an accumulator and the output array is not determined by the input array shape.]",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/g/u/luciotorre_twitter",
   "avatarUrlMedium": "https://pbs.twimg.com/profile_images/644340336/toxic_low.png",
   "avatarUrlSmall": "https://pbs.twimg.com/profile_images/644340336/toxic_low_bigger.png",
   "displayName": "Lucio Torre",
   "id": "5c46a3ccd73408ce4fb584c4",
   "url": "/luciotorre_twitter",
   "username": "luciotorre_twitter",
   "v": 1
  },
  "html": "I think i know what to do, do the function as usual and have a &quot;get_value&quot; helper, which i can specialize using generate_git, so it works on an array or single value, right?",
  "id": "5c471dc58ce4bb25b8f082d0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2019-01-22T13:42:29.373Z",
  "text": "I think i know what to do, do the function as usual and have a \"get_value\" helper, which i can specialize using generate_git, so it works on an array or single value, right?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"luciotorre_twitter\" class=\"mention\">@luciotorre_twitter</span> are you describing broadcasting ?",
  "id": "5c47214b9bfa375aab408787",
  "issues": [],
  "mentions": [
   {
    "screenName": "luciotorre_twitter",
    "userId": "5c46a3ccd73408ce4fb584c4",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 11,
  "sent": "2019-01-22T13:57:31.070Z",
  "text": "@luciotorre_twitter are you describing broadcasting ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/g/u/luciotorre_twitter",
   "avatarUrlMedium": "https://pbs.twimg.com/profile_images/644340336/toxic_low.png",
   "avatarUrlSmall": "https://pbs.twimg.com/profile_images/644340336/toxic_low_bigger.png",
   "displayName": "Lucio Torre",
   "id": "5c46a3ccd73408ce4fb584c4",
   "url": "/luciotorre_twitter",
   "username": "luciotorre_twitter",
   "v": 1
  },
  "html": "yes, by hand",
  "id": "5c4724290721b912a5be2a72",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2019-01-22T14:09:45.534Z",
  "text": "yes, by hand",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/g/u/luciotorre_twitter",
   "avatarUrlMedium": "https://pbs.twimg.com/profile_images/644340336/toxic_low.png",
   "avatarUrlSmall": "https://pbs.twimg.com/profile_images/644340336/toxic_low_bigger.png",
   "displayName": "Lucio Torre",
   "id": "5c46a3ccd73408ce4fb584c4",
   "url": "/luciotorre_twitter",
   "username": "luciotorre_twitter",
   "v": 1
  },
  "html": "i dont know how to use the vectorize/guvectorize decorators to do the work for me, so i was wondering what was the numba way of managing broadcasting in regular jitted functions",
  "id": "5c47245adab15872ced4ddac",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2019-01-22T14:10:34.445Z",
  "text": "i dont know how to use the vectorize/guvectorize decorators to do the work for me, so i was wondering what was the numba way of managing broadcasting in regular jitted functions",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/g/u/luciotorre_twitter",
   "avatarUrlMedium": "https://pbs.twimg.com/profile_images/644340336/toxic_low.png",
   "avatarUrlSmall": "https://pbs.twimg.com/profile_images/644340336/toxic_low_bigger.png",
   "displayName": "Lucio Torre",
   "id": "5c46a3ccd73408ce4fb584c4",
   "url": "/luciotorre_twitter",
   "username": "luciotorre_twitter",
   "v": 1
  },
  "html": "my solution works, but it is not very generic",
  "id": "5c47246adab15872ced4de63",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2019-01-22T14:10:50.996Z",
  "text": "my solution works, but it is not very generic",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "do you have an example of what you want to do that you can share ?",
  "id": "5c47291d8ce4bb25b8f0d7e5",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2019-01-22T14:30:53.717Z",
  "text": "do you have an example of what you want to do that you can share ?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "If you use NumPy functions etc, broadcasting should just work",
  "id": "5c47294b7a0f4d5b19ed0a82",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2019-01-22T14:31:39.913Z",
  "text": "If you use NumPy functions etc, broadcasting should just work",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "like <code>1 + x</code> works for x being a  scalar or an array",
  "id": "5c47296820b78635b664c8bb",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2019-01-22T14:32:08.872Z",
  "text": "like `1 + x` works for x being a  scalar or an array",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2019-01-22T15:44:55.175Z",
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/g/u/luciotorre_twitter",
   "avatarUrlMedium": "https://pbs.twimg.com/profile_images/644340336/toxic_low.png",
   "avatarUrlSmall": "https://pbs.twimg.com/profile_images/644340336/toxic_low_bigger.png",
   "displayName": "Lucio Torre",
   "id": "5c46a3ccd73408ce4fb584c4",
   "url": "/luciotorre_twitter",
   "username": "luciotorre_twitter",
   "v": 1
  },
  "html": "<pre><code>def <span class=\"function\"><span class=\"title\">lookup</span><span class=\"params\">(indata, frequency, framerate, outdata)</span></span>:\n    samples = indata<span class=\"class\">.shape</span>[<span class=\"number\">0</span>]\n    end_phase = <span class=\"number\">0</span>\n    <span class=\"keyword\">for</span> <span class=\"tag\">i</span> <span class=\"keyword\">in</span> <span class=\"function\"><span class=\"title\">range</span><span class=\"params\">(outdata.shape[<span class=\"number\">0</span>])</span></span>:\n            end_phase = end_phase + frequency / framerate  \n            end_phase -= np.<span class=\"function\"><span class=\"title\">floor</span><span class=\"params\">(end_phase)</span></span>\n            sample_pointer = <span class=\"function\"><span class=\"title\">int</span><span class=\"params\">(samples * end_phase)</span></span>\n            outdata[i] = indata[sample_pointer]</code></pre>",
  "id": "5c473a6620b78635b6653c62",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 12,
  "sent": "2019-01-22T15:44:38.391Z",
  "text": "```\ndef lookup(indata, frequency, framerate, outdata):\n    samples = indata.shape[0]\n    end_phase = 0\n    for i in range(outdata.shape[0]):\n            end_phase = end_phase + frequency / framerate  \n            end_phase -= np.floor(end_phase)\n            sample_pointer = int(samples * end_phase)\n            outdata[i] = indata[sample_pointer]\n```",
  "unread": false,
  "urls": [],
  "v": 2
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/g/u/luciotorre_twitter",
   "avatarUrlMedium": "https://pbs.twimg.com/profile_images/644340336/toxic_low.png",
   "avatarUrlSmall": "https://pbs.twimg.com/profile_images/644340336/toxic_low_bigger.png",
   "displayName": "Lucio Torre",
   "id": "5c46a3ccd73408ce4fb584c4",
   "url": "/luciotorre_twitter",
   "username": "luciotorre_twitter",
   "v": 1
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span> something like that, with more calculations actually to get the outdata, where frequency can be either a scalar or an array of frequencies",
  "id": "5c473ad78ce4bb25b8f1575c",
  "issues": [],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 13,
  "sent": "2019-01-22T15:46:31.087Z",
  "text": "@stuartarchibald something like that, with more calculations actually to get the outdata, where frequency can be either a scalar or an array of frequencies",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/g/u/luciotorre_twitter",
   "avatarUrlMedium": "https://pbs.twimg.com/profile_images/644340336/toxic_low.png",
   "avatarUrlSmall": "https://pbs.twimg.com/profile_images/644340336/toxic_low_bigger.png",
   "displayName": "Lucio Torre",
   "id": "5c46a3ccd73408ce4fb584c4",
   "url": "/luciotorre_twitter",
   "username": "luciotorre_twitter",
   "v": 1
  },
  "html": "(sorry, it might be that there is a very numpy way of writing that same code, but i dont see it yet. I do various types of interpolation to get the final outdata, and using numpy interpolate stuff was way more expensive)",
  "id": "5c473b9a9bfa375aab414dde",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2019-01-22T15:49:46.875Z",
  "text": "(sorry, it might be that there is a very numpy way of writing that same code, but i dont see it yet. I do various types of interpolation to get the final outdata, and using numpy interpolate stuff was way more expensive)",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "perhaps try writing what you want to happen solely in NumPy first",
  "id": "5c47590a8ce4bb25b8f23637",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2019-01-22T17:55:22.390Z",
  "text": "perhaps try writing what you want to happen solely in NumPy first",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "It seems like that could be possible",
  "id": "5c475914ba355012a47e3860",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 13,
  "sent": "2019-01-22T17:55:32.194Z",
  "text": "It seems like that could be possible",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-03.gitter.im/g/u/luciotorre_twitter",
   "avatarUrlMedium": "https://pbs.twimg.com/profile_images/644340336/toxic_low.png",
   "avatarUrlSmall": "https://pbs.twimg.com/profile_images/644340336/toxic_low_bigger.png",
   "displayName": "Lucio Torre",
   "id": "5c46a3ccd73408ce4fb584c4",
   "url": "/luciotorre_twitter",
   "username": "luciotorre_twitter",
   "v": 1
  },
  "html": "allright, ill give it a try, thanks",
  "id": "5c475ec87a0f4d5b19ee97a7",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 14,
  "sent": "2019-01-22T18:19:52.673Z",
  "text": "allright, ill give it a try, thanks",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"jacksonloper\" class=\"mention\">@jacksonloper</span> <a target=\"_blank\" data-link-type=\"pr\" data-issue=\"3697\" href=\"https://github.com/numba/numba/pull/3697\" data-provider=\"github\" data-issue-repo=\"numba/numba\" class=\"pr\">numba/numba#3697</a> fixes the bug you saw with <code>this_matters=</code> etc, from <a href=\"https://gitter.im/numba/numba?at=5c3fc06e8318994524ff75dd\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://gitter.im/numba/numba?at=5c3fc06e8318994524ff75dd</a>.",
  "id": "5c48411135350772cf77705b",
  "issues": [
   {
    "number": "3697",
    "repo": "numba/numba"
   }
  ],
  "mentions": [
   {
    "screenName": "jacksonloper",
    "userId": "5c3f5676d73408ce4fb4f678",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 11,
  "sent": "2019-01-23T10:25:21.945Z",
  "text": "@jacksonloper https://github.com/numba/numba/pull/3697 fixes the bug you saw with `this_matters=` etc, from https://gitter.im/numba/numba?at=5c3fc06e8318994524ff75dd.",
  "unread": false,
  "urls": [
   {
    "url": "https://gitter.im/numba/numba?at=5c3fc06e8318994524ff75dd"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/harikongu",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/6831549?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/6831549?v=4&s=60",
   "displayName": "Hariprasad",
   "gv": "4",
   "id": "5819e52bd73408ce4f331009",
   "url": "/harikongu",
   "username": "harikongu",
   "v": 6
  },
  "html": "Is it possible to find permutations and combinations of a list using numba parallel?",
  "id": "5c50438cceb5a2264f5cfd08",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2019-01-29T12:14:04.136Z",
  "text": "Is it possible to find permutations and combinations of a list using numba parallel?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2019-01-29T12:23:47.913Z",
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/harikongu",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/6831549?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/6831549?v=4&s=60",
   "displayName": "Hariprasad",
   "gv": "4",
   "id": "5819e52bd73408ce4f331009",
   "url": "/harikongu",
   "username": "harikongu",
   "v": 6
  },
  "html": "How associative property, commutative property are handled while executing loops in numba?<br>For example:<br>&#39;sum_of_l = [1,2,3,4,5,6,7,8,9,10] =&gt; sum([1,2,3,4])+sum([5,6])+sum([7,8,9,10])&#39;<br>Will this be handled internally by numba or is there any deviation of output(apart from floating point rounding) when we execute the function normally?",
  "id": "5c5044b113a2814df6e66878",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2019-01-29T12:18:57.622Z",
  "text": "How associative property, commutative property are handled while executing loops in numba?\nFor example:\n'sum_of_l = [1,2,3,4,5,6,7,8,9,10] => sum([1,2,3,4])+sum([5,6])+sum([7,8,9,10])'\nWill this be handled internally by numba or is there any deviation of output(apart from floating point rounding) when we execute the function normally?",
  "unread": false,
  "urls": [],
  "v": 3
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "Numba is a NumPy aware dynamic Python compiler, so if you can write your algorithm using the supported features of NumPy/Python then it can potentially help accelerate them.",
  "id": "5c504588f46373406a1bdf72",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2019-01-29T12:22:32.638Z",
  "text": "Numba is a NumPy aware dynamic Python compiler, so if you can write your algorithm using the supported features of NumPy/Python then it can potentially help accelerate them.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "You can expect Numba to treat that sort of thing in a similar fashion to python.",
  "id": "5c5046a8ca428b06451ea0eb",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 8,
  "sent": "2019-01-29T12:27:20.558Z",
  "text": "You can expect Numba to treat that sort of thing in a similar fashion to python.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2019-01-29T12:41:49.391Z",
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/harikongu",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/6831549?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/6831549?v=4&s=60",
   "displayName": "Hariprasad",
   "gv": "4",
   "id": "5819e52bd73408ce4f331009",
   "url": "/harikongu",
   "username": "harikongu",
   "v": 6
  },
  "html": "<p>I am thinking to implement a shortest path algorithm. To get the result faster, I want to use CPU&#39;s or GPU&#39;s(cuda).</p><p><code># Get all the permutation of nodes with k=3</code><br><code>for p in permutation([1,2,3,4,5,6,7,8,9], k=3):</code><br><code>sum(&#39;weight of all the 3 nodes&#39;)</code></p><p>Will numba can automatically compute the above loop in parallel or I need to write it explicit. Can permutation and sum both work parallel?<br>I can understand numba can not optimize pre-written libraries. If possible, can somebody share some code for the above logic?</p>",
  "id": "5c50497ef04ef00644a5cf6b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 8,
  "sent": "2019-01-29T12:39:26.757Z",
  "text": "I am thinking to implement a shortest path algorithm. To get the result faster, I want to use CPU's or GPU's(cuda).\n\n`# Get all the permutation of nodes with k=3`\n`for p in permutation([1,2,3,4,5,6,7,8,9], k=3):`\n`    sum('weight of all the 3 nodes')`\n\nWill numba can automatically compute the above loop in parallel or I need to write it explicit. Can permutation and sum both work parallel?\nI can understand numba can not optimize pre-written libraries. If possible, can somebody share some code for the above logic?",
  "unread": false,
  "urls": [],
  "v": 6
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "The reference for supported python features is here: <a href=\"http://numba.pydata.org/numba-doc/dev/reference/pysupported.html\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://numba.pydata.org/numba-doc/dev/reference/pysupported.html</a> and for NumPy  is here: <a href=\"http://numba.pydata.org/numba-doc/dev/reference/numpysupported.html\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://numba.pydata.org/numba-doc/dev/reference/numpysupported.html</a> ",
  "id": "5c504a917b68f94102390d27",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 9,
  "sent": "2019-01-29T12:44:01.965Z",
  "text": "The reference for supported python features is here: http://numba.pydata.org/numba-doc/dev/reference/pysupported.html and for NumPy  is here: http://numba.pydata.org/numba-doc/dev/reference/numpysupported.html ",
  "unread": false,
  "urls": [
   {
    "url": "http://numba.pydata.org/numba-doc/dev/reference/pysupported.html"
   },
   {
    "url": "http://numba.pydata.org/numba-doc/dev/reference/numpysupported.html"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "Is the permutation you want the one from <code>itertools</code>? in which case, this is not supported.",
  "id": "5c504ae5ca428b06451ebb25",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2019-01-29T12:45:25.879Z",
  "text": "Is the permutation you want the one from `itertools`? in which case, this is not supported.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "Parallel loops can be written explicitly using <code>numba.prange</code>.",
  "id": "5c504b2778e1ed4103aa88b8",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2019-01-29T12:46:31.977Z",
  "text": "Parallel loops can be written explicitly using `numba.prange`.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "If you are new to Numba, perhaps take a look at the 5 minute guide: <a href=\"http://numba.pydata.org/numba-doc/dev/user/5minguide.html\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://numba.pydata.org/numba-doc/dev/user/5minguide.html</a>",
  "id": "5c504b43c2dba5382ea8118d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2019-01-29T12:46:59.361Z",
  "text": "If you are new to Numba, perhaps take a look at the 5 minute guide: http://numba.pydata.org/numba-doc/dev/user/5minguide.html",
  "unread": false,
  "urls": [
   {
    "url": "http://numba.pydata.org/numba-doc/dev/user/5minguide.html"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "or navigate to <a href=\"http://numba.pydata.org/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://numba.pydata.org/</a> and click one of the <code>Try Now</code> buttons to explore some features in an online interactive Notebook.",
  "id": "5c504b75f04ef00644a5db42",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2019-01-29T12:47:49.377Z",
  "text": "or navigate to http://numba.pydata.org/ and click one of the `Try Now` buttons to explore some features in an online interactive Notebook.",
  "unread": false,
  "urls": [
   {
    "url": "http://numba.pydata.org/"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/harikongu",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/6831549?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/6831549?v=4&s=60",
   "displayName": "Hariprasad",
   "gv": "4",
   "id": "5819e52bd73408ce4f331009",
   "url": "/harikongu",
   "username": "harikongu",
   "v": 6
  },
  "html": "Not itertools. I am thinking to use &quot;scipy.special.perm&quot; for permutation. Will it work in this case?",
  "id": "5c504c949221b9382dde7b75",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2019-01-29T12:52:36.917Z",
  "text": "Not itertools. I am thinking to use \"scipy.special.perm\" for permutation. Will it work in this case?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "I&#39;m afraid not, Numba supports compilation of a subset of Python and NumPy",
  "id": "5c504cec454aad4df7bef2ea",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2019-01-29T12:54:04.190Z",
  "text": "I'm afraid not, Numba supports compilation of a subset of Python and NumPy",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "You could of course write <code>scipy.special.perm</code> using Numba.",
  "id": "5c504d08ceb5a2264f5d43dc",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2019-01-29T12:54:32.162Z",
  "text": "You could of course write `scipy.special.perm` using Numba.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/harikongu",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/6831549?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/6831549?v=4&s=60",
   "displayName": "Hariprasad",
   "gv": "4",
   "id": "5819e52bd73408ce4f331009",
   "url": "/harikongu",
   "username": "harikongu",
   "v": 6
  },
  "html": "Will numba support  scipy?",
  "id": "5c504d169221b9382dde7ef7",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2019-01-29T12:54:46.128Z",
  "text": "Will numba support  scipy?",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "No. Numba supports compilation of a subset of Python and NumPy.",
  "id": "5c504d3aca428b06451ec6a0",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2019-01-29T12:55:22.962Z",
  "text": "No. Numba supports compilation of a subset of Python and NumPy.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "You can however write your own copy of <code>scipy.special.perm</code> and compile it with Numba.",
  "id": "5c504d5e13a2814df6e6aadd",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2019-01-29T12:55:58.618Z",
  "text": "You can however write your own copy of `scipy.special.perm` and compile it with Numba.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/harikongu",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/6831549?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/6831549?v=4&s=60",
   "displayName": "Hariprasad",
   "gv": "4",
   "id": "5819e52bd73408ce4f331009",
   "url": "/harikongu",
   "username": "harikongu",
   "v": 6
  },
  "html": "Yes, but I thought community have written more efficient than I do.",
  "id": "5c504dd7f04ef00644a5eb4c",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2019-01-29T12:57:59.574Z",
  "text": "Yes, but I thought community have written more efficient than I do.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "Yes. But Numba does not know how to compile SciPy functions.",
  "id": "5c504e2054f21a71a1c4e05b",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2019-01-29T12:59:12.793Z",
  "text": "Yes. But Numba does not know how to compile SciPy functions.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/harikongu",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/6831549?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/6831549?v=4&s=60",
   "displayName": "Hariprasad",
   "gv": "4",
   "id": "5819e52bd73408ce4f331009",
   "url": "/harikongu",
   "username": "harikongu",
   "v": 6
  },
  "html": "ok",
  "id": "5c504e4f93fe7d5ac00c4e15",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2019-01-29T12:59:59.490Z",
  "text": "ok",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "So you can write something that does the same algorithm as that in SciPy to do the <code>perm</code> and then compile that and use it, but you cannot compile SciPy functions in general. The things Numba supports compiling are noted above (here <a href=\"https://gitter.im/numba/numba?at=5c504a917b68f94102390d27\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://gitter.im/numba/numba?at=5c504a917b68f94102390d27</a>).",
  "id": "5c504f3aca428b06451ed56e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 11,
  "sent": "2019-01-29T13:03:54.339Z",
  "text": "So you can write something that does the same algorithm as that in SciPy to do the `perm` and then compile that and use it, but you cannot compile SciPy functions in general. The things Numba supports compiling are noted above (here https://gitter.im/numba/numba?at=5c504a917b68f94102390d27).",
  "unread": false,
  "urls": [
   {
    "url": "https://gitter.im/numba/numba?at=5c504a917b68f94102390d27"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/harikongu",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/6831549?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/6831549?v=4&s=60",
   "displayName": "Hariprasad",
   "gv": "4",
   "id": "5819e52bd73408ce4f331009",
   "url": "/harikongu",
   "username": "harikongu",
   "v": 6
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"stuartarchibald\" class=\"mention\">@stuartarchibald</span> Thank you",
  "id": "5c5053b593fe7d5ac00c71cf",
  "issues": [],
  "mentions": [
   {
    "screenName": "stuartarchibald",
    "userId": "5a4ba93ed73408ce4f85b795",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 11,
  "sent": "2019-01-29T13:23:01.001Z",
  "text": "@stuartarchibald Thank you",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<span data-link-type=\"mention\" data-screen-name=\"harikongu\" class=\"mention\">@harikongu</span> no problem, hope you get your code working.",
  "id": "5c5054288aa5ca5abf4e57d2",
  "issues": [],
  "mentions": [
   {
    "screenName": "harikongu",
    "userId": "5819e52bd73408ce4f331009",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 11,
  "sent": "2019-01-29T13:24:56.934Z",
  "text": "@harikongu no problem, hope you get your code working.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "editedAt": "2019-01-29T14:00:45.874Z",
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/harikongu",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/6831549?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/6831549?v=4&s=60",
   "displayName": "Hariprasad",
   "gv": "4",
   "id": "5819e52bd73408ce4f331009",
   "url": "/harikongu",
   "username": "harikongu",
   "v": 6
  },
  "html": "<p>from numba import autojit, prange</p><p><span data-link-type=\"mention\" data-screen-name=\"autojit\" class=\"mention\">@autojit</span><br>def parallel_sum(A):<br>    sum = 0.0<br>    for i in prange(A.shape[0]):<br>        sum += A[i]</p><pre><code><span class=\"keyword\">return</span> <span class=\"built_in\">sum</span></code></pre><p>Can I re-write the code as below?</p><p>from numba import autojit, prange</p><p><span data-link-type=\"mention\" data-screen-name=\"autojit\" class=\"mention\">@autojit</span><br>def get_val(A):<br>    for i in prange(A.shape[0]):<br>        yield A[i]</p><p><span data-link-type=\"mention\" data-screen-name=\"autojit\" class=\"mention\">@autojit</span><br>def parallel_sum(A):<br>    sum = 0.0<br>    for val in get_val(A):<br>        sum += val</p><pre><code><span class=\"keyword\">return</span> <span class=\"built_in\">sum</span></code></pre>",
  "id": "5c505bfff04ef00644a6594f",
  "issues": [],
  "mentions": [
   {
    "screenName": "autojit",
    "userIds": []
   },
   {
    "screenName": "autojit",
    "userIds": []
   },
   {
    "screenName": "autojit",
    "userIds": []
   }
  ],
  "meta": [],
  "readBy": 10,
  "sent": "2019-01-29T13:58:23.676Z",
  "text": "from numba import autojit, prange\n\n@autojit\ndef parallel_sum(A):\n    sum = 0.0\n    for i in prange(A.shape[0]):\n        sum += A[i]\n\n    return sum\n\nCan I re-write the code as below?\n\nfrom numba import autojit, prange\n\n@autojit\ndef get_val(A):\n    for i in prange(A.shape[0]):\n        yield A[i]\n\n@autojit\ndef parallel_sum(A):\n    sum = 0.0\n    for val in get_val(A):\n        sum += val\n\n    return sum",
  "unread": false,
  "urls": [],
  "v": 4
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<code>@autojit</code> is deprecated, use <code>@jit</code> or preferably <code>@jit(nopython=True)</code> which is aliased as <code>@njit</code> for convenience.",
  "id": "5c505e9293fe7d5ac00cb942",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2019-01-29T14:09:22.567Z",
  "text": "`@autojit` is deprecated, use `@jit` or preferably `@jit(nopython=True)` which is aliased as `@njit` for convenience.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "To make <code>prange</code> actually compile as a parallel loop you&#39;ll need to use the &#39;parallel=True&#39; kwarg to <code>@njit</code>",
  "id": "5c505eb8c2dba5382ea893bc",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2019-01-29T14:10:00.779Z",
  "text": "To make `prange` actually compile as a parallel loop you'll need to use the 'parallel=True' kwarg to `@njit`",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "and no, what you are doing in the second group of functions is not supported",
  "id": "5c505ec8975714406b5ebd73",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2019-01-29T14:10:16.333Z",
  "text": "and no, what you are doing in the second group of functions is not supported",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "the first should work fine though",
  "id": "5c505ef3454aad4df7bf6d08",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2019-01-29T14:10:59.652Z",
  "text": "the first should work fine though",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "Perhaps take a look at the automatic multi-threading notebook for some examples <a href=\"https://mybinder.org/v2/gh/numba/numba-examples/master?filepath=notebooks%2Fthreads.ipynb\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://mybinder.org/v2/gh/numba/numba-examples/master?filepath=notebooks%2Fthreads.ipynb</a>",
  "id": "5c505f77454aad4df7bf7157",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 10,
  "sent": "2019-01-29T14:13:11.371Z",
  "text": "Perhaps take a look at the automatic multi-threading notebook for some examples https://mybinder.org/v2/gh/numba/numba-examples/master?filepath=notebooks%2Fthreads.ipynb",
  "unread": false,
  "urls": [
   {
    "url": "https://mybinder.org/v2/gh/numba/numba-examples/master?filepath=notebooks%2Fthreads.ipynb"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/harikongu",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/6831549?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/6831549?v=4&s=60",
   "displayName": "Hariprasad",
   "gv": "4",
   "id": "5819e52bd73408ce4f331009",
   "url": "/harikongu",
   "username": "harikongu",
   "v": 6
  },
  "html": "<a href=\"http://numba.pydata.org/numba-doc/0.29.0/reference/pysupported.html\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://numba.pydata.org/numba-doc/0.29.0/reference/pysupported.html</a><br><a href=\"https://numba.pydata.org/numba-doc/dev/reference/pysupported.html\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://numba.pydata.org/numba-doc/dev/reference/pysupported.html</a><br>List comprehension is supported in numba. Can I use it in parallel mode?<br>&#39;yield from&#39; is not supported. Will &#39;yield&#39; work? Can I handle exception in numba? if not how to handle exceptions?<br>Can I use numba as alternative for &#39;PyCUDA&#39;? even though I will not get full features and performance of CUDA.",
  "id": "5c5193acceb5a2264f65e575",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 7,
  "sent": "2019-01-30T12:08:12.103Z",
  "text": "http://numba.pydata.org/numba-doc/0.29.0/reference/pysupported.html\nhttps://numba.pydata.org/numba-doc/dev/reference/pysupported.html\nList comprehension is supported in numba. Can I use it in parallel mode?\n'yield from' is not supported. Will 'yield' work? Can I handle exception in numba? if not how to handle exceptions?\nCan I use numba as alternative for 'PyCUDA'? even though I will not get full features and performance of CUDA.",
  "unread": false,
  "urls": [
   {
    "url": "http://numba.pydata.org/numba-doc/0.29.0/reference/pysupported.html"
   },
   {
    "url": "https://numba.pydata.org/numba-doc/dev/reference/pysupported.html"
   }
  ],
  "v": 1
 },
 {
  "editedAt": "2019-01-30T12:46:00.378Z",
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<blockquote>\n<p>List comprehension is supported in numba. Can I use it in parallel mode?</p></blockquote>\n<p>usually yes</p><blockquote>\n<p>&#39;yield from&#39; is not supported. Will &#39;yield&#39; work?</p></blockquote>\n<p>yes</p><blockquote>\n<p>Can I handle exception in numba?</p></blockquote>\n<p>no</p><blockquote>\n<p>if not how to handle exceptions?</p></blockquote>\n<p>unfortunately you cannot, using exceptions for flow control isn&#39;t particularly amenable to good performance anyway</p><blockquote>\n<p>Can I use numba as alternative for &#39;PyCUDA&#39;? even though I will not get full features and performance of CUDA.</p></blockquote>\n<p>These are different things with different purposes.</p>",
  "id": "5c519c6a78e1ed4103b3612f",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 6,
  "sent": "2019-01-30T12:45:30.128Z",
  "text": "> List comprehension is supported in numba. Can I use it in parallel mode?\n\nusually yes\n\n> 'yield from' is not supported. Will 'yield' work?\n\nyes\n\n> Can I handle exception in numba?\n\nno\n\n>if not how to handle exceptions?\n\nunfortunately you cannot, using exceptions for flow control isn't particularly amenable to good performance anyway\n\n> Can I use numba as alternative for 'PyCUDA'? even though I will not get full features and performance of CUDA.\n\nThese are different things with different purposes.",
  "unread": false,
  "urls": [],
  "v": 4
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/harikongu",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/6831549?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/6831549?v=4&s=60",
   "displayName": "Hariprasad",
   "gv": "4",
   "id": "5819e52bd73408ce4f331009",
   "url": "/harikongu",
   "username": "harikongu",
   "v": 6
  },
  "html": "I can understand numba is meant for compiled python to generate machine code to run python code as fast as cython.<br>I was inspired by the below articles:<br><a href=\"https://devblogs.nvidia.com/numba-python-cuda-acceleration/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://devblogs.nvidia.com/numba-python-cuda-acceleration/</a><br><a href=\"https://stackoverflow.com/questions/45164459/what-is-the-difference-between-pycuda-and-numbapro-cuda-python\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://stackoverflow.com/questions/45164459/what-is-the-difference-between-pycuda-and-numbapro-cuda-python</a>",
  "id": "5c51b0848aa5ca5abf576d6e",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2019-01-30T14:11:16.811Z",
  "text": "I can understand numba is meant for compiled python to generate machine code to run python code as fast as cython.\nI was inspired by the below articles:\nhttps://devblogs.nvidia.com/numba-python-cuda-acceleration/\nhttps://stackoverflow.com/questions/45164459/what-is-the-difference-between-pycuda-and-numbapro-cuda-python",
  "unread": false,
  "urls": [
   {
    "url": "https://devblogs.nvidia.com/numba-python-cuda-acceleration/"
   },
   {
    "url": "https://stackoverflow.com/questions/45164459/what-is-the-difference-between-pycuda-and-numbapro-cuda-python"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/harikongu",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/6831549?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/6831549?v=4&s=60",
   "displayName": "Hariprasad",
   "gv": "4",
   "id": "5819e52bd73408ce4f331009",
   "url": "/harikongu",
   "username": "harikongu",
   "v": 6
  },
  "html": "I was thinking numba as a hybrid approach to achieve HPC using CPUs or GPUs. If I write my programs specific to CUDA it wont run on other GPUs (AMD or Intel). I would appreciate your suggestions",
  "id": "5c51b936975714406b67e1be",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 4,
  "sent": "2019-01-30T14:48:22.574Z",
  "text": "I was thinking numba as a hybrid approach to achieve HPC using CPUs or GPUs. If I write my programs specific to CUDA it wont run on other GPUs (AMD or Intel). I would appreciate your suggestions",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "<p>To get decent performance from GPUs you have to be sympathetic to their hardware design and programming model. Numba hides a lot of the difficulty of GPU programming through its CUDA and ROCm targets, and you can write code that will run on either (see the last example in this notebook: <a href=\"https://mybinder.org/v2/gh/numba/numba-examples/master?filepath=notebooks%2FNumba_2018_review.ipynb\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">https://mybinder.org/v2/gh/numba/numba-examples/master?filepath=notebooks%2FNumba_2018_review.ipynb</a>). If you want code that will run on CPU or GPU then Numba has both <code>ufunc</code> and <code>gufunc</code> (generalized ufuncs) capabilities which will permit this, but they have quite a few restrictions on what is permitted as the kernel.  <a href=\"http://numba.pydata.org/numba-doc/latest/user/vectorize.html?highlight=ufunc\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" class=\"link\">http://numba.pydata.org/numba-doc/latest/user/vectorize.html?highlight=ufunc</a></p><p>I&#39;m not sure what problem you are trying to solve, but a reasonably effective approach to achieving high performance code is often to write something that produces the right answer and then profile it running with real data and use that to guide performance tuning. </p>",
  "id": "5c51bcf178e1ed4103b444dd",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 4,
  "sent": "2019-01-30T15:04:17.381Z",
  "text": "To get decent performance from GPUs you have to be sympathetic to their hardware design and programming model. Numba hides a lot of the difficulty of GPU programming through its CUDA and ROCm targets, and you can write code that will run on either (see the last example in this notebook: https://mybinder.org/v2/gh/numba/numba-examples/master?filepath=notebooks%2FNumba_2018_review.ipynb). If you want code that will run on CPU or GPU then Numba has both `ufunc` and `gufunc` (generalized ufuncs) capabilities which will permit this, but they have quite a few restrictions on what is permitted as the kernel.  http://numba.pydata.org/numba-doc/latest/user/vectorize.html?highlight=ufunc\n\n\nI'm not sure what problem you are trying to solve, but a reasonably effective approach to achieving high performance code is often to write something that produces the right answer and then profile it running with real data and use that to guide performance tuning. \n",
  "unread": false,
  "urls": [
   {
    "url": "https://mybinder.org/v2/gh/numba/numba-examples/master?filepath=notebooks%2FNumba_2018_review.ipynb"
   },
   {
    "url": "http://numba.pydata.org/numba-doc/latest/user/vectorize.html?highlight=ufunc"
   }
  ],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-04.gitter.im/gh/uv/4/harikongu",
   "avatarUrlMedium": "https://avatars1.githubusercontent.com/u/6831549?v=4&s=128",
   "avatarUrlSmall": "https://avatars1.githubusercontent.com/u/6831549?v=4&s=60",
   "displayName": "Hariprasad",
   "gv": "4",
   "id": "5819e52bd73408ce4f331009",
   "url": "/harikongu",
   "username": "harikongu",
   "v": 6
  },
  "html": "I was trying to solve vehicle routing problem with my own implementation.",
  "id": "5c51be07ca428b064528401d",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 5,
  "sent": "2019-01-30T15:08:55.272Z",
  "text": "I was trying to solve vehicle routing problem with my own implementation.",
  "unread": false,
  "urls": [],
  "v": 1
 },
 {
  "fromUser": {
   "avatarUrl": "https://avatars-05.gitter.im/gh/uv/4/stuartarchibald",
   "avatarUrlMedium": "https://avatars2.githubusercontent.com/u/907717?v=4&s=128",
   "avatarUrlSmall": "https://avatars2.githubusercontent.com/u/907717?v=4&s=60",
   "displayName": "stuartarchibald",
   "gv": "4",
   "id": "5a4ba93ed73408ce4f85b795",
   "url": "/stuartarchibald",
   "username": "stuartarchibald",
   "v": 231
  },
  "html": "Perhaps write something that works using NumPy and SciPy first, then profile it?",
  "id": "5c51c0559221b9382de85318",
  "issues": [],
  "mentions": [],
  "meta": [],
  "readBy": 4,
  "sent": "2019-01-30T15:18:45.821Z",
  "text": "Perhaps write something that works using NumPy and SciPy first, then profile it?",
  "unread": false,
  "urls": [],
  "v": 1
 }
]